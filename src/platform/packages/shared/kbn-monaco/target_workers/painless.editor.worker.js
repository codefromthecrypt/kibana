/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
/* harmony import */ var _toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toPropertyKey.js */ "./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js");

function _defineProperty(e, r, t) {
  return (r = (0,_toPropertyKey_js__WEBPACK_IMPORTED_MODULE_0__["default"])(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toPrimitive.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPrimitive)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");

function toPrimitive(t, r) {
  if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toPropertyKey)
/* harmony export */ });
/* harmony import */ var _typeof_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toPrimitive.js */ "./node_modules/@babel/runtime/helpers/esm/toPrimitive.js");


function toPropertyKey(t) {
  var i = (0,_toPrimitive_js__WEBPACK_IMPORTED_MODULE_1__["default"])(t, "string");
  return "symbol" == (0,_typeof_js__WEBPACK_IMPORTED_MODULE_0__["default"])(i) ? i : i + "";
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}


/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"]);
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function define(t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function value(t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ ((module) => {

function _typeof(o) {
  "@babel/helpers - typeof";

  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/@formatjs/fast-memoize/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@formatjs/fast-memoize/lib/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   memoize: () => (/* binding */ memoize),
/* harmony export */   strategies: () => (/* binding */ strategies)
/* harmony export */ });
//
// Main
//
function memoize(fn, options) {
    var cache = options && options.cache ? options.cache : cacheDefault;
    var serializer = options && options.serializer ? options.serializer : serializerDefault;
    var strategy = options && options.strategy ? options.strategy : strategyDefault;
    return strategy(fn, {
        cache: cache,
        serializer: serializer,
    });
}
//
// Strategy
//
function isPrimitive(value) {
    return (value == null || typeof value === 'number' || typeof value === 'boolean'); // || typeof value === "string" 'unsafe' primitive for our needs
}
function monadic(fn, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function variadic(fn, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
    return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options) {
    var strategy = fn.length === 1 ? monadic : variadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn, options) {
    return assemble(fn, this, variadic, options.cache.create(), options.serializer);
}
function strategyMonadic(fn, options) {
    return assemble(fn, this, monadic, options.cache.create(), options.serializer);
}
//
// Serializer
//
var serializerDefault = function () {
    return JSON.stringify(arguments);
};
//
// Cache
//
function ObjectWithoutPrototypeCache() {
    this.cache = Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function (key) {
    return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
    this.cache[key] = value;
};
var cacheDefault = {
    create: function create() {
        // @ts-ignore
        return new ObjectWithoutPrototypeCache();
    },
};
var strategies = {
    variadic: strategyVariadic,
    monadic: strategyMonadic,
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/create-intl.js":
/*!************************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/create-intl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createIntl: () => (/* binding */ createIntl)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@formatjs/intl/lib/src/utils.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./number */ "./node_modules/@formatjs/intl/lib/src/number.js");
/* harmony import */ var _relativeTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./relativeTime */ "./node_modules/@formatjs/intl/lib/src/relativeTime.js");
/* harmony import */ var _dateTime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dateTime */ "./node_modules/@formatjs/intl/lib/src/dateTime.js");
/* harmony import */ var _plural__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./plural */ "./node_modules/@formatjs/intl/lib/src/plural.js");
/* harmony import */ var _message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./message */ "./node_modules/@formatjs/intl/lib/src/message.js");
/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./list */ "./node_modules/@formatjs/intl/lib/src/list.js");
/* harmony import */ var _displayName__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./displayName */ "./node_modules/@formatjs/intl/lib/src/displayName.js");










function messagesContainString(messages) {
    var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;
    return typeof firstMessage === 'string';
}
function verifyConfigMessages(config) {
    if (config.onWarn &&
        config.defaultRichTextElements &&
        messagesContainString(config.messages || {})) {
        config.onWarn("[@formatjs/intl] \"defaultRichTextElements\" was specified but \"message\" was not pre-compiled. \nPlease consider using \"@formatjs/cli\" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution");
    }
}
/**
 * Create intl object
 * @param config intl config
 * @param cache cache for formatter instances to prevent memory leak
 */
function createIntl(config, cache) {
    var formatters = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.createFormatters)(cache);
    var resolvedConfig = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _utils__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_INTL_CONFIG), config);
    var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;
    if (!locale) {
        if (onError) {
            onError(new _error__WEBPACK_IMPORTED_MODULE_2__.InvalidConfigError("\"locale\" was not configured, using \"".concat(defaultLocale, "\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details")));
        }
        // Since there's no registered locale data for `locale`, this will
        // fallback to the `defaultLocale` to make sure things can render.
        // The `messages` are overridden to the `defaultProps` empty object
        // to maintain referential equality across re-renders. It's assumed
        // each <FormattedMessage> contains a `defaultMessage` prop.
        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';
    }
    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {
        onError(new _error__WEBPACK_IMPORTED_MODULE_2__.MissingDataError("Missing locale data for locale: \"".concat(locale, "\" in Intl.NumberFormat. Using default locale: \"").concat(defaultLocale, "\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details")));
    }
    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&
        onError) {
        onError(new _error__WEBPACK_IMPORTED_MODULE_2__.MissingDataError("Missing locale data for locale: \"".concat(locale, "\" in Intl.DateTimeFormat. Using default locale: \"").concat(defaultLocale, "\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details")));
    }
    verifyConfigMessages(resolvedConfig);
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, resolvedConfig), { formatters: formatters, formatNumber: _number__WEBPACK_IMPORTED_MODULE_3__.formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: _number__WEBPACK_IMPORTED_MODULE_3__.formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: _relativeTime__WEBPACK_IMPORTED_MODULE_4__.formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: _dateTime__WEBPACK_IMPORTED_MODULE_5__.formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: _dateTime__WEBPACK_IMPORTED_MODULE_5__.formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: _dateTime__WEBPACK_IMPORTED_MODULE_5__.formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: _dateTime__WEBPACK_IMPORTED_MODULE_5__.formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: _dateTime__WEBPACK_IMPORTED_MODULE_5__.formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: _plural__WEBPACK_IMPORTED_MODULE_6__.formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), 
        // @ts-expect-error TODO: will get to this later
        formatMessage: _message__WEBPACK_IMPORTED_MODULE_7__.formatMessage.bind(null, resolvedConfig, formatters), 
        // @ts-expect-error TODO: will get to this later
        $t: _message__WEBPACK_IMPORTED_MODULE_7__.formatMessage.bind(null, resolvedConfig, formatters), formatList: _list__WEBPACK_IMPORTED_MODULE_8__.formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: _list__WEBPACK_IMPORTED_MODULE_8__.formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: _displayName__WEBPACK_IMPORTED_MODULE_9__.formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/dateTime.js":
/*!*********************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/dateTime.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatDate: () => (/* binding */ formatDate),
/* harmony export */   formatDateTimeRange: () => (/* binding */ formatDateTimeRange),
/* harmony export */   formatDateToParts: () => (/* binding */ formatDateToParts),
/* harmony export */   formatTime: () => (/* binding */ formatTime),
/* harmony export */   formatTimeToParts: () => (/* binding */ formatTimeToParts),
/* harmony export */   getFormatter: () => (/* binding */ getFormatter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@formatjs/intl/lib/src/utils.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");



var DATE_TIME_FORMAT_OPTIONS = [
    'formatMatcher',
    'timeZone',
    'hour12',
    'weekday',
    'era',
    'year',
    'month',
    'day',
    'hour',
    'minute',
    'second',
    'timeZoneName',
    'hourCycle',
    'dateStyle',
    'timeStyle',
    'calendar',
    // 'dayPeriod',
    'numberingSystem',
    'fractionalSecondDigits',
];
function getFormatter(_a, type, getDateTimeFormat, options) {
    var locale = _a.locale, formats = _a.formats, onError = _a.onError, timeZone = _a.timeZone;
    if (options === void 0) { options = {}; }
    var format = options.format;
    var defaults = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, (timeZone && { timeZone: timeZone })), (format && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getNamedFormat)(formats, type, format, onError)));
    var filteredOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterProps)(options, DATE_TIME_FORMAT_OPTIONS, defaults);
    if (type === 'time' &&
        !filteredOptions.hour &&
        !filteredOptions.minute &&
        !filteredOptions.second &&
        !filteredOptions.timeStyle &&
        !filteredOptions.dateStyle) {
        // Add default formatting options if hour, minute, or second isn't defined.
        filteredOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, filteredOptions), { hour: 'numeric', minute: 'numeric' });
    }
    return getDateTimeFormat(locale, filteredOptions);
}
function formatDate(config, getDateTimeFormat) {
    var _a = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        _a[_i - 2] = arguments[_i];
    }
    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === 'string' ? new Date(value || 0) : value;
    try {
        return getFormatter(config, 'date', getDateTimeFormat, options).format(date);
    }
    catch (e) {
        config.onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting date.', config.locale, e));
    }
    return String(date);
}
function formatTime(config, getDateTimeFormat) {
    var _a = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        _a[_i - 2] = arguments[_i];
    }
    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === 'string' ? new Date(value || 0) : value;
    try {
        return getFormatter(config, 'time', getDateTimeFormat, options).format(date);
    }
    catch (e) {
        config.onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting time.', config.locale, e));
    }
    return String(date);
}
function formatDateTimeRange(config, getDateTimeFormat) {
    var _a = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        _a[_i - 2] = arguments[_i];
    }
    var from = _a[0], to = _a[1], _b = _a[2], options = _b === void 0 ? {} : _b;
    var timeZone = config.timeZone, locale = config.locale, onError = config.onError;
    var filteredOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterProps)(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? { timeZone: timeZone } : {});
    try {
        return getDateTimeFormat(locale, filteredOptions).formatRange(from, to);
    }
    catch (e) {
        onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting date time range.', config.locale, e));
    }
    return String(from);
}
function formatDateToParts(config, getDateTimeFormat) {
    var _a = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        _a[_i - 2] = arguments[_i];
    }
    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === 'string' ? new Date(value || 0) : value;
    try {
        return getFormatter(config, 'date', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged
    }
    catch (e) {
        config.onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting date.', config.locale, e));
    }
    return [];
}
function formatTimeToParts(config, getDateTimeFormat) {
    var _a = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        _a[_i - 2] = arguments[_i];
    }
    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;
    var date = typeof value === 'string' ? new Date(value || 0) : value;
    try {
        return getFormatter(config, 'time', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged
    }
    catch (e) {
        config.onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting time.', config.locale, e));
    }
    return [];
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/displayName.js":
/*!************************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/displayName.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatDisplayName: () => (/* binding */ formatDisplayName)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@formatjs/intl/lib/src/utils.js");
/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! intl-messageformat */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/error.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");



var DISPLAY_NAMES_OPTONS = [
    'style',
    'type',
    'fallback',
    'languageDisplay',
];
function formatDisplayName(_a, getDisplayNames, value, options) {
    var locale = _a.locale, onError = _a.onError;
    var DisplayNames = Intl.DisplayNames;
    if (!DisplayNames) {
        onError(new intl_messageformat__WEBPACK_IMPORTED_MODULE_0__.FormatError("Intl.DisplayNames is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-displaynames\"\n", intl_messageformat__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.MISSING_INTL_API));
    }
    var filteredOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterProps)(options, DISPLAY_NAMES_OPTONS);
    try {
        return getDisplayNames(locale, filteredOptions).of(value);
    }
    catch (e) {
        onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting display name.', locale, e));
    }
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/error.js":
/*!******************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/error.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IntlError: () => (/* binding */ IntlError),
/* harmony export */   IntlErrorCode: () => (/* binding */ IntlErrorCode),
/* harmony export */   IntlFormatError: () => (/* binding */ IntlFormatError),
/* harmony export */   InvalidConfigError: () => (/* binding */ InvalidConfigError),
/* harmony export */   MessageFormatError: () => (/* binding */ MessageFormatError),
/* harmony export */   MissingDataError: () => (/* binding */ MissingDataError),
/* harmony export */   MissingTranslationError: () => (/* binding */ MissingTranslationError),
/* harmony export */   UnsupportedFormatterError: () => (/* binding */ UnsupportedFormatterError)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

var IntlErrorCode;
(function (IntlErrorCode) {
    IntlErrorCode["FORMAT_ERROR"] = "FORMAT_ERROR";
    IntlErrorCode["UNSUPPORTED_FORMATTER"] = "UNSUPPORTED_FORMATTER";
    IntlErrorCode["INVALID_CONFIG"] = "INVALID_CONFIG";
    IntlErrorCode["MISSING_DATA"] = "MISSING_DATA";
    IntlErrorCode["MISSING_TRANSLATION"] = "MISSING_TRANSLATION";
})(IntlErrorCode || (IntlErrorCode = {}));
var IntlError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(IntlError, _super);
    function IntlError(code, message, exception) {
        var _this = this;
        var err = exception
            ? exception instanceof Error
                ? exception
                : new Error(String(exception))
            : undefined;
        _this = _super.call(this, "[@formatjs/intl Error ".concat(code, "] ").concat(message, "\n").concat(err ? "\n".concat(err.message, "\n").concat(err.stack) : '')) || this;
        _this.code = code;
        // @ts-ignore just so we don't need to declare dep on @types/node
        if (typeof Error.captureStackTrace === 'function') {
            // @ts-ignore just so we don't need to declare dep on @types/node
            Error.captureStackTrace(_this, IntlError);
        }
        return _this;
    }
    return IntlError;
}(Error));

var UnsupportedFormatterError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(UnsupportedFormatterError, _super);
    function UnsupportedFormatterError(message, exception) {
        return _super.call(this, IntlErrorCode.UNSUPPORTED_FORMATTER, message, exception) || this;
    }
    return UnsupportedFormatterError;
}(IntlError));

var InvalidConfigError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidConfigError, _super);
    function InvalidConfigError(message, exception) {
        return _super.call(this, IntlErrorCode.INVALID_CONFIG, message, exception) || this;
    }
    return InvalidConfigError;
}(IntlError));

var MissingDataError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingDataError, _super);
    function MissingDataError(message, exception) {
        return _super.call(this, IntlErrorCode.MISSING_DATA, message, exception) || this;
    }
    return MissingDataError;
}(IntlError));

var IntlFormatError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(IntlFormatError, _super);
    function IntlFormatError(message, locale, exception) {
        var _this = _super.call(this, IntlErrorCode.FORMAT_ERROR, "".concat(message, "\nLocale: ").concat(locale, "\n"), exception) || this;
        _this.locale = locale;
        return _this;
    }
    return IntlFormatError;
}(IntlError));

var MessageFormatError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MessageFormatError, _super);
    function MessageFormatError(message, locale, descriptor, exception) {
        var _this = _super.call(this, "".concat(message, "\nMessageID: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, "\nDefault Message: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.defaultMessage, "\nDescription: ").concat(descriptor === null || descriptor === void 0 ? void 0 : descriptor.description, "\n"), locale, exception) || this;
        _this.descriptor = descriptor;
        _this.locale = locale;
        return _this;
    }
    return MessageFormatError;
}(IntlFormatError));

var MissingTranslationError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingTranslationError, _super);
    function MissingTranslationError(descriptor, locale) {
        var _this = _super.call(this, IntlErrorCode.MISSING_TRANSLATION, "Missing message: \"".concat(descriptor.id, "\" for locale \"").concat(locale, "\", using ").concat(descriptor.defaultMessage
            ? "default message (".concat(typeof descriptor.defaultMessage === 'string'
                ? descriptor.defaultMessage
                : descriptor.defaultMessage
                    .map(function (e) { var _a; return (_a = e.value) !== null && _a !== void 0 ? _a : JSON.stringify(e); })
                    .join(), ")")
            : 'id', " as fallback.")) || this;
        _this.descriptor = descriptor;
        return _this;
    }
    return MissingTranslationError;
}(IntlError));



/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/list.js":
/*!*****************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/list.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatList: () => (/* binding */ formatList),
/* harmony export */   formatListToParts: () => (/* binding */ formatListToParts)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@formatjs/intl/lib/src/utils.js");
/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! intl-messageformat */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/error.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");




var LIST_FORMAT_OPTIONS = [
    'type',
    'style',
];
var now = Date.now();
function generateToken(i) {
    return "".concat(now, "_").concat(i, "_").concat(now);
}
function formatList(opts, getListFormat, values, options) {
    if (options === void 0) { options = {}; }
    var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {
        var val = el.value;
        if (typeof val !== 'string') {
            all.push(val);
        }
        else if (typeof all[all.length - 1] === 'string') {
            all[all.length - 1] += val;
        }
        else {
            all.push(val);
        }
        return all;
    }, []);
    return results.length === 1 ? results[0] : results.length === 0 ? '' : results;
}
function formatListToParts(_a, getListFormat, values, options) {
    var locale = _a.locale, onError = _a.onError;
    if (options === void 0) { options = {}; }
    var ListFormat = Intl.ListFormat;
    if (!ListFormat) {
        onError(new intl_messageformat__WEBPACK_IMPORTED_MODULE_0__.FormatError("Intl.ListFormat is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-listformat\"\n", intl_messageformat__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.MISSING_INTL_API));
    }
    var filteredOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterProps)(options, LIST_FORMAT_OPTIONS);
    try {
        var richValues_1 = {};
        var serializedValues = values.map(function (v, i) {
            if (typeof v === 'object') {
                var id = generateToken(i);
                richValues_1[id] = v;
                return id;
            }
            return String(v);
        });
        return getListFormat(locale, filteredOptions)
            .formatToParts(serializedValues)
            .map(function (part) {
            return part.type === 'literal'
                ? part
                : (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, part), { value: richValues_1[part.value] || part.value });
        });
    }
    catch (e) {
        onError(new _error__WEBPACK_IMPORTED_MODULE_3__.IntlFormatError('Error formatting list.', locale, e));
    }
    // @ts-ignore
    return values;
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/message.js":
/*!********************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/message.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatMessage: () => (/* binding */ formatMessage)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _formatjs_ecma402_abstract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/ecma402-abstract */ "./node_modules/@formatjs/intl/node_modules/@formatjs/ecma402-abstract/lib/utils.js");
/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intl-messageformat */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/core.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");
/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/index.js");





function setTimeZoneInOptions(opts, timeZone) {
    return Object.keys(opts).reduce(function (all, k) {
        all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ timeZone: timeZone }, opts[k]);
        return all;
    }, {});
}
function deepMergeOptions(opts1, opts2) {
    var keys = Object.keys((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, opts1), opts2));
    return keys.reduce(function (all, k) {
        all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, (opts1[k] || {})), (opts2[k] || {}));
        return all;
    }, {});
}
function deepMergeFormatsAndSetTimeZone(f1, timeZone) {
    if (!timeZone) {
        return f1;
    }
    var mfFormats = intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat.formats;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });
}
var formatMessage = function (_a, state, messageDescriptor, values, opts) {
    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, fallbackOnEmptyString = _a.fallbackOnEmptyString, onError = _a.onError, timeZone = _a.timeZone, defaultRichTextElements = _a.defaultRichTextElements;
    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }
    var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;
    // `id` is a required field of a Message Descriptor.
    (0,_formatjs_ecma402_abstract__WEBPACK_IMPORTED_MODULE_3__.invariant)(!!msgId, "[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");
    var id = String(msgId);
    var message = 
    // In case messages is Object.create(null)
    // e.g import('foo.json') from webpack)
    // See https://github.com/formatjs/formatjs/issues/1914
    messages &&
        Object.prototype.hasOwnProperty.call(messages, id) &&
        messages[id];
    // IMPORTANT: Hot path if `message` is AST with a single literal node
    if (Array.isArray(message) &&
        message.length === 1 &&
        message[0].type === _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.TYPE.literal) {
        return message[0].value;
    }
    // IMPORTANT: Hot path straight lookup for performance
    if (!values &&
        message &&
        typeof message === 'string' &&
        !defaultRichTextElements) {
        return message.replace(/'\{(.*?)\}'/gi, "{$1}");
    }
    values = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, defaultRichTextElements), (values || {}));
    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);
    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);
    if (!message) {
        if (fallbackOnEmptyString === false && message === '') {
            return message;
        }
        if (!defaultMessage ||
            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {
            // This prevents warnings from littering the console in development
            // when no `messages` are passed into the <IntlProvider> for the
            // default locale.
            onError(new _error__WEBPACK_IMPORTED_MODULE_4__.MissingTranslationError(messageDescriptor, locale));
        }
        if (defaultMessage) {
            try {
                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
                return formatter.format(values);
            }
            catch (e) {
                onError(new _error__WEBPACK_IMPORTED_MODULE_4__.MessageFormatError("Error formatting default message for: \"".concat(id, "\", rendering default message verbatim"), locale, messageDescriptor, e));
                return typeof defaultMessage === 'string' ? defaultMessage : id;
            }
        }
        return id;
    }
    // We have the translated message
    try {
        var formatter = state.getMessageFormat(message, locale, formats, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ formatters: state }, (opts || {})));
        return formatter.format(values);
    }
    catch (e) {
        onError(new _error__WEBPACK_IMPORTED_MODULE_4__.MessageFormatError("Error formatting message: \"".concat(id, "\", using ").concat(defaultMessage ? 'default message' : 'id', " as fallback."), locale, messageDescriptor, e));
    }
    if (defaultMessage) {
        try {
            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);
            return formatter.format(values);
        }
        catch (e) {
            onError(new _error__WEBPACK_IMPORTED_MODULE_4__.MessageFormatError("Error formatting the default message for: \"".concat(id, "\", rendering message verbatim"), locale, messageDescriptor, e));
        }
    }
    if (typeof message === 'string') {
        return message;
    }
    if (typeof defaultMessage === 'string') {
        return defaultMessage;
    }
    return id;
};


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/number.js":
/*!*******************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/number.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatNumber: () => (/* binding */ formatNumber),
/* harmony export */   formatNumberToParts: () => (/* binding */ formatNumberToParts),
/* harmony export */   getFormatter: () => (/* binding */ getFormatter)
/* harmony export */ });
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@formatjs/intl/lib/src/utils.js");


var NUMBER_FORMAT_OPTIONS = [
    'style',
    'currency',
    'unit',
    'unitDisplay',
    'useGrouping',
    'minimumIntegerDigits',
    'minimumFractionDigits',
    'maximumFractionDigits',
    'minimumSignificantDigits',
    'maximumSignificantDigits',
    // ES2020 NumberFormat
    'compactDisplay',
    'currencyDisplay',
    'currencySign',
    'notation',
    'signDisplay',
    'unit',
    'unitDisplay',
    'numberingSystem',
    // ES2023 NumberFormat
    'trailingZeroDisplay',
    'roundingPriority',
    'roundingIncrement',
    'roundingMode',
];
function getFormatter(_a, getNumberFormat, options) {
    var locale = _a.locale, formats = _a.formats, onError = _a.onError;
    if (options === void 0) { options = {}; }
    var format = options.format;
    var defaults = ((format &&
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getNamedFormat)(formats, 'number', format, onError)) ||
        {});
    var filteredOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.filterProps)(options, NUMBER_FORMAT_OPTIONS, defaults);
    return getNumberFormat(locale, filteredOptions);
}
function formatNumber(config, getNumberFormat, value, options) {
    if (options === void 0) { options = {}; }
    try {
        return getFormatter(config, getNumberFormat, options).format(value);
    }
    catch (e) {
        config.onError(new _error__WEBPACK_IMPORTED_MODULE_1__.IntlFormatError('Error formatting number.', config.locale, e));
    }
    return String(value);
}
function formatNumberToParts(config, getNumberFormat, value, options) {
    if (options === void 0) { options = {}; }
    try {
        return getFormatter(config, getNumberFormat, options).formatToParts(value);
    }
    catch (e) {
        config.onError(new _error__WEBPACK_IMPORTED_MODULE_1__.IntlFormatError('Error formatting number.', config.locale, e));
    }
    return [];
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/plural.js":
/*!*******************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/plural.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatPlural: () => (/* binding */ formatPlural)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./node_modules/@formatjs/intl/lib/src/utils.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");
/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! intl-messageformat */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/error.js");



var PLURAL_FORMAT_OPTIONS = ['type'];
function formatPlural(_a, getPluralRules, value, options) {
    var locale = _a.locale, onError = _a.onError;
    if (options === void 0) { options = {}; }
    if (!Intl.PluralRules) {
        onError(new intl_messageformat__WEBPACK_IMPORTED_MODULE_0__.FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", intl_messageformat__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.MISSING_INTL_API));
    }
    var filteredOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.filterProps)(options, PLURAL_FORMAT_OPTIONS);
    try {
        return getPluralRules(locale, filteredOptions).select(value);
    }
    catch (e) {
        onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting plural.', locale, e));
    }
    return 'other';
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/relativeTime.js":
/*!*************************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/relativeTime.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatRelativeTime: () => (/* binding */ formatRelativeTime)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./node_modules/@formatjs/intl/lib/src/utils.js");
/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! intl-messageformat */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/error.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");



var RELATIVE_TIME_FORMAT_OPTIONS = ['numeric', 'style'];
function getFormatter(_a, getRelativeTimeFormat, options) {
    var locale = _a.locale, formats = _a.formats, onError = _a.onError;
    if (options === void 0) { options = {}; }
    var format = options.format;
    var defaults = (!!format && (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getNamedFormat)(formats, 'relative', format, onError)) || {};
    var filteredOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.filterProps)(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);
    return getRelativeTimeFormat(locale, filteredOptions);
}
function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options) {
    if (options === void 0) { options = {}; }
    if (!unit) {
        unit = 'second';
    }
    var RelativeTimeFormat = Intl.RelativeTimeFormat;
    if (!RelativeTimeFormat) {
        config.onError(new intl_messageformat__WEBPACK_IMPORTED_MODULE_1__.FormatError("Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-relativetimeformat\"\n", intl_messageformat__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API));
    }
    try {
        return getFormatter(config, getRelativeTimeFormat, options).format(value, unit);
    }
    catch (e) {
        config.onError(new _error__WEBPACK_IMPORTED_MODULE_2__.IntlFormatError('Error formatting relative time.', config.locale, e));
    }
    return String(value);
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/lib/src/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@formatjs/intl/lib/src/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_INTL_CONFIG: () => (/* binding */ DEFAULT_INTL_CONFIG),
/* harmony export */   createFormatters: () => (/* binding */ createFormatters),
/* harmony export */   createIntlCache: () => (/* binding */ createIntlCache),
/* harmony export */   filterProps: () => (/* binding */ filterProps),
/* harmony export */   getNamedFormat: () => (/* binding */ getNamedFormat)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var intl_messageformat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! intl-messageformat */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/core.js");
/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ "./node_modules/@formatjs/fast-memoize/lib/index.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/lib/src/error.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");




function filterProps(props, allowlist, defaults) {
    if (defaults === void 0) { defaults = {}; }
    return allowlist.reduce(function (filtered, name) {
        if (name in props) {
            filtered[name] = props[name];
        }
        else if (name in defaults) {
            filtered[name] = defaults[name];
        }
        return filtered;
    }, {});
}
var defaultErrorHandler = function (error) {
    // @ts-ignore just so we don't need to declare dep on @types/node
    if (true) {
        console.error(error);
    }
};
var defaultWarnHandler = function (warning) {
    // @ts-ignore just so we don't need to declare dep on @types/node
    if (true) {
        console.warn(warning);
    }
};
var DEFAULT_INTL_CONFIG = {
    formats: {},
    messages: {},
    timeZone: undefined,
    defaultLocale: 'en',
    defaultFormats: {},
    fallbackOnEmptyString: true,
    onError: defaultErrorHandler,
    onWarn: defaultWarnHandler,
};
function createIntlCache() {
    return {
        dateTime: {},
        number: {},
        message: {},
        relativeTime: {},
        pluralRules: {},
        list: {},
        displayNames: {},
    };
}
function createFastMemoizeCache(store) {
    return {
        create: function () {
            return {
                get: function (key) {
                    return store[key];
                },
                set: function (key, value) {
                    store[key] = value;
                },
            };
        },
    };
}
/**
 * Create intl formatters and populate cache
 * @param cache explicit cache to prevent leaking memory
 */
function createFormatters(cache) {
    if (cache === void 0) { cache = createIntlCache(); }
    var RelativeTimeFormat = Intl.RelativeTimeFormat;
    var ListFormat = Intl.ListFormat;
    var DisplayNames = Intl.DisplayNames;
    var getDateTimeFormat = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
    }, {
        cache: createFastMemoizeCache(cache.dateTime),
        strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
    });
    var getNumberFormat = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
    }, {
        cache: createFastMemoizeCache(cache.number),
        strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
    });
    var getPluralRules = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
    }, {
        cache: createFastMemoizeCache(cache.pluralRules),
        strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
    });
    return {
        getDateTimeFormat: getDateTimeFormat,
        getNumberFormat: getNumberFormat,
        getMessageFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function (message, locales, overrideFormats, opts) {
            return new intl_messageformat__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat(message, locales, overrideFormats, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ formatters: {
                    getNumberFormat: getNumberFormat,
                    getDateTimeFormat: getDateTimeFormat,
                    getPluralRules: getPluralRules,
                } }, (opts || {})));
        }, {
            cache: createFastMemoizeCache(cache.message),
            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
        }),
        getRelativeTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.relativeTime),
            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
        }),
        getPluralRules: getPluralRules,
        getListFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new (ListFormat.bind.apply(ListFormat, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.list),
            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
        }),
        getDisplayNames: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new (DisplayNames.bind.apply(DisplayNames, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.displayNames),
            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
        }),
    };
}
function getNamedFormat(formats, type, name, onError) {
    var formatType = formats && formats[type];
    var format;
    if (formatType) {
        format = formatType[name];
    }
    if (format) {
        return format;
    }
    onError(new _error__WEBPACK_IMPORTED_MODULE_3__.UnsupportedFormatterError("No ".concat(type, " format named: ").concat(name)));
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/ecma402-abstract/lib/utils.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/ecma402-abstract/lib/utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UNICODE_EXTENSION_SEQUENCE_REGEX: () => (/* binding */ UNICODE_EXTENSION_SEQUENCE_REGEX),
/* harmony export */   createDataProperty: () => (/* binding */ createDataProperty),
/* harmony export */   createMemoizedDateTimeFormat: () => (/* binding */ createMemoizedDateTimeFormat),
/* harmony export */   createMemoizedListFormat: () => (/* binding */ createMemoizedListFormat),
/* harmony export */   createMemoizedLocale: () => (/* binding */ createMemoizedLocale),
/* harmony export */   createMemoizedNumberFormat: () => (/* binding */ createMemoizedNumberFormat),
/* harmony export */   createMemoizedPluralRules: () => (/* binding */ createMemoizedPluralRules),
/* harmony export */   defineProperty: () => (/* binding */ defineProperty),
/* harmony export */   getInternalSlot: () => (/* binding */ getInternalSlot),
/* harmony export */   getMagnitude: () => (/* binding */ getMagnitude),
/* harmony export */   getMultiInternalSlots: () => (/* binding */ getMultiInternalSlots),
/* harmony export */   invariant: () => (/* binding */ invariant),
/* harmony export */   isLiteralPart: () => (/* binding */ isLiteralPart),
/* harmony export */   repeat: () => (/* binding */ repeat),
/* harmony export */   setInternalSlot: () => (/* binding */ setInternalSlot),
/* harmony export */   setMultiInternalSlots: () => (/* binding */ setMultiInternalSlots)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ "./node_modules/@formatjs/fast-memoize/lib/index.js");


/**
 * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
 * @param x number
 */
function getMagnitude(x) {
    // Cannot count string length via Number.toString because it may use scientific notation
    // for very small or very large numbers.
    return Math.floor(Math.log(x) * Math.LOG10E);
}
function repeat(s, times) {
    if (typeof s.repeat === 'function') {
        return s.repeat(times);
    }
    var arr = new Array(times);
    for (var i = 0; i < arr.length; i++) {
        arr[i] = s;
    }
    return arr.join('');
}
function setInternalSlot(map, pl, field, value) {
    if (!map.get(pl)) {
        map.set(pl, Object.create(null));
    }
    var slots = map.get(pl);
    slots[field] = value;
}
function setMultiInternalSlots(map, pl, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var k = _a[_i];
        setInternalSlot(map, pl, k, props[k]);
    }
}
function getInternalSlot(map, pl, field) {
    return getMultiInternalSlots(map, pl, field)[field];
}
function getMultiInternalSlots(map, pl) {
    var fields = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        fields[_i - 2] = arguments[_i];
    }
    var slots = map.get(pl);
    if (!slots) {
        throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
    }
    return fields.reduce(function (all, f) {
        all[f] = slots[f];
        return all;
    }, Object.create(null));
}
function isLiteralPart(patternPart) {
    return patternPart.type === 'literal';
}
/*
  17 ECMAScript Standard Built-in Objects:
    Every built-in Function object, including constructors, that is not
    identified as an anonymous function has a name property whose value
    is a String.

    Unless otherwise specified, the name property of a built-in Function
    object, if it exists, has the attributes { [[Writable]]: false,
    [[Enumerable]]: false, [[Configurable]]: true }.
*/
function defineProperty(target, name, _a) {
    var value = _a.value;
    Object.defineProperty(target, name, {
        configurable: true,
        enumerable: false,
        writable: true,
        value: value,
    });
}
/**
 * 7.3.5 CreateDataProperty
 * @param target
 * @param name
 * @param value
 */
function createDataProperty(target, name, value) {
    Object.defineProperty(target, name, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: value,
    });
}
var UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;
function invariant(condition, message, Err) {
    if (Err === void 0) { Err = Error; }
    if (!condition) {
        throw new Err(message);
    }
}
var createMemoizedNumberFormat = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
}, {
    strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
});
var createMemoizedDateTimeFormat = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
}, {
    strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
});
var createMemoizedPluralRules = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
}, {
    strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
});
var createMemoizedLocale = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new ((_a = Intl.Locale).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
}, {
    strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
});
var createMemoizedListFormat = (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new ((_a = Intl.ListFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([void 0], args, false)))();
}, {
    strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
});


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBestPattern: () => (/* binding */ getBestPattern)
/* harmony export */ });
/* harmony import */ var _time_data_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time-data.generated */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js");

/**
 * Returns the best matching date time pattern if a date time skeleton
 * pattern is provided with a locale. Follows the Unicode specification:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#table-mapping-requested-time-skeletons-to-patterns
 * @param skeleton date time skeleton pattern that possibly includes j, J or C
 * @param locale
 */
function getBestPattern(skeleton, locale) {
    var skeletonCopy = '';
    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
        var patternChar = skeleton.charAt(patternPos);
        if (patternChar === 'j') {
            var extraLength = 0;
            while (patternPos + 1 < skeleton.length &&
                skeleton.charAt(patternPos + 1) === patternChar) {
                extraLength++;
                patternPos++;
            }
            var hourLen = 1 + (extraLength & 1);
            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
            var dayPeriodChar = 'a';
            var hourChar = getDefaultHourSymbolFromLocale(locale);
            if (hourChar == 'H' || hourChar == 'k') {
                dayPeriodLen = 0;
            }
            while (dayPeriodLen-- > 0) {
                skeletonCopy += dayPeriodChar;
            }
            while (hourLen-- > 0) {
                skeletonCopy = hourChar + skeletonCopy;
            }
        }
        else if (patternChar === 'J') {
            skeletonCopy += 'H';
        }
        else {
            skeletonCopy += patternChar;
        }
    }
    return skeletonCopy;
}
/**
 * Maps the [hour cycle type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)
 * of the given `locale` to the corresponding time pattern.
 * @param locale
 */
function getDefaultHourSymbolFromLocale(locale) {
    var hourCycle = locale.hourCycle;
    if (hourCycle === undefined &&
        // @ts-ignore hourCycle(s) is not identified yet
        locale.hourCycles &&
        // @ts-ignore
        locale.hourCycles.length) {
        // @ts-ignore
        hourCycle = locale.hourCycles[0];
    }
    if (hourCycle) {
        switch (hourCycle) {
            case 'h24':
                return 'k';
            case 'h23':
                return 'H';
            case 'h12':
                return 'h';
            case 'h11':
                return 'K';
            default:
                throw new Error('Invalid hourCycle');
        }
    }
    // TODO: Once hourCycle is fully supported remove the following with data generation
    var languageTag = locale.language;
    var regionTag;
    if (languageTag !== 'root') {
        regionTag = locale.maximize().region;
    }
    var hourCycles = _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[regionTag || ''] ||
        _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData[languageTag || ''] ||
        _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData["".concat(languageTag, "-001")] ||
        _time_data_generated__WEBPACK_IMPORTED_MODULE_0__.timeData['001'];
    return hourCycles[0];
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/error.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/error.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ErrorKind: () => (/* binding */ ErrorKind)
/* harmony export */ });
var ErrorKind;
(function (ErrorKind) {
    /** Argument is unclosed (e.g. `{0`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
    /** Argument is empty (e.g. `{}`). */
    ErrorKind[ErrorKind["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
    /** Argument is malformed (e.g. `{foo!}``) */
    ErrorKind[ErrorKind["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
    /** Expect an argument type (e.g. `{foo,}`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
    /** Unsupported argument type (e.g. `{foo,foo}`) */
    ErrorKind[ErrorKind["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
    /** Expect an argument style (e.g. `{foo, number, }`) */
    ErrorKind[ErrorKind["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
    /** The number skeleton is invalid. */
    ErrorKind[ErrorKind["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
    /** The date time skeleton is invalid. */
    ErrorKind[ErrorKind["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
    /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */
    ErrorKind[ErrorKind["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
    /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */
    ErrorKind[ErrorKind["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
    /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */
    ErrorKind[ErrorKind["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
    /** Missing select argument options (e.g. `{foo, select}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
    /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */
    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
    /** Expecting a selector in `select` argument (e.g `{foo, select}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
    /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
    /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */
    ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
    /**
     * Expecting a message fragment after the `plural` or `selectordinal` selector
     * (e.g. `{foo, plural, one}`)
     */
    ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
    /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */
    ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
    /**
     * Duplicate selectors in `plural` or `selectordinal` argument.
     * (e.g. {foo, plural, one {#} one {#}})
     */
    ErrorKind[ErrorKind["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
    /** Duplicate selectors in `select` argument.
     * (e.g. {foo, select, apple {apple} apple {apple}})
     */
    ErrorKind[ErrorKind["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
    /** Plural or select argument option must have `other` clause. */
    ErrorKind[ErrorKind["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
    /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */
    ErrorKind[ErrorKind["INVALID_TAG"] = 23] = "INVALID_TAG";
    /** The tag name is invalid. (e.g. `<123>foo</123>`) */
    ErrorKind[ErrorKind["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
    /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */
    ErrorKind[ErrorKind["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
    /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */
    ErrorKind[ErrorKind["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SKELETON_TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.SKELETON_TYPE),
/* harmony export */   TYPE: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.TYPE),
/* harmony export */   _Parser: () => (/* binding */ _Parser),
/* harmony export */   createLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createLiteralElement),
/* harmony export */   createNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.createNumberElement),
/* harmony export */   isArgumentElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isArgumentElement),
/* harmony export */   isDateElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateElement),
/* harmony export */   isDateTimeSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton),
/* harmony export */   isLiteralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isLiteralElement),
/* harmony export */   isNumberElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement),
/* harmony export */   isNumberSkeleton: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton),
/* harmony export */   isPluralElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement),
/* harmony export */   isPoundElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isPoundElement),
/* harmony export */   isSelectElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement),
/* harmony export */   isTagElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTagElement),
/* harmony export */   isTimeElement: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement),
/* harmony export */   parse: () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/error.js");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/types.js");




function pruneLocation(els) {
    els.forEach(function (el) {
        delete el.location;
        if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isSelectElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isPluralElement)(el)) {
            for (var k in el.options) {
                delete el.options[k].location;
                pruneLocation(el.options[k].value);
            }
        }
        else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberElement)(el) && (0,_types__WEBPACK_IMPORTED_MODULE_2__.isNumberSkeleton)(el.style)) {
            delete el.style.location;
        }
        else if (((0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateElement)(el) || (0,_types__WEBPACK_IMPORTED_MODULE_2__.isTimeElement)(el)) &&
            (0,_types__WEBPACK_IMPORTED_MODULE_2__.isDateTimeSkeleton)(el.style)) {
            delete el.style.location;
        }
        else if ((0,_types__WEBPACK_IMPORTED_MODULE_2__.isTagElement)(el)) {
            pruneLocation(el.children);
        }
    });
}
function parse(message, opts) {
    if (opts === void 0) { opts = {}; }
    opts = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
    var result = new _parser__WEBPACK_IMPORTED_MODULE_1__.Parser(message, opts).parse();
    if (result.err) {
        var error = SyntaxError(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind[result.err.kind]);
        // @ts-expect-error Assign to error object
        error.location = result.err.location;
        // @ts-expect-error Assign to error object
        error.originalMessage = result.err.message;
        throw error;
    }
    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
        pruneLocation(result.val);
    }
    return result.val;
}

// only for testing
var _Parser = _parser__WEBPACK_IMPORTED_MODULE_1__.Parser;


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Parser: () => (/* binding */ Parser)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/error.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/types.js");
/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regex.generated */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js");
/* harmony import */ var _formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/icu-skeleton-parser */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/index.js");
/* harmony import */ var _date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-time-pattern-generator */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js");
var _a;






var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(_regex_generated__WEBPACK_IMPORTED_MODULE_2__.SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start, end) {
    return { start: start, end: end };
}
// #region Ponyfills
// Consolidate these variables up top for easier toggling during debugging
var hasNativeStartsWith = !!String.prototype.startsWith && '_a'.startsWith('a', 1);
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger
    ? Number.isSafeInteger
    : function (n) {
        return (typeof n === 'number' &&
            isFinite(n) &&
            Math.floor(n) === n &&
            Math.abs(n) <= 0x1fffffffffffff);
    };
// IE11 does not support y and u.
var REGEX_SUPPORTS_U_AND_Y = true;
try {
    var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    /**
     * legacy Edge or Xbox One browser
     * Unicode flag support: supported
     * Pattern_Syntax support: not supported
     * See https://github.com/formatjs/formatjs/issues/2822
     */
    REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';
}
catch (_) {
    REGEX_SUPPORTS_U_AND_Y = false;
}
var startsWith = hasNativeStartsWith
    ? // Native
        function startsWith(s, search, position) {
            return s.startsWith(search, position);
        }
    : // For IE11
        function startsWith(s, search, position) {
            return s.slice(position, position + search.length) === search;
        };
var fromCodePoint = hasNativeFromCodePoint
    ? String.fromCodePoint
    : // IE11
        function fromCodePoint() {
            var codePoints = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                codePoints[_i] = arguments[_i];
            }
            var elements = '';
            var length = codePoints.length;
            var i = 0;
            var code;
            while (length > i) {
                code = codePoints[i++];
                if (code > 0x10ffff)
                    throw RangeError(code + ' is not a valid code point');
                elements +=
                    code < 0x10000
                        ? String.fromCharCode(code)
                        : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);
            }
            return elements;
        };
var fromEntries = 
// native
hasNativeFromEntries
    ? Object.fromEntries
    : // Ponyfill
        function fromEntries(entries) {
            var obj = {};
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                var _a = entries_1[_i], k = _a[0], v = _a[1];
                obj[k] = v;
            }
            return obj;
        };
var codePointAt = hasNativeCodePointAt
    ? // Native
        function codePointAt(s, index) {
            return s.codePointAt(index);
        }
    : // IE 11
        function codePointAt(s, index) {
            var size = s.length;
            if (index < 0 || index >= size) {
                return undefined;
            }
            var first = s.charCodeAt(index);
            var second;
            return first < 0xd800 ||
                first > 0xdbff ||
                index + 1 === size ||
                (second = s.charCodeAt(index + 1)) < 0xdc00 ||
                second > 0xdfff
                ? first
                : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
        };
var trimStart = hasTrimStart
    ? // Native
        function trimStart(s) {
            return s.trimStart();
        }
    : // Ponyfill
        function trimStart(s) {
            return s.replace(SPACE_SEPARATOR_START_REGEX, '');
        };
var trimEnd = hasTrimEnd
    ? // Native
        function trimEnd(s) {
            return s.trimEnd();
        }
    : // Ponyfill
        function trimEnd(s) {
            return s.replace(SPACE_SEPARATOR_END_REGEX, '');
        };
// Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
function RE(s, flag) {
    return new RegExp(s, flag);
}
// #endregion
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
    // Native
    var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
        var _a;
        IDENTIFIER_PREFIX_RE_1.lastIndex = index;
        var match = IDENTIFIER_PREFIX_RE_1.exec(s);
        return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
    };
}
else {
    // IE11
    matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
        var match = [];
        while (true) {
            var c = codePointAt(s, index);
            if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
                break;
            }
            match.push(c);
            index += c >= 0x10000 ? 2 : 1;
        }
        return fromCodePoint.apply(void 0, match);
    };
}
var Parser = /** @class */ (function () {
    function Parser(message, options) {
        if (options === void 0) { options = {}; }
        this.message = message;
        this.position = { offset: 0, line: 1, column: 1 };
        this.ignoreTag = !!options.ignoreTag;
        this.locale = options.locale;
        this.requiresOtherClause = !!options.requiresOtherClause;
        this.shouldParseSkeletons = !!options.shouldParseSkeletons;
    }
    Parser.prototype.parse = function () {
        if (this.offset() !== 0) {
            throw Error('parser can only be used once');
        }
        return this.parseMessage(0, '', false);
    };
    Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {
        var elements = [];
        while (!this.isEOF()) {
            var char = this.char();
            if (char === 123 /* `{` */) {
                var result = this.parseArgument(nestingLevel, expectingCloseTag);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
            else if (char === 125 /* `}` */ && nestingLevel > 0) {
                break;
            }
            else if (char === 35 /* `#` */ &&
                (parentArgType === 'plural' || parentArgType === 'selectordinal')) {
                var position = this.clonePosition();
                this.bump();
                elements.push({
                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.pound,
                    location: createLocation(position, this.clonePosition()),
                });
            }
            else if (char === 60 /* `<` */ &&
                !this.ignoreTag &&
                this.peek() === 47 // char code for '/'
            ) {
                if (expectingCloseTag) {
                    break;
                }
                else {
                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
                }
            }
            else if (char === 60 /* `<` */ &&
                !this.ignoreTag &&
                _isAlpha(this.peek() || 0)) {
                var result = this.parseTag(nestingLevel, parentArgType);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
            else {
                var result = this.parseLiteral(nestingLevel, parentArgType);
                if (result.err) {
                    return result;
                }
                elements.push(result.val);
            }
        }
        return { val: elements, err: null };
    };
    /**
     * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
     * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
     * are accepted:
     *
     * ```
     * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
     * tagName ::= [a-z] (PENChar)*
     * PENChar ::=
     *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
     *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
     *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
     * ```
     *
     * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
     * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
     * since other tag-based engines like React allow it
     */
    Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
        var startPosition = this.clonePosition();
        this.bump(); // `<`
        var tagName = this.parseTagName();
        this.bumpSpace();
        if (this.bumpIf('/>')) {
            // Self closing tag
            return {
                val: {
                    type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal,
                    value: "<".concat(tagName, "/>"),
                    location: createLocation(startPosition, this.clonePosition()),
                },
                err: null,
            };
        }
        else if (this.bumpIf('>')) {
            var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
            if (childrenResult.err) {
                return childrenResult;
            }
            var children = childrenResult.val;
            // Expecting a close tag
            var endTagStartPosition = this.clonePosition();
            if (this.bumpIf('</')) {
                if (this.isEOF() || !_isAlpha(this.char())) {
                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                var closingTagNameStartPosition = this.clonePosition();
                var closingTagName = this.parseTagName();
                if (tagName !== closingTagName) {
                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
                }
                this.bumpSpace();
                if (!this.bumpIf('>')) {
                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                return {
                    val: {
                        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.tag,
                        value: tagName,
                        children: children,
                        location: createLocation(startPosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            else {
                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
            }
        }
        else {
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
        }
    };
    /**
     * This method assumes that the caller has peeked ahead for the first tag character.
     */
    Parser.prototype.parseTagName = function () {
        var startOffset = this.offset();
        this.bump(); // the first tag name character
        while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
            this.bump();
        }
        return this.message.slice(startOffset, this.offset());
    };
    Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
        var start = this.clonePosition();
        var value = '';
        while (true) {
            var parseQuoteResult = this.tryParseQuote(parentArgType);
            if (parseQuoteResult) {
                value += parseQuoteResult;
                continue;
            }
            var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
            if (parseUnquotedResult) {
                value += parseUnquotedResult;
                continue;
            }
            var parseLeftAngleResult = this.tryParseLeftAngleBracket();
            if (parseLeftAngleResult) {
                value += parseLeftAngleResult;
                continue;
            }
            break;
        }
        var location = createLocation(start, this.clonePosition());
        return {
            val: { type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.literal, value: value, location: location },
            err: null,
        };
    };
    Parser.prototype.tryParseLeftAngleBracket = function () {
        if (!this.isEOF() &&
            this.char() === 60 /* `<` */ &&
            (this.ignoreTag ||
                // If at the opening tag or closing tag position, bail.
                !_isAlphaOrSlash(this.peek() || 0))) {
            this.bump(); // `<`
            return '<';
        }
        return null;
    };
    /**
     * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
     * a character that requires quoting (that is, "only where needed"), and works the same in
     * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
     */
    Parser.prototype.tryParseQuote = function (parentArgType) {
        if (this.isEOF() || this.char() !== 39 /* `'` */) {
            return null;
        }
        // Parse escaped char following the apostrophe, or early return if there is no escaped char.
        // Check if is valid escaped character
        switch (this.peek()) {
            case 39 /* `'` */:
                // double quote, should return as a single quote.
                this.bump();
                this.bump();
                return "'";
            // '{', '<', '>', '}'
            case 123:
            case 60:
            case 62:
            case 125:
                break;
            case 35: // '#'
                if (parentArgType === 'plural' || parentArgType === 'selectordinal') {
                    break;
                }
                return null;
            default:
                return null;
        }
        this.bump(); // apostrophe
        var codePoints = [this.char()]; // escaped char
        this.bump();
        // read chars until the optional closing apostrophe is found
        while (!this.isEOF()) {
            var ch = this.char();
            if (ch === 39 /* `'` */) {
                if (this.peek() === 39 /* `'` */) {
                    codePoints.push(39);
                    // Bump one more time because we need to skip 2 characters.
                    this.bump();
                }
                else {
                    // Optional closing apostrophe.
                    this.bump();
                    break;
                }
            }
            else {
                codePoints.push(ch);
            }
            this.bump();
        }
        return fromCodePoint.apply(void 0, codePoints);
    };
    Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {
        if (this.isEOF()) {
            return null;
        }
        var ch = this.char();
        if (ch === 60 /* `<` */ ||
            ch === 123 /* `{` */ ||
            (ch === 35 /* `#` */ &&
                (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||
            (ch === 125 /* `}` */ && nestingLevel > 0)) {
            return null;
        }
        else {
            this.bump();
            return fromCodePoint(ch);
        }
    };
    Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {
        var openingBracePosition = this.clonePosition();
        this.bump(); // `{`
        this.bumpSpace();
        if (this.isEOF()) {
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        if (this.char() === 125 /* `}` */) {
            this.bump();
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        // argument name
        var value = this.parseIdentifierIfPossible().value;
        if (!value) {
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (this.isEOF()) {
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        switch (this.char()) {
            // Simple argument: `{name}`
            case 125 /* `}` */: {
                this.bump(); // `}`
                return {
                    val: {
                        type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.argument,
                        // value does not include the opening and closing braces.
                        value: value,
                        location: createLocation(openingBracePosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            // Argument with options: `{name, format, ...}`
            case 44 /* `,` */: {
                this.bump(); // `,`
                this.bumpSpace();
                if (this.isEOF()) {
                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
                }
                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
            }
            default:
                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
        }
    };
    /**
     * Advance the parser until the end of the identifier, if it is currently on
     * an identifier character. Return an empty string otherwise.
     */
    Parser.prototype.parseIdentifierIfPossible = function () {
        var startingPosition = this.clonePosition();
        var startOffset = this.offset();
        var value = matchIdentifierAtIndex(this.message, startOffset);
        var endOffset = startOffset + value.length;
        this.bumpTo(endOffset);
        var endPosition = this.clonePosition();
        var location = createLocation(startingPosition, endPosition);
        return { value: value, location: location };
    };
    Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {
        var _a;
        // Parse this range:
        // {name, type, style}
        //        ^---^
        var typeStartPosition = this.clonePosition();
        var argType = this.parseIdentifierIfPossible().value;
        var typeEndPosition = this.clonePosition();
        switch (argType) {
            case '':
                // Expecting a style string number, date, time, plural, selectordinal, or select.
                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            case 'number':
            case 'date':
            case 'time': {
                // Parse this range:
                // {name, number, style}
                //              ^-------^
                this.bumpSpace();
                var styleAndLocation = null;
                if (this.bumpIf(',')) {
                    this.bumpSpace();
                    var styleStartPosition = this.clonePosition();
                    var result = this.parseSimpleArgStyleIfPossible();
                    if (result.err) {
                        return result;
                    }
                    var style = trimEnd(result.val);
                    if (style.length === 0) {
                        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                    var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                    styleAndLocation = { style: style, styleLocation: styleLocation };
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                var location_1 = createLocation(openingBracePosition, this.clonePosition());
                // Extract style or skeleton
                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {
                    // Skeleton starts with `::`.
                    var skeleton = trimStart(styleAndLocation.style.slice(2));
                    if (argType === 'number') {
                        var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                        if (result.err) {
                            return result;
                        }
                        return {
                            val: { type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number, value: value, location: location_1, style: result.val },
                            err: null,
                        };
                    }
                    else {
                        if (skeleton.length === 0) {
                            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                        }
                        var dateTimePattern = skeleton;
                        // Get "best match" pattern only if locale is passed, if not, let it
                        // pass as-is where `parseDateTimeSkeleton()` will throw an error
                        // for unsupported patterns.
                        if (this.locale) {
                            dateTimePattern = (0,_date_time_pattern_generator__WEBPACK_IMPORTED_MODULE_4__.getBestPattern)(skeleton, this.locale);
                        }
                        var style = {
                            type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.dateTime,
                            pattern: dateTimePattern,
                            location: styleAndLocation.styleLocation,
                            parsedOptions: this.shouldParseSkeletons
                                ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseDateTimeSkeleton)(dateTimePattern)
                                : {},
                        };
                        var type = argType === 'date' ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time;
                        return {
                            val: { type: type, value: value, location: location_1, style: style },
                            err: null,
                        };
                    }
                }
                // Regular style or no style.
                return {
                    val: {
                        type: argType === 'number'
                            ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.number
                            : argType === 'date'
                                ? _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.date
                                : _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.time,
                        value: value,
                        location: location_1,
                        style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,
                    },
                    err: null,
                };
            }
            case 'plural':
            case 'selectordinal':
            case 'select': {
                // Parse this range:
                // {name, plural, options}
                //              ^---------^
                var typeEndPosition_1 = this.clonePosition();
                this.bumpSpace();
                if (!this.bumpIf(',')) {
                    return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, typeEndPosition_1)));
                }
                this.bumpSpace();
                // Parse offset:
                // {name, plural, offset:1, options}
                //                ^-----^
                //
                // or the first option:
                //
                // {name, plural, one {...} other {...}}
                //                ^--^
                var identifierAndLocation = this.parseIdentifierIfPossible();
                var pluralOffset = 0;
                if (argType !== 'select' && identifierAndLocation.value === 'offset') {
                    if (!this.bumpIf(':')) {
                        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                    this.bumpSpace();
                    var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                    if (result.err) {
                        return result;
                    }
                    // Parse another identifier for option parsing
                    this.bumpSpace();
                    identifierAndLocation = this.parseIdentifierIfPossible();
                    pluralOffset = result.val;
                }
                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
                if (optionsResult.err) {
                    return optionsResult;
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                var location_2 = createLocation(openingBracePosition, this.clonePosition());
                if (argType === 'select') {
                    return {
                        val: {
                            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.select,
                            value: value,
                            options: fromEntries(optionsResult.val),
                            location: location_2,
                        },
                        err: null,
                    };
                }
                else {
                    return {
                        val: {
                            type: _types__WEBPACK_IMPORTED_MODULE_1__.TYPE.plural,
                            value: value,
                            options: fromEntries(optionsResult.val),
                            offset: pluralOffset,
                            pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                            location: location_2,
                        },
                        err: null,
                    };
                }
            }
            default:
                return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        }
    };
    Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {
        // Parse: {value, number, ::currency/GBP }
        //
        if (this.isEOF() || this.char() !== 125 /* `}` */) {
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        this.bump(); // `}`
        return { val: true, err: null };
    };
    /**
     * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
     */
    Parser.prototype.parseSimpleArgStyleIfPossible = function () {
        var nestedBraces = 0;
        var startPosition = this.clonePosition();
        while (!this.isEOF()) {
            var ch = this.char();
            switch (ch) {
                case 39 /* `'` */: {
                    // Treat apostrophe as quoting but include it in the style part.
                    // Find the end of the quoted literal text.
                    this.bump();
                    var apostrophePosition = this.clonePosition();
                    if (!this.bumpUntil("'")) {
                        return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                    }
                    this.bump();
                    break;
                }
                case 123 /* `{` */: {
                    nestedBraces += 1;
                    this.bump();
                    break;
                }
                case 125 /* `}` */: {
                    if (nestedBraces > 0) {
                        nestedBraces -= 1;
                    }
                    else {
                        return {
                            val: this.message.slice(startPosition.offset, this.offset()),
                            err: null,
                        };
                    }
                    break;
                }
                default:
                    this.bump();
                    break;
            }
        }
        return {
            val: this.message.slice(startPosition.offset, this.offset()),
            err: null,
        };
    };
    Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {
        var tokens = [];
        try {
            tokens = (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeletonFromString)(skeleton);
        }
        catch (e) {
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_NUMBER_SKELETON, location);
        }
        return {
            val: {
                type: _types__WEBPACK_IMPORTED_MODULE_1__.SKELETON_TYPE.number,
                tokens: tokens,
                location: location,
                parsedOptions: this.shouldParseSkeletons
                    ? (0,_formatjs_icu_skeleton_parser__WEBPACK_IMPORTED_MODULE_3__.parseNumberSkeleton)(tokens)
                    : {},
            },
            err: null,
        };
    };
    /**
     * @param nesting_level The current nesting level of messages.
     *     This can be positive when parsing message fragment in select or plural argument options.
     * @param parent_arg_type The parent argument's type.
     * @param parsed_first_identifier If provided, this is the first identifier-like selector of
     *     the argument. It is a by-product of a previous parsing attempt.
     * @param expecting_close_tag If true, this message is directly or indirectly nested inside
     *     between a pair of opening and closing tags. The nested message will not parse beyond
     *     the closing tag boundary.
     */
    Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
        var _a;
        var hasOtherClause = false;
        var options = [];
        var parsedSelectors = new Set();
        var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
        // Parse:
        // one {one apple}
        // ^--^
        while (true) {
            if (selector.length === 0) {
                var startPosition = this.clonePosition();
                if (parentArgType !== 'select' && this.bumpIf('=')) {
                    // Try parse `={number}` selector
                    var result = this.tryParseDecimalInteger(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                    if (result.err) {
                        return result;
                    }
                    selectorLocation = createLocation(startPosition, this.clonePosition());
                    selector = this.message.slice(startPosition.offset, this.offset());
                }
                else {
                    break;
                }
            }
            // Duplicate selector clauses
            if (parsedSelectors.has(selector)) {
                return this.error(parentArgType === 'select'
                    ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR
                    : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
            }
            if (selector === 'other') {
                hasOtherClause = true;
            }
            // Parse:
            // one {one apple}
            //     ^----------^
            this.bumpSpace();
            var openingBracePosition = this.clonePosition();
            if (!this.bumpIf('{')) {
                return this.error(parentArgType === 'select'
                    ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                    : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
            if (fragmentResult.err) {
                return fragmentResult;
            }
            var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
            if (argCloseResult.err) {
                return argCloseResult;
            }
            options.push([
                selector,
                {
                    value: fragmentResult.val,
                    location: createLocation(openingBracePosition, this.clonePosition()),
                },
            ]);
            // Keep track of the existing selectors
            parsedSelectors.add(selector);
            // Prep next selector clause.
            this.bumpSpace();
            (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);
        }
        if (options.length === 0) {
            return this.error(parentArgType === 'select'
                ? _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR
                : _error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
        }
        if (this.requiresOtherClause && !hasOtherClause) {
            return this.error(_error__WEBPACK_IMPORTED_MODULE_0__.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
        }
        return { val: options, err: null };
    };
    Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {
        var sign = 1;
        var startingPosition = this.clonePosition();
        if (this.bumpIf('+')) {
        }
        else if (this.bumpIf('-')) {
            sign = -1;
        }
        var hasDigits = false;
        var decimal = 0;
        while (!this.isEOF()) {
            var ch = this.char();
            if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
                hasDigits = true;
                decimal = decimal * 10 + (ch - 48);
                this.bump();
            }
            else {
                break;
            }
        }
        var location = createLocation(startingPosition, this.clonePosition());
        if (!hasDigits) {
            return this.error(expectNumberError, location);
        }
        decimal *= sign;
        if (!isSafeInteger(decimal)) {
            return this.error(invalidNumberError, location);
        }
        return { val: decimal, err: null };
    };
    Parser.prototype.offset = function () {
        return this.position.offset;
    };
    Parser.prototype.isEOF = function () {
        return this.offset() === this.message.length;
    };
    Parser.prototype.clonePosition = function () {
        // This is much faster than `Object.assign` or spread.
        return {
            offset: this.position.offset,
            line: this.position.line,
            column: this.position.column,
        };
    };
    /**
     * Return the code point at the current position of the parser.
     * Throws if the index is out of bound.
     */
    Parser.prototype.char = function () {
        var offset = this.position.offset;
        if (offset >= this.message.length) {
            throw Error('out of bound');
        }
        var code = codePointAt(this.message, offset);
        if (code === undefined) {
            throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
        }
        return code;
    };
    Parser.prototype.error = function (kind, location) {
        return {
            val: null,
            err: {
                kind: kind,
                message: this.message,
                location: location,
            },
        };
    };
    /** Bump the parser to the next UTF-16 code unit. */
    Parser.prototype.bump = function () {
        if (this.isEOF()) {
            return;
        }
        var code = this.char();
        if (code === 10 /* '\n' */) {
            this.position.line += 1;
            this.position.column = 1;
            this.position.offset += 1;
        }
        else {
            this.position.column += 1;
            // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
            this.position.offset += code < 0x10000 ? 1 : 2;
        }
    };
    /**
     * If the substring starting at the current position of the parser has
     * the given prefix, then bump the parser to the character immediately
     * following the prefix and return true. Otherwise, don't bump the parser
     * and return false.
     */
    Parser.prototype.bumpIf = function (prefix) {
        if (startsWith(this.message, prefix, this.offset())) {
            for (var i = 0; i < prefix.length; i++) {
                this.bump();
            }
            return true;
        }
        return false;
    };
    /**
     * Bump the parser until the pattern character is found and return `true`.
     * Otherwise bump to the end of the file and return `false`.
     */
    Parser.prototype.bumpUntil = function (pattern) {
        var currentOffset = this.offset();
        var index = this.message.indexOf(pattern, currentOffset);
        if (index >= 0) {
            this.bumpTo(index);
            return true;
        }
        else {
            this.bumpTo(this.message.length);
            return false;
        }
    };
    /**
     * Bump the parser to the target offset.
     * If target offset is beyond the end of the input, bump the parser to the end of the input.
     */
    Parser.prototype.bumpTo = function (targetOffset) {
        if (this.offset() > targetOffset) {
            throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
        }
        targetOffset = Math.min(targetOffset, this.message.length);
        while (true) {
            var offset = this.offset();
            if (offset === targetOffset) {
                break;
            }
            if (offset > targetOffset) {
                throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
            }
            this.bump();
            if (this.isEOF()) {
                break;
            }
        }
    };
    /** advance the parser through all whitespace to the next non-whitespace code unit. */
    Parser.prototype.bumpSpace = function () {
        while (!this.isEOF() && _isWhiteSpace(this.char())) {
            this.bump();
        }
    };
    /**
     * Peek at the *next* Unicode codepoint in the input without advancing the parser.
     * If the input has been exhausted, then this returns null.
     */
    Parser.prototype.peek = function () {
        if (this.isEOF()) {
            return null;
        }
        var code = this.char();
        var offset = this.offset();
        var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));
        return nextCode !== null && nextCode !== void 0 ? nextCode : null;
    };
    return Parser;
}());

/**
 * This check if codepoint is alphabet (lower & uppercase)
 * @param codepoint
 * @returns
 */
function _isAlpha(codepoint) {
    return ((codepoint >= 97 && codepoint <= 122) ||
        (codepoint >= 65 && codepoint <= 90));
}
function _isAlphaOrSlash(codepoint) {
    return _isAlpha(codepoint) || codepoint === 47; /* '/' */
}
/** See `parseTag` function docs. */
function _isPotentialElementNameChar(c) {
    return (c === 45 /* '-' */ ||
        c === 46 /* '.' */ ||
        (c >= 48 && c <= 57) /* 0..9 */ ||
        c === 95 /* '_' */ ||
        (c >= 97 && c <= 122) /** a..z */ ||
        (c >= 65 && c <= 90) /* A..Z */ ||
        c == 0xb7 ||
        (c >= 0xc0 && c <= 0xd6) ||
        (c >= 0xd8 && c <= 0xf6) ||
        (c >= 0xf8 && c <= 0x37d) ||
        (c >= 0x37f && c <= 0x1fff) ||
        (c >= 0x200c && c <= 0x200d) ||
        (c >= 0x203f && c <= 0x2040) ||
        (c >= 0x2070 && c <= 0x218f) ||
        (c >= 0x2c00 && c <= 0x2fef) ||
        (c >= 0x3001 && c <= 0xd7ff) ||
        (c >= 0xf900 && c <= 0xfdcf) ||
        (c >= 0xfdf0 && c <= 0xfffd) ||
        (c >= 0x10000 && c <= 0xeffff));
}
/**
 * Code point equivalent of regex `\p{White_Space}`.
 * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */
function _isWhiteSpace(c) {
    return ((c >= 0x0009 && c <= 0x000d) ||
        c === 0x0020 ||
        c === 0x0085 ||
        (c >= 0x200e && c <= 0x200f) ||
        c === 0x2028 ||
        c === 0x2029);
}
/**
 * Code point equivalent of regex `\p{Pattern_Syntax}`.
 * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */
function _isPatternSyntax(c) {
    return ((c >= 0x0021 && c <= 0x0023) ||
        c === 0x0024 ||
        (c >= 0x0025 && c <= 0x0027) ||
        c === 0x0028 ||
        c === 0x0029 ||
        c === 0x002a ||
        c === 0x002b ||
        c === 0x002c ||
        c === 0x002d ||
        (c >= 0x002e && c <= 0x002f) ||
        (c >= 0x003a && c <= 0x003b) ||
        (c >= 0x003c && c <= 0x003e) ||
        (c >= 0x003f && c <= 0x0040) ||
        c === 0x005b ||
        c === 0x005c ||
        c === 0x005d ||
        c === 0x005e ||
        c === 0x0060 ||
        c === 0x007b ||
        c === 0x007c ||
        c === 0x007d ||
        c === 0x007e ||
        c === 0x00a1 ||
        (c >= 0x00a2 && c <= 0x00a5) ||
        c === 0x00a6 ||
        c === 0x00a7 ||
        c === 0x00a9 ||
        c === 0x00ab ||
        c === 0x00ac ||
        c === 0x00ae ||
        c === 0x00b0 ||
        c === 0x00b1 ||
        c === 0x00b6 ||
        c === 0x00bb ||
        c === 0x00bf ||
        c === 0x00d7 ||
        c === 0x00f7 ||
        (c >= 0x2010 && c <= 0x2015) ||
        (c >= 0x2016 && c <= 0x2017) ||
        c === 0x2018 ||
        c === 0x2019 ||
        c === 0x201a ||
        (c >= 0x201b && c <= 0x201c) ||
        c === 0x201d ||
        c === 0x201e ||
        c === 0x201f ||
        (c >= 0x2020 && c <= 0x2027) ||
        (c >= 0x2030 && c <= 0x2038) ||
        c === 0x2039 ||
        c === 0x203a ||
        (c >= 0x203b && c <= 0x203e) ||
        (c >= 0x2041 && c <= 0x2043) ||
        c === 0x2044 ||
        c === 0x2045 ||
        c === 0x2046 ||
        (c >= 0x2047 && c <= 0x2051) ||
        c === 0x2052 ||
        c === 0x2053 ||
        (c >= 0x2055 && c <= 0x205e) ||
        (c >= 0x2190 && c <= 0x2194) ||
        (c >= 0x2195 && c <= 0x2199) ||
        (c >= 0x219a && c <= 0x219b) ||
        (c >= 0x219c && c <= 0x219f) ||
        c === 0x21a0 ||
        (c >= 0x21a1 && c <= 0x21a2) ||
        c === 0x21a3 ||
        (c >= 0x21a4 && c <= 0x21a5) ||
        c === 0x21a6 ||
        (c >= 0x21a7 && c <= 0x21ad) ||
        c === 0x21ae ||
        (c >= 0x21af && c <= 0x21cd) ||
        (c >= 0x21ce && c <= 0x21cf) ||
        (c >= 0x21d0 && c <= 0x21d1) ||
        c === 0x21d2 ||
        c === 0x21d3 ||
        c === 0x21d4 ||
        (c >= 0x21d5 && c <= 0x21f3) ||
        (c >= 0x21f4 && c <= 0x22ff) ||
        (c >= 0x2300 && c <= 0x2307) ||
        c === 0x2308 ||
        c === 0x2309 ||
        c === 0x230a ||
        c === 0x230b ||
        (c >= 0x230c && c <= 0x231f) ||
        (c >= 0x2320 && c <= 0x2321) ||
        (c >= 0x2322 && c <= 0x2328) ||
        c === 0x2329 ||
        c === 0x232a ||
        (c >= 0x232b && c <= 0x237b) ||
        c === 0x237c ||
        (c >= 0x237d && c <= 0x239a) ||
        (c >= 0x239b && c <= 0x23b3) ||
        (c >= 0x23b4 && c <= 0x23db) ||
        (c >= 0x23dc && c <= 0x23e1) ||
        (c >= 0x23e2 && c <= 0x2426) ||
        (c >= 0x2427 && c <= 0x243f) ||
        (c >= 0x2440 && c <= 0x244a) ||
        (c >= 0x244b && c <= 0x245f) ||
        (c >= 0x2500 && c <= 0x25b6) ||
        c === 0x25b7 ||
        (c >= 0x25b8 && c <= 0x25c0) ||
        c === 0x25c1 ||
        (c >= 0x25c2 && c <= 0x25f7) ||
        (c >= 0x25f8 && c <= 0x25ff) ||
        (c >= 0x2600 && c <= 0x266e) ||
        c === 0x266f ||
        (c >= 0x2670 && c <= 0x2767) ||
        c === 0x2768 ||
        c === 0x2769 ||
        c === 0x276a ||
        c === 0x276b ||
        c === 0x276c ||
        c === 0x276d ||
        c === 0x276e ||
        c === 0x276f ||
        c === 0x2770 ||
        c === 0x2771 ||
        c === 0x2772 ||
        c === 0x2773 ||
        c === 0x2774 ||
        c === 0x2775 ||
        (c >= 0x2794 && c <= 0x27bf) ||
        (c >= 0x27c0 && c <= 0x27c4) ||
        c === 0x27c5 ||
        c === 0x27c6 ||
        (c >= 0x27c7 && c <= 0x27e5) ||
        c === 0x27e6 ||
        c === 0x27e7 ||
        c === 0x27e8 ||
        c === 0x27e9 ||
        c === 0x27ea ||
        c === 0x27eb ||
        c === 0x27ec ||
        c === 0x27ed ||
        c === 0x27ee ||
        c === 0x27ef ||
        (c >= 0x27f0 && c <= 0x27ff) ||
        (c >= 0x2800 && c <= 0x28ff) ||
        (c >= 0x2900 && c <= 0x2982) ||
        c === 0x2983 ||
        c === 0x2984 ||
        c === 0x2985 ||
        c === 0x2986 ||
        c === 0x2987 ||
        c === 0x2988 ||
        c === 0x2989 ||
        c === 0x298a ||
        c === 0x298b ||
        c === 0x298c ||
        c === 0x298d ||
        c === 0x298e ||
        c === 0x298f ||
        c === 0x2990 ||
        c === 0x2991 ||
        c === 0x2992 ||
        c === 0x2993 ||
        c === 0x2994 ||
        c === 0x2995 ||
        c === 0x2996 ||
        c === 0x2997 ||
        c === 0x2998 ||
        (c >= 0x2999 && c <= 0x29d7) ||
        c === 0x29d8 ||
        c === 0x29d9 ||
        c === 0x29da ||
        c === 0x29db ||
        (c >= 0x29dc && c <= 0x29fb) ||
        c === 0x29fc ||
        c === 0x29fd ||
        (c >= 0x29fe && c <= 0x2aff) ||
        (c >= 0x2b00 && c <= 0x2b2f) ||
        (c >= 0x2b30 && c <= 0x2b44) ||
        (c >= 0x2b45 && c <= 0x2b46) ||
        (c >= 0x2b47 && c <= 0x2b4c) ||
        (c >= 0x2b4d && c <= 0x2b73) ||
        (c >= 0x2b74 && c <= 0x2b75) ||
        (c >= 0x2b76 && c <= 0x2b95) ||
        c === 0x2b96 ||
        (c >= 0x2b97 && c <= 0x2bff) ||
        (c >= 0x2e00 && c <= 0x2e01) ||
        c === 0x2e02 ||
        c === 0x2e03 ||
        c === 0x2e04 ||
        c === 0x2e05 ||
        (c >= 0x2e06 && c <= 0x2e08) ||
        c === 0x2e09 ||
        c === 0x2e0a ||
        c === 0x2e0b ||
        c === 0x2e0c ||
        c === 0x2e0d ||
        (c >= 0x2e0e && c <= 0x2e16) ||
        c === 0x2e17 ||
        (c >= 0x2e18 && c <= 0x2e19) ||
        c === 0x2e1a ||
        c === 0x2e1b ||
        c === 0x2e1c ||
        c === 0x2e1d ||
        (c >= 0x2e1e && c <= 0x2e1f) ||
        c === 0x2e20 ||
        c === 0x2e21 ||
        c === 0x2e22 ||
        c === 0x2e23 ||
        c === 0x2e24 ||
        c === 0x2e25 ||
        c === 0x2e26 ||
        c === 0x2e27 ||
        c === 0x2e28 ||
        c === 0x2e29 ||
        (c >= 0x2e2a && c <= 0x2e2e) ||
        c === 0x2e2f ||
        (c >= 0x2e30 && c <= 0x2e39) ||
        (c >= 0x2e3a && c <= 0x2e3b) ||
        (c >= 0x2e3c && c <= 0x2e3f) ||
        c === 0x2e40 ||
        c === 0x2e41 ||
        c === 0x2e42 ||
        (c >= 0x2e43 && c <= 0x2e4f) ||
        (c >= 0x2e50 && c <= 0x2e51) ||
        c === 0x2e52 ||
        (c >= 0x2e53 && c <= 0x2e7f) ||
        (c >= 0x3001 && c <= 0x3003) ||
        c === 0x3008 ||
        c === 0x3009 ||
        c === 0x300a ||
        c === 0x300b ||
        c === 0x300c ||
        c === 0x300d ||
        c === 0x300e ||
        c === 0x300f ||
        c === 0x3010 ||
        c === 0x3011 ||
        (c >= 0x3012 && c <= 0x3013) ||
        c === 0x3014 ||
        c === 0x3015 ||
        c === 0x3016 ||
        c === 0x3017 ||
        c === 0x3018 ||
        c === 0x3019 ||
        c === 0x301a ||
        c === 0x301b ||
        c === 0x301c ||
        c === 0x301d ||
        (c >= 0x301e && c <= 0x301f) ||
        c === 0x3020 ||
        c === 0x3030 ||
        c === 0xfd3e ||
        c === 0xfd3f ||
        (c >= 0xfe45 && c <= 0xfe46));
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SPACE_SEPARATOR_REGEX: () => (/* binding */ SPACE_SEPARATOR_REGEX),
/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)
/* harmony export */ });
// @generated from regex-gen.ts
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   timeData: () => (/* binding */ timeData)
/* harmony export */ });
// @generated from time-data-gen.ts
// prettier-ignore  
var timeData = {
    "001": [
        "H",
        "h"
    ],
    "419": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "AC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "AD": [
        "H",
        "hB"
    ],
    "AE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "AF": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "AG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "AI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "AL": [
        "h",
        "H",
        "hB"
    ],
    "AM": [
        "H",
        "hB"
    ],
    "AO": [
        "H",
        "hB"
    ],
    "AR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "AS": [
        "h",
        "H"
    ],
    "AT": [
        "H",
        "hB"
    ],
    "AU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "AW": [
        "H",
        "hB"
    ],
    "AX": [
        "H"
    ],
    "AZ": [
        "H",
        "hB",
        "h"
    ],
    "BA": [
        "H",
        "hB",
        "h"
    ],
    "BB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BD": [
        "h",
        "hB",
        "H"
    ],
    "BE": [
        "H",
        "hB"
    ],
    "BF": [
        "H",
        "hB"
    ],
    "BG": [
        "H",
        "hB",
        "h"
    ],
    "BH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "BI": [
        "H",
        "h"
    ],
    "BJ": [
        "H",
        "hB"
    ],
    "BL": [
        "H",
        "hB"
    ],
    "BM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BN": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "BO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "BQ": [
        "H"
    ],
    "BR": [
        "H",
        "hB"
    ],
    "BS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "BT": [
        "h",
        "H"
    ],
    "BW": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "BY": [
        "H",
        "h"
    ],
    "BZ": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CA": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "CC": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CD": [
        "hB",
        "H"
    ],
    "CF": [
        "H",
        "h",
        "hB"
    ],
    "CG": [
        "H",
        "hB"
    ],
    "CH": [
        "H",
        "hB",
        "h"
    ],
    "CI": [
        "H",
        "hB"
    ],
    "CK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CL": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "CM": [
        "H",
        "h",
        "hB"
    ],
    "CN": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "CO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "CP": [
        "H"
    ],
    "CR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "CU": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "CV": [
        "H",
        "hB"
    ],
    "CW": [
        "H",
        "hB"
    ],
    "CX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "CY": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "CZ": [
        "H"
    ],
    "DE": [
        "H",
        "hB"
    ],
    "DG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "DJ": [
        "h",
        "H"
    ],
    "DK": [
        "H"
    ],
    "DM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "DO": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "DZ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "EC": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "EE": [
        "H",
        "hB"
    ],
    "EG": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "EH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "ER": [
        "h",
        "H"
    ],
    "ES": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "ET": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "FI": [
        "H"
    ],
    "FJ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "FM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "FO": [
        "H",
        "h"
    ],
    "FR": [
        "H",
        "hB"
    ],
    "GA": [
        "H",
        "hB"
    ],
    "GB": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GD": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GE": [
        "H",
        "hB",
        "h"
    ],
    "GF": [
        "H",
        "hB"
    ],
    "GG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GH": [
        "h",
        "H"
    ],
    "GI": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "GL": [
        "H",
        "h"
    ],
    "GM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GN": [
        "H",
        "hB"
    ],
    "GP": [
        "H",
        "hB"
    ],
    "GQ": [
        "H",
        "hB",
        "h",
        "hb"
    ],
    "GR": [
        "h",
        "H",
        "hb",
        "hB"
    ],
    "GT": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "GU": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "GW": [
        "H",
        "hB"
    ],
    "GY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "HK": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "HN": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "HR": [
        "H",
        "hB"
    ],
    "HU": [
        "H",
        "h"
    ],
    "IC": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "ID": [
        "H"
    ],
    "IE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IL": [
        "H",
        "hB"
    ],
    "IM": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IN": [
        "h",
        "H"
    ],
    "IO": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "IQ": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "IR": [
        "hB",
        "H"
    ],
    "IS": [
        "H"
    ],
    "IT": [
        "H",
        "hB"
    ],
    "JE": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "JM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "JO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "JP": [
        "H",
        "K",
        "h"
    ],
    "KE": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "KG": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KH": [
        "hB",
        "h",
        "H",
        "hb"
    ],
    "KI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KM": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "KN": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KP": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "KW": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "KY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "KZ": [
        "H",
        "hB"
    ],
    "LA": [
        "H",
        "hb",
        "hB",
        "h"
    ],
    "LB": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "LC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LI": [
        "H",
        "hB",
        "h"
    ],
    "LK": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "LR": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "LS": [
        "h",
        "H"
    ],
    "LT": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "LU": [
        "H",
        "h",
        "hB"
    ],
    "LV": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "LY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "MC": [
        "H",
        "hB"
    ],
    "MD": [
        "H",
        "hB"
    ],
    "ME": [
        "H",
        "hB",
        "h"
    ],
    "MF": [
        "H",
        "hB"
    ],
    "MG": [
        "H",
        "h"
    ],
    "MH": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MK": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "ML": [
        "H"
    ],
    "MM": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "MN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MO": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MP": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MQ": [
        "H",
        "hB"
    ],
    "MR": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "MS": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "MT": [
        "H",
        "h"
    ],
    "MU": [
        "H",
        "h"
    ],
    "MV": [
        "H",
        "h"
    ],
    "MW": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "MX": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "MY": [
        "hb",
        "hB",
        "h",
        "H"
    ],
    "MZ": [
        "H",
        "hB"
    ],
    "NA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "NC": [
        "H",
        "hB"
    ],
    "NE": [
        "H"
    ],
    "NF": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NG": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NI": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "NL": [
        "H",
        "hB"
    ],
    "NO": [
        "H",
        "h"
    ],
    "NP": [
        "H",
        "h",
        "hB"
    ],
    "NR": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NU": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "NZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "OM": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PA": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PE": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PF": [
        "H",
        "h",
        "hB"
    ],
    "PG": [
        "h",
        "H"
    ],
    "PH": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PK": [
        "h",
        "hB",
        "H"
    ],
    "PL": [
        "H",
        "h"
    ],
    "PM": [
        "H",
        "hB"
    ],
    "PN": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "PR": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "PS": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "PT": [
        "H",
        "hB"
    ],
    "PW": [
        "h",
        "H"
    ],
    "PY": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "QA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "RE": [
        "H",
        "hB"
    ],
    "RO": [
        "H",
        "hB"
    ],
    "RS": [
        "H",
        "hB",
        "h"
    ],
    "RU": [
        "H"
    ],
    "RW": [
        "H",
        "h"
    ],
    "SA": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SB": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SC": [
        "H",
        "h",
        "hB"
    ],
    "SD": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SE": [
        "H"
    ],
    "SG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SH": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SI": [
        "H",
        "hB"
    ],
    "SJ": [
        "H"
    ],
    "SK": [
        "H"
    ],
    "SL": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "SM": [
        "H",
        "h",
        "hB"
    ],
    "SN": [
        "H",
        "h",
        "hB"
    ],
    "SO": [
        "h",
        "H"
    ],
    "SR": [
        "H",
        "hB"
    ],
    "SS": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "ST": [
        "H",
        "hB"
    ],
    "SV": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "SX": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "SY": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "SZ": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "TC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TD": [
        "h",
        "H",
        "hB"
    ],
    "TF": [
        "H",
        "h",
        "hB"
    ],
    "TG": [
        "H",
        "hB"
    ],
    "TH": [
        "H",
        "h"
    ],
    "TJ": [
        "H",
        "h"
    ],
    "TL": [
        "H",
        "hB",
        "hb",
        "h"
    ],
    "TM": [
        "H",
        "h"
    ],
    "TN": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "TO": [
        "h",
        "H"
    ],
    "TR": [
        "H",
        "hB"
    ],
    "TT": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "TW": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "TZ": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "UA": [
        "H",
        "hB",
        "h"
    ],
    "UG": [
        "hB",
        "hb",
        "H",
        "h"
    ],
    "UM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "US": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "UY": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "UZ": [
        "H",
        "hB",
        "h"
    ],
    "VA": [
        "H",
        "h",
        "hB"
    ],
    "VC": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VE": [
        "h",
        "H",
        "hB",
        "hb"
    ],
    "VG": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VI": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "VN": [
        "H",
        "h"
    ],
    "VU": [
        "h",
        "H"
    ],
    "WF": [
        "H",
        "hB"
    ],
    "WS": [
        "h",
        "H"
    ],
    "XK": [
        "H",
        "hB",
        "h"
    ],
    "YE": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "YT": [
        "H",
        "hB"
    ],
    "ZA": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "ZM": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "ZW": [
        "H",
        "h"
    ],
    "af-ZA": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "ar-001": [
        "h",
        "hB",
        "hb",
        "H"
    ],
    "ca-ES": [
        "H",
        "h",
        "hB"
    ],
    "en-001": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "en-HK": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "en-IL": [
        "H",
        "h",
        "hb",
        "hB"
    ],
    "en-MY": [
        "h",
        "hb",
        "H",
        "hB"
    ],
    "es-BR": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-ES": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "es-GQ": [
        "H",
        "h",
        "hB",
        "hb"
    ],
    "fr-CA": [
        "H",
        "h",
        "hB"
    ],
    "gl-ES": [
        "H",
        "h",
        "hB"
    ],
    "gu-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "hi-IN": [
        "hB",
        "h",
        "H"
    ],
    "it-CH": [
        "H",
        "h",
        "hB"
    ],
    "it-IT": [
        "H",
        "h",
        "hB"
    ],
    "kn-IN": [
        "hB",
        "h",
        "H"
    ],
    "ml-IN": [
        "hB",
        "h",
        "H"
    ],
    "mr-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "pa-IN": [
        "hB",
        "hb",
        "h",
        "H"
    ],
    "ta-IN": [
        "hB",
        "h",
        "hb",
        "H"
    ],
    "te-IN": [
        "hB",
        "h",
        "H"
    ],
    "zu-ZA": [
        "H",
        "hB",
        "hb",
        "h"
    ]
};


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/types.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/types.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SKELETON_TYPE: () => (/* binding */ SKELETON_TYPE),
/* harmony export */   TYPE: () => (/* binding */ TYPE),
/* harmony export */   createLiteralElement: () => (/* binding */ createLiteralElement),
/* harmony export */   createNumberElement: () => (/* binding */ createNumberElement),
/* harmony export */   isArgumentElement: () => (/* binding */ isArgumentElement),
/* harmony export */   isDateElement: () => (/* binding */ isDateElement),
/* harmony export */   isDateTimeSkeleton: () => (/* binding */ isDateTimeSkeleton),
/* harmony export */   isLiteralElement: () => (/* binding */ isLiteralElement),
/* harmony export */   isNumberElement: () => (/* binding */ isNumberElement),
/* harmony export */   isNumberSkeleton: () => (/* binding */ isNumberSkeleton),
/* harmony export */   isPluralElement: () => (/* binding */ isPluralElement),
/* harmony export */   isPoundElement: () => (/* binding */ isPoundElement),
/* harmony export */   isSelectElement: () => (/* binding */ isSelectElement),
/* harmony export */   isTagElement: () => (/* binding */ isTagElement),
/* harmony export */   isTimeElement: () => (/* binding */ isTimeElement)
/* harmony export */ });
var TYPE;
(function (TYPE) {
    /**
     * Raw text
     */
    TYPE[TYPE["literal"] = 0] = "literal";
    /**
     * Variable w/o any format, e.g `var` in `this is a {var}`
     */
    TYPE[TYPE["argument"] = 1] = "argument";
    /**
     * Variable w/ number format
     */
    TYPE[TYPE["number"] = 2] = "number";
    /**
     * Variable w/ date format
     */
    TYPE[TYPE["date"] = 3] = "date";
    /**
     * Variable w/ time format
     */
    TYPE[TYPE["time"] = 4] = "time";
    /**
     * Variable w/ select format
     */
    TYPE[TYPE["select"] = 5] = "select";
    /**
     * Variable w/ plural format
     */
    TYPE[TYPE["plural"] = 6] = "plural";
    /**
     * Only possible within plural argument.
     * This is the `#` symbol that will be substituted with the count.
     */
    TYPE[TYPE["pound"] = 7] = "pound";
    /**
     * XML-like tag
     */
    TYPE[TYPE["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));
var SKELETON_TYPE;
(function (SKELETON_TYPE) {
    SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";
    SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
/**
 * Type Guards
 */
function isLiteralElement(el) {
    return el.type === TYPE.literal;
}
function isArgumentElement(el) {
    return el.type === TYPE.argument;
}
function isNumberElement(el) {
    return el.type === TYPE.number;
}
function isDateElement(el) {
    return el.type === TYPE.date;
}
function isTimeElement(el) {
    return el.type === TYPE.time;
}
function isSelectElement(el) {
    return el.type === TYPE.select;
}
function isPluralElement(el) {
    return el.type === TYPE.plural;
}
function isPoundElement(el) {
    return el.type === TYPE.pound;
}
function isTagElement(el) {
    return el.type === TYPE.tag;
}
function isNumberSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
}
function createLiteralElement(value) {
    return {
        type: TYPE.literal,
        value: value,
    };
}
function createNumberElement(value, style) {
    return {
        type: TYPE.number,
        value: value,
        style: style,
    };
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseDateTimeSkeleton: () => (/* binding */ parseDateTimeSkeleton)
/* harmony export */ });
/**
 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
 * with some tweaks
 */
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */
function parseDateTimeSkeleton(skeleton) {
    var result = {};
    skeleton.replace(DATE_TIME_REGEX, function (match) {
        var len = match.length;
        switch (match[0]) {
            // Era
            case 'G':
                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
            // Year
            case 'y':
                result.year = len === 2 ? '2-digit' : 'numeric';
                break;
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
            // Quarter
            case 'q':
            case 'Q':
                throw new RangeError('`q/Q` (quarter) patterns are not supported');
            // Month
            case 'M':
            case 'L':
                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                break;
            // Week
            case 'w':
            case 'W':
                throw new RangeError('`w/W` (week) patterns are not supported');
            case 'd':
                result.day = ['numeric', '2-digit'][len - 1];
                break;
            case 'D':
            case 'F':
            case 'g':
                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
            // Weekday
            case 'E':
                result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
            case 'e':
                if (len < 4) {
                    throw new RangeError('`e..eee` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            case 'c':
                if (len < 4) {
                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            // Period
            case 'a': // AM, PM
                result.hour12 = true;
                break;
            case 'b': // am, pm, noon, midnight
            case 'B': // flexible day periods
                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
            // Hour
            case 'h':
                result.hourCycle = 'h12';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'H':
                result.hourCycle = 'h23';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'K':
                result.hourCycle = 'h11';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'k':
                result.hourCycle = 'h24';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'j':
            case 'J':
            case 'C':
                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
            // Minute
            case 'm':
                result.minute = ['numeric', '2-digit'][len - 1];
                break;
            // Second
            case 's':
                result.second = ['numeric', '2-digit'][len - 1];
                break;
            case 'S':
            case 'A':
                throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
            // Zone
            case 'z': // 1..3, 4: specific non-location format
                result.timeZoneName = len < 4 ? 'short' : 'long';
                break;
            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
            case 'O': // 1, 4: milliseconds in day short, long
            case 'v': // 1, 4: generic non-location format
            case 'V': // 1, 2, 3, 4: time zone ID or city
            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
        }
        return '';
    });
    return result;
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseDateTimeSkeleton: () => (/* reexport safe */ _date_time__WEBPACK_IMPORTED_MODULE_0__.parseDateTimeSkeleton),
/* harmony export */   parseNumberSkeleton: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeleton),
/* harmony export */   parseNumberSkeletonFromString: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_1__.parseNumberSkeletonFromString)
/* harmony export */ });
/* harmony import */ var _date_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-time */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js");
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/number.js");




/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/number.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/number.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseNumberSkeleton: () => (/* binding */ parseNumberSkeleton),
/* harmony export */   parseNumberSkeletonFromString: () => (/* binding */ parseNumberSkeletonFromString)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _regex_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.generated */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js");


function parseNumberSkeletonFromString(skeleton) {
    if (skeleton.length === 0) {
        throw new Error('Number skeleton cannot be empty');
    }
    // Parse the skeleton
    var stringTokens = skeleton
        .split(_regex_generated__WEBPACK_IMPORTED_MODULE_0__.WHITE_SPACE_REGEX)
        .filter(function (x) { return x.length > 0; });
    var tokens = [];
    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
        var stringToken = stringTokens_1[_i];
        var stemAndOptions = stringToken.split('/');
        if (stemAndOptions.length === 0) {
            throw new Error('Invalid number skeleton');
        }
        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
            var option = options_1[_a];
            if (option.length === 0) {
                throw new Error('Invalid number skeleton');
            }
        }
        tokens.push({ stem: stem, options: options });
    }
    return tokens;
}
function icuUnitToEcma(unit) {
    return unit.replace(/^(.*?)-/, '');
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
    var result = {};
    if (str[str.length - 1] === 'r') {
        result.roundingPriority = 'morePrecision';
    }
    else if (str[str.length - 1] === 's') {
        result.roundingPriority = 'lessPrecision';
    }
    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
        // @@@ case
        if (typeof g2 !== 'string') {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
        }
        // @@@+ case
        else if (g2 === '+') {
            result.minimumSignificantDigits = g1.length;
        }
        // .### case
        else if (g1[0] === '#') {
            result.maximumSignificantDigits = g1.length;
        }
        // .@@## or .@@@ case
        else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits =
                g1.length + (typeof g2 === 'string' ? g2.length : 0);
        }
        return '';
    });
    return result;
}
function parseSign(str) {
    switch (str) {
        case 'sign-auto':
            return {
                signDisplay: 'auto',
            };
        case 'sign-accounting':
        case '()':
            return {
                currencySign: 'accounting',
            };
        case 'sign-always':
        case '+!':
            return {
                signDisplay: 'always',
            };
        case 'sign-accounting-always':
        case '()!':
            return {
                signDisplay: 'always',
                currencySign: 'accounting',
            };
        case 'sign-except-zero':
        case '+?':
            return {
                signDisplay: 'exceptZero',
            };
        case 'sign-accounting-except-zero':
        case '()?':
            return {
                signDisplay: 'exceptZero',
                currencySign: 'accounting',
            };
        case 'sign-never':
        case '+_':
            return {
                signDisplay: 'never',
            };
    }
}
function parseConciseScientificAndEngineeringStem(stem) {
    // Engineering
    var result;
    if (stem[0] === 'E' && stem[1] === 'E') {
        result = {
            notation: 'engineering',
        };
        stem = stem.slice(2);
    }
    else if (stem[0] === 'E') {
        result = {
            notation: 'scientific',
        };
        stem = stem.slice(1);
    }
    if (result) {
        var signDisplay = stem.slice(0, 2);
        if (signDisplay === '+!') {
            result.signDisplay = 'always';
            stem = stem.slice(2);
        }
        else if (signDisplay === '+?') {
            result.signDisplay = 'exceptZero';
            stem = stem.slice(2);
        }
        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
            throw new Error('Malformed concise eng/scientific notation');
        }
        result.minimumIntegerDigits = stem.length;
    }
    return result;
}
function parseNotationOptions(opt) {
    var result = {};
    var signOpts = parseSign(opt);
    if (signOpts) {
        return signOpts;
    }
    return result;
}
/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */
function parseNumberSkeleton(tokens) {
    var result = {};
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        switch (token.stem) {
            case 'percent':
            case '%':
                result.style = 'percent';
                continue;
            case '%x100':
                result.style = 'percent';
                result.scale = 100;
                continue;
            case 'currency':
                result.style = 'currency';
                result.currency = token.options[0];
                continue;
            case 'group-off':
            case ',_':
                result.useGrouping = false;
                continue;
            case 'precision-integer':
            case '.':
                result.maximumFractionDigits = 0;
                continue;
            case 'measure-unit':
            case 'unit':
                result.style = 'unit';
                result.unit = icuUnitToEcma(token.options[0]);
                continue;
            case 'compact-short':
            case 'K':
                result.notation = 'compact';
                result.compactDisplay = 'short';
                continue;
            case 'compact-long':
            case 'KK':
                result.notation = 'compact';
                result.compactDisplay = 'long';
                continue;
            case 'scientific':
                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'engineering':
                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'notation-simple':
                result.notation = 'standard';
                continue;
            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
            case 'unit-width-narrow':
                result.currencyDisplay = 'narrowSymbol';
                result.unitDisplay = 'narrow';
                continue;
            case 'unit-width-short':
                result.currencyDisplay = 'code';
                result.unitDisplay = 'short';
                continue;
            case 'unit-width-full-name':
                result.currencyDisplay = 'name';
                result.unitDisplay = 'long';
                continue;
            case 'unit-width-iso-code':
                result.currencyDisplay = 'symbol';
                continue;
            case 'scale':
                result.scale = parseFloat(token.options[0]);
                continue;
            case 'rounding-mode-floor':
                result.roundingMode = 'floor';
                continue;
            case 'rounding-mode-ceiling':
                result.roundingMode = 'ceil';
                continue;
            case 'rounding-mode-down':
                result.roundingMode = 'trunc';
                continue;
            case 'rounding-mode-up':
                result.roundingMode = 'expand';
                continue;
            case 'rounding-mode-half-even':
                result.roundingMode = 'halfEven';
                continue;
            case 'rounding-mode-half-down':
                result.roundingMode = 'halfTrunc';
                continue;
            case 'rounding-mode-half-up':
                result.roundingMode = 'halfExpand';
                continue;
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            case 'integer-width':
                if (token.options.length > 1) {
                    throw new RangeError('integer-width stems only accept a single optional option');
                }
                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
                    if (g1) {
                        result.minimumIntegerDigits = g2.length;
                    }
                    else if (g3 && g4) {
                        throw new Error('We currently do not support maximum integer digits');
                    }
                    else if (g5) {
                        throw new Error('We currently do not support exact integer digits');
                    }
                    return '';
                });
                continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
            result.minimumIntegerDigits = token.stem.length;
            continue;
        }
        if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            // Precision
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
            // precision-integer case
            if (token.options.length > 1) {
                throw new RangeError('Fraction-precision stems only accept a single optional option');
            }
            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
                // .000* case (before ICU67 it was .000+)
                if (g2 === '*') {
                    result.minimumFractionDigits = g1.length;
                }
                // .### case
                else if (g3 && g3[0] === '#') {
                    result.maximumFractionDigits = g3.length;
                }
                // .00## case
                else if (g4 && g5) {
                    result.minimumFractionDigits = g4.length;
                    result.maximumFractionDigits = g4.length + g5.length;
                }
                else {
                    result.minimumFractionDigits = g1.length;
                    result.maximumFractionDigits = g1.length;
                }
                return '';
            });
            var opt = token.options[0];
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
            if (opt === 'w') {
                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), { trailingZeroDisplay: 'stripIfInteger' });
            }
            else if (opt) {
                result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(opt));
            }
            continue;
        }
        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), parseSignificantPrecision(token.stem));
            continue;
        }
        var signOpts = parseSign(token.stem);
        if (signOpts) {
            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), signOpts);
        }
        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
        if (conciseScientificAndEngineeringOpts) {
            result = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, result), conciseScientificAndEngineeringOpts);
        }
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WHITE_SPACE_REGEX: () => (/* binding */ WHITE_SPACE_REGEX)
/* harmony export */ });
// @generated from regex-gen.ts
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;


/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/core.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/core.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");
/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ "./node_modules/@formatjs/fast-memoize/lib/index.js");
/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/index.js");
/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/formatters.js");
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/




// -- MessageFormat --------------------------------------------------------
function mergeConfig(c1, c2) {
    if (!c2) {
        return c1;
    }
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {
        all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), (c2[k] || {}));
        return all;
    }, {}));
}
function mergeConfigs(defaultConfig, configs) {
    if (!configs) {
        return defaultConfig;
    }
    return Object.keys(defaultConfig).reduce(function (all, k) {
        all[k] = mergeConfig(defaultConfig[k], configs[k]);
        return all;
    }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));
}
function createFastMemoizeCache(store) {
    return {
        create: function () {
            return {
                get: function (key) {
                    return store[key];
                },
                set: function (key, value) {
                    store[key] = value;
                },
            };
        },
    };
}
function createDefaultFormatters(cache) {
    if (cache === void 0) { cache = {
        number: {},
        dateTime: {},
        pluralRules: {},
    }; }
    return {
        getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.number),
            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
        }),
        getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.dateTime),
            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
        }),
        getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([void 0], args, false)))();
        }, {
            cache: createFastMemoizeCache(cache.pluralRules),
            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic,
        }),
    };
}
var IntlMessageFormat = /** @class */ (function () {
    function IntlMessageFormat(message, locales, overrideFormats, opts) {
        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }
        var _this = this;
        this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {},
        };
        this.format = function (values) {
            var parts = _this.formatToParts(values);
            // Hot path for straight simple msg translations
            if (parts.length === 1) {
                return parts[0].value;
            }
            var result = parts.reduce(function (all, part) {
                if (!all.length ||
                    part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal ||
                    typeof all[all.length - 1] !== 'string') {
                    all.push(part.value);
                }
                else {
                    all[all.length - 1] += part.value;
                }
                return all;
            }, []);
            if (result.length <= 1) {
                return result[0] || '';
            }
            return result;
        };
        this.formatToParts = function (values) {
            return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
        };
        this.resolvedOptions = function () {
            var _a;
            return ({
                locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) ||
                    Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],
            });
        };
        this.getAst = function () { return _this.ast; };
        // Defined first because it's used to build the format pattern.
        this.locales = locales;
        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);
        if (typeof message === 'string') {
            this.message = message;
            if (!IntlMessageFormat.__parse) {
                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
            }
            var _a = opts || {}, formatters = _a.formatters, parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, ["formatters"]);
            // Parse string messages into an AST.
            this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), { locale: this.resolvedLocale }));
        }
        else {
            this.ast = message;
        }
        if (!Array.isArray(this.ast)) {
            throw new TypeError('A message must be provided as a String or AST.');
        }
        // Creates a new object with the specified `formats` merged with the default
        // formats.
        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
        this.formatters =
            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
    }
    Object.defineProperty(IntlMessageFormat, "defaultLocale", {
        get: function () {
            if (!IntlMessageFormat.memoizedDefaultLocale) {
                IntlMessageFormat.memoizedDefaultLocale =
                    new Intl.NumberFormat().resolvedOptions().locale;
            }
            return IntlMessageFormat.memoizedDefaultLocale;
        },
        enumerable: false,
        configurable: true
    });
    IntlMessageFormat.memoizedDefaultLocale = null;
    IntlMessageFormat.resolveLocale = function (locales) {
        if (typeof Intl.Locale === 'undefined') {
            return;
        }
        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
        if (supportedLocales.length > 0) {
            return new Intl.Locale(supportedLocales[0]);
        }
        return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);
    };
    IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;
    // Default format options used as the prototype of the `formats` provided to the
    // constructor. These are used when constructing the internal Intl.NumberFormat
    // and Intl.DateTimeFormat instances.
    IntlMessageFormat.formats = {
        number: {
            integer: {
                maximumFractionDigits: 0,
            },
            currency: {
                style: 'currency',
            },
            percent: {
                style: 'percent',
            },
        },
        date: {
            short: {
                month: 'numeric',
                day: 'numeric',
                year: '2-digit',
            },
            medium: {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
            },
            long: {
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
            full: {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
        },
        time: {
            short: {
                hour: 'numeric',
                minute: 'numeric',
            },
            medium: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
            },
            long: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
            full: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
        },
    };
    return IntlMessageFormat;
}());



/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/error.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/error.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),
/* harmony export */   FormatError: () => (/* binding */ FormatError),
/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),
/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),
/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.mjs");

var ErrorCode;
(function (ErrorCode) {
    // When we have a placeholder but no value to format
    ErrorCode["MISSING_VALUE"] = "MISSING_VALUE";
    // When value supplied is invalid
    ErrorCode["INVALID_VALUE"] = "INVALID_VALUE";
    // When we need specific Intl API but it's not available
    ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));
var FormatError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);
    function FormatError(msg, code, originalMessage) {
        var _this = _super.call(this, msg) || this;
        _this.code = code;
        _this.originalMessage = originalMessage;
        return _this;
    }
    FormatError.prototype.toString = function () {
        return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
    };
    return FormatError;
}(Error));

var InvalidValueError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);
    function InvalidValueError(variableId, value, options, originalMessage) {
        return _super.call(this, "Invalid values for \"".concat(variableId, "\": \"").concat(value, "\". Options are \"").concat(Object.keys(options).join('", "'), "\""), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError;
}(FormatError));

var InvalidValueTypeError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);
    function InvalidValueTypeError(value, type, originalMessage) {
        return _super.call(this, "Value for \"".concat(value, "\" must be of type ").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError;
}(FormatError));

var MissingValueError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);
    function MissingValueError(variableId, originalMessage) {
        return _super.call(this, "The intl string context variable \"".concat(variableId, "\" was not provided to the string \"").concat(originalMessage, "\""), ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError;
}(FormatError));



/***/ }),

/***/ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/formatters.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/formatters.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),
/* harmony export */   formatToParts: () => (/* binding */ formatToParts),
/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)
/* harmony export */ });
/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ "./node_modules/@formatjs/intl/node_modules/@formatjs/icu-messageformat-parser/lib/index.js");
/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ "./node_modules/@formatjs/intl/node_modules/intl-messageformat/lib/src/error.js");


var PART_TYPE;
(function (PART_TYPE) {
    PART_TYPE[PART_TYPE["literal"] = 0] = "literal";
    PART_TYPE[PART_TYPE["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));
function mergeLiteral(parts) {
    if (parts.length < 2) {
        return parts;
    }
    return parts.reduce(function (all, part) {
        var lastPart = all[all.length - 1];
        if (!lastPart ||
            lastPart.type !== PART_TYPE.literal ||
            part.type !== PART_TYPE.literal) {
            all.push(part);
        }
        else {
            lastPart.value += part.value;
        }
        return all;
    }, []);
}
function isFormatXMLElementFn(el) {
    return typeof el === 'function';
}
// TODO(skeleton): add skeleton support
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, 
// For debugging
originalMessage) {
    // Hot path for straight simple msg translations
    if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {
        return [
            {
                type: PART_TYPE.literal,
                value: els[0].value,
            },
        ];
    }
    var result = [];
    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
        var el = els_1[_i];
        // Exit early for string parts.
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {
            result.push({
                type: PART_TYPE.literal,
                value: el.value,
            });
            continue;
        }
        // TODO: should this part be literal type?
        // Replace `#` in plural rules with the actual numeric value.
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {
            if (typeof currentPluralValue === 'number') {
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters.getNumberFormat(locales).format(currentPluralValue),
                });
            }
            continue;
        }
        var varName = el.value;
        // Enforce that all required values are provided by the caller.
        if (!(values && varName in values)) {
            throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);
        }
        var value = values[varName];
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {
            if (!value || typeof value === 'string' || typeof value === 'number') {
                value =
                    typeof value === 'string' || typeof value === 'number'
                        ? String(value)
                        : '';
            }
            result.push({
                type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                value: value,
            });
            continue;
        }
        // Recursively format plural and select parts' option — which can be a
        // nested pattern structure. The choosing of the option to use is
        // abstracted-by and delegated-to the part helper object.
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {
            var style = typeof el.style === 'string'
                ? formats.date[el.style]
                : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style)
                    ? el.style.parsedOptions
                    : undefined;
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {
            var style = typeof el.style === 'string'
                ? formats.time[el.style]
                : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style)
                    ? el.style.parsedOptions
                    : formats.time.medium;
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {
            var style = typeof el.style === 'string'
                ? formats.number[el.style]
                : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style)
                    ? el.style.parsedOptions
                    : undefined;
            if (style && style.scale) {
                value =
                    value *
                        (style.scale || 1);
            }
            result.push({
                type: PART_TYPE.literal,
                value: formatters
                    .getNumberFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {
            var children = el.children, value_1 = el.value;
            var formatFn = values[value_1];
            if (!isFormatXMLElementFn(formatFn)) {
                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, 'function', originalMessage);
            }
            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
            var chunks = formatFn(parts.map(function (p) { return p.value; }));
            if (!Array.isArray(chunks)) {
                chunks = [chunks];
            }
            result.push.apply(result, chunks.map(function (c) {
                return {
                    type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                    value: c,
                };
            }));
        }
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {
            var opt = el.options[value] || el.options.other;
            if (!opt) {
                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
            continue;
        }
        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {
            var opt = el.options["=".concat(value)];
            if (!opt) {
                if (!Intl.PluralRules) {
                    throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);
                }
                var rule = formatters
                    .getPluralRules(locales, { type: el.pluralType })
                    .select(value - (el.offset || 0));
                opt = el.options[rule] || el.options.other;
            }
            if (!opt) {
                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
            continue;
        }
    }
    return mergeLiteral(result);
}


/***/ }),

/***/ "./node_modules/antlr4/dist/antlr4.web.mjs":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/dist/antlr4.web.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ATN: () => (/* binding */ Ge),
/* harmony export */   ATNDeserializer: () => (/* binding */ We),
/* harmony export */   BailErrorStrategy: () => (/* binding */ je),
/* harmony export */   CharStream: () => (/* binding */ $e),
/* harmony export */   CharStreams: () => (/* binding */ Xe),
/* harmony export */   CommonToken: () => (/* binding */ Je),
/* harmony export */   CommonTokenStream: () => (/* binding */ Ze),
/* harmony export */   DFA: () => (/* binding */ Qe),
/* harmony export */   DefaultErrorStrategy: () => (/* binding */ tn),
/* harmony export */   DiagnosticErrorListener: () => (/* binding */ en),
/* harmony export */   ErrorListener: () => (/* binding */ nn),
/* harmony export */   FailedPredicateException: () => (/* binding */ sn),
/* harmony export */   InputMismatchException: () => (/* binding */ rn),
/* harmony export */   InputStream: () => (/* binding */ on),
/* harmony export */   Interval: () => (/* binding */ an),
/* harmony export */   IntervalSet: () => (/* binding */ ln),
/* harmony export */   LL1Analyzer: () => (/* binding */ hn),
/* harmony export */   Lexer: () => (/* binding */ cn),
/* harmony export */   LexerATNSimulator: () => (/* binding */ un),
/* harmony export */   NoViableAltException: () => (/* binding */ dn),
/* harmony export */   ParseTreeListener: () => (/* binding */ gn),
/* harmony export */   ParseTreeVisitor: () => (/* binding */ pn),
/* harmony export */   ParseTreeWalker: () => (/* binding */ fn),
/* harmony export */   Parser: () => (/* binding */ xn),
/* harmony export */   ParserATNSimulator: () => (/* binding */ Tn),
/* harmony export */   ParserRuleContext: () => (/* binding */ Sn),
/* harmony export */   PredictionContextCache: () => (/* binding */ mn),
/* harmony export */   PredictionMode: () => (/* binding */ En),
/* harmony export */   RecognitionException: () => (/* binding */ _n),
/* harmony export */   RuleContext: () => (/* binding */ Cn),
/* harmony export */   RuleNode: () => (/* binding */ An),
/* harmony export */   TerminalNode: () => (/* binding */ Nn),
/* harmony export */   Token: () => (/* binding */ kn),
/* harmony export */   TokenStreamRewriter: () => (/* binding */ In),
/* harmony export */   arrayToString: () => (/* binding */ yn),
/* harmony export */   "default": () => (/* binding */ Ln)
/* harmony export */ });
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
var t={763:()=>{}},e={};function n(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={exports:{}};return t[s](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var s={};n.d(s,{MG:()=>$,fr:()=>Lt,sR:()=>Ae,Zo:()=>ke,iH:()=>Re,rt:()=>Pt,jB:()=>be,M8:()=>le,$t:()=>Ce,aq:()=>me,pG:()=>Ot,eP:()=>Te,KU:()=>xe,zW:()=>Ie,IX:()=>E,mY:()=>_,a7:()=>j,JG:()=>Ut,ay:()=>Xt,X2:()=>ee,WU:()=>de,Uw:()=>ge,gw:()=>pe,iX:()=>Fe,re:()=>se,Pg:()=>Be,tD:()=>ie,R$:()=>te,Dj:()=>Ft,m7:()=>U,NZ:()=>P,xo:()=>b,ou:()=>i,qC:()=>ze,mD:()=>d,Ay:()=>Ye});class i{constructor(){this.source=null,this.type=null,this.channel=null,this.start=null,this.stop=null,this.tokenIndex=null,this.line=null,this.column=null,this._text=null}getTokenSource(){return this.source[0]}getInputStream(){return this.source[1]}get text(){return this._text}set text(t){this._text=t}}function r(t,e){if(!Array.isArray(t)||!Array.isArray(e))return!1;if(t===e)return!0;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(!(t[n]===e[n]||t[n].equals&&t[n].equals(e[n])))return!1;return!0}i.INVALID_TYPE=0,i.EPSILON=-2,i.MIN_USER_TOKEN_TYPE=1,i.EOF=-1,i.DEFAULT_CHANNEL=0,i.HIDDEN_CHANNEL=1;const o=Math.round(Math.random()*Math.pow(2,32));function a(t){if(!t)return 0;const e=typeof t,n="string"===e?t:!("object"!==e||!t.toString)&&t.toString();if(!n)return 0;let s,i;const r=3&n.length,a=n.length-r;let l=o;const h=3432918353,c=461845907;let u=0;for(;u<a;)i=255&n.charCodeAt(u)|(255&n.charCodeAt(++u))<<8|(255&n.charCodeAt(++u))<<16|(255&n.charCodeAt(++u))<<24,++u,i=(65535&i)*h+(((i>>>16)*h&65535)<<16)&4294967295,i=i<<15|i>>>17,i=(65535&i)*c+(((i>>>16)*c&65535)<<16)&4294967295,l^=i,l=l<<13|l>>>19,s=5*(65535&l)+((5*(l>>>16)&65535)<<16)&4294967295,l=27492+(65535&s)+((58964+(s>>>16)&65535)<<16);switch(i=0,r){case 3:i^=(255&n.charCodeAt(u+2))<<16;case 2:i^=(255&n.charCodeAt(u+1))<<8;case 1:i^=255&n.charCodeAt(u),i=(65535&i)*h+(((i>>>16)*h&65535)<<16)&4294967295,i=i<<15|i>>>17,i=(65535&i)*c+(((i>>>16)*c&65535)<<16)&4294967295,l^=i}return l^=n.length,l^=l>>>16,l=2246822507*(65535&l)+((2246822507*(l>>>16)&65535)<<16)&4294967295,l^=l>>>13,l=3266489909*(65535&l)+((3266489909*(l>>>16)&65535)<<16)&4294967295,l^=l>>>16,l>>>0}class l{constructor(){this.count=0,this.hash=0}update(){for(let t=0;t<arguments.length;t++){const e=arguments[t];if(null!=e)if(Array.isArray(e))this.update.apply(this,e);else{let t=0;switch(typeof e){case"undefined":case"function":continue;case"number":case"boolean":t=e;break;case"string":t=a(e);break;default:e.updateHashCode?e.updateHashCode(this):console.log("No updateHashCode for "+e.toString());continue}t*=3432918353,t=t<<15|t>>>17,t*=461845907,this.count=this.count+1;let n=this.hash^t;n=n<<13|n>>>19,n=5*n+3864292196,this.hash=n}}}finish(){let t=this.hash^4*this.count;return t^=t>>>16,t*=2246822507,t^=t>>>13,t*=3266489909,t^=t>>>16,t}static hashStuff(){const t=new l;return t.update.apply(t,arguments),t.finish()}}function h(t){return t?"string"==typeof t?a(t):t.hashCode():-1}function c(t,e){return t&&t.equals?t.equals(e):t===e}function u(t){return null===t?"null":t}function d(t){return Array.isArray(t)?"["+t.map(u).join(", ")+"]":"null"}class g{constructor(t,e){this.buckets=new Array(16),this.threshold=Math.floor(12),this.itemCount=0,this.hashFunction=t||h,this.equalsFunction=e||c}get(t){if(null==t)return t;const e=this._getBucket(t);if(!e)return null;for(const n of e)if(this.equalsFunction(n,t))return n;return null}add(t){return this.getOrAdd(t)===t}getOrAdd(t){this._expand();const e=this._getSlot(t);let n=this.buckets[e];if(!n)return n=[t],this.buckets[e]=n,this.itemCount++,t;for(const e of n)if(this.equalsFunction(e,t))return e;return n.push(t),this.itemCount++,t}has(t){return null!=this.get(t)}values(){return this.buckets.filter((t=>null!=t)).flat(1)}toString(){return d(this.values())}get length(){return this.itemCount}_getSlot(t){return this.hashFunction(t)&this.buckets.length-1}_getBucket(t){return this.buckets[this._getSlot(t)]}_expand(){if(this.itemCount<=this.threshold)return;const t=this.buckets,e=2*this.buckets.length;this.buckets=new Array(e),this.threshold=Math.floor(.75*e);for(const e of t)if(e)for(const t of e){const e=this._getSlot(t);let n=this.buckets[e];n||(n=[],this.buckets[e]=n),n.push(t)}}}class p{hashCode(){const t=new l;return this.updateHashCode(t),t.finish()}evaluate(t,e){}evalPrecedence(t,e){return this}static andContext(t,e){if(null===t||t===p.NONE)return e;if(null===e||e===p.NONE)return t;const n=new f(t,e);return 1===n.opnds.length?n.opnds[0]:n}static orContext(t,e){if(null===t)return e;if(null===e)return t;if(t===p.NONE||e===p.NONE)return p.NONE;const n=new x(t,e);return 1===n.opnds.length?n.opnds[0]:n}}class f extends p{constructor(t,e){super();const n=new g;t instanceof f?t.opnds.map((function(t){n.add(t)})):n.add(t),e instanceof f?e.opnds.map((function(t){n.add(t)})):n.add(e);const s=T(n);if(s.length>0){let t=null;s.map((function(e){(null===t||e.precedence<t.precedence)&&(t=e)})),n.add(t)}this.opnds=Array.from(n.values())}equals(t){return this===t||t instanceof f&&r(this.opnds,t.opnds)}updateHashCode(t){t.update(this.opnds,"AND")}evaluate(t,e){for(let n=0;n<this.opnds.length;n++)if(!this.opnds[n].evaluate(t,e))return!1;return!0}evalPrecedence(t,e){let n=!1;const s=[];for(let i=0;i<this.opnds.length;i++){const r=this.opnds[i],o=r.evalPrecedence(t,e);if(n|=o!==r,null===o)return null;o!==p.NONE&&s.push(o)}if(!n)return this;if(0===s.length)return p.NONE;let i=null;return s.map((function(t){i=null===i?t:p.andContext(i,t)})),i}toString(){const t=this.opnds.map((t=>t.toString()));return(t.length>3?t.slice(3):t).join("&&")}}class x extends p{constructor(t,e){super();const n=new g;t instanceof x?t.opnds.map((function(t){n.add(t)})):n.add(t),e instanceof x?e.opnds.map((function(t){n.add(t)})):n.add(e);const s=T(n);if(s.length>0){const t=s.sort((function(t,e){return t.compareTo(e)})),e=t[t.length-1];n.add(e)}this.opnds=Array.from(n.values())}equals(t){return this===t||t instanceof x&&r(this.opnds,t.opnds)}updateHashCode(t){t.update(this.opnds,"OR")}evaluate(t,e){for(let n=0;n<this.opnds.length;n++)if(this.opnds[n].evaluate(t,e))return!0;return!1}evalPrecedence(t,e){let n=!1;const s=[];for(let i=0;i<this.opnds.length;i++){const r=this.opnds[i],o=r.evalPrecedence(t,e);if(n|=o!==r,o===p.NONE)return p.NONE;null!==o&&s.push(o)}if(!n)return this;if(0===s.length)return null;return s.map((function(t){return t})),null}toString(){const t=this.opnds.map((t=>t.toString()));return(t.length>3?t.slice(3):t).join("||")}}function T(t){const e=[];return t.values().map((function(t){t instanceof p.PrecedencePredicate&&e.push(t)})),e}function S(t,e){if(null===t){const t={state:null,alt:null,context:null,semanticContext:null};return e&&(t.reachesIntoOuterContext=0),t}{const n={};return n.state=t.state||null,n.alt=void 0===t.alt?null:t.alt,n.context=t.context||null,n.semanticContext=t.semanticContext||null,e&&(n.reachesIntoOuterContext=t.reachesIntoOuterContext||0,n.precedenceFilterSuppressed=t.precedenceFilterSuppressed||!1),n}}class m{constructor(t,e){this.checkContext(t,e),t=S(t),e=S(e,!0),this.state=null!==t.state?t.state:e.state,this.alt=null!==t.alt?t.alt:e.alt,this.context=null!==t.context?t.context:e.context,this.semanticContext=null!==t.semanticContext?t.semanticContext:null!==e.semanticContext?e.semanticContext:p.NONE,this.reachesIntoOuterContext=e.reachesIntoOuterContext,this.precedenceFilterSuppressed=e.precedenceFilterSuppressed}checkContext(t,e){null!==t.context&&void 0!==t.context||null!==e&&null!==e.context&&void 0!==e.context||(this.context=null)}hashCode(){const t=new l;return this.updateHashCode(t),t.finish()}updateHashCode(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext)}equals(t){return this===t||t instanceof m&&this.state.stateNumber===t.state.stateNumber&&this.alt===t.alt&&(null===this.context?null===t.context:this.context.equals(t.context))&&this.semanticContext.equals(t.semanticContext)&&this.precedenceFilterSuppressed===t.precedenceFilterSuppressed}hashCodeForConfigSet(){const t=new l;return t.update(this.state.stateNumber,this.alt,this.semanticContext),t.finish()}equalsForConfigSet(t){return this===t||t instanceof m&&this.state.stateNumber===t.state.stateNumber&&this.alt===t.alt&&this.semanticContext.equals(t.semanticContext)}toString(){return"("+this.state+","+this.alt+(null!==this.context?",["+this.context.toString()+"]":"")+(this.semanticContext!==p.NONE?","+this.semanticContext.toString():"")+(this.reachesIntoOuterContext>0?",up="+this.reachesIntoOuterContext:"")+")"}}class E{constructor(t,e){this.start=t,this.stop=e}clone(){return new E(this.start,this.stop)}contains(t){return t>=this.start&&t<this.stop}toString(){return this.start===this.stop-1?this.start.toString():this.start.toString()+".."+(this.stop-1).toString()}get length(){return this.stop-this.start}}E.INVALID_INTERVAL=new E(-1,-2);class _{constructor(){this.intervals=null,this.readOnly=!1}first(t){return null===this.intervals||0===this.intervals.length?i.INVALID_TYPE:this.intervals[0].start}addOne(t){this.addInterval(new E(t,t+1))}addRange(t,e){this.addInterval(new E(t,e+1))}addInterval(t){if(null===this.intervals)this.intervals=[],this.intervals.push(t.clone());else{for(let e=0;e<this.intervals.length;e++){const n=this.intervals[e];if(t.stop<n.start)return void this.intervals.splice(e,0,t);if(t.stop===n.start)return void(this.intervals[e]=new E(t.start,n.stop));if(t.start<=n.stop)return this.intervals[e]=new E(Math.min(n.start,t.start),Math.max(n.stop,t.stop)),void this.reduce(e)}this.intervals.push(t.clone())}}addSet(t){return null!==t.intervals&&t.intervals.forEach((t=>this.addInterval(t)),this),this}reduce(t){if(t<this.intervals.length-1){const e=this.intervals[t],n=this.intervals[t+1];e.stop>=n.stop?(this.intervals.splice(t+1,1),this.reduce(t)):e.stop>=n.start&&(this.intervals[t]=new E(e.start,n.stop),this.intervals.splice(t+1,1))}}complement(t,e){const n=new _;return n.addInterval(new E(t,e+1)),null!==this.intervals&&this.intervals.forEach((t=>n.removeRange(t))),n}contains(t){if(null===this.intervals)return!1;for(let e=0;e<this.intervals.length;e++)if(this.intervals[e].contains(t))return!0;return!1}removeRange(t){if(t.start===t.stop-1)this.removeOne(t.start);else if(null!==this.intervals){let e=0;for(let n=0;n<this.intervals.length;n++){const n=this.intervals[e];if(t.stop<=n.start)return;if(t.start>n.start&&t.stop<n.stop){this.intervals[e]=new E(n.start,t.start);const s=new E(t.stop,n.stop);return void this.intervals.splice(e,0,s)}t.start<=n.start&&t.stop>=n.stop?(this.intervals.splice(e,1),e-=1):t.start<n.stop?this.intervals[e]=new E(n.start,t.start):t.stop<n.stop&&(this.intervals[e]=new E(t.stop,n.stop)),e+=1}}}removeOne(t){if(null!==this.intervals)for(let e=0;e<this.intervals.length;e++){const n=this.intervals[e];if(t<n.start)return;if(t===n.start&&t===n.stop-1)return void this.intervals.splice(e,1);if(t===n.start)return void(this.intervals[e]=new E(n.start+1,n.stop));if(t===n.stop-1)return void(this.intervals[e]=new E(n.start,n.stop-1));if(t<n.stop-1){const s=new E(n.start,t);return n.start=t+1,void this.intervals.splice(e,0,s)}}}toString(t,e,n){return t=t||null,e=e||null,n=n||!1,null===this.intervals?"{}":null!==t||null!==e?this.toTokenString(t,e):n?this.toCharString():this.toIndexString()}toCharString(){const t=[];for(let e=0;e<this.intervals.length;e++){const n=this.intervals[e];n.stop===n.start+1?n.start===i.EOF?t.push("<EOF>"):t.push("'"+String.fromCharCode(n.start)+"'"):t.push("'"+String.fromCharCode(n.start)+"'..'"+String.fromCharCode(n.stop-1)+"'")}return t.length>1?"{"+t.join(", ")+"}":t[0]}toIndexString(){const t=[];for(let e=0;e<this.intervals.length;e++){const n=this.intervals[e];n.stop===n.start+1?n.start===i.EOF?t.push("<EOF>"):t.push(n.start.toString()):t.push(n.start.toString()+".."+(n.stop-1).toString())}return t.length>1?"{"+t.join(", ")+"}":t[0]}toTokenString(t,e){const n=[];for(let s=0;s<this.intervals.length;s++){const i=this.intervals[s];for(let s=i.start;s<i.stop;s++)n.push(this.elementName(t,e,s))}return n.length>1?"{"+n.join(", ")+"}":n[0]}elementName(t,e,n){return n===i.EOF?"<EOF>":n===i.EPSILON?"<EPSILON>":t[n]||e[n]}get length(){return this.intervals.map((t=>t.length)).reduce(((t,e)=>t+e))}}class C{constructor(){this.atn=null,this.stateNumber=C.INVALID_STATE_NUMBER,this.stateType=null,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.nextTokenWithinRule=null}toString(){return this.stateNumber}equals(t){return t instanceof C&&this.stateNumber===t.stateNumber}isNonGreedyExitState(){return!1}addTransition(t,e){void 0===e&&(e=-1),0===this.transitions.length?this.epsilonOnlyTransitions=t.isEpsilon:this.epsilonOnlyTransitions!==t.isEpsilon&&(this.epsilonOnlyTransitions=!1),-1===e?this.transitions.push(t):this.transitions.splice(e,1,t)}}C.INVALID_TYPE=0,C.BASIC=1,C.RULE_START=2,C.BLOCK_START=3,C.PLUS_BLOCK_START=4,C.STAR_BLOCK_START=5,C.TOKEN_START=6,C.RULE_STOP=7,C.BLOCK_END=8,C.STAR_LOOP_BACK=9,C.STAR_LOOP_ENTRY=10,C.PLUS_LOOP_BACK=11,C.LOOP_END=12,C.serializationNames=["INVALID","BASIC","RULE_START","BLOCK_START","PLUS_BLOCK_START","STAR_BLOCK_START","TOKEN_START","RULE_STOP","BLOCK_END","STAR_LOOP_BACK","STAR_LOOP_ENTRY","PLUS_LOOP_BACK","LOOP_END"],C.INVALID_STATE_NUMBER=-1;class A extends C{constructor(){return super(),this.stateType=C.RULE_STOP,this}}class N{constructor(t){if(null==t)throw"target cannot be null.";this.target=t,this.isEpsilon=!1,this.label=null}}N.EPSILON=1,N.RANGE=2,N.RULE=3,N.PREDICATE=4,N.ATOM=5,N.ACTION=6,N.SET=7,N.NOT_SET=8,N.WILDCARD=9,N.PRECEDENCE=10,N.serializationNames=["INVALID","EPSILON","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE"],N.serializationTypes={EpsilonTransition:N.EPSILON,RangeTransition:N.RANGE,RuleTransition:N.RULE,PredicateTransition:N.PREDICATE,AtomTransition:N.ATOM,ActionTransition:N.ACTION,SetTransition:N.SET,NotSetTransition:N.NOT_SET,WildcardTransition:N.WILDCARD,PrecedencePredicateTransition:N.PRECEDENCE};class k extends N{constructor(t,e,n,s){super(t),this.ruleIndex=e,this.precedence=n,this.followState=s,this.serializationType=N.RULE,this.isEpsilon=!0}matches(t,e,n){return!1}}class I extends N{constructor(t,e){super(t),this.serializationType=N.SET,null!=e?this.label=e:(this.label=new _,this.label.addOne(i.INVALID_TYPE))}matches(t,e,n){return this.label.contains(t)}toString(){return this.label.toString()}}class y extends I{constructor(t,e){super(t,e),this.serializationType=N.NOT_SET}matches(t,e,n){return t>=e&&t<=n&&!super.matches(t,e,n)}toString(){return"~"+super.toString()}}class L extends N{constructor(t){super(t),this.serializationType=N.WILDCARD}matches(t,e,n){return t>=e&&t<=n}toString(){return"."}}class O extends N{constructor(t){super(t)}}class R{}class w extends R{}class v extends w{}class P extends v{get ruleContext(){throw new Error("missing interface implementation")}}class b extends v{}class D extends b{}const F={toStringTree:function(t,e,n){e=e||null,null!==(n=n||null)&&(e=n.ruleNames);let s=F.getNodeText(t,e);s=function(t){return t=t.replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r")}(s);const i=t.getChildCount();if(0===i)return s;let r="("+s+" ";i>0&&(s=F.toStringTree(t.getChild(0),e),r=r.concat(s));for(let n=1;n<i;n++)s=F.toStringTree(t.getChild(n),e),r=r.concat(" "+s);return r=r.concat(")"),r},getNodeText:function(t,e,n){if(e=e||null,null!==(n=n||null)&&(e=n.ruleNames),null!==e){if(t instanceof P){const n=t.ruleContext.getAltNumber();return 0!=n?e[t.ruleIndex]+":"+n:e[t.ruleIndex]}if(t instanceof D)return t.toString();if(t instanceof b&&null!==t.symbol)return t.symbol.text}const s=t.getPayload();return s instanceof i?s.text:t.getPayload().toString()},getChildren:function(t){const e=[];for(let n=0;n<t.getChildCount();n++)e.push(t.getChild(n));return e},getAncestors:function(t){let e=[];for(t=t.getParent();null!==t;)e=[t].concat(e),t=t.getParent();return e},findAllTokenNodes:function(t,e){return F.findAllNodes(t,e,!0)},findAllRuleNodes:function(t,e){return F.findAllNodes(t,e,!1)},findAllNodes:function(t,e,n){const s=[];return F._findAllNodes(t,e,n,s),s},_findAllNodes:function(t,e,n,s){n&&t instanceof b?t.symbol.type===e&&s.push(t):!n&&t instanceof P&&t.ruleIndex===e&&s.push(t);for(let i=0;i<t.getChildCount();i++)F._findAllNodes(t.getChild(i),e,n,s)},descendants:function(t){let e=[t];for(let n=0;n<t.getChildCount();n++)e=e.concat(F.descendants(t.getChild(n)));return e}},M=F;class U extends P{constructor(t,e){super(),this.parentCtx=t||null,this.invokingState=e||-1}depth(){let t=0,e=this;for(;null!==e;)e=e.parentCtx,t+=1;return t}isEmpty(){return-1===this.invokingState}getSourceInterval(){return E.INVALID_INTERVAL}get ruleContext(){return this}getPayload(){return this}getText(){return 0===this.getChildCount()?"":this.children.map((function(t){return t.getText()})).join("")}getAltNumber(){return 0}setAltNumber(t){}getChild(t){return null}getChildCount(){return 0}accept(t){return t.visitChildren(this)}toStringTree(t,e){return M.toStringTree(this,t,e)}toString(t,e){t=t||null,e=e||null;let n=this,s="[";for(;null!==n&&n!==e;){if(null===t)n.isEmpty()||(s+=n.invokingState);else{const e=n.ruleIndex;s+=e>=0&&e<t.length?t[e]:""+e}null===n.parentCtx||null===t&&n.parentCtx.isEmpty()||(s+=" "),n=n.parentCtx}return s+="]",s}}class B{constructor(t){this.cachedHashCode=t}isEmpty(){return this===B.EMPTY}hasEmptyPath(){return this.getReturnState(this.length-1)===B.EMPTY_RETURN_STATE}hashCode(){return this.cachedHashCode}updateHashCode(t){t.update(this.cachedHashCode)}}B.EMPTY=null,B.EMPTY_RETURN_STATE=2147483647,B.globalNodeCount=1,B.id=B.globalNodeCount,B.trace_atn_sim=!1;class z extends B{constructor(t,e){const n=new l;return n.update(t,e),super(n.finish()),this.parents=t,this.returnStates=e,this}isEmpty(){return this.returnStates[0]===B.EMPTY_RETURN_STATE}getParent(t){return this.parents[t]}getReturnState(t){return this.returnStates[t]}equals(t){return this===t||t instanceof z&&this.hashCode()===t.hashCode()&&r(this.returnStates,t.returnStates)&&r(this.parents,t.parents)}toString(){if(this.isEmpty())return"[]";{let t="[";for(let e=0;e<this.returnStates.length;e++)e>0&&(t+=", "),this.returnStates[e]!==B.EMPTY_RETURN_STATE?(t+=this.returnStates[e],null!==this.parents[e]?t=t+" "+this.parents[e]:t+="null"):t+="$";return t+"]"}}get length(){return this.returnStates.length}}class V extends B{constructor(t,e){let n=0;const s=new l;null!==t?s.update(t,e):s.update(1),n=s.finish(),super(n),this.parentCtx=t,this.returnState=e}getParent(t){return this.parentCtx}getReturnState(t){return this.returnState}equals(t){return this===t||t instanceof V&&this.hashCode()===t.hashCode()&&this.returnState===t.returnState&&(null==this.parentCtx?null==t.parentCtx:this.parentCtx.equals(t.parentCtx))}toString(){const t=null===this.parentCtx?"":this.parentCtx.toString();return 0===t.length?this.returnState===B.EMPTY_RETURN_STATE?"$":""+this.returnState:this.returnState+" "+t}get length(){return 1}static create(t,e){return e===B.EMPTY_RETURN_STATE&&null===t?B.EMPTY:new V(t,e)}}class q extends V{constructor(){super(null,B.EMPTY_RETURN_STATE)}isEmpty(){return!0}getParent(t){return null}getReturnState(t){return this.returnState}equals(t){return this===t}toString(){return"$"}}B.EMPTY=new q;class H{constructor(t,e){this.buckets=new Array(16),this.threshold=Math.floor(12),this.itemCount=0,this.hashFunction=t||h,this.equalsFunction=e||c}set(t,e){this._expand();const n=this._getSlot(t);let s=this.buckets[n];if(!s)return s=[[t,e]],this.buckets[n]=s,this.itemCount++,e;const i=s.find((e=>this.equalsFunction(e[0],t)),this);if(i){const t=i[1];return i[1]=e,t}return s.push([t,e]),this.itemCount++,e}containsKey(t){const e=this._getBucket(t);return!!e&&!!e.find((e=>this.equalsFunction(e[0],t)),this)}get(t){const e=this._getBucket(t);if(!e)return null;const n=e.find((e=>this.equalsFunction(e[0],t)),this);return n?n[1]:null}entries(){return this.buckets.filter((t=>null!=t)).flat(1)}getKeys(){return this.entries().map((t=>t[0]))}getValues(){return this.entries().map((t=>t[1]))}toString(){return"["+this.entries().map((t=>"{"+t[0]+":"+t[1]+"}")).join(", ")+"]"}get length(){return this.itemCount}_getSlot(t){return this.hashFunction(t)&this.buckets.length-1}_getBucket(t){return this.buckets[this._getSlot(t)]}_expand(){if(this.itemCount<=this.threshold)return;const t=this.buckets,e=2*this.buckets.length;this.buckets=new Array(e),this.threshold=Math.floor(.75*e);for(const e of t)if(e)for(const t of e){const e=this._getSlot(t[0]);let n=this.buckets[e];n||(n=[],this.buckets[e]=n),n.push(t)}}}function K(t,e){if(null==e&&(e=U.EMPTY),null===e.parentCtx||e===U.EMPTY)return B.EMPTY;const n=K(t,e.parentCtx),s=t.states[e.invokingState].transitions[0];return V.create(n,s.followState.stateNumber)}function Y(t,e,n){if(t.isEmpty())return t;let s=n.get(t)||null;if(null!==s)return s;if(s=e.get(t),null!==s)return n.set(t,s),s;let i=!1,r=[];for(let s=0;s<r.length;s++){const o=Y(t.getParent(s),e,n);if(i||o!==t.getParent(s)){if(!i){r=[];for(let e=0;e<t.length;e++)r[e]=t.getParent(e);i=!0}r[s]=o}}if(!i)return e.add(t),n.set(t,t),t;let o=null;return o=0===r.length?B.EMPTY:1===r.length?V.create(r[0],t.getReturnState(0)):new z(r,t.returnStates),e.add(o),n.set(o,o),n.set(t,o),o}function G(t,e,n,s){if(t===e)return t;if(t instanceof V&&e instanceof V)return function(t,e,n,s){if(null!==s){let n=s.get(t,e);if(null!==n)return n;if(n=s.get(e,t),null!==n)return n}const i=function(t,e,n){if(n){if(t===B.EMPTY)return B.EMPTY;if(e===B.EMPTY)return B.EMPTY}else{if(t===B.EMPTY&&e===B.EMPTY)return B.EMPTY;if(t===B.EMPTY){const t=[e.returnState,B.EMPTY_RETURN_STATE],n=[e.parentCtx,null];return new z(n,t)}if(e===B.EMPTY){const e=[t.returnState,B.EMPTY_RETURN_STATE],n=[t.parentCtx,null];return new z(n,e)}}return null}(t,e,n);if(null!==i)return null!==s&&s.set(t,e,i),i;if(t.returnState===e.returnState){const i=G(t.parentCtx,e.parentCtx,n,s);if(i===t.parentCtx)return t;if(i===e.parentCtx)return e;const r=V.create(i,t.returnState);return null!==s&&s.set(t,e,r),r}{let n=null;if((t===e||null!==t.parentCtx&&t.parentCtx===e.parentCtx)&&(n=t.parentCtx),null!==n){const i=[t.returnState,e.returnState];t.returnState>e.returnState&&(i[0]=e.returnState,i[1]=t.returnState);const r=new z([n,n],i);return null!==s&&s.set(t,e,r),r}const i=[t.returnState,e.returnState];let r=[t.parentCtx,e.parentCtx];t.returnState>e.returnState&&(i[0]=e.returnState,i[1]=t.returnState,r=[e.parentCtx,t.parentCtx]);const o=new z(r,i);return null!==s&&s.set(t,e,o),o}}(t,e,n,s);if(n){if(t instanceof q)return t;if(e instanceof q)return e}return t instanceof V&&(t=new z([t.getParent()],[t.returnState])),e instanceof V&&(e=new z([e.getParent()],[e.returnState])),function(t,e,n,s){if(null!==s){let n=s.get(t,e);if(null!==n)return B.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> previous"),n;if(n=s.get(e,t),null!==n)return B.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> previous"),n}let i=0,r=0,o=0,a=new Array(t.returnStates.length+e.returnStates.length).fill(0),l=new Array(t.returnStates.length+e.returnStates.length).fill(null);for(;i<t.returnStates.length&&r<e.returnStates.length;){const h=t.parents[i],c=e.parents[r];if(t.returnStates[i]===e.returnStates[r]){const e=t.returnStates[i];e===B.EMPTY_RETURN_STATE&&null===h&&null===c||null!==h&&null!==c&&h===c?(l[o]=h,a[o]=e):(l[o]=G(h,c,n,s),a[o]=e),i+=1,r+=1}else t.returnStates[i]<e.returnStates[r]?(l[o]=h,a[o]=t.returnStates[i],i+=1):(l[o]=c,a[o]=e.returnStates[r],r+=1);o+=1}if(i<t.returnStates.length)for(let e=i;e<t.returnStates.length;e++)l[o]=t.parents[e],a[o]=t.returnStates[e],o+=1;else for(let t=r;t<e.returnStates.length;t++)l[o]=e.parents[t],a[o]=e.returnStates[t],o+=1;if(o<l.length){if(1===o){const n=V.create(l[0],a[0]);return null!==s&&s.set(t,e,n),n}l=l.slice(0,o),a=a.slice(0,o)}const h=new z(l,a);return h.equals(t)?(null!==s&&s.set(t,e,t),B.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> a"),t):h.equals(e)?(null!==s&&s.set(t,e,e),B.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> b"),e):(function(t){const e=new H;for(let n=0;n<t.length;n++){const s=t[n];e.containsKey(s)||e.set(s,s)}for(let n=0;n<t.length;n++)t[n]=e.get(t[n])}(l),null!==s&&s.set(t,e,h),B.trace_atn_sim&&console.log("mergeArrays a="+t+",b="+e+" -> "+h),h)}(t,e,n,s)}class W{constructor(){this.data=new Uint32Array(1)}set(t){W._checkIndex(t),this._resize(t),this.data[t>>>5]|=1<<t%32}get(t){W._checkIndex(t);const e=t>>>5;return!(e>=this.data.length||!(this.data[e]&1<<t%32))}clear(t){W._checkIndex(t);const e=t>>>5;e<this.data.length&&(this.data[e]&=~(1<<t))}or(t){const e=Math.min(this.data.length,t.data.length);for(let n=0;n<e;++n)this.data[n]|=t.data[n];if(this.data.length<t.data.length){this._resize((t.data.length<<5)-1);const n=t.data.length;for(let s=e;s<n;++s)this.data[s]=t.data[s]}}values(){const t=new Array(this.length);let e=0;const n=this.data.length;for(let s=0;s<n;++s){let n=this.data[s];for(;0!==n;){const i=n&-n;t[e++]=(s<<5)+W._bitCount(i-1),n^=i}}return t}minValue(){for(let t=0;t<this.data.length;++t){let e=this.data[t];if(0!==e){let n=0;for(;!(1&e);)n++,e>>=1;return n+32*t}}return 0}hashCode(){return l.hashStuff(this.values())}equals(t){return t instanceof W&&r(this.data,t.data)}toString(){return"{"+this.values().join(", ")+"}"}get length(){return this.data.map((t=>W._bitCount(t))).reduce(((t,e)=>t+e),0)}_resize(t){const e=t+32>>>5;if(e<=this.data.length)return;const n=new Uint32Array(e);n.set(this.data),n.fill(0,this.data.length),this.data=n}static _checkIndex(t){if(t<0)throw new RangeError("index cannot be negative")}static _bitCount(t){return t=(t=(858993459&(t-=t>>1&1431655765))+(t>>2&858993459))+(t>>4)&252645135,t+=t>>8,0+(t+=t>>16)&63}}class j{constructor(t){this.atn=t}getDecisionLookahead(t){if(null===t)return null;const e=t.transitions.length,n=[];for(let s=0;s<e;s++){n[s]=new _;const e=new g,i=!1;this._LOOK(t.transition(s).target,null,B.EMPTY,n[s],e,new W,i,!1),(0===n[s].length||n[s].contains(j.HIT_PRED))&&(n[s]=null)}return n}LOOK(t,e,n){const s=new _,i=null!==(n=n||null)?K(t.atn,n):null;return this._LOOK(t,e,i,s,new g,new W,!0,!0),s}_LOOK(t,e,n,s,r,o,a,l){const h=new m({state:t,alt:0,context:n},null);if(!r.has(h)){if(r.add(h),t===e){if(null===n)return void s.addOne(i.EPSILON);if(n.isEmpty()&&l)return void s.addOne(i.EOF)}if(t instanceof A){if(null===n)return void s.addOne(i.EPSILON);if(n.isEmpty()&&l)return void s.addOne(i.EOF);if(n!==B.EMPTY){const i=o.get(t.ruleIndex);try{o.clear(t.ruleIndex);for(let t=0;t<n.length;t++){const i=this.atn.states[n.getReturnState(t)];this._LOOK(i,e,n.getParent(t),s,r,o,a,l)}}finally{i&&o.set(t.ruleIndex)}return}}for(let h=0;h<t.transitions.length;h++){const c=t.transitions[h];if(c.constructor===k){if(o.get(c.target.ruleIndex))continue;const t=V.create(n,c.followState.stateNumber);try{o.set(c.target.ruleIndex),this._LOOK(c.target,e,t,s,r,o,a,l)}finally{o.clear(c.target.ruleIndex)}}else if(c instanceof O)a?this._LOOK(c.target,e,n,s,r,o,a,l):s.addOne(j.HIT_PRED);else if(c.isEpsilon)this._LOOK(c.target,e,n,s,r,o,a,l);else if(c.constructor===L)s.addRange(i.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType);else{let t=c.label;null!==t&&(c instanceof y&&(t=t.complement(i.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType)),s.addSet(t))}}}}}j.HIT_PRED=i.INVALID_TYPE;class ${constructor(t,e){this.grammarType=t,this.maxTokenType=e,this.states=[],this.decisionToState=[],this.ruleToStartState=[],this.ruleToStopState=null,this.modeNameToStartState={},this.ruleToTokenType=null,this.lexerActions=null,this.modeToStartState=[]}nextTokensInContext(t,e){return new j(this).LOOK(t,null,e)}nextTokensNoContext(t){return null!==t.nextTokenWithinRule||(t.nextTokenWithinRule=this.nextTokensInContext(t,null),t.nextTokenWithinRule.readOnly=!0),t.nextTokenWithinRule}nextTokens(t,e){return void 0===e?this.nextTokensNoContext(t):this.nextTokensInContext(t,e)}addState(t){null!==t&&(t.atn=this,t.stateNumber=this.states.length),this.states.push(t)}removeState(t){this.states[t.stateNumber]=null}defineDecisionState(t){return this.decisionToState.push(t),t.decision=this.decisionToState.length-1,t.decision}getDecisionState(t){return 0===this.decisionToState.length?null:this.decisionToState[t]}getExpectedTokens(t,e){if(t<0||t>=this.states.length)throw"Invalid state number.";const n=this.states[t];let s=this.nextTokens(n);if(!s.contains(i.EPSILON))return s;const r=new _;for(r.addSet(s),r.removeOne(i.EPSILON);null!==e&&e.invokingState>=0&&s.contains(i.EPSILON);){const t=this.states[e.invokingState].transitions[0];s=this.nextTokens(t.followState),r.addSet(s),r.removeOne(i.EPSILON),e=e.parentCtx}return s.contains(i.EPSILON)&&r.addOne(i.EOF),r}}$.INVALID_ALT_NUMBER=0;class X extends C{constructor(){super(),this.stateType=C.BASIC}}class J extends C{constructor(){return super(),this.decision=-1,this.nonGreedy=!1,this}}class Z extends J{constructor(){return super(),this.endState=null,this}}class Q extends C{constructor(){return super(),this.stateType=C.BLOCK_END,this.startState=null,this}}class tt extends C{constructor(){return super(),this.stateType=C.LOOP_END,this.loopBackState=null,this}}class et extends C{constructor(){return super(),this.stateType=C.RULE_START,this.stopState=null,this.isPrecedenceRule=!1,this}}class nt extends J{constructor(){return super(),this.stateType=C.TOKEN_START,this}}class st extends J{constructor(){return super(),this.stateType=C.PLUS_LOOP_BACK,this}}class it extends C{constructor(){return super(),this.stateType=C.STAR_LOOP_BACK,this}}class rt extends J{constructor(){return super(),this.stateType=C.STAR_LOOP_ENTRY,this.loopBackState=null,this.isPrecedenceDecision=null,this}}class ot extends Z{constructor(){return super(),this.stateType=C.PLUS_BLOCK_START,this.loopBackState=null,this}}class at extends Z{constructor(){return super(),this.stateType=C.STAR_BLOCK_START,this}}class lt extends Z{constructor(){return super(),this.stateType=C.BLOCK_START,this}}class ht extends N{constructor(t,e){super(t),this.label_=e,this.label=this.makeLabel(),this.serializationType=N.ATOM}makeLabel(){const t=new _;return t.addOne(this.label_),t}matches(t,e,n){return this.label_===t}toString(){return this.label_}}class ct extends N{constructor(t,e,n){super(t),this.serializationType=N.RANGE,this.start=e,this.stop=n,this.label=this.makeLabel()}makeLabel(){const t=new _;return t.addRange(this.start,this.stop),t}matches(t,e,n){return t>=this.start&&t<=this.stop}toString(){return"'"+String.fromCharCode(this.start)+"'..'"+String.fromCharCode(this.stop)+"'"}}class ut extends N{constructor(t,e,n,s){super(t),this.serializationType=N.ACTION,this.ruleIndex=e,this.actionIndex=void 0===n?-1:n,this.isCtxDependent=void 0!==s&&s,this.isEpsilon=!0}matches(t,e,n){return!1}toString(){return"action_"+this.ruleIndex+":"+this.actionIndex}}class dt extends N{constructor(t,e){super(t),this.serializationType=N.EPSILON,this.isEpsilon=!0,this.outermostPrecedenceReturn=e}matches(t,e,n){return!1}toString(){return"epsilon"}}class gt extends p{constructor(t,e,n){super(),this.ruleIndex=void 0===t?-1:t,this.predIndex=void 0===e?-1:e,this.isCtxDependent=void 0!==n&&n}evaluate(t,e){const n=this.isCtxDependent?e:null;return t.sempred(n,this.ruleIndex,this.predIndex)}updateHashCode(t){t.update(this.ruleIndex,this.predIndex,this.isCtxDependent)}equals(t){return this===t||t instanceof gt&&this.ruleIndex===t.ruleIndex&&this.predIndex===t.predIndex&&this.isCtxDependent===t.isCtxDependent}toString(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"}}p.NONE=new gt;class pt extends O{constructor(t,e,n,s){super(t),this.serializationType=N.PREDICATE,this.ruleIndex=e,this.predIndex=n,this.isCtxDependent=s,this.isEpsilon=!0}matches(t,e,n){return!1}getPredicate(){return new gt(this.ruleIndex,this.predIndex,this.isCtxDependent)}toString(){return"pred_"+this.ruleIndex+":"+this.predIndex}}class ft extends p{constructor(t){super(),this.precedence=void 0===t?0:t}evaluate(t,e){return t.precpred(e,this.precedence)}evalPrecedence(t,e){return t.precpred(e,this.precedence)?p.NONE:null}compareTo(t){return this.precedence-t.precedence}updateHashCode(t){t.update(this.precedence)}equals(t){return this===t||t instanceof ft&&this.precedence===t.precedence}toString(){return"{"+this.precedence+">=prec}?"}}p.PrecedencePredicate=ft;class xt extends O{constructor(t,e){super(t),this.serializationType=N.PRECEDENCE,this.precedence=e,this.isEpsilon=!0}matches(t,e,n){return!1}getPredicate(){return new ft(this.precedence)}toString(){return this.precedence+" >= _p"}}class Tt{constructor(t){void 0===t&&(t=null),this.readOnly=!1,this.verifyATN=null===t||t.verifyATN,this.generateRuleBypassTransitions=null!==t&&t.generateRuleBypassTransitions}}Tt.defaultOptions=new Tt,Tt.defaultOptions.readOnly=!0;class St{constructor(t){this.actionType=t,this.isPositionDependent=!1}hashCode(){const t=new l;return this.updateHashCode(t),t.finish()}updateHashCode(t){t.update(this.actionType)}equals(t){return this===t}}class mt extends St{constructor(){super(6)}execute(t){t.skip()}toString(){return"skip"}}mt.INSTANCE=new mt;class Et extends St{constructor(t){super(0),this.channel=t}execute(t){t._channel=this.channel}updateHashCode(t){t.update(this.actionType,this.channel)}equals(t){return this===t||t instanceof Et&&this.channel===t.channel}toString(){return"channel("+this.channel+")"}}class _t extends St{constructor(t,e){super(1),this.ruleIndex=t,this.actionIndex=e,this.isPositionDependent=!0}execute(t){t.action(null,this.ruleIndex,this.actionIndex)}updateHashCode(t){t.update(this.actionType,this.ruleIndex,this.actionIndex)}equals(t){return this===t||t instanceof _t&&this.ruleIndex===t.ruleIndex&&this.actionIndex===t.actionIndex}}class Ct extends St{constructor(){super(3)}execute(t){t.more()}toString(){return"more"}}Ct.INSTANCE=new Ct;class At extends St{constructor(t){super(7),this.type=t}execute(t){t.type=this.type}updateHashCode(t){t.update(this.actionType,this.type)}equals(t){return this===t||t instanceof At&&this.type===t.type}toString(){return"type("+this.type+")"}}class Nt extends St{constructor(t){super(5),this.mode=t}execute(t){t.pushMode(this.mode)}updateHashCode(t){t.update(this.actionType,this.mode)}equals(t){return this===t||t instanceof Nt&&this.mode===t.mode}toString(){return"pushMode("+this.mode+")"}}class kt extends St{constructor(){super(4)}execute(t){t.popMode()}toString(){return"popMode"}}kt.INSTANCE=new kt;class It extends St{constructor(t){super(2),this.mode=t}execute(t){t.setMode(this.mode)}updateHashCode(t){t.update(this.actionType,this.mode)}equals(t){return this===t||t instanceof It&&this.mode===t.mode}toString(){return"mode("+this.mode+")"}}function yt(t,e){const n=[];return n[t-1]=e,n.map((function(t){return e}))}class Lt{constructor(t){null==t&&(t=Tt.defaultOptions),this.deserializationOptions=t,this.stateFactories=null,this.actionFactories=null}deserialize(t){const e=this.reset(t);this.checkVersion(e),e&&this.skipUUID();const n=this.readATN();this.readStates(n,e),this.readRules(n,e),this.readModes(n);const s=[];return this.readSets(n,s,this.readInt.bind(this)),e&&this.readSets(n,s,this.readInt32.bind(this)),this.readEdges(n,s),this.readDecisions(n),this.readLexerActions(n,e),this.markPrecedenceDecisions(n),this.verifyATN(n),this.deserializationOptions.generateRuleBypassTransitions&&1===n.grammarType&&(this.generateRuleBypassTransitions(n),this.verifyATN(n)),n}reset(t){if(3===(t.charCodeAt?t.charCodeAt(0):t[0])){const e=function(t){const e=t.charCodeAt(0);return e>1?e-2:e+65534},n=t.split("").map(e);return n[0]=t.charCodeAt(0),this.data=n,this.pos=0,!0}return this.data=t,this.pos=0,!1}skipUUID(){let t=0;for(;t++<8;)this.readInt()}checkVersion(t){const e=this.readInt();if(!t&&4!==e)throw"Could not deserialize ATN with version "+e+" (expected 4)."}readATN(){const t=this.readInt(),e=this.readInt();return new $(t,e)}readStates(t,e){let n,s,i;const r=[],o=[],a=this.readInt();for(let n=0;n<a;n++){const n=this.readInt();if(n===C.INVALID_TYPE){t.addState(null);continue}let s=this.readInt();e&&65535===s&&(s=-1);const i=this.stateFactory(n,s);if(n===C.LOOP_END){const t=this.readInt();r.push([i,t])}else if(i instanceof Z){const t=this.readInt();o.push([i,t])}t.addState(i)}for(n=0;n<r.length;n++)s=r[n],s[0].loopBackState=t.states[s[1]];for(n=0;n<o.length;n++)s=o[n],s[0].endState=t.states[s[1]];let l=this.readInt();for(n=0;n<l;n++)i=this.readInt(),t.states[i].nonGreedy=!0;let h=this.readInt();for(n=0;n<h;n++)i=this.readInt(),t.states[i].isPrecedenceRule=!0}readRules(t,e){let n;const s=this.readInt();for(0===t.grammarType&&(t.ruleToTokenType=yt(s,0)),t.ruleToStartState=yt(s,0),n=0;n<s;n++){const s=this.readInt();if(t.ruleToStartState[n]=t.states[s],0===t.grammarType){let s=this.readInt();e&&65535===s&&(s=i.EOF),t.ruleToTokenType[n]=s}}for(t.ruleToStopState=yt(s,0),n=0;n<t.states.length;n++){const e=t.states[n];e instanceof A&&(t.ruleToStopState[e.ruleIndex]=e,t.ruleToStartState[e.ruleIndex].stopState=e)}}readModes(t){const e=this.readInt();for(let n=0;n<e;n++){let e=this.readInt();t.modeToStartState.push(t.states[e])}}readSets(t,e,n){const s=this.readInt();for(let t=0;t<s;t++){const t=new _;e.push(t);const s=this.readInt();0!==this.readInt()&&t.addOne(-1);for(let e=0;e<s;e++){const e=n(),s=n();t.addRange(e,s)}}}readEdges(t,e){let n,s,i,r,o;const a=this.readInt();for(n=0;n<a;n++){const n=this.readInt(),s=this.readInt(),i=this.readInt(),o=this.readInt(),a=this.readInt(),l=this.readInt();r=this.edgeFactory(t,i,n,s,o,a,l,e),t.states[n].addTransition(r)}for(n=0;n<t.states.length;n++)for(i=t.states[n],s=0;s<i.transitions.length;s++){const e=i.transitions[s];if(!(e instanceof k))continue;let n=-1;t.ruleToStartState[e.target.ruleIndex].isPrecedenceRule&&0===e.precedence&&(n=e.target.ruleIndex),r=new dt(e.followState,n),t.ruleToStopState[e.target.ruleIndex].addTransition(r)}for(n=0;n<t.states.length;n++){if(i=t.states[n],i instanceof Z){if(null===i.endState)throw"IllegalState";if(null!==i.endState.startState)throw"IllegalState";i.endState.startState=i}if(i instanceof st)for(s=0;s<i.transitions.length;s++)o=i.transitions[s].target,o instanceof ot&&(o.loopBackState=i);else if(i instanceof it)for(s=0;s<i.transitions.length;s++)o=i.transitions[s].target,o instanceof rt&&(o.loopBackState=i)}}readDecisions(t){const e=this.readInt();for(let n=0;n<e;n++){const e=this.readInt(),s=t.states[e];t.decisionToState.push(s),s.decision=n}}readLexerActions(t,e){if(0===t.grammarType){const n=this.readInt();t.lexerActions=yt(n,null);for(let s=0;s<n;s++){const n=this.readInt();let i=this.readInt();e&&65535===i&&(i=-1);let r=this.readInt();e&&65535===r&&(r=-1),t.lexerActions[s]=this.lexerActionFactory(n,i,r)}}}generateRuleBypassTransitions(t){let e;const n=t.ruleToStartState.length;for(e=0;e<n;e++)t.ruleToTokenType[e]=t.maxTokenType+e+1;for(e=0;e<n;e++)this.generateRuleBypassTransition(t,e)}generateRuleBypassTransition(t,e){let n,s;const i=new lt;i.ruleIndex=e,t.addState(i);const r=new Q;r.ruleIndex=e,t.addState(r),i.endState=r,t.defineDecisionState(i),r.startState=i;let o=null,a=null;if(t.ruleToStartState[e].isPrecedenceRule){for(a=null,n=0;n<t.states.length;n++)if(s=t.states[n],this.stateIsEndStateFor(s,e)){a=s,o=s.loopBackState.transitions[0];break}if(null===o)throw"Couldn't identify final state of the precedence rule prefix section."}else a=t.ruleToStopState[e];for(n=0;n<t.states.length;n++){s=t.states[n];for(let t=0;t<s.transitions.length;t++){const e=s.transitions[t];e!==o&&e.target===a&&(e.target=r)}}const l=t.ruleToStartState[e],h=l.transitions.length;for(;h>0;)i.addTransition(l.transitions[h-1]),l.transitions=l.transitions.slice(-1);t.ruleToStartState[e].addTransition(new dt(i)),r.addTransition(new dt(a));const c=new X;t.addState(c),c.addTransition(new ht(r,t.ruleToTokenType[e])),i.addTransition(new dt(c))}stateIsEndStateFor(t,e){if(t.ruleIndex!==e)return null;if(!(t instanceof rt))return null;const n=t.transitions[t.transitions.length-1].target;return n instanceof tt&&n.epsilonOnlyTransitions&&n.transitions[0].target instanceof A?t:null}markPrecedenceDecisions(t){for(let e=0;e<t.states.length;e++){const n=t.states[e];if(n instanceof rt&&t.ruleToStartState[n.ruleIndex].isPrecedenceRule){const t=n.transitions[n.transitions.length-1].target;t instanceof tt&&t.epsilonOnlyTransitions&&t.transitions[0].target instanceof A&&(n.isPrecedenceDecision=!0)}}}verifyATN(t){if(this.deserializationOptions.verifyATN)for(let e=0;e<t.states.length;e++){const n=t.states[e];if(null!==n)if(this.checkCondition(n.epsilonOnlyTransitions||n.transitions.length<=1),n instanceof ot)this.checkCondition(null!==n.loopBackState);else if(n instanceof rt)if(this.checkCondition(null!==n.loopBackState),this.checkCondition(2===n.transitions.length),n.transitions[0].target instanceof at)this.checkCondition(n.transitions[1].target instanceof tt),this.checkCondition(!n.nonGreedy);else{if(!(n.transitions[0].target instanceof tt))throw"IllegalState";this.checkCondition(n.transitions[1].target instanceof at),this.checkCondition(n.nonGreedy)}else n instanceof it?(this.checkCondition(1===n.transitions.length),this.checkCondition(n.transitions[0].target instanceof rt)):n instanceof tt?this.checkCondition(null!==n.loopBackState):n instanceof et?this.checkCondition(null!==n.stopState):n instanceof Z?this.checkCondition(null!==n.endState):n instanceof Q?this.checkCondition(null!==n.startState):n instanceof J?this.checkCondition(n.transitions.length<=1||n.decision>=0):this.checkCondition(n.transitions.length<=1||n instanceof A)}}checkCondition(t,e){if(!t)throw null==e&&(e="IllegalState"),e}readInt(){return this.data[this.pos++]}readInt32(){return this.readInt()|this.readInt()<<16}edgeFactory(t,e,n,s,r,o,a,l){const h=t.states[s];switch(e){case N.EPSILON:return new dt(h);case N.RANGE:return new ct(h,0!==a?i.EOF:r,o);case N.RULE:return new k(t.states[r],o,a,h);case N.PREDICATE:return new pt(h,r,o,0!==a);case N.PRECEDENCE:return new xt(h,r);case N.ATOM:return new ht(h,0!==a?i.EOF:r);case N.ACTION:return new ut(h,r,o,0!==a);case N.SET:return new I(h,l[r]);case N.NOT_SET:return new y(h,l[r]);case N.WILDCARD:return new L(h);default:throw"The specified transition type: "+e+" is not valid."}}stateFactory(t,e){if(null===this.stateFactories){const t=[];t[C.INVALID_TYPE]=null,t[C.BASIC]=()=>new X,t[C.RULE_START]=()=>new et,t[C.BLOCK_START]=()=>new lt,t[C.PLUS_BLOCK_START]=()=>new ot,t[C.STAR_BLOCK_START]=()=>new at,t[C.TOKEN_START]=()=>new nt,t[C.RULE_STOP]=()=>new A,t[C.BLOCK_END]=()=>new Q,t[C.STAR_LOOP_BACK]=()=>new it,t[C.STAR_LOOP_ENTRY]=()=>new rt,t[C.PLUS_LOOP_BACK]=()=>new st,t[C.LOOP_END]=()=>new tt,this.stateFactories=t}if(t>this.stateFactories.length||null===this.stateFactories[t])throw"The specified state type "+t+" is not valid.";{const n=this.stateFactories[t]();if(null!==n)return n.ruleIndex=e,n}}lexerActionFactory(t,e,n){if(null===this.actionFactories){const t=[];t[0]=(t,e)=>new Et(t),t[1]=(t,e)=>new _t(t,e),t[2]=(t,e)=>new It(t),t[3]=(t,e)=>Ct.INSTANCE,t[4]=(t,e)=>kt.INSTANCE,t[5]=(t,e)=>new Nt(t),t[6]=(t,e)=>mt.INSTANCE,t[7]=(t,e)=>new At(t),this.actionFactories=t}if(t>this.actionFactories.length||null===this.actionFactories[t])throw"The specified lexer action type "+t+" is not valid.";return this.actionFactories[t](e,n)}}class Ot{syntaxError(t,e,n,s,i,r){}reportAmbiguity(t,e,n,s,i,r,o){}reportAttemptingFullContext(t,e,n,s,i,r){}reportContextSensitivity(t,e,n,s,i,r){}}class Rt extends Ot{constructor(){super()}syntaxError(t,e,n,s,i,r){console.error("line "+n+":"+s+" "+i)}}Rt.INSTANCE=new Rt;class wt extends Ot{constructor(t){if(super(),null===t)throw"delegates";return this.delegates=t,this}syntaxError(t,e,n,s,i,r){this.delegates.map((o=>o.syntaxError(t,e,n,s,i,r)))}reportAmbiguity(t,e,n,s,i,r,o){this.delegates.map((a=>a.reportAmbiguity(t,e,n,s,i,r,o)))}reportAttemptingFullContext(t,e,n,s,i,r){this.delegates.map((o=>o.reportAttemptingFullContext(t,e,n,s,i,r)))}reportContextSensitivity(t,e,n,s,i,r){this.delegates.map((o=>o.reportContextSensitivity(t,e,n,s,i,r)))}}class vt{constructor(){this._listeners=[Rt.INSTANCE],this._interp=null,this._stateNumber=-1}checkVersion(t){const e="4.13.2";e!==t&&console.log("ANTLR runtime and generated code versions disagree: "+e+"!="+t)}addErrorListener(t){this._listeners.push(t)}removeErrorListeners(){this._listeners=[]}getLiteralNames(){return Object.getPrototypeOf(this).constructor.literalNames||[]}getSymbolicNames(){return Object.getPrototypeOf(this).constructor.symbolicNames||[]}getTokenNames(){if(!this.tokenNames){const t=this.getLiteralNames(),e=this.getSymbolicNames(),n=t.length>e.length?t.length:e.length;this.tokenNames=[];for(let s=0;s<n;s++)this.tokenNames[s]=t[s]||e[s]||"<INVALID"}return this.tokenNames}getTokenTypeMap(){const t=this.getTokenNames();if(null===t)throw"The current recognizer does not provide a list of token names.";let e=this.tokenTypeMapCache[t];return void 0===e&&(e=t.reduce((function(t,e,n){t[e]=n})),e.EOF=i.EOF,this.tokenTypeMapCache[t]=e),e}getRuleIndexMap(){const t=this.ruleNames;if(null===t)throw"The current recognizer does not provide a list of rule names.";let e=this.ruleIndexMapCache[t];return void 0===e&&(e=t.reduce((function(t,e,n){t[e]=n})),this.ruleIndexMapCache[t]=e),e}getTokenType(t){const e=this.getTokenTypeMap()[t];return void 0!==e?e:i.INVALID_TYPE}getErrorHeader(t){return"line "+t.getOffendingToken().line+":"+t.getOffendingToken().column}getTokenErrorDisplay(t){if(null===t)return"<no token>";let e=t.text;return null===e&&(e=t.type===i.EOF?"<EOF>":"<"+t.type+">"),e=e.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t"),"'"+e+"'"}getErrorListenerDispatch(){return console.warn("Calling deprecated method in Recognizer class: getErrorListenerDispatch()"),this.getErrorListener()}getErrorListener(){return new wt(this._listeners)}sempred(t,e,n){return!0}precpred(t,e){return!0}get atn(){return this._interp.atn}get state(){return this._stateNumber}set state(t){this._stateNumber=t}}vt.tokenTypeMapCache={},vt.ruleIndexMapCache={};class Pt extends i{constructor(t,e,n,s,r){super(),this.source=void 0!==t?t:Pt.EMPTY_SOURCE,this.type=void 0!==e?e:null,this.channel=void 0!==n?n:i.DEFAULT_CHANNEL,this.start=void 0!==s?s:-1,this.stop=void 0!==r?r:-1,this.tokenIndex=-1,null!==this.source[0]?(this.line=t[0].line,this.column=t[0].column):this.column=-1}clone(){const t=new Pt(this.source,this.type,this.channel,this.start,this.stop);return t.tokenIndex=this.tokenIndex,t.line=this.line,t.column=this.column,t.text=this.text,t}cloneWithType(t){const e=new Pt(this.source,t,this.channel,this.start,this.stop);return e.tokenIndex=this.tokenIndex,e.line=this.line,e.column=this.column,t===i.EOF&&(e.text=""),e}toString(){let t=this.text;return t=null!==t?t.replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t"):"<no text>","[@"+this.tokenIndex+","+this.start+":"+this.stop+"='"+t+"',<"+this.type+">"+(this.channel>0?",channel="+this.channel:"")+","+this.line+":"+this.column+"]"}get text(){if(null!==this._text)return this._text;const t=this.getInputStream();if(null===t)return null;const e=t.size;return this.start<e&&this.stop<e?t.getText(this.start,this.stop):"<EOF>"}set text(t){this._text=t}}Pt.EMPTY_SOURCE=[null,null];class bt{}class Dt extends bt{constructor(t){super(),this.copyText=void 0!==t&&t}create(t,e,n,s,i,r,o,a){const l=new Pt(t,e,s,i,r);return l.line=o,l.column=a,null!==n?l.text=n:this.copyText&&null!==t[1]&&(l.text=t[1].getText(i,r)),l}createThin(t,e){const n=new Pt(null,t);return n.text=e,n}}Dt.DEFAULT=new Dt;class Ft extends Error{constructor(t){super(t.message),Error.captureStackTrace&&Error.captureStackTrace(this,Ft),this.message=t.message,this.recognizer=t.recognizer,this.input=t.input,this.ctx=t.ctx,this.offendingToken=null,this.offendingState=-1,null!==this.recognizer&&(this.offendingState=this.recognizer.state)}getExpectedTokens(){return null!==this.recognizer?this.recognizer.atn.getExpectedTokens(this.offendingState,this.ctx):null}toString(){return this.message}}class Mt extends Ft{constructor(t,e,n,s){super({message:"",recognizer:t,input:e,ctx:null}),this.startIndex=n,this.deadEndConfigs=s}toString(){let t="";return this.startIndex>=0&&this.startIndex<this.input.size&&(t=this.input.getText(new E(this.startIndex,this.startIndex))),"LexerNoViableAltException"+t}}class Ut extends vt{constructor(t){super(),this._input=t,this._factory=Dt.DEFAULT,this._tokenFactorySourcePair=[this,t],this._interp=null,this._token=null,this._tokenStartCharIndex=-1,this._tokenStartLine=-1,this._tokenStartColumn=-1,this._hitEOF=!1,this._channel=i.DEFAULT_CHANNEL,this._type=i.INVALID_TYPE,this._modeStack=[],this._mode=Ut.DEFAULT_MODE,this._text=null}reset(){null!==this._input&&this._input.seek(0),this._token=null,this._type=i.INVALID_TYPE,this._channel=i.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartColumn=-1,this._tokenStartLine=-1,this._text=null,this._hitEOF=!1,this._mode=Ut.DEFAULT_MODE,this._modeStack=[],this._interp.reset()}nextToken(){if(null===this._input)throw"nextToken requires a non-null input stream.";const t=this._input.mark();try{for(;;){if(this._hitEOF)return this.emitEOF(),this._token;this._token=null,this._channel=i.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartColumn=this._interp.column,this._tokenStartLine=this._interp.line,this._text=null;let t=!1;for(;;){this._type=i.INVALID_TYPE;let e=Ut.SKIP;try{e=this._interp.match(this._input,this._mode)}catch(t){if(!(t instanceof Ft))throw console.log(t.stack),t;this.notifyListeners(t),this.recover(t)}if(this._input.LA(1)===i.EOF&&(this._hitEOF=!0),this._type===i.INVALID_TYPE&&(this._type=e),this._type===Ut.SKIP){t=!0;break}if(this._type!==Ut.MORE)break}if(!t)return null===this._token&&this.emit(),this._token}}finally{this._input.release(t)}}skip(){this._type=Ut.SKIP}more(){this._type=Ut.MORE}mode(t){console.warn("Calling deprecated method in Lexer class: mode(...)"),this.setMode(t)}setMode(t){this._mode=t}getMode(){return this._mode}getModeStack(){return this._modeStack}pushMode(t){this._interp.debug&&console.log("pushMode "+t),this._modeStack.push(this._mode),this.setMode(t)}popMode(){if(0===this._modeStack.length)throw"Empty Stack";return this._interp.debug&&console.log("popMode back to "+this._modeStack.slice(0,-1)),this.setMode(this._modeStack.pop()),this._mode}emitToken(t){this._token=t}emit(){const t=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.getCharIndex()-1,this._tokenStartLine,this._tokenStartColumn);return this.emitToken(t),t}emitEOF(){const t=this.column,e=this.line,n=this._factory.create(this._tokenFactorySourcePair,i.EOF,null,i.DEFAULT_CHANNEL,this._input.index,this._input.index-1,e,t);return this.emitToken(n),n}getCharIndex(){return this._input.index}getAllTokens(){const t=[];let e=this.nextToken();for(;e.type!==i.EOF;)t.push(e),e=this.nextToken();return t}notifyListeners(t){const e=this._tokenStartCharIndex,n=this._input.index,s=this._input.getText(e,n),i="token recognition error at: '"+this.getErrorDisplay(s)+"'";this.getErrorListener().syntaxError(this,null,this._tokenStartLine,this._tokenStartColumn,i,t)}getErrorDisplay(t){const e=[];for(let n=0;n<t.length;n++)e.push(t[n]);return e.join("")}getErrorDisplayForChar(t){return t.charCodeAt(0)===i.EOF?"<EOF>":"\n"===t?"\\n":"\t"===t?"\\t":"\r"===t?"\\r":t}getCharErrorDisplay(t){return"'"+this.getErrorDisplayForChar(t)+"'"}recover(t){this._input.LA(1)!==i.EOF&&(t instanceof Mt?this._interp.consume(this._input):this._input.consume())}get inputStream(){return this._input}set inputStream(t){this._input=null,this._tokenFactorySourcePair=[this,this._input],this.reset(),this._input=t,this._tokenFactorySourcePair=[this,this._input]}get sourceName(){return this._input.sourceName}get type(){return this._type}set type(t){this._type=t}get line(){return this._interp.line}set line(t){this._interp.line=t}get column(){return this._interp.column}set column(t){this._interp.column=t}get text(){return null!==this._text?this._text:this._interp.getText(this._input)}set text(t){this._text=t}}function Bt(t){return t.hashCodeForConfigSet()}function zt(t,e){return t===e||null!==t&&null!==e&&t.equalsForConfigSet(e)}Ut.DEFAULT_MODE=0,Ut.MORE=-2,Ut.SKIP=-3,Ut.DEFAULT_TOKEN_CHANNEL=i.DEFAULT_CHANNEL,Ut.HIDDEN=i.HIDDEN_CHANNEL,Ut.MIN_CHAR_VALUE=0,Ut.MAX_CHAR_VALUE=1114111;class Vt{constructor(t){this.configLookup=new g(Bt,zt),this.fullCtx=void 0===t||t,this.readOnly=!1,this.configs=[],this.uniqueAlt=0,this.conflictingAlts=null,this.hasSemanticContext=!1,this.dipsIntoOuterContext=!1,this.cachedHashCode=-1}add(t,e){if(void 0===e&&(e=null),this.readOnly)throw"This set is readonly";t.semanticContext!==p.NONE&&(this.hasSemanticContext=!0),t.reachesIntoOuterContext>0&&(this.dipsIntoOuterContext=!0);const n=this.configLookup.getOrAdd(t);if(n===t)return this.cachedHashCode=-1,this.configs.push(t),!0;const s=!this.fullCtx,i=G(n.context,t.context,s,e);return n.reachesIntoOuterContext=Math.max(n.reachesIntoOuterContext,t.reachesIntoOuterContext),t.precedenceFilterSuppressed&&(n.precedenceFilterSuppressed=!0),n.context=i,!0}getStates(){const t=new g;for(let e=0;e<this.configs.length;e++)t.add(this.configs[e].state);return t}getPredicates(){const t=[];for(let e=0;e<this.configs.length;e++){const n=this.configs[e].semanticContext;n!==p.NONE&&t.push(n.semanticContext)}return t}optimizeConfigs(t){if(this.readOnly)throw"This set is readonly";if(0!==this.configLookup.length)for(let e=0;e<this.configs.length;e++){const n=this.configs[e];n.context=t.getCachedContext(n.context)}}addAll(t){for(let e=0;e<t.length;e++)this.add(t[e]);return!1}equals(t){return this===t||t instanceof Vt&&r(this.configs,t.configs)&&this.fullCtx===t.fullCtx&&this.uniqueAlt===t.uniqueAlt&&this.conflictingAlts===t.conflictingAlts&&this.hasSemanticContext===t.hasSemanticContext&&this.dipsIntoOuterContext===t.dipsIntoOuterContext}hashCode(){const t=new l;return t.update(this.configs),t.finish()}updateHashCode(t){this.readOnly?(-1===this.cachedHashCode&&(this.cachedHashCode=this.hashCode()),t.update(this.cachedHashCode)):t.update(this.hashCode())}isEmpty(){return 0===this.configs.length}contains(t){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.contains(t)}containsFast(t){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.containsFast(t)}clear(){if(this.readOnly)throw"This set is readonly";this.configs=[],this.cachedHashCode=-1,this.configLookup=new g}setReadonly(t){this.readOnly=t,t&&(this.configLookup=null)}toString(){return d(this.configs)+(this.hasSemanticContext?",hasSemanticContext="+this.hasSemanticContext:"")+(this.uniqueAlt!==$.INVALID_ALT_NUMBER?",uniqueAlt="+this.uniqueAlt:"")+(null!==this.conflictingAlts?",conflictingAlts="+this.conflictingAlts:"")+(this.dipsIntoOuterContext?",dipsIntoOuterContext":"")}get items(){return this.configs}get length(){return this.configs.length}}class qt{constructor(t,e){return null===t&&(t=-1),null===e&&(e=new Vt),this.stateNumber=t,this.configs=e,this.edges=null,this.isAcceptState=!1,this.prediction=0,this.lexerActionExecutor=null,this.requiresFullContext=!1,this.predicates=null,this}getAltSet(){const t=new g;if(null!==this.configs)for(let e=0;e<this.configs.length;e++){const n=this.configs[e];t.add(n.alt)}return 0===t.length?null:t}equals(t){return this===t||t instanceof qt&&this.configs.equals(t.configs)}toString(){let t=this.stateNumber+":"+this.configs;return this.isAcceptState&&(t+="=>",null!==this.predicates?t+=this.predicates:t+=this.prediction),t}hashCode(){const t=new l;return t.update(this.configs),t.finish()}}class Ht{constructor(t,e){return this.atn=t,this.sharedContextCache=e,this}getCachedContext(t){if(null===this.sharedContextCache)return t;const e=new H;return Y(t,this.sharedContextCache,e)}}Ht.ERROR=new qt(2147483647,new Vt);class Kt extends Vt{constructor(){super(),this.configLookup=new g}}class Yt extends m{constructor(t,e){super(t,e);const n=t.lexerActionExecutor||null;return this.lexerActionExecutor=n||(null!==e?e.lexerActionExecutor:null),this.passedThroughNonGreedyDecision=null!==e&&this.checkNonGreedyDecision(e,this.state),this.hashCodeForConfigSet=Yt.prototype.hashCode,this.equalsForConfigSet=Yt.prototype.equals,this}updateHashCode(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext,this.passedThroughNonGreedyDecision,this.lexerActionExecutor)}equals(t){return this===t||t instanceof Yt&&this.passedThroughNonGreedyDecision===t.passedThroughNonGreedyDecision&&(this.lexerActionExecutor?this.lexerActionExecutor.equals(t.lexerActionExecutor):!t.lexerActionExecutor)&&super.equals(t)}checkNonGreedyDecision(t,e){return t.passedThroughNonGreedyDecision||e instanceof J&&e.nonGreedy}}class Gt extends St{constructor(t,e){super(e.actionType),this.offset=t,this.action=e,this.isPositionDependent=!0}execute(t){this.action.execute(t)}updateHashCode(t){t.update(this.actionType,this.offset,this.action)}equals(t){return this===t||t instanceof Gt&&this.offset===t.offset&&this.action===t.action}}class Wt{constructor(t){return this.lexerActions=null===t?[]:t,this.cachedHashCode=l.hashStuff(t),this}fixOffsetBeforeMatch(t){let e=null;for(let n=0;n<this.lexerActions.length;n++)!this.lexerActions[n].isPositionDependent||this.lexerActions[n]instanceof Gt||(null===e&&(e=this.lexerActions.concat([])),e[n]=new Gt(t,this.lexerActions[n]));return null===e?this:new Wt(e)}execute(t,e,n){let s=!1;const i=e.index;try{for(let r=0;r<this.lexerActions.length;r++){let o=this.lexerActions[r];if(o instanceof Gt){const t=o.offset;e.seek(n+t),o=o.action,s=n+t!==i}else o.isPositionDependent&&(e.seek(i),s=!1);o.execute(t)}}finally{s&&e.seek(i)}}hashCode(){return this.cachedHashCode}updateHashCode(t){t.update(this.cachedHashCode)}equals(t){if(this===t)return!0;if(t instanceof Wt){if(this.cachedHashCode!=t.cachedHashCode)return!1;if(this.lexerActions.length!=t.lexerActions.length)return!1;{const e=this.lexerActions.length;for(let n=0;n<e;++n)if(!this.lexerActions[n].equals(t.lexerActions[n]))return!1;return!0}}return!1}static append(t,e){if(null===t)return new Wt([e]);const n=t.lexerActions.concat([e]);return new Wt(n)}}function jt(t){t.index=-1,t.line=0,t.column=-1,t.dfaState=null}class $t{constructor(){jt(this)}reset(){jt(this)}}class Xt extends Ht{constructor(t,e,n,s){super(e,s),this.decisionToDFA=n,this.recog=t,this.startIndex=-1,this.line=1,this.column=0,this.mode=Ut.DEFAULT_MODE,this.prevAccept=new $t}copyState(t){this.column=t.column,this.line=t.line,this.mode=t.mode,this.startIndex=t.startIndex}match(t,e){this.mode=e;const n=t.mark();try{this.startIndex=t.index,this.prevAccept.reset();const n=this.decisionToDFA[e];return null===n.s0?this.matchATN(t):this.execATN(t,n.s0)}finally{t.release(n)}}reset(){this.prevAccept.reset(),this.startIndex=-1,this.line=1,this.column=0,this.mode=Ut.DEFAULT_MODE}matchATN(t){const e=this.atn.modeToStartState[this.mode];Xt.debug&&console.log("matchATN mode "+this.mode+" start: "+e);const n=this.mode,s=this.computeStartState(t,e),i=s.hasSemanticContext;s.hasSemanticContext=!1;const r=this.addDFAState(s);i||(this.decisionToDFA[this.mode].s0=r);const o=this.execATN(t,r);return Xt.debug&&console.log("DFA after matchATN: "+this.decisionToDFA[n].toLexerString()),o}execATN(t,e){Xt.debug&&console.log("start state closure="+e.configs),e.isAcceptState&&this.captureSimState(this.prevAccept,t,e);let n=t.LA(1),s=e;for(;;){Xt.debug&&console.log("execATN loop starting closure: "+s.configs);let e=this.getExistingTargetState(s,n);if(null===e&&(e=this.computeTargetState(t,s,n)),e===Ht.ERROR)break;if(n!==i.EOF&&this.consume(t),e.isAcceptState&&(this.captureSimState(this.prevAccept,t,e),n===i.EOF))break;n=t.LA(1),s=e}return this.failOrAccept(this.prevAccept,t,s.configs,n)}getExistingTargetState(t,e){if(null===t.edges||e<Xt.MIN_DFA_EDGE||e>Xt.MAX_DFA_EDGE)return null;let n=t.edges[e-Xt.MIN_DFA_EDGE];return void 0===n&&(n=null),Xt.debug&&null!==n&&console.log("reuse state "+t.stateNumber+" edge to "+n.stateNumber),n}computeTargetState(t,e,n){const s=new Kt;return this.getReachableConfigSet(t,e.configs,s,n),0===s.items.length?(s.hasSemanticContext||this.addDFAEdge(e,n,Ht.ERROR),Ht.ERROR):this.addDFAEdge(e,n,null,s)}failOrAccept(t,e,n,s){if(null!==this.prevAccept.dfaState){const n=t.dfaState.lexerActionExecutor;return this.accept(e,n,this.startIndex,t.index,t.line,t.column),t.dfaState.prediction}if(s===i.EOF&&e.index===this.startIndex)return i.EOF;throw new Mt(this.recog,e,this.startIndex,n)}getReachableConfigSet(t,e,n,s){let r=$.INVALID_ALT_NUMBER;for(let o=0;o<e.items.length;o++){const a=e.items[o],l=a.alt===r;if(!l||!a.passedThroughNonGreedyDecision){Xt.debug&&console.log("testing %s at %s\n",this.getTokenName(s),a.toString(this.recog,!0));for(let e=0;e<a.state.transitions.length;e++){const o=a.state.transitions[e],h=this.getReachableTarget(o,s);if(null!==h){let e=a.lexerActionExecutor;null!==e&&(e=e.fixOffsetBeforeMatch(t.index-this.startIndex));const o=s===i.EOF,c=new Yt({state:h,lexerActionExecutor:e},a);this.closure(t,c,n,l,!0,o)&&(r=a.alt)}}}}}accept(t,e,n,s,i,r){Xt.debug&&console.log("ACTION %s\n",e),t.seek(s),this.line=i,this.column=r,null!==e&&null!==this.recog&&e.execute(this.recog,t,n)}getReachableTarget(t,e){return t.matches(e,0,Ut.MAX_CHAR_VALUE)?t.target:null}computeStartState(t,e){const n=B.EMPTY,s=new Kt;for(let i=0;i<e.transitions.length;i++){const r=e.transitions[i].target,o=new Yt({state:r,alt:i+1,context:n},null);this.closure(t,o,s,!1,!1,!1)}return s}closure(t,e,n,s,i,r){let o=null;if(Xt.debug&&console.log("closure("+e.toString(this.recog,!0)+")"),e.state instanceof A){if(Xt.debug&&(null!==this.recog?console.log("closure at %s rule stop %s\n",this.recog.ruleNames[e.state.ruleIndex],e):console.log("closure at rule stop %s\n",e)),null===e.context||e.context.hasEmptyPath()){if(null===e.context||e.context.isEmpty())return n.add(e),!0;n.add(new Yt({state:e.state,context:B.EMPTY},e)),s=!0}if(null!==e.context&&!e.context.isEmpty())for(let a=0;a<e.context.length;a++)if(e.context.getReturnState(a)!==B.EMPTY_RETURN_STATE){const l=e.context.getParent(a),h=this.atn.states[e.context.getReturnState(a)];o=new Yt({state:h,context:l},e),s=this.closure(t,o,n,s,i,r)}return s}e.state.epsilonOnlyTransitions||s&&e.passedThroughNonGreedyDecision||n.add(e);for(let a=0;a<e.state.transitions.length;a++){const l=e.state.transitions[a];o=this.getEpsilonTarget(t,e,l,n,i,r),null!==o&&(s=this.closure(t,o,n,s,i,r))}return s}getEpsilonTarget(t,e,n,s,r,o){let a=null;if(n.serializationType===N.RULE){const t=V.create(e.context,n.followState.stateNumber);a=new Yt({state:n.target,context:t},e)}else{if(n.serializationType===N.PRECEDENCE)throw"Precedence predicates are not supported in lexers.";if(n.serializationType===N.PREDICATE)Xt.debug&&console.log("EVAL rule "+n.ruleIndex+":"+n.predIndex),s.hasSemanticContext=!0,this.evaluatePredicate(t,n.ruleIndex,n.predIndex,r)&&(a=new Yt({state:n.target},e));else if(n.serializationType===N.ACTION)if(null===e.context||e.context.hasEmptyPath()){const t=Wt.append(e.lexerActionExecutor,this.atn.lexerActions[n.actionIndex]);a=new Yt({state:n.target,lexerActionExecutor:t},e)}else a=new Yt({state:n.target},e);else n.serializationType===N.EPSILON?a=new Yt({state:n.target},e):n.serializationType!==N.ATOM&&n.serializationType!==N.RANGE&&n.serializationType!==N.SET||o&&n.matches(i.EOF,0,Ut.MAX_CHAR_VALUE)&&(a=new Yt({state:n.target},e))}return a}evaluatePredicate(t,e,n,s){if(null===this.recog)return!0;if(!s)return this.recog.sempred(null,e,n);const i=this.column,r=this.line,o=t.index,a=t.mark();try{return this.consume(t),this.recog.sempred(null,e,n)}finally{this.column=i,this.line=r,t.seek(o),t.release(a)}}captureSimState(t,e,n){t.index=e.index,t.line=this.line,t.column=this.column,t.dfaState=n}addDFAEdge(t,e,n,s){if(void 0===n&&(n=null),void 0===s&&(s=null),null===n&&null!==s){const t=s.hasSemanticContext;if(s.hasSemanticContext=!1,n=this.addDFAState(s),t)return n}return e<Xt.MIN_DFA_EDGE||e>Xt.MAX_DFA_EDGE||(Xt.debug&&console.log("EDGE "+t+" -> "+n+" upon "+e),null===t.edges&&(t.edges=[]),t.edges[e-Xt.MIN_DFA_EDGE]=n),n}addDFAState(t){const e=new qt(null,t);let n=null;for(let e=0;e<t.items.length;e++){const s=t.items[e];if(s.state instanceof A){n=s;break}}null!==n&&(e.isAcceptState=!0,e.lexerActionExecutor=n.lexerActionExecutor,e.prediction=this.atn.ruleToTokenType[n.state.ruleIndex]);const s=this.decisionToDFA[this.mode],i=s.states.get(e);if(null!==i)return i;const r=e;return r.stateNumber=s.states.length,t.setReadonly(!0),r.configs=t,s.states.add(r),r}getDFA(t){return this.decisionToDFA[t]}getText(t){return t.getText(this.startIndex,t.index-1)}consume(t){t.LA(1)==="\n".charCodeAt(0)?(this.line+=1,this.column=0):this.column+=1,t.consume()}getTokenName(t){return-1===t?"EOF":"'"+String.fromCharCode(t)+"'"}}Xt.debug=!1,Xt.dfa_debug=!1,Xt.MIN_DFA_EDGE=0,Xt.MAX_DFA_EDGE=127;class Jt{constructor(t,e){this.alt=e,this.pred=t}toString(){return"("+this.pred+", "+this.alt+")"}}class Zt{constructor(){this.data={}}get(t){return this.data["k-"+t]||null}set(t,e){this.data["k-"+t]=e}values(){return Object.keys(this.data).filter((t=>t.startsWith("k-"))).map((t=>this.data[t]),this)}}const Qt={SLL:0,LL:1,LL_EXACT_AMBIG_DETECTION:2,hasSLLConflictTerminatingPrediction:function(t,e){if(Qt.allConfigsInRuleStopStates(e))return!0;if(t===Qt.SLL&&e.hasSemanticContext){const t=new Vt;for(let n=0;n<e.items.length;n++){let s=e.items[n];s=new m({semanticContext:p.NONE},s),t.add(s)}e=t}const n=Qt.getConflictingAltSubsets(e);return Qt.hasConflictingAltSet(n)&&!Qt.hasStateAssociatedWithOneAlt(e)},hasConfigInRuleStopState:function(t){for(let e=0;e<t.items.length;e++)if(t.items[e].state instanceof A)return!0;return!1},allConfigsInRuleStopStates:function(t){for(let e=0;e<t.items.length;e++)if(!(t.items[e].state instanceof A))return!1;return!0},resolvesToJustOneViableAlt:function(t){return Qt.getSingleViableAlt(t)},allSubsetsConflict:function(t){return!Qt.hasNonConflictingAltSet(t)},hasNonConflictingAltSet:function(t){for(let e=0;e<t.length;e++)if(1===t[e].length)return!0;return!1},hasConflictingAltSet:function(t){for(let e=0;e<t.length;e++)if(t[e].length>1)return!0;return!1},allSubsetsEqual:function(t){let e=null;for(let n=0;n<t.length;n++){const s=t[n];if(null===e)e=s;else if(s!==e)return!1}return!0},getUniqueAlt:function(t){const e=Qt.getAlts(t);return 1===e.length?e.minValue():$.INVALID_ALT_NUMBER},getAlts:function(t){const e=new W;return t.map((function(t){e.or(t)})),e},getConflictingAltSubsets:function(t){const e=new H;return e.hashFunction=function(t){l.hashStuff(t.state.stateNumber,t.context)},e.equalsFunction=function(t,e){return t.state.stateNumber===e.state.stateNumber&&t.context.equals(e.context)},t.items.map((function(t){let n=e.get(t);null===n&&(n=new W,e.set(t,n)),n.set(t.alt)})),e.getValues()},getStateToAltMap:function(t){const e=new Zt;return t.items.map((function(t){let n=e.get(t.state);null===n&&(n=new W,e.set(t.state,n)),n.set(t.alt)})),e},hasStateAssociatedWithOneAlt:function(t){const e=Qt.getStateToAltMap(t).values();for(let t=0;t<e.length;t++)if(1===e[t].length)return!0;return!1},getSingleViableAlt:function(t){let e=null;for(let n=0;n<t.length;n++){const s=t[n].minValue();if(null===e)e=s;else if(e!==s)return $.INVALID_ALT_NUMBER}return e}},te=Qt;class ee extends Ft{constructor(t,e,n,s,i,r){r=r||t._ctx,s=s||t.getCurrentToken(),n=n||t.getCurrentToken(),e=e||t.getInputStream(),super({message:"",recognizer:t,input:e,ctx:r}),this.deadEndConfigs=i,this.startToken=n,this.offendingToken=s}}class ne{constructor(t){this.defaultMapCtor=t||H,this.cacheMap=new this.defaultMapCtor}get(t,e){const n=this.cacheMap.get(t)||null;return null===n?null:n.get(e)||null}set(t,e,n){let s=this.cacheMap.get(t)||null;null===s&&(s=new this.defaultMapCtor,this.cacheMap.set(t,s)),s.set(e,n)}}class se extends Ht{constructor(t,e,n,s){super(e,s),this.parser=t,this.decisionToDFA=n,this.predictionMode=te.LL,this._input=null,this._startIndex=0,this._outerContext=null,this._dfa=null,this.mergeCache=null,this.debug=!1,this.debug_closure=!1,this.debug_add=!1,this.trace_atn_sim=!1,this.dfa_debug=!1,this.retry_debug=!1}reset(){}adaptivePredict(t,e,n){(this.debug||this.trace_atn_sim)&&console.log("adaptivePredict decision "+e+" exec LA(1)=="+this.getLookaheadName(t)+" line "+t.LT(1).line+":"+t.LT(1).column),this._input=t,this._startIndex=t.index,this._outerContext=n;const s=this.decisionToDFA[e];this._dfa=s;const i=t.mark(),r=t.index;try{let e;if(e=s.precedenceDfa?s.getPrecedenceStartState(this.parser.getPrecedence()):s.s0,null===e){null===n&&(n=U.EMPTY),this.debug&&console.log("predictATN decision "+s.decision+" exec LA(1)=="+this.getLookaheadName(t)+", outerContext="+n.toString(this.parser.ruleNames));const i=!1;let r=this.computeStartState(s.atnStartState,U.EMPTY,i);s.precedenceDfa?(s.s0.configs=r,r=this.applyPrecedenceFilter(r),e=this.addDFAState(s,new qt(null,r)),s.setPrecedenceStartState(this.parser.getPrecedence(),e)):(e=this.addDFAState(s,new qt(null,r)),s.s0=e)}const i=this.execATN(s,e,t,r,n);return this.debug&&console.log("DFA after predictATN: "+s.toString(this.parser.literalNames,this.parser.symbolicNames)),i}finally{this._dfa=null,this.mergeCache=null,t.seek(r),t.release(i)}}execATN(t,e,n,s,r){let o;(this.debug||this.trace_atn_sim)&&console.log("execATN decision "+t.decision+", DFA state "+e+", LA(1)=="+this.getLookaheadName(n)+" line "+n.LT(1).line+":"+n.LT(1).column);let a=e;this.debug&&console.log("s0 = "+e);let l=n.LA(1);for(;;){let e=this.getExistingTargetState(a,l);if(null===e&&(e=this.computeTargetState(t,a,l)),e===Ht.ERROR){const t=this.noViableAlt(n,r,a.configs,s);if(n.seek(s),o=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(a.configs,r),o!==$.INVALID_ALT_NUMBER)return o;throw t}if(e.requiresFullContext&&this.predictionMode!==te.SLL){let i=null;if(null!==e.predicates){this.debug&&console.log("DFA state has preds in DFA sim LL failover");const t=n.index;if(t!==s&&n.seek(s),i=this.evalSemanticContext(e.predicates,r,!0),1===i.length)return this.debug&&console.log("Full LL avoided"),i.minValue();t!==s&&n.seek(t)}this.dfa_debug&&console.log("ctx sensitive state "+r+" in "+e);const a=!0,l=this.computeStartState(t.atnStartState,r,a);return this.reportAttemptingFullContext(t,i,e.configs,s,n.index),o=this.execATNWithFullContext(t,e,l,n,s,r),o}if(e.isAcceptState){if(null===e.predicates)return e.prediction;const i=n.index;n.seek(s);const o=this.evalSemanticContext(e.predicates,r,!0);if(0===o.length)throw this.noViableAlt(n,r,e.configs,s);return 1===o.length||this.reportAmbiguity(t,e,s,i,!1,o,e.configs),o.minValue()}a=e,l!==i.EOF&&(n.consume(),l=n.LA(1))}}getExistingTargetState(t,e){const n=t.edges;return null===n?null:n[e+1]||null}computeTargetState(t,e,n){const s=this.computeReachSet(e.configs,n,!1);if(null===s)return this.addDFAEdge(t,e,n,Ht.ERROR),Ht.ERROR;let i=new qt(null,s);const r=this.getUniqueAlt(s);if(this.debug){const t=te.getConflictingAltSubsets(s);console.log("SLL altSubSets="+d(t)+", configs="+s+", predict="+r+", allSubsetsConflict="+te.allSubsetsConflict(t)+", conflictingAlts="+this.getConflictingAlts(s))}return r!==$.INVALID_ALT_NUMBER?(i.isAcceptState=!0,i.configs.uniqueAlt=r,i.prediction=r):te.hasSLLConflictTerminatingPrediction(this.predictionMode,s)&&(i.configs.conflictingAlts=this.getConflictingAlts(s),i.requiresFullContext=!0,i.isAcceptState=!0,i.prediction=i.configs.conflictingAlts.minValue()),i.isAcceptState&&i.configs.hasSemanticContext&&(this.predicateDFAState(i,this.atn.getDecisionState(t.decision)),null!==i.predicates&&(i.prediction=$.INVALID_ALT_NUMBER)),i=this.addDFAEdge(t,e,n,i),i}predicateDFAState(t,e){const n=e.transitions.length,s=this.getConflictingAltsOrUniqueAlt(t.configs),i=this.getPredsForAmbigAlts(s,t.configs,n);null!==i?(t.predicates=this.getPredicatePredictions(s,i),t.prediction=$.INVALID_ALT_NUMBER):t.prediction=s.minValue()}execATNWithFullContext(t,e,n,s,r,o){(this.debug||this.trace_atn_sim)&&console.log("execATNWithFullContext "+n);let a,l=!1,h=n;s.seek(r);let c=s.LA(1),u=-1;for(;;){if(a=this.computeReachSet(h,c,!0),null===a){const t=this.noViableAlt(s,o,h,r);s.seek(r);const e=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(h,o);if(e!==$.INVALID_ALT_NUMBER)return e;throw t}const t=te.getConflictingAltSubsets(a);if(this.debug&&console.log("LL altSubSets="+t+", predict="+te.getUniqueAlt(t)+", resolvesToJustOneViableAlt="+te.resolvesToJustOneViableAlt(t)),a.uniqueAlt=this.getUniqueAlt(a),a.uniqueAlt!==$.INVALID_ALT_NUMBER){u=a.uniqueAlt;break}if(this.predictionMode!==te.LL_EXACT_AMBIG_DETECTION){if(u=te.resolvesToJustOneViableAlt(t),u!==$.INVALID_ALT_NUMBER)break}else if(te.allSubsetsConflict(t)&&te.allSubsetsEqual(t)){l=!0,u=te.getSingleViableAlt(t);break}h=a,c!==i.EOF&&(s.consume(),c=s.LA(1))}return a.uniqueAlt!==$.INVALID_ALT_NUMBER?(this.reportContextSensitivity(t,u,a,r,s.index),u):(this.reportAmbiguity(t,e,r,s.index,l,null,a),u)}computeReachSet(t,e,n){this.debug&&console.log("in computeReachSet, starting closure: "+t),null===this.mergeCache&&(this.mergeCache=new ne);const s=new Vt(n);let r=null;for(let o=0;o<t.items.length;o++){const a=t.items[o];if(this.debug&&console.log("testing "+this.getTokenName(e)+" at "+a),a.state instanceof A)(n||e===i.EOF)&&(null===r&&(r=[]),r.push(a),this.debug_add&&console.log("added "+a+" to skippedStopStates"));else for(let t=0;t<a.state.transitions.length;t++){const n=a.state.transitions[t],i=this.getReachableTarget(n,e);if(null!==i){const t=new m({state:i},a);s.add(t,this.mergeCache),this.debug_add&&console.log("added "+t+" to intermediate")}}}let o=null;if(null===r&&e!==i.EOF&&(1===s.items.length||this.getUniqueAlt(s)!==$.INVALID_ALT_NUMBER)&&(o=s),null===o){o=new Vt(n);const t=new g,r=e===i.EOF;for(let e=0;e<s.items.length;e++)this.closure(s.items[e],o,t,!1,n,r)}if(e===i.EOF&&(o=this.removeAllConfigsNotInRuleStopState(o,o===s)),!(null===r||n&&te.hasConfigInRuleStopState(o)))for(let t=0;t<r.length;t++)o.add(r[t],this.mergeCache);return this.trace_atn_sim&&console.log("computeReachSet "+t+" -> "+o),0===o.items.length?null:o}removeAllConfigsNotInRuleStopState(t,e){if(te.allConfigsInRuleStopStates(t))return t;const n=new Vt(t.fullCtx);for(let s=0;s<t.items.length;s++){const r=t.items[s];if(r.state instanceof A)n.add(r,this.mergeCache);else if(e&&r.state.epsilonOnlyTransitions&&this.atn.nextTokens(r.state).contains(i.EPSILON)){const t=this.atn.ruleToStopState[r.state.ruleIndex];n.add(new m({state:t},r),this.mergeCache)}}return n}computeStartState(t,e,n){const s=K(this.atn,e),i=new Vt(n);this.trace_atn_sim&&console.log("computeStartState from ATN state "+t+" initialContext="+s.toString(this.parser));for(let e=0;e<t.transitions.length;e++){const r=t.transitions[e].target,o=new m({state:r,alt:e+1,context:s},null),a=new g;this.closure(o,i,a,!0,n,!1)}return i}applyPrecedenceFilter(t){let e;const n=[],s=new Vt(t.fullCtx);for(let i=0;i<t.items.length;i++){if(e=t.items[i],1!==e.alt)continue;const r=e.semanticContext.evalPrecedence(this.parser,this._outerContext);null!==r&&(n[e.state.stateNumber]=e.context,r!==e.semanticContext?s.add(new m({semanticContext:r},e),this.mergeCache):s.add(e,this.mergeCache))}for(let i=0;i<t.items.length;i++)if(e=t.items[i],1!==e.alt){if(!e.precedenceFilterSuppressed){const t=n[e.state.stateNumber]||null;if(null!==t&&t.equals(e.context))continue}s.add(e,this.mergeCache)}return s}getReachableTarget(t,e){return t.matches(e,0,this.atn.maxTokenType)?t.target:null}getPredsForAmbigAlts(t,e,n){let s=[];for(let n=0;n<e.items.length;n++){const i=e.items[n];t.get(i.alt)&&(s[i.alt]=p.orContext(s[i.alt]||null,i.semanticContext))}let i=0;for(let t=1;t<n+1;t++){const e=s[t]||null;null===e?s[t]=p.NONE:e!==p.NONE&&(i+=1)}return 0===i&&(s=null),this.debug&&console.log("getPredsForAmbigAlts result "+d(s)),s}getPredicatePredictions(t,e){const n=[];let s=!1;for(let i=1;i<e.length;i++){const r=e[i];null!==t&&t.get(i)&&n.push(new Jt(r,i)),r!==p.NONE&&(s=!0)}return s?n:null}getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(t,e){const n=this.splitAccordingToSemanticValidity(t,e),s=n[0],i=n[1];let r=this.getAltThatFinishedDecisionEntryRule(s);return r!==$.INVALID_ALT_NUMBER||i.items.length>0&&(r=this.getAltThatFinishedDecisionEntryRule(i),r!==$.INVALID_ALT_NUMBER)?r:$.INVALID_ALT_NUMBER}getAltThatFinishedDecisionEntryRule(t){const e=[];for(let n=0;n<t.items.length;n++){const s=t.items[n];(s.reachesIntoOuterContext>0||s.state instanceof A&&s.context.hasEmptyPath())&&e.indexOf(s.alt)<0&&e.push(s.alt)}return 0===e.length?$.INVALID_ALT_NUMBER:Math.min.apply(null,e)}splitAccordingToSemanticValidity(t,e){const n=new Vt(t.fullCtx),s=new Vt(t.fullCtx);for(let i=0;i<t.items.length;i++){const r=t.items[i];r.semanticContext!==p.NONE?r.semanticContext.evaluate(this.parser,e)?n.add(r):s.add(r):n.add(r)}return[n,s]}evalSemanticContext(t,e,n){const s=new W;for(let i=0;i<t.length;i++){const r=t[i];if(r.pred===p.NONE){if(s.set(r.alt),!n)break;continue}const o=r.pred.evaluate(this.parser,e);if((this.debug||this.dfa_debug)&&console.log("eval pred "+r+"="+o),o&&((this.debug||this.dfa_debug)&&console.log("PREDICT "+r.alt),s.set(r.alt),!n))break}return s}closure(t,e,n,s,i,r){this.closureCheckingStopState(t,e,n,s,i,0,r)}closureCheckingStopState(t,e,n,s,i,r,o){if((this.trace_atn_sim||this.debug_closure)&&console.log("closure("+t.toString(this.parser,!0)+")"),t.state instanceof A){if(!t.context.isEmpty()){for(let a=0;a<t.context.length;a++){if(t.context.getReturnState(a)===B.EMPTY_RETURN_STATE){if(i){e.add(new m({state:t.state,context:B.EMPTY},t),this.mergeCache);continue}this.debug&&console.log("FALLING off rule "+this.getRuleName(t.state.ruleIndex)),this.closure_(t,e,n,s,i,r,o);continue}const l=this.atn.states[t.context.getReturnState(a)],h=t.context.getParent(a),c={state:l,alt:t.alt,context:h,semanticContext:t.semanticContext},u=new m(c,null);u.reachesIntoOuterContext=t.reachesIntoOuterContext,this.closureCheckingStopState(u,e,n,s,i,r-1,o)}return}if(i)return void e.add(t,this.mergeCache);this.debug&&console.log("FALLING off rule "+this.getRuleName(t.state.ruleIndex))}this.closure_(t,e,n,s,i,r,o)}closure_(t,e,n,s,i,r,o){const a=t.state;a.epsilonOnlyTransitions||e.add(t,this.mergeCache);for(let l=0;l<a.transitions.length;l++){if(0===l&&this.canDropLoopEntryEdgeInLeftRecursiveRule(t))continue;const h=a.transitions[l],c=s&&!(h instanceof ut),u=this.getEpsilonTarget(t,h,c,0===r,i,o);if(null!==u){let s=r;if(t.state instanceof A){if(null!==this._dfa&&this._dfa.precedenceDfa&&h.outermostPrecedenceReturn===this._dfa.atnStartState.ruleIndex&&(u.precedenceFilterSuppressed=!0),u.reachesIntoOuterContext+=1,n.getOrAdd(u)!==u)continue;e.dipsIntoOuterContext=!0,s-=1,this.debug&&console.log("dips into outer ctx: "+u)}else{if(!h.isEpsilon&&n.getOrAdd(u)!==u)continue;h instanceof k&&s>=0&&(s+=1)}this.closureCheckingStopState(u,e,n,c,i,s,o)}}}canDropLoopEntryEdgeInLeftRecursiveRule(t){const e=t.state;if(e.stateType!==C.STAR_LOOP_ENTRY)return!1;if(e.stateType!==C.STAR_LOOP_ENTRY||!e.isPrecedenceDecision||t.context.isEmpty()||t.context.hasEmptyPath())return!1;const n=t.context.length;for(let s=0;s<n;s++)if(this.atn.states[t.context.getReturnState(s)].ruleIndex!==e.ruleIndex)return!1;const s=e.transitions[0].target.endState.stateNumber,i=this.atn.states[s];for(let s=0;s<n;s++){const n=t.context.getReturnState(s),r=this.atn.states[n];if(1!==r.transitions.length||!r.transitions[0].isEpsilon)return!1;const o=r.transitions[0].target;if(!(r.stateType===C.BLOCK_END&&o===e||r===i||o===i||o.stateType===C.BLOCK_END&&1===o.transitions.length&&o.transitions[0].isEpsilon&&o.transitions[0].target===e))return!1}return!0}getRuleName(t){return null!==this.parser&&t>=0?this.parser.ruleNames[t]:"<rule "+t+">"}getEpsilonTarget(t,e,n,s,r,o){switch(e.serializationType){case N.RULE:return this.ruleTransition(t,e);case N.PRECEDENCE:return this.precedenceTransition(t,e,n,s,r);case N.PREDICATE:return this.predTransition(t,e,n,s,r);case N.ACTION:return this.actionTransition(t,e);case N.EPSILON:return new m({state:e.target},t);case N.ATOM:case N.RANGE:case N.SET:return o&&e.matches(i.EOF,0,1)?new m({state:e.target},t):null;default:return null}}actionTransition(t,e){if(this.debug){const t=-1===e.actionIndex?65535:e.actionIndex;console.log("ACTION edge "+e.ruleIndex+":"+t)}return new m({state:e.target},t)}precedenceTransition(t,e,n,s,i){this.debug&&(console.log("PRED (collectPredicates="+n+") "+e.precedence+">=_p, ctx dependent=true"),null!==this.parser&&console.log("context surrounding pred is "+d(this.parser.getRuleInvocationStack())));let r=null;if(n&&s)if(i){const n=this._input.index;this._input.seek(this._startIndex);const s=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(n),s&&(r=new m({state:e.target},t))}else{const n=p.andContext(t.semanticContext,e.getPredicate());r=new m({state:e.target,semanticContext:n},t)}else r=new m({state:e.target},t);return this.debug&&console.log("config from pred transition="+r),r}predTransition(t,e,n,s,i){this.debug&&(console.log("PRED (collectPredicates="+n+") "+e.ruleIndex+":"+e.predIndex+", ctx dependent="+e.isCtxDependent),null!==this.parser&&console.log("context surrounding pred is "+d(this.parser.getRuleInvocationStack())));let r=null;if(n&&(e.isCtxDependent&&s||!e.isCtxDependent))if(i){const n=this._input.index;this._input.seek(this._startIndex);const s=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(n),s&&(r=new m({state:e.target},t))}else{const n=p.andContext(t.semanticContext,e.getPredicate());r=new m({state:e.target,semanticContext:n},t)}else r=new m({state:e.target},t);return this.debug&&console.log("config from pred transition="+r),r}ruleTransition(t,e){this.debug&&console.log("CALL rule "+this.getRuleName(e.target.ruleIndex)+", ctx="+t.context);const n=e.followState,s=V.create(t.context,n.stateNumber);return new m({state:e.target,context:s},t)}getConflictingAlts(t){const e=te.getConflictingAltSubsets(t);return te.getAlts(e)}getConflictingAltsOrUniqueAlt(t){let e=null;return t.uniqueAlt!==$.INVALID_ALT_NUMBER?(e=new W,e.set(t.uniqueAlt)):e=t.conflictingAlts,e}getTokenName(t){if(t===i.EOF)return"EOF";if(null!==this.parser&&null!==this.parser.literalNames){if(!(t>=this.parser.literalNames.length&&t>=this.parser.symbolicNames.length))return(this.parser.literalNames[t]||this.parser.symbolicNames[t])+"<"+t+">";console.log(t+" ttype out of range: "+this.parser.literalNames),console.log(""+this.parser.getInputStream().getTokens())}return""+t}getLookaheadName(t){return this.getTokenName(t.LA(1))}dumpDeadEndConfigs(t){console.log("dead end configs: ");const e=t.getDeadEndConfigs();for(let t=0;t<e.length;t++){const n=e[t];let s="no edges";if(n.state.transitions.length>0){const t=n.state.transitions[0];t instanceof ht?s="Atom "+this.getTokenName(t.label):t instanceof I&&(s=(t instanceof y?"~":"")+"Set "+t.set)}console.error(n.toString(this.parser,!0)+":"+s)}}noViableAlt(t,e,n,s){return new ee(this.parser,t,t.get(s),t.LT(1),n,e)}getUniqueAlt(t){let e=$.INVALID_ALT_NUMBER;for(let n=0;n<t.items.length;n++){const s=t.items[n];if(e===$.INVALID_ALT_NUMBER)e=s.alt;else if(s.alt!==e)return $.INVALID_ALT_NUMBER}return e}addDFAEdge(t,e,n,s){if(this.debug&&console.log("EDGE "+e+" -> "+s+" upon "+this.getTokenName(n)),null===s)return null;if(s=this.addDFAState(t,s),null===e||n<-1||n>this.atn.maxTokenType)return s;if(null===e.edges&&(e.edges=[]),e.edges[n+1]=s,this.debug){const e=null===this.parser?null:this.parser.literalNames,n=null===this.parser?null:this.parser.symbolicNames;console.log("DFA=\n"+t.toString(e,n))}return s}addDFAState(t,e){if(e===Ht.ERROR)return e;const n=t.states.get(e);return null!==n?(this.trace_atn_sim&&console.log("addDFAState "+e+" exists"),n):(e.stateNumber=t.states.length,e.configs.readOnly||(e.configs.optimizeConfigs(this),e.configs.setReadonly(!0)),this.trace_atn_sim&&console.log("addDFAState new "+e),t.states.add(e),this.debug&&console.log("adding new DFA state: "+e),e)}reportAttemptingFullContext(t,e,n,s,i){if(this.debug||this.retry_debug){const e=new E(s,i+1);console.log("reportAttemptingFullContext decision="+t.decision+":"+n+", input="+this.parser.getTokenStream().getText(e))}null!==this.parser&&this.parser.getErrorListener().reportAttemptingFullContext(this.parser,t,s,i,e,n)}reportContextSensitivity(t,e,n,s,i){if(this.debug||this.retry_debug){const e=new E(s,i+1);console.log("reportContextSensitivity decision="+t.decision+":"+n+", input="+this.parser.getTokenStream().getText(e))}null!==this.parser&&this.parser.getErrorListener().reportContextSensitivity(this.parser,t,s,i,e,n)}reportAmbiguity(t,e,n,s,i,r,o){if(this.debug||this.retry_debug){const t=new E(n,s+1);console.log("reportAmbiguity "+r+":"+o+", input="+this.parser.getTokenStream().getText(t))}null!==this.parser&&this.parser.getErrorListener().reportAmbiguity(this.parser,t,n,s,i,r,o)}}class ie{constructor(){this.cache=new H}add(t){if(t===B.EMPTY)return B.EMPTY;const e=this.cache.get(t)||null;return null!==e?e:(this.cache.set(t,t),t)}get(t){return this.cache.get(t)||null}get length(){return this.cache.length}}const re={ATN:$,ATNDeserializer:Lt,LexerATNSimulator:Xt,ParserATNSimulator:se,PredictionMode:te,PredictionContextCache:ie};class oe{constructor(t,e,n){this.dfa=t,this.literalNames=e||[],this.symbolicNames=n||[]}toString(){if(null===this.dfa.s0)return null;let t="";const e=this.dfa.sortedStates();for(let n=0;n<e.length;n++){const s=e[n];if(null!==s.edges){const e=s.edges.length;for(let n=0;n<e;n++){const e=s.edges[n]||null;null!==e&&2147483647!==e.stateNumber&&(t=t.concat(this.getStateString(s)),t=t.concat("-"),t=t.concat(this.getEdgeLabel(n)),t=t.concat("->"),t=t.concat(this.getStateString(e)),t=t.concat("\n"))}}}return 0===t.length?null:t}getEdgeLabel(t){return 0===t?"EOF":null!==this.literalNames||null!==this.symbolicNames?this.literalNames[t-1]||this.symbolicNames[t-1]:String.fromCharCode(t-1)}getStateString(t){const e=(t.isAcceptState?":":"")+"s"+t.stateNumber+(t.requiresFullContext?"^":"");return t.isAcceptState?null!==t.predicates?e+"=>"+d(t.predicates):e+"=>"+t.prediction.toString():e}}class ae extends oe{constructor(t){super(t,null)}getEdgeLabel(t){return"'"+String.fromCharCode(t)+"'"}}class le{constructor(t,e){if(void 0===e&&(e=0),this.atnStartState=t,this.decision=e,this._states=new g,this.s0=null,this.precedenceDfa=!1,t instanceof rt&&t.isPrecedenceDecision){this.precedenceDfa=!0;const t=new qt(null,new Vt);t.edges=[],t.isAcceptState=!1,t.requiresFullContext=!1,this.s0=t}}getPrecedenceStartState(t){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";return t<0||t>=this.s0.edges.length?null:this.s0.edges[t]||null}setPrecedenceStartState(t,e){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";t<0||(this.s0.edges[t]=e)}setPrecedenceDfa(t){if(this.precedenceDfa!==t){if(this._states=new g,t){const t=new qt(null,new Vt);t.edges=[],t.isAcceptState=!1,t.requiresFullContext=!1,this.s0=t}else this.s0=null;this.precedenceDfa=t}}sortedStates(){return this._states.values().sort((function(t,e){return t.stateNumber-e.stateNumber}))}toString(t,e){return t=t||null,e=e||null,null===this.s0?"":new oe(this,t,e).toString()}toLexerString(){return null===this.s0?"":new ae(this).toString()}get states(){return this._states}}const he={DFA:le,DFASerializer:oe,LexerDFASerializer:ae,PredPrediction:Jt},ce={PredictionContext:B},ue={Interval:E,IntervalSet:_};class de{visitTerminal(t){}visitErrorNode(t){}enterEveryRule(t){}exitEveryRule(t){}}class ge{visit(t){return Array.isArray(t)?t.map((function(t){return t.accept(this)}),this):t.accept(this)}visitChildren(t){return t.children?this.visit(t.children):null}visitTerminal(t){}visitErrorNode(t){}}class pe{walk(t,e){if(e instanceof D||void 0!==e.isErrorNode&&e.isErrorNode())t.visitErrorNode(e);else if(e instanceof b)t.visitTerminal(e);else{this.enterRule(t,e);for(let n=0;n<e.getChildCount();n++){const s=e.getChild(n);this.walk(t,s)}this.exitRule(t,e)}}enterRule(t,e){const n=e.ruleContext;t.enterEveryRule(n),n.enterRule(t)}exitRule(t,e){const n=e.ruleContext;n.exitRule(t),t.exitEveryRule(n)}}pe.DEFAULT=new pe;const fe={Trees:M,RuleNode:P,ErrorNode:D,TerminalNode:b,ParseTreeListener:de,ParseTreeVisitor:ge,ParseTreeWalker:pe};class xe extends Ft{constructor(t){super({message:"",recognizer:t,input:t.getInputStream(),ctx:t._ctx}),this.offendingToken=t.getCurrentToken()}}class Te extends Ft{constructor(t,e,n){super({message:Se(e,n||null),recognizer:t,input:t.getInputStream(),ctx:t._ctx});const s=t._interp.atn.states[t.state].transitions[0];s instanceof pt?(this.ruleIndex=s.ruleIndex,this.predicateIndex=s.predIndex):(this.ruleIndex=0,this.predicateIndex=0),this.predicate=e,this.offendingToken=t.getCurrentToken()}}function Se(t,e){return null!==e?e:"failed predicate: {"+t+"}?"}class me extends Ot{constructor(t){super(),t=t||!0,this.exactOnly=t}reportAmbiguity(t,e,n,s,i,r,o){if(this.exactOnly&&!i)return;const a="reportAmbiguity d="+this.getDecisionDescription(t,e)+": ambigAlts="+this.getConflictingAlts(r,o)+", input='"+t.getTokenStream().getText(new E(n,s))+"'";t.notifyErrorListeners(a)}reportAttemptingFullContext(t,e,n,s,i,r){const o="reportAttemptingFullContext d="+this.getDecisionDescription(t,e)+", input='"+t.getTokenStream().getText(new E(n,s))+"'";t.notifyErrorListeners(o)}reportContextSensitivity(t,e,n,s,i,r){const o="reportContextSensitivity d="+this.getDecisionDescription(t,e)+", input='"+t.getTokenStream().getText(new E(n,s))+"'";t.notifyErrorListeners(o)}getDecisionDescription(t,e){const n=e.decision,s=e.atnStartState.ruleIndex,i=t.ruleNames;if(s<0||s>=i.length)return""+n;const r=i[s]||null;return null===r||0===r.length?""+n:`${n} (${r})`}getConflictingAlts(t,e){if(null!==t)return t;const n=new W;for(let t=0;t<e.items.length;t++)n.set(e.items[t].alt);return`{${n.values().join(", ")}}`}}class Ee extends Error{constructor(){super(),Error.captureStackTrace(this,Ee)}}class _e{reset(t){}recoverInline(t){}recover(t,e){}sync(t){}inErrorRecoveryMode(t){}reportError(t){}}class Ce extends _e{constructor(){super(),this.errorRecoveryMode=!1,this.lastErrorIndex=-1,this.lastErrorStates=null,this.nextTokensContext=null,this.nextTokenState=0}reset(t){this.endErrorCondition(t)}beginErrorCondition(t){this.errorRecoveryMode=!0}inErrorRecoveryMode(t){return this.errorRecoveryMode}endErrorCondition(t){this.errorRecoveryMode=!1,this.lastErrorStates=null,this.lastErrorIndex=-1}reportMatch(t){this.endErrorCondition(t)}reportError(t,e){this.inErrorRecoveryMode(t)||(this.beginErrorCondition(t),e instanceof ee?this.reportNoViableAlternative(t,e):e instanceof xe?this.reportInputMismatch(t,e):e instanceof Te?this.reportFailedPredicate(t,e):(console.log("unknown recognition error type: "+e.constructor.name),console.log(e.stack),t.notifyErrorListeners(e.getOffendingToken(),e.getMessage(),e)))}recover(t,e){this.lastErrorIndex===t.getInputStream().index&&null!==this.lastErrorStates&&this.lastErrorStates.indexOf(t.state)>=0&&t.consume(),this.lastErrorIndex=t._input.index,null===this.lastErrorStates&&(this.lastErrorStates=[]),this.lastErrorStates.push(t.state);const n=this.getErrorRecoverySet(t);this.consumeUntil(t,n)}sync(t){if(this.inErrorRecoveryMode(t))return;const e=t._interp.atn.states[t.state],n=t.getTokenStream().LA(1),s=t.atn.nextTokens(e);if(s.contains(n))return this.nextTokensContext=null,void(this.nextTokenState=C.INVALID_STATE_NUMBER);if(s.contains(i.EPSILON))null===this.nextTokensContext&&(this.nextTokensContext=t._ctx,this.nextTokensState=t._stateNumber);else switch(e.stateType){case C.BLOCK_START:case C.STAR_BLOCK_START:case C.PLUS_BLOCK_START:case C.STAR_LOOP_ENTRY:if(null!==this.singleTokenDeletion(t))return;throw new xe(t);case C.PLUS_LOOP_BACK:case C.STAR_LOOP_BACK:{this.reportUnwantedToken(t);const e=new _;e.addSet(t.getExpectedTokens());const n=e.addSet(this.getErrorRecoverySet(t));this.consumeUntil(t,n)}}}reportNoViableAlternative(t,e){const n=t.getTokenStream();let s;s=null!==n?e.startToken.type===i.EOF?"<EOF>":n.getText(new E(e.startToken.tokenIndex,e.offendingToken.tokenIndex)):"<unknown input>";const r="no viable alternative at input "+this.escapeWSAndQuote(s);t.notifyErrorListeners(r,e.offendingToken,e)}reportInputMismatch(t,e){const n="mismatched input "+this.getTokenErrorDisplay(e.offendingToken)+" expecting "+e.getExpectedTokens().toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e.offendingToken,e)}reportFailedPredicate(t,e){const n="rule "+t.ruleNames[t._ctx.ruleIndex]+" "+e.message;t.notifyErrorListeners(n,e.offendingToken,e)}reportUnwantedToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);const e=t.getCurrentToken(),n="extraneous input "+this.getTokenErrorDisplay(e)+" expecting "+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e,null)}reportMissingToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);const e=t.getCurrentToken(),n="missing "+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames)+" at "+this.getTokenErrorDisplay(e);t.notifyErrorListeners(n,e,null)}recoverInline(t){const e=this.singleTokenDeletion(t);if(null!==e)return t.consume(),e;if(this.singleTokenInsertion(t))return this.getMissingSymbol(t);throw new xe(t)}singleTokenInsertion(t){const e=t.getTokenStream().LA(1),n=t._interp.atn,s=n.states[t.state].transitions[0].target;return!!n.nextTokens(s,t._ctx).contains(e)&&(this.reportMissingToken(t),!0)}singleTokenDeletion(t){const e=t.getTokenStream().LA(2);if(this.getExpectedTokens(t).contains(e)){this.reportUnwantedToken(t),t.consume();const e=t.getCurrentToken();return this.reportMatch(t),e}return null}getMissingSymbol(t){const e=t.getCurrentToken(),n=this.getExpectedTokens(t).first();let s;s=n===i.EOF?"<missing EOF>":"<missing "+t.literalNames[n]+">";let r=e;const o=t.getTokenStream().LT(-1);return r.type===i.EOF&&null!==o&&(r=o),t.getTokenFactory().create(r.source,n,s,i.DEFAULT_CHANNEL,-1,-1,r.line,r.column)}getExpectedTokens(t){return t.getExpectedTokens()}getTokenErrorDisplay(t){if(null===t)return"<no token>";let e=t.text;return null===e&&(e=t.type===i.EOF?"<EOF>":"<"+t.type+">"),this.escapeWSAndQuote(e)}escapeWSAndQuote(t){return"'"+(t=(t=(t=t.replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/\t/g,"\\t"))+"'"}getErrorRecoverySet(t){const e=t._interp.atn;let n=t._ctx;const s=new _;for(;null!==n&&n.invokingState>=0;){const t=e.states[n.invokingState].transitions[0],i=e.nextTokens(t.followState);s.addSet(i),n=n.parentCtx}return s.removeOne(i.EPSILON),s}consumeUntil(t,e){let n=t.getTokenStream().LA(1);for(;n!==i.EOF&&!e.contains(n);)t.consume(),n=t.getTokenStream().LA(1)}}class Ae extends Ce{constructor(){super()}recover(t,e){let n=t._ctx;for(;null!==n;)n.exception=e,n=n.parentCtx;throw new Ee(e)}recoverInline(t){this.recover(t,new xe(t))}sync(t){}}const Ne={RecognitionException:Ft,NoViableAltException:ee,LexerNoViableAltException:Mt,InputMismatchException:xe,FailedPredicateException:Te,DiagnosticErrorListener:me,BailErrorStrategy:Ae,DefaultErrorStrategy:Ce,ErrorListener:Ot};class ke{constructor(t,e){if(this.name="<empty>",this.strdata=t,this.decodeToUnicodeCodePoints=e||!1,this._index=0,this.data=[],this.decodeToUnicodeCodePoints)for(let t=0;t<this.strdata.length;){const e=this.strdata.codePointAt(t);this.data.push(e),t+=e<=65535?1:2}else{this.data=new Array(this.strdata.length);for(let t=0;t<this.strdata.length;t++)this.data[t]=this.strdata.charCodeAt(t)}this._size=this.data.length}reset(){this._index=0}consume(){if(this._index>=this._size)throw"cannot consume EOF";this._index+=1}LA(t){if(0===t)return 0;t<0&&(t+=1);const e=this._index+t-1;return e<0||e>=this._size?i.EOF:this.data[e]}LT(t){return this.LA(t)}mark(){return-1}release(t){}seek(t){t<=this._index?this._index=t:this._index=Math.min(t,this._size)}getText(t,e){if(e>=this._size&&(e=this._size-1),t>=this._size)return"";if(this.decodeToUnicodeCodePoints){let n="";for(let s=t;s<=e;s++)n+=String.fromCodePoint(this.data[s]);return n}return this.strdata.slice(t,e+1)}toString(){return this.strdata}get index(){return this._index}get size(){return this._size}}class Ie extends ke{constructor(t,e){super(t,e)}}var ye=n(763);const Le="undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node;class Oe extends Ie{static fromPath(t,e,n){if(!Le)throw new Error("FileStream is only available when running in Node!");ye.readFile(t,e,(function(t,e){let s=null;null!==e&&(s=new ke(e,!0)),n(t,s)}))}constructor(t,e,n){if(!Le)throw new Error("FileStream is only available when running in Node!");super(ye.readFileSync(t,e||"utf-8"),n),this.fileName=t}}const Re={fromString:function(t){return new ke(t,!0)},fromBlob:function(t,e,n,s){const i=new window.FileReader;i.onload=function(t){const e=new ke(t.target.result,!0);n(e)},i.onerror=s,i.readAsText(t,e)},fromBuffer:function(t,e){return new ke(t.toString(e),!0)},fromPath:function(t,e,n){Oe.fromPath(t,e,n)},fromPathSync:function(t,e){return new Oe(t,e)}},we={arrayToString:d,stringToCharArray:function(t){let e=new Uint16Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}};class ve{}class Pe extends ve{constructor(t){super(),this.tokenSource=t,this.tokens=[],this.index=-1,this.fetchedEOF=!1}mark(){return 0}release(t){}reset(){this.seek(0)}seek(t){this.lazyInit(),this.index=this.adjustSeekIndex(t)}get size(){return this.tokens.length}get(t){return this.lazyInit(),this.tokens[t]}consume(){let t=!1;if(t=this.index>=0&&(this.fetchedEOF?this.index<this.tokens.length-1:this.index<this.tokens.length),!t&&this.LA(1)===i.EOF)throw"cannot consume EOF";this.sync(this.index+1)&&(this.index=this.adjustSeekIndex(this.index+1))}sync(t){const e=t-this.tokens.length+1;return!(e>0)||this.fetch(e)>=e}fetch(t){if(this.fetchedEOF)return 0;for(let e=0;e<t;e++){const t=this.tokenSource.nextToken();if(t.tokenIndex=this.tokens.length,this.tokens.push(t),t.type===i.EOF)return this.fetchedEOF=!0,e+1}return t}getTokens(t,e,n){if(void 0===n&&(n=null),t<0||e<0)return null;this.lazyInit();const s=[];e>=this.tokens.length&&(e=this.tokens.length-1);for(let r=t;r<e;r++){const t=this.tokens[r];if(t.type===i.EOF)break;(null===n||n.contains(t.type))&&s.push(t)}return s}LA(t){return this.LT(t).type}LB(t){return this.index-t<0?null:this.tokens[this.index-t]}LT(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);const e=this.index+t-1;return this.sync(e),e>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[e]}adjustSeekIndex(t){return t}lazyInit(){-1===this.index&&this.setup()}setup(){this.sync(0),this.index=this.adjustSeekIndex(0)}setTokenSource(t){this.tokenSource=t,this.tokens=[],this.index=-1,this.fetchedEOF=!1}nextTokenOnChannel(t,e){if(this.sync(t),t>=this.tokens.length)return-1;let n=this.tokens[t];for(;n.channel!==e;){if(n.type===i.EOF)return-1;t+=1,this.sync(t),n=this.tokens[t]}return t}previousTokenOnChannel(t,e){for(;t>=0&&this.tokens[t].channel!==e;)t-=1;return t}getHiddenTokensToRight(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+" not in 0.."+this.tokens.length-1;const n=this.nextTokenOnChannel(t+1,Ut.DEFAULT_TOKEN_CHANNEL),s=t+1,i=-1===n?this.tokens.length-1:n;return this.filterForChannel(s,i,e)}getHiddenTokensToLeft(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+" not in 0.."+this.tokens.length-1;const n=this.previousTokenOnChannel(t-1,Ut.DEFAULT_TOKEN_CHANNEL);if(n===t-1)return null;const s=n+1,i=t-1;return this.filterForChannel(s,i,e)}filterForChannel(t,e,n){const s=[];for(let i=t;i<e+1;i++){const t=this.tokens[i];-1===n?t.channel!==Ut.DEFAULT_TOKEN_CHANNEL&&s.push(t):t.channel===n&&s.push(t)}return 0===s.length?null:s}getSourceName(){return this.tokenSource.getSourceName()}getText(t){this.lazyInit(),this.fill(),t||(t=new E(0,this.tokens.length-1));let e=t.start;e instanceof i&&(e=e.tokenIndex);let n=t.stop;if(n instanceof i&&(n=n.tokenIndex),null===e||null===n||e<0||n<0)return"";n>=this.tokens.length&&(n=this.tokens.length-1);let s="";for(let t=e;t<n+1;t++){const e=this.tokens[t];if(e.type===i.EOF)break;s+=e.text}return s}fill(){for(this.lazyInit();1e3===this.fetch(1e3););}}Object.defineProperty(Pe,"size",{get:function(){return this.tokens.length}});class be extends Pe{constructor(t,e){super(t),this.channel=void 0===e?i.DEFAULT_CHANNEL:e}adjustSeekIndex(t){return this.nextTokenOnChannel(t,this.channel)}LB(t){if(0===t||this.index-t<0)return null;let e=this.index,n=1;for(;n<=t;)e=this.previousTokenOnChannel(e-1,this.channel),n+=1;return e<0?null:this.tokens[e]}LT(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);let e=this.index,n=1;for(;n<t;)this.sync(e+1)&&(e=this.nextTokenOnChannel(e+1,this.channel)),n+=1;return this.tokens[e]}getNumberOfOnChannelTokens(){let t=0;this.fill();for(let e=0;e<this.tokens.length;e++){const n=this.tokens[e];if(n.channel===this.channel&&(t+=1),n.type===i.EOF)break}return t}}class De extends de{constructor(t){super(),this.parser=t}enterEveryRule(t){console.log("enter   "+this.parser.ruleNames[t.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)}visitTerminal(t){console.log("consume "+t.symbol+" rule "+this.parser.ruleNames[this.parser._ctx.ruleIndex])}exitEveryRule(t){console.log("exit    "+this.parser.ruleNames[t.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)}}class Fe extends vt{constructor(t){super(),this._input=null,this._errHandler=new Ce,this._precedenceStack=[],this._precedenceStack.push(0),this._ctx=null,this.buildParseTrees=!0,this._tracer=null,this._parseListeners=null,this._syntaxErrors=0,this.setInputStream(t)}reset(){null!==this._input&&this._input.seek(0),this._errHandler.reset(this),this._ctx=null,this._syntaxErrors=0,this.setTrace(!1),this._precedenceStack=[],this._precedenceStack.push(0),null!==this._interp&&this._interp.reset()}match(t){let e=this.getCurrentToken();return e.type===t?(this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(e)),e}matchWildcard(){let t=this.getCurrentToken();return t.type>0?(this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(t)),t}getParseListeners(){return this._parseListeners||[]}addParseListener(t){if(null===t)throw"listener";null===this._parseListeners&&(this._parseListeners=[]),this._parseListeners.push(t)}removeParseListener(t){if(null!==this._parseListeners){const e=this._parseListeners.indexOf(t);e>=0&&this._parseListeners.splice(e,1),0===this._parseListeners.length&&(this._parseListeners=null)}}removeParseListeners(){this._parseListeners=null}triggerEnterRuleEvent(){if(null!==this._parseListeners){const t=this._ctx;this._parseListeners.forEach((function(e){e.enterEveryRule(t),t.enterRule(e)}))}}triggerExitRuleEvent(){if(null!==this._parseListeners){const t=this._ctx;this._parseListeners.slice(0).reverse().forEach((function(e){t.exitRule(e),e.exitEveryRule(t)}))}}getTokenFactory(){return this._input.tokenSource._factory}setTokenFactory(t){this._input.tokenSource._factory=t}getATNWithBypassAlts(){const t=this.getSerializedATN();if(null===t)throw"The current parser does not support an ATN with bypass alternatives.";let e=this.bypassAltsAtnCache[t];if(null===e){const n=new Tt;n.generateRuleBypassTransitions=!0,e=new Lt(n).deserialize(t),this.bypassAltsAtnCache[t]=e}return e}getInputStream(){return this.getTokenStream()}setInputStream(t){this.setTokenStream(t)}getTokenStream(){return this._input}setTokenStream(t){this._input=null,this.reset(),this._input=t}get syntaxErrorsCount(){return this._syntaxErrors}getCurrentToken(){return this._input.LT(1)}notifyErrorListeners(t,e,n){n=n||null,null===(e=e||null)&&(e=this.getCurrentToken()),this._syntaxErrors+=1;const s=e.line,i=e.column;this.getErrorListener().syntaxError(this,e,s,i,t,n)}consume(){const t=this.getCurrentToken();t.type!==i.EOF&&this.getInputStream().consume();const e=null!==this._parseListeners&&this._parseListeners.length>0;if(this.buildParseTrees||e){let n;n=this._errHandler.inErrorRecoveryMode(this)?this._ctx.addErrorNode(t):this._ctx.addTokenNode(t),n.invokingState=this.state,e&&this._parseListeners.forEach((function(t){n instanceof D||void 0!==n.isErrorNode&&n.isErrorNode()?t.visitErrorNode(n):n instanceof b&&t.visitTerminal(n)}))}return t}addContextToParseTree(){null!==this._ctx.parentCtx&&this._ctx.parentCtx.addChild(this._ctx)}enterRule(t,e,n){this.state=e,this._ctx=t,this._ctx.start=this._input.LT(1),this.buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}exitRule(){this._ctx.stop=this._input.LT(-1),this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx.parentCtx}enterOuterAlt(t,e){t.setAltNumber(e),this.buildParseTrees&&this._ctx!==t&&null!==this._ctx.parentCtx&&(this._ctx.parentCtx.removeLastChild(),this._ctx.parentCtx.addChild(t)),this._ctx=t}getPrecedence(){return 0===this._precedenceStack.length?-1:this._precedenceStack[this._precedenceStack.length-1]}enterRecursionRule(t,e,n,s){this.state=e,this._precedenceStack.push(s),this._ctx=t,this._ctx.start=this._input.LT(1),this.triggerEnterRuleEvent()}pushNewRecursionContext(t,e,n){const s=this._ctx;s.parentCtx=t,s.invokingState=e,s.stop=this._input.LT(-1),this._ctx=t,this._ctx.start=s.start,this.buildParseTrees&&this._ctx.addChild(s),this.triggerEnterRuleEvent()}unrollRecursionContexts(t){this._precedenceStack.pop(),this._ctx.stop=this._input.LT(-1);const e=this._ctx,n=this.getParseListeners();if(null!==n&&n.length>0)for(;this._ctx!==t;)this.triggerExitRuleEvent(),this._ctx=this._ctx.parentCtx;else this._ctx=t;e.parentCtx=t,this.buildParseTrees&&null!==t&&t.addChild(e)}getInvokingContext(t){let e=this._ctx;for(;null!==e;){if(e.ruleIndex===t)return e;e=e.parentCtx}return null}precpred(t,e){return e>=this._precedenceStack[this._precedenceStack.length-1]}inContext(t){return!1}isExpectedToken(t){const e=this._interp.atn;let n=this._ctx;const s=e.states[this.state];let r=e.nextTokens(s);if(r.contains(t))return!0;if(!r.contains(i.EPSILON))return!1;for(;null!==n&&n.invokingState>=0&&r.contains(i.EPSILON);){const s=e.states[n.invokingState].transitions[0];if(r=e.nextTokens(s.followState),r.contains(t))return!0;n=n.parentCtx}return!(!r.contains(i.EPSILON)||t!==i.EOF)}getExpectedTokens(){return this._interp.atn.getExpectedTokens(this.state,this._ctx)}getExpectedTokensWithinCurrentRule(){const t=this._interp.atn,e=t.states[this.state];return t.nextTokens(e)}getRuleIndex(t){const e=this.getRuleIndexMap()[t];return null!==e?e:-1}getRuleInvocationStack(t){null===(t=t||null)&&(t=this._ctx);const e=[];for(;null!==t;){const n=t.ruleIndex;n<0?e.push("n/a"):e.push(this.ruleNames[n]),t=t.parentCtx}return e}getDFAStrings(){return this._interp.decisionToDFA.toString()}dumpDFA(){let t=!1;for(let e=0;e<this._interp.decisionToDFA.length;e++){const n=this._interp.decisionToDFA[e];n.states.length>0&&(t&&console.log(),this.printer.println("Decision "+n.decision+":"),this.printer.print(n.toString(this.literalNames,this.symbolicNames)),t=!0)}}getSourceName(){return this._input.getSourceName()}setTrace(t){t?(null!==this._tracer&&this.removeParseListener(this._tracer),this._tracer=new De(this),this.addParseListener(this._tracer)):(this.removeParseListener(this._tracer),this._tracer=null)}}Fe.bypassAltsAtnCache={};class Me extends b{constructor(t){super(),this.parentCtx=null,this.symbol=t}getChild(t){return null}getSymbol(){return this.symbol}getParent(){return this.parentCtx}getPayload(){return this.symbol}getSourceInterval(){if(null===this.symbol)return E.INVALID_INTERVAL;const t=this.symbol.tokenIndex;return new E(t,t)}getChildCount(){return 0}accept(t){return t.visitTerminal(this)}getText(){return this.symbol.text}toString(){return this.symbol.type===i.EOF?"<EOF>":this.symbol.text}}class Ue extends Me{constructor(t){super(t)}isErrorNode(){return!0}accept(t){return t.visitErrorNode(this)}}class Be extends U{constructor(t,e){super(t,e),this.children=null,this.start=null,this.stop=null,this.exception=null}copyFrom(t){this.parentCtx=t.parentCtx,this.invokingState=t.invokingState,this.children=null,this.start=t.start,this.stop=t.stop,t.children&&(this.children=[],t.children.map((function(t){t instanceof Ue&&(this.children.push(t),t.parentCtx=this)}),this))}enterRule(t){}exitRule(t){}addChild(t){return null===this.children&&(this.children=[]),this.children.push(t),t}removeLastChild(){null!==this.children&&this.children.pop()}addTokenNode(t){const e=new Me(t);return this.addChild(e),e.parentCtx=this,e}addErrorNode(t){const e=new Ue(t);return this.addChild(e),e.parentCtx=this,e}getChild(t,e){if(e=e||null,null===this.children||t<0||t>=this.children.length)return null;if(null===e)return this.children[t];for(let n=0;n<this.children.length;n++){const s=this.children[n];if(s instanceof e){if(0===t)return s;t-=1}}return null}getToken(t,e){if(null===this.children||e<0||e>=this.children.length)return null;for(let n=0;n<this.children.length;n++){const s=this.children[n];if(s instanceof b&&s.symbol.type===t){if(0===e)return s;e-=1}}return null}getTokens(t){if(null===this.children)return[];{const e=[];for(let n=0;n<this.children.length;n++){const s=this.children[n];s instanceof b&&s.symbol.type===t&&e.push(s)}return e}}getTypedRuleContext(t,e){return this.getChild(e,t)}getTypedRuleContexts(t){if(null===this.children)return[];{const e=[];for(let n=0;n<this.children.length;n++){const s=this.children[n];s instanceof t&&e.push(s)}return e}}getChildCount(){return null===this.children?0:this.children.length}getSourceInterval(){return null===this.start||null===this.stop?E.INVALID_INTERVAL:new E(this.start.tokenIndex,this.stop.tokenIndex)}}U.EMPTY=new Be;class ze{static DEFAULT_PROGRAM_NAME="default";constructor(t){this.tokens=t,this.programs=new Map}getTokenStream(){return this.tokens}insertAfter(t,e){let n,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:ze.DEFAULT_PROGRAM_NAME;n="number"==typeof t?t:t.tokenIndex;let i=this.getProgram(s),r=new He(this.tokens,n,i.length,e);i.push(r)}insertBefore(t,e){let n,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:ze.DEFAULT_PROGRAM_NAME;n="number"==typeof t?t:t.tokenIndex;const i=this.getProgram(s),r=new qe(this.tokens,n,i.length,e);i.push(r)}replaceSingle(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:ze.DEFAULT_PROGRAM_NAME;this.replace(t,t,e,n)}replace(t,e,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:ze.DEFAULT_PROGRAM_NAME;if("number"!=typeof t&&(t=t.tokenIndex),"number"!=typeof e&&(e=e.tokenIndex),t>e||t<0||e<0||e>=this.tokens.size)throw new RangeError(`replace: range invalid: ${t}..${e}(size=${this.tokens.size})`);let i=this.getProgram(s),r=new Ke(this.tokens,t,e,i.length,n);i.push(r)}delete(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:ze.DEFAULT_PROGRAM_NAME;void 0===e&&(e=t),this.replace(t,e,null,n)}getProgram(t){let e=this.programs.get(t);return null==e&&(e=this.initializeProgram(t)),e}initializeProgram(t){const e=[];return this.programs.set(t,e),e}getText(t){let e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ze.DEFAULT_PROGRAM_NAME;e=t instanceof E?t:new E(0,this.tokens.size-1),"string"==typeof t&&(n=t);const s=this.programs.get(n);let r=e.start,o=e.stop;if(o>this.tokens.size-1&&(o=this.tokens.size-1),r<0&&(r=0),null==s||0===s.length)return this.tokens.getText(new E(r,o));let a=[],l=this.reduceToSingleOperationPerIndex(s),h=r;for(;h<=o&&h<this.tokens.size;){let t=l.get(h);l.delete(h);let e=this.tokens.get(h);null==t?(e.type!==i.EOF&&a.push(String(e.text)),h++):h=t.execute(a)}if(o===this.tokens.size-1)for(const t of l.values())t.index>=this.tokens.size-1&&a.push(t.text.toString());return a.join("")}reduceToSingleOperationPerIndex(t){for(let e=0;e<t.length;e++){let n=t[e];if(null==n)continue;if(!(n instanceof Ke))continue;let s=n,i=this.getKindOfOps(t,qe,e);for(let e of i)e.index===s.index?(t[e.instructionIndex]=void 0,s.text=e.text.toString()+(null!=s.text?s.text.toString():"")):e.index>s.index&&e.index<=s.lastIndex&&(t[e.instructionIndex]=void 0);let r=this.getKindOfOps(t,Ke,e);for(let e of r){if(e.index>=s.index&&e.lastIndex<=s.lastIndex){t[e.instructionIndex]=void 0;continue}let n=e.lastIndex<s.index||e.index>s.lastIndex;if(null!=e.text||null!=s.text||n){if(!n)throw new Error(`replace op boundaries of ${s} overlap with previous ${e}`)}else t[e.instructionIndex]=void 0,s.index=Math.min(e.index,s.index),s.lastIndex=Math.max(e.lastIndex,s.lastIndex)}}for(let e=0;e<t.length;e++){let n=t[e];if(null==n)continue;if(!(n instanceof qe))continue;let s=n,i=this.getKindOfOps(t,qe,e);for(let e of i)e.index===s.index&&(e instanceof He?(s.text=this.catOpText(e.text,s.text),t[e.instructionIndex]=void 0):e instanceof qe&&(s.text=this.catOpText(s.text,e.text),t[e.instructionIndex]=void 0));let r=this.getKindOfOps(t,Ke,e);for(let n of r)if(s.index!==n.index){if(s.index>=n.index&&s.index<=n.lastIndex)throw new Error(`insert op ${s} within boundaries of previous ${n}`)}else n.text=this.catOpText(s.text,n.text),t[e]=void 0}let e=new Map;for(let n of t)if(null!=n){if(null!=e.get(n.index))throw new Error("should only be one op per index");e.set(n.index,n)}return e}catOpText(t,e){let n="",s="";return null!=t&&(n=t.toString()),null!=e&&(s=e.toString()),n+s}getKindOfOps(t,e,n){return t.slice(0,n).filter((t=>t&&t instanceof e))}}class Ve{constructor(t,e,n,s){this.tokens=t,this.instructionIndex=n,this.index=e,this.text=void 0===s?"":s}toString(){let t=this.constructor.name;const e=t.indexOf("$");return t=t.substring(e+1,t.length),"<"+t+"@"+this.tokens.get(this.index)+':"'+this.text+'">'}}class qe extends Ve{constructor(t,e,n,s){super(t,e,n,s)}execute(t){return this.text&&t.push(this.text.toString()),this.tokens.get(this.index).type!==i.EOF&&t.push(String(this.tokens.get(this.index).text)),this.index+1}}class He extends qe{constructor(t,e,n,s){super(t,e+1,n,s)}}class Ke extends Ve{constructor(t,e,n,s,i){super(t,e,s,i),this.lastIndex=n}execute(t){return this.text&&t.push(this.text.toString()),this.lastIndex+1}toString(){return null==this.text?"<DeleteOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+">":"<ReplaceOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+':"'+this.text+'">'}}const Ye={atn:re,dfa:he,context:ce,misc:ue,tree:fe,error:Ne,Token:i,CommonToken:Pt,CharStreams:Re,CharStream:ke,InputStream:Ie,CommonTokenStream:be,Lexer:Ut,Parser:Fe,ParserRuleContext:Be,Interval:E,IntervalSet:_,LL1Analyzer:j,Utils:we,TokenStreamRewriter:ze};var Ge=s.MG,We=s.fr,je=s.sR,$e=s.Zo,Xe=s.iH,Je=s.rt,Ze=s.jB,Qe=s.M8,tn=s.$t,en=s.aq,nn=s.pG,sn=s.eP,rn=s.KU,on=s.zW,an=s.IX,ln=s.mY,hn=s.a7,cn=s.JG,un=s.ay,dn=s.X2,gn=s.WU,pn=s.Uw,fn=s.gw,xn=s.iX,Tn=s.re,Sn=s.Pg,mn=s.tD,En=s.R$,_n=s.Dj,Cn=s.m7,An=s.NZ,Nn=s.xo,kn=s.ou,In=s.qC,yn=s.mD,Ln=s.Ay;
//# sourceMappingURL=antlr4.web.mjs.map

/***/ }),

/***/ "./node_modules/assert/assert.js":
/*!***************************************!*\
  !*** ./node_modules/assert/assert.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var objectAssign = __webpack_require__(/*! object.assign/polyfill */ "./node_modules/object.assign/polyfill.js")();

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (__webpack_require__.g.Buffer && typeof __webpack_require__.g.Buffer.isBuffer === 'function') {
    return __webpack_require__.g.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:
// NB: The URL to the CommonJS spec is kept just for tradition.
//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(/*! util/ */ "./node_modules/assert/node_modules/util/util.js");
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof __webpack_require__.g.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

// Expose a strict only variant of assert
function strict(value, message) {
  if (!value) fail(value, true, message, '==', strict);
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};


/***/ }),

/***/ "./node_modules/assert/node_modules/inherits/inherits_browser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/assert/node_modules/inherits/inherits_browser.js ***!
  \***********************************************************************/
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/assert/node_modules/util/support/isBufferBrowser.js":
/*!**************************************************************************!*\
  !*** ./node_modules/assert/node_modules/util/support/isBufferBrowser.js ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/assert/node_modules/util/util.js":
/*!*******************************************************!*\
  !*** ./node_modules/assert/node_modules/util/util.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(__webpack_require__.g.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/assert/node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/assert/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}


/***/ }),

/***/ "./node_modules/call-bind-apply-helpers/actualApply.js":
/*!*************************************************************!*\
  !*** ./node_modules/call-bind-apply-helpers/actualApply.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

var $apply = __webpack_require__(/*! ./functionApply */ "./node_modules/call-bind-apply-helpers/functionApply.js");
var $call = __webpack_require__(/*! ./functionCall */ "./node_modules/call-bind-apply-helpers/functionCall.js");
var $reflectApply = __webpack_require__(/*! ./reflectApply */ "./node_modules/call-bind-apply-helpers/reflectApply.js");

/** @type {import('./actualApply')} */
module.exports = $reflectApply || bind.call($call, $apply);


/***/ }),

/***/ "./node_modules/call-bind-apply-helpers/functionApply.js":
/*!***************************************************************!*\
  !*** ./node_modules/call-bind-apply-helpers/functionApply.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./functionApply')} */
module.exports = Function.prototype.apply;


/***/ }),

/***/ "./node_modules/call-bind-apply-helpers/functionCall.js":
/*!**************************************************************!*\
  !*** ./node_modules/call-bind-apply-helpers/functionCall.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./functionCall')} */
module.exports = Function.prototype.call;


/***/ }),

/***/ "./node_modules/call-bind-apply-helpers/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/call-bind-apply-helpers/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");

var $call = __webpack_require__(/*! ./functionCall */ "./node_modules/call-bind-apply-helpers/functionCall.js");
var $actualApply = __webpack_require__(/*! ./actualApply */ "./node_modules/call-bind-apply-helpers/actualApply.js");

/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */
module.exports = function callBindBasic(args) {
	if (args.length < 1 || typeof args[0] !== 'function') {
		throw new $TypeError('a function is required');
	}
	return $actualApply(bind, $call, args);
};


/***/ }),

/***/ "./node_modules/call-bind-apply-helpers/reflectApply.js":
/*!**************************************************************!*\
  !*** ./node_modules/call-bind-apply-helpers/reflectApply.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./reflectApply')} */
module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;


/***/ }),

/***/ "./node_modules/call-bound/index.js":
/*!******************************************!*\
  !*** ./node_modules/call-bound/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var callBindBasic = __webpack_require__(/*! call-bind-apply-helpers */ "./node_modules/call-bind-apply-helpers/index.js");

/** @type {(thisArg: string, searchString: string, position?: number) => number} */
var $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);

/** @type {import('.')} */
module.exports = function callBoundIntrinsic(name, allowMissing) {
	// eslint-disable-next-line no-extra-parens
	var intrinsic = /** @type {Parameters<typeof callBindBasic>[0][0]} */ (GetIntrinsic(name, !!allowMissing));
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBindBasic([intrinsic]);
	}
	return intrinsic;
};


/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(/*! util */ "./node_modules/util/util.js")
var assert = __webpack_require__(/*! assert */ "./node_modules/assert/assert.js")
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ "./node_modules/dunder-proto/get.js":
/*!******************************************!*\
  !*** ./node_modules/dunder-proto/get.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(/*! call-bind-apply-helpers */ "./node_modules/call-bind-apply-helpers/index.js");
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

var hasProtoAccessor;
try {
	// eslint-disable-next-line no-extra-parens, no-proto
	hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;
} catch (e) {
	if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
		throw e;
	}
}

// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));

var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;

/** @type {import('./get')} */
module.exports = desc && typeof desc.get === 'function'
	? callBind([desc.get])
	: typeof $getPrototypeOf === 'function'
		? /** @type {import('./get')} */ function getDunder(value) {
			// eslint-disable-next-line eqeqeq
			return $getPrototypeOf(value == null ? value : $Object(value));
		}
		: false;


/***/ }),

/***/ "./node_modules/es-define-property/index.js":
/*!**************************************************!*\
  !*** ./node_modules/es-define-property/index.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
var $defineProperty = Object.defineProperty || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;


/***/ }),

/***/ "./node_modules/es-errors/eval.js":
/*!****************************************!*\
  !*** ./node_modules/es-errors/eval.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./eval')} */
module.exports = EvalError;


/***/ }),

/***/ "./node_modules/es-errors/index.js":
/*!*****************************************!*\
  !*** ./node_modules/es-errors/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Error;


/***/ }),

/***/ "./node_modules/es-errors/range.js":
/*!*****************************************!*\
  !*** ./node_modules/es-errors/range.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./range')} */
module.exports = RangeError;


/***/ }),

/***/ "./node_modules/es-errors/ref.js":
/*!***************************************!*\
  !*** ./node_modules/es-errors/ref.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./ref')} */
module.exports = ReferenceError;


/***/ }),

/***/ "./node_modules/es-errors/syntax.js":
/*!******************************************!*\
  !*** ./node_modules/es-errors/syntax.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./syntax')} */
module.exports = SyntaxError;


/***/ }),

/***/ "./node_modules/es-errors/type.js":
/*!****************************************!*\
  !*** ./node_modules/es-errors/type.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./type')} */
module.exports = TypeError;


/***/ }),

/***/ "./node_modules/es-errors/uri.js":
/*!***************************************!*\
  !*** ./node_modules/es-errors/uri.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./uri')} */
module.exports = URIError;


/***/ }),

/***/ "./node_modules/es-object-atoms/index.js":
/*!***********************************************!*\
  !*** ./node_modules/es-object-atoms/index.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Object;


/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $Object = __webpack_require__(/*! es-object-atoms */ "./node_modules/es-object-atoms/index.js");

var $Error = __webpack_require__(/*! es-errors */ "./node_modules/es-errors/index.js");
var $EvalError = __webpack_require__(/*! es-errors/eval */ "./node_modules/es-errors/eval.js");
var $RangeError = __webpack_require__(/*! es-errors/range */ "./node_modules/es-errors/range.js");
var $ReferenceError = __webpack_require__(/*! es-errors/ref */ "./node_modules/es-errors/ref.js");
var $SyntaxError = __webpack_require__(/*! es-errors/syntax */ "./node_modules/es-errors/syntax.js");
var $TypeError = __webpack_require__(/*! es-errors/type */ "./node_modules/es-errors/type.js");
var $URIError = __webpack_require__(/*! es-errors/uri */ "./node_modules/es-errors/uri.js");

var abs = __webpack_require__(/*! math-intrinsics/abs */ "./node_modules/math-intrinsics/abs.js");
var floor = __webpack_require__(/*! math-intrinsics/floor */ "./node_modules/math-intrinsics/floor.js");
var max = __webpack_require__(/*! math-intrinsics/max */ "./node_modules/math-intrinsics/max.js");
var min = __webpack_require__(/*! math-intrinsics/min */ "./node_modules/math-intrinsics/min.js");
var pow = __webpack_require__(/*! math-intrinsics/pow */ "./node_modules/math-intrinsics/pow.js");
var round = __webpack_require__(/*! math-intrinsics/round */ "./node_modules/math-intrinsics/round.js");
var sign = __webpack_require__(/*! math-intrinsics/sign */ "./node_modules/math-intrinsics/sign.js");

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");
var $defineProperty = __webpack_require__(/*! es-define-property */ "./node_modules/es-define-property/index.js");

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/has-symbols/index.js")();

var getProto = __webpack_require__(/*! get-proto */ "./node_modules/get-proto/index.js");
var $ObjectGPO = __webpack_require__(/*! get-proto/Object.getPrototypeOf */ "./node_modules/get-proto/Object.getPrototypeOf.js");
var $ReflectGPO = __webpack_require__(/*! get-proto/Reflect.getPrototypeOf */ "./node_modules/get-proto/Reflect.getPrototypeOf.js");

var $apply = __webpack_require__(/*! call-bind-apply-helpers/functionApply */ "./node_modules/call-bind-apply-helpers/functionApply.js");
var $call = __webpack_require__(/*! call-bind-apply-helpers/functionCall */ "./node_modules/call-bind-apply-helpers/functionCall.js");

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': $Object,
	'%Object.getOwnPropertyDescriptor%': $gOPD,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,

	'%Function.prototype.call%': $call,
	'%Function.prototype.apply%': $apply,
	'%Object.defineProperty%': $defineProperty,
	'%Object.getPrototypeOf%': $ObjectGPO,
	'%Math.abs%': abs,
	'%Math.floor%': floor,
	'%Math.max%': max,
	'%Math.min%': min,
	'%Math.pow%': pow,
	'%Math.round%': round,
	'%Math.sign%': sign,
	'%Reflect.getPrototypeOf%': $ReflectGPO
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! hasown */ "./node_modules/hasown/index.js");
var $concat = bind.call($call, Array.prototype.concat);
var $spliceApply = bind.call($apply, Array.prototype.splice);
var $replace = bind.call($call, String.prototype.replace);
var $strSlice = bind.call($call, String.prototype.slice);
var $exec = bind.call($call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "./node_modules/get-proto/Object.getPrototypeOf.js":
/*!*********************************************************!*\
  !*** ./node_modules/get-proto/Object.getPrototypeOf.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $Object = __webpack_require__(/*! es-object-atoms */ "./node_modules/es-object-atoms/index.js");

/** @type {import('./Object.getPrototypeOf')} */
module.exports = $Object.getPrototypeOf || null;


/***/ }),

/***/ "./node_modules/get-proto/Reflect.getPrototypeOf.js":
/*!**********************************************************!*\
  !*** ./node_modules/get-proto/Reflect.getPrototypeOf.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./Reflect.getPrototypeOf')} */
module.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;


/***/ }),

/***/ "./node_modules/get-proto/index.js":
/*!*****************************************!*\
  !*** ./node_modules/get-proto/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var reflectGetProto = __webpack_require__(/*! ./Reflect.getPrototypeOf */ "./node_modules/get-proto/Reflect.getPrototypeOf.js");
var originalGetProto = __webpack_require__(/*! ./Object.getPrototypeOf */ "./node_modules/get-proto/Object.getPrototypeOf.js");

var getDunderProto = __webpack_require__(/*! dunder-proto/get */ "./node_modules/dunder-proto/get.js");

/** @type {import('.')} */
module.exports = reflectGetProto
	? function getProto(O) {
		// @ts-expect-error TS can't narrow inside a closure, for some reason
		return reflectGetProto(O);
	}
	: originalGetProto
		? function getProto(O) {
			if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
				throw new TypeError('getProto: not an object');
			}
			// @ts-expect-error TS can't narrow inside a closure, for some reason
			return originalGetProto(O);
		}
		: getDunderProto
			? function getProto(O) {
				// @ts-expect-error TS can't narrow inside a closure, for some reason
				return getDunderProto(O);
			}
			: null;


/***/ }),

/***/ "./node_modules/gopd/gOPD.js":
/*!***********************************!*\
  !*** ./node_modules/gopd/gOPD.js ***!
  \***********************************/
/***/ ((module) => {

"use strict";


/** @type {import('./gOPD')} */
module.exports = Object.getOwnPropertyDescriptor;


/***/ }),

/***/ "./node_modules/gopd/index.js":
/*!************************************!*\
  !*** ./node_modules/gopd/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/** @type {import('.')} */
var $gOPD = __webpack_require__(/*! ./gOPD */ "./node_modules/gopd/gOPD.js");

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/has-symbols/shams.js");

/** @type {import('.')} */
module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./shams')} */
/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	/** @type {{ [k in symbol]?: unknown }} */
	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		// eslint-disable-next-line no-extra-parens
		var descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "./node_modules/hasown/index.js":
/*!**************************************!*\
  !*** ./node_modules/hasown/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);


/***/ }),

/***/ "./node_modules/math-intrinsics/abs.js":
/*!*********************************************!*\
  !*** ./node_modules/math-intrinsics/abs.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./abs')} */
module.exports = Math.abs;


/***/ }),

/***/ "./node_modules/math-intrinsics/floor.js":
/*!***********************************************!*\
  !*** ./node_modules/math-intrinsics/floor.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./floor')} */
module.exports = Math.floor;


/***/ }),

/***/ "./node_modules/math-intrinsics/isNaN.js":
/*!***********************************************!*\
  !*** ./node_modules/math-intrinsics/isNaN.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./isNaN')} */
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};


/***/ }),

/***/ "./node_modules/math-intrinsics/max.js":
/*!*********************************************!*\
  !*** ./node_modules/math-intrinsics/max.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./max')} */
module.exports = Math.max;


/***/ }),

/***/ "./node_modules/math-intrinsics/min.js":
/*!*********************************************!*\
  !*** ./node_modules/math-intrinsics/min.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./min')} */
module.exports = Math.min;


/***/ }),

/***/ "./node_modules/math-intrinsics/pow.js":
/*!*********************************************!*\
  !*** ./node_modules/math-intrinsics/pow.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./pow')} */
module.exports = Math.pow;


/***/ }),

/***/ "./node_modules/math-intrinsics/round.js":
/*!***********************************************!*\
  !*** ./node_modules/math-intrinsics/round.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


/** @type {import('./round')} */
module.exports = Math.round;


/***/ }),

/***/ "./node_modules/math-intrinsics/sign.js":
/*!**********************************************!*\
  !*** ./node_modules/math-intrinsics/sign.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $isNaN = __webpack_require__(/*! ./isNaN */ "./node_modules/math-intrinsics/isNaN.js");

/** @type {import('./sign')} */
module.exports = function sign(number) {
	if ($isNaN(number) || number === 0) {
		return number;
	}
	return number < 0 ? -1 : +1;
};


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arrays.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArrayQueue: () => (/* binding */ ArrayQueue),
/* harmony export */   CallbackIterable: () => (/* binding */ CallbackIterable),
/* harmony export */   CompareResult: () => (/* binding */ CompareResult),
/* harmony export */   arrayInsert: () => (/* binding */ arrayInsert),
/* harmony export */   asArray: () => (/* binding */ asArray),
/* harmony export */   binarySearch: () => (/* binding */ binarySearch),
/* harmony export */   binarySearch2: () => (/* binding */ binarySearch2),
/* harmony export */   booleanComparator: () => (/* binding */ booleanComparator),
/* harmony export */   coalesce: () => (/* binding */ coalesce),
/* harmony export */   coalesceInPlace: () => (/* binding */ coalesceInPlace),
/* harmony export */   compareBy: () => (/* binding */ compareBy),
/* harmony export */   distinct: () => (/* binding */ distinct),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   firstOrDefault: () => (/* binding */ firstOrDefault),
/* harmony export */   forEachAdjacent: () => (/* binding */ forEachAdjacent),
/* harmony export */   forEachWithNeighbors: () => (/* binding */ forEachWithNeighbors),
/* harmony export */   groupAdjacentBy: () => (/* binding */ groupAdjacentBy),
/* harmony export */   groupBy: () => (/* binding */ groupBy),
/* harmony export */   insertInto: () => (/* binding */ insertInto),
/* harmony export */   isFalsyOrEmpty: () => (/* binding */ isFalsyOrEmpty),
/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray),
/* harmony export */   numberComparator: () => (/* binding */ numberComparator),
/* harmony export */   pushMany: () => (/* binding */ pushMany),
/* harmony export */   pushToEnd: () => (/* binding */ pushToEnd),
/* harmony export */   pushToStart: () => (/* binding */ pushToStart),
/* harmony export */   quickSelect: () => (/* binding */ quickSelect),
/* harmony export */   range: () => (/* binding */ range),
/* harmony export */   removeFastWithoutKeepingOrder: () => (/* binding */ removeFastWithoutKeepingOrder),
/* harmony export */   reverseOrder: () => (/* binding */ reverseOrder),
/* harmony export */   splice: () => (/* binding */ splice),
/* harmony export */   tail: () => (/* binding */ tail),
/* harmony export */   tail2: () => (/* binding */ tail2),
/* harmony export */   tieBreakComparators: () => (/* binding */ tieBreakComparators)
/* harmony export */ });
/**
 * Returns the last element of an array.
 * @param array The array.
 * @param n Which element from the end (default is zero).
 */
function tail(array, n = 0) {
    return array[array.length - (1 + n)];
}
function tail2(arr) {
    if (arr.length === 0) {
        throw new Error('Invalid tail call');
    }
    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];
}
function equals(one, other, itemEquals = (a, b) => a === b) {
    if (one === other) {
        return true;
    }
    if (!one || !other) {
        return false;
    }
    if (one.length !== other.length) {
        return false;
    }
    for (let i = 0, len = one.length; i < len; i++) {
        if (!itemEquals(one[i], other[i])) {
            return false;
        }
    }
    return true;
}
/**
 * Remove the element at `index` by replacing it with the last element. This is faster than `splice`
 * but changes the order of the array
 */
function removeFastWithoutKeepingOrder(array, index) {
    const last = array.length - 1;
    if (index < last) {
        array[index] = array[last];
    }
    array.pop();
}
/**
 * Performs a binary search algorithm over a sorted array.
 *
 * @param array The array being searched.
 * @param key The value we search for.
 * @param comparator A function that takes two array elements and returns zero
 *   if they are equal, a negative number if the first element precedes the
 *   second one in the sorting order, or a positive number if the second element
 *   precedes the first one.
 * @return See {@link binarySearch2}
 */
function binarySearch(array, key, comparator) {
    return binarySearch2(array.length, i => comparator(array[i], key));
}
/**
 * Performs a binary search algorithm over a sorted collection. Useful for cases
 * when we need to perform a binary search over something that isn't actually an
 * array, and converting data to an array would defeat the use of binary search
 * in the first place.
 *
 * @param length The collection length.
 * @param compareToKey A function that takes an index of an element in the
 *   collection and returns zero if the value at this index is equal to the
 *   search key, a negative number if the value precedes the search key in the
 *   sorting order, or a positive number if the search key precedes the value.
 * @return A non-negative index of an element, if found. If not found, the
 *   result is -(n+1) (or ~n, using bitwise notation), where n is the index
 *   where the key should be inserted to maintain the sorting order.
 */
function binarySearch2(length, compareToKey) {
    let low = 0, high = length - 1;
    while (low <= high) {
        const mid = ((low + high) / 2) | 0;
        const comp = compareToKey(mid);
        if (comp < 0) {
            low = mid + 1;
        }
        else if (comp > 0) {
            high = mid - 1;
        }
        else {
            return mid;
        }
    }
    return -(low + 1);
}
function quickSelect(nth, data, compare) {
    nth = nth | 0;
    if (nth >= data.length) {
        throw new TypeError('invalid index');
    }
    const pivotValue = data[Math.floor(data.length * Math.random())];
    const lower = [];
    const higher = [];
    const pivots = [];
    for (const value of data) {
        const val = compare(value, pivotValue);
        if (val < 0) {
            lower.push(value);
        }
        else if (val > 0) {
            higher.push(value);
        }
        else {
            pivots.push(value);
        }
    }
    if (nth < lower.length) {
        return quickSelect(nth, lower, compare);
    }
    else if (nth < lower.length + pivots.length) {
        return pivots[0];
    }
    else {
        return quickSelect(nth - (lower.length + pivots.length), higher, compare);
    }
}
function groupBy(data, compare) {
    const result = [];
    let currentGroup = undefined;
    for (const element of data.slice(0).sort(compare)) {
        if (!currentGroup || compare(currentGroup[0], element) !== 0) {
            currentGroup = [element];
            result.push(currentGroup);
        }
        else {
            currentGroup.push(element);
        }
    }
    return result;
}
/**
 * Splits the given items into a list of (non-empty) groups.
 * `shouldBeGrouped` is used to decide if two consecutive items should be in the same group.
 * The order of the items is preserved.
 */
function* groupAdjacentBy(items, shouldBeGrouped) {
    let currentGroup;
    let last;
    for (const item of items) {
        if (last !== undefined && shouldBeGrouped(last, item)) {
            currentGroup.push(item);
        }
        else {
            if (currentGroup) {
                yield currentGroup;
            }
            currentGroup = [item];
        }
        last = item;
    }
    if (currentGroup) {
        yield currentGroup;
    }
}
function forEachAdjacent(arr, f) {
    for (let i = 0; i <= arr.length; i++) {
        f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);
    }
}
function forEachWithNeighbors(arr, f) {
    for (let i = 0; i < arr.length; i++) {
        f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);
    }
}
/**
 * @returns New array with all falsy values removed. The original array IS NOT modified.
 */
function coalesce(array) {
    return array.filter(e => !!e);
}
/**
 * Remove all falsy values from `array`. The original array IS modified.
 */
function coalesceInPlace(array) {
    let to = 0;
    for (let i = 0; i < array.length; i++) {
        if (!!array[i]) {
            array[to] = array[i];
            to += 1;
        }
    }
    array.length = to;
}
/**
 * @returns false if the provided object is an array and not empty.
 */
function isFalsyOrEmpty(obj) {
    return !Array.isArray(obj) || obj.length === 0;
}
function isNonEmptyArray(obj) {
    return Array.isArray(obj) && obj.length > 0;
}
/**
 * Removes duplicates from the given array. The optional keyFn allows to specify
 * how elements are checked for equality by returning an alternate value for each.
 */
function distinct(array, keyFn = value => value) {
    const seen = new Set();
    return array.filter(element => {
        const key = keyFn(element);
        if (seen.has(key)) {
            return false;
        }
        seen.add(key);
        return true;
    });
}
function firstOrDefault(array, notFoundValue) {
    return array.length > 0 ? array[0] : notFoundValue;
}
function range(arg, to) {
    let from = typeof to === 'number' ? arg : 0;
    if (typeof to === 'number') {
        from = arg;
    }
    else {
        from = 0;
        to = arg;
    }
    const result = [];
    if (from <= to) {
        for (let i = from; i < to; i++) {
            result.push(i);
        }
    }
    else {
        for (let i = from; i > to; i--) {
            result.push(i);
        }
    }
    return result;
}
/**
 * Insert `insertArr` inside `target` at `insertIndex`.
 * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array
 */
function arrayInsert(target, insertIndex, insertArr) {
    const before = target.slice(0, insertIndex);
    const after = target.slice(insertIndex);
    return before.concat(insertArr, after);
}
/**
 * Pushes an element to the start of the array, if found.
 */
function pushToStart(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.unshift(value);
    }
}
/**
 * Pushes an element to the end of the array, if found.
 */
function pushToEnd(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
        arr.push(value);
    }
}
function pushMany(arr, items) {
    for (const item of items) {
        arr.push(item);
    }
}
function asArray(x) {
    return Array.isArray(x) ? x : [x];
}
/**
 * Insert the new items in the array.
 * @param array The original array.
 * @param start The zero-based location in the array from which to start inserting elements.
 * @param newItems The items to be inserted
 */
function insertInto(array, start, newItems) {
    const startIdx = getActualStartIndex(array, start);
    const originalLength = array.length;
    const newItemsLength = newItems.length;
    array.length = originalLength + newItemsLength;
    // Move the items after the start index, start from the end so that we don't overwrite any value.
    for (let i = originalLength - 1; i >= startIdx; i--) {
        array[i + newItemsLength] = array[i];
    }
    for (let i = 0; i < newItemsLength; i++) {
        array[i + startIdx] = newItems[i];
    }
}
/**
 * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it
 * can only support limited number of items due to the maximum call stack size limit.
 * @param array The original array.
 * @param start The zero-based location in the array from which to start removing elements.
 * @param deleteCount The number of elements to remove.
 * @returns An array containing the elements that were deleted.
 */
function splice(array, start, deleteCount, newItems) {
    const index = getActualStartIndex(array, start);
    let result = array.splice(index, deleteCount);
    if (result === undefined) {
        // see https://bugs.webkit.org/show_bug.cgi?id=261140
        result = [];
    }
    insertInto(array, index, newItems);
    return result;
}
/**
 * Determine the actual start index (same logic as the native splice() or slice())
 * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.
 * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.
 * @param array The target array.
 * @param start The operation index.
 */
function getActualStartIndex(array, start) {
    return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);
}
var CompareResult;
(function (CompareResult) {
    function isLessThan(result) {
        return result < 0;
    }
    CompareResult.isLessThan = isLessThan;
    function isLessThanOrEqual(result) {
        return result <= 0;
    }
    CompareResult.isLessThanOrEqual = isLessThanOrEqual;
    function isGreaterThan(result) {
        return result > 0;
    }
    CompareResult.isGreaterThan = isGreaterThan;
    function isNeitherLessOrGreaterThan(result) {
        return result === 0;
    }
    CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;
    CompareResult.greaterThan = 1;
    CompareResult.lessThan = -1;
    CompareResult.neitherLessOrGreaterThan = 0;
})(CompareResult || (CompareResult = {}));
function compareBy(selector, comparator) {
    return (a, b) => comparator(selector(a), selector(b));
}
function tieBreakComparators(...comparators) {
    return (item1, item2) => {
        for (const comparator of comparators) {
            const result = comparator(item1, item2);
            if (!CompareResult.isNeitherLessOrGreaterThan(result)) {
                return result;
            }
        }
        return CompareResult.neitherLessOrGreaterThan;
    };
}
/**
 * The natural order on numbers.
*/
const numberComparator = (a, b) => a - b;
const booleanComparator = (a, b) => numberComparator(a ? 1 : 0, b ? 1 : 0);
function reverseOrder(comparator) {
    return (a, b) => -comparator(a, b);
}
class ArrayQueue {
    /**
     * Constructs a queue that is backed by the given array. Runtime is O(1).
    */
    constructor(items) {
        this.items = items;
        this.firstIdx = 0;
        this.lastIdx = this.items.length - 1;
    }
    get length() {
        return this.lastIdx - this.firstIdx + 1;
    }
    /**
     * Consumes elements from the beginning of the queue as long as the predicate returns true.
     * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).
    */
    takeWhile(predicate) {
        // P(k) := k <= this.lastIdx && predicate(this.items[k])
        // Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)
        let startIdx = this.firstIdx;
        while (startIdx < this.items.length && predicate(this.items[startIdx])) {
            startIdx++;
        }
        const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);
        this.firstIdx = startIdx;
        return result;
    }
    /**
     * Consumes elements from the end of the queue as long as the predicate returns true.
     * If no elements were consumed, `null` is returned.
     * The result has the same order as the underlying array!
    */
    takeFromEndWhile(predicate) {
        // P(k) := this.firstIdx >= k && predicate(this.items[k])
        // Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]
        let endIdx = this.lastIdx;
        while (endIdx >= 0 && predicate(this.items[endIdx])) {
            endIdx--;
        }
        const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);
        this.lastIdx = endIdx;
        return result;
    }
    peek() {
        if (this.length === 0) {
            return undefined;
        }
        return this.items[this.firstIdx];
    }
    dequeue() {
        const result = this.items[this.firstIdx];
        this.firstIdx++;
        return result;
    }
    takeCount(count) {
        const result = this.items.slice(this.firstIdx, this.firstIdx + count);
        this.firstIdx += count;
        return result;
    }
}
/**
 * This class is faster than an iterator and array for lazy computed data.
*/
class CallbackIterable {
    constructor(
    /**
     * Calls the callback for every item.
     * Stops when the callback returns false.
    */
    iterate) {
        this.iterate = iterate;
    }
    toArray() {
        const result = [];
        this.iterate(item => { result.push(item); return true; });
        return result;
    }
    filter(predicate) {
        return new CallbackIterable(cb => this.iterate(item => predicate(item) ? cb(item) : true));
    }
    map(mapFn) {
        return new CallbackIterable(cb => this.iterate(item => cb(mapFn(item))));
    }
    findLast(predicate) {
        let result;
        this.iterate(item => {
            if (predicate(item)) {
                result = item;
            }
            return true;
        });
        return result;
    }
    findLastMaxBy(comparator) {
        let result;
        let first = true;
        this.iterate(item => {
            if (first || CompareResult.isGreaterThan(comparator(item, result))) {
                first = false;
                result = item;
            }
            return true;
        });
        return result;
    }
}
CallbackIterable.empty = new CallbackIterable(_callback => { });


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MonotonousArray: () => (/* binding */ MonotonousArray),
/* harmony export */   findFirstIdxMonotonousOrArrLen: () => (/* binding */ findFirstIdxMonotonousOrArrLen),
/* harmony export */   findFirstMaxBy: () => (/* binding */ findFirstMaxBy),
/* harmony export */   findFirstMinBy: () => (/* binding */ findFirstMinBy),
/* harmony export */   findFirstMonotonous: () => (/* binding */ findFirstMonotonous),
/* harmony export */   findLast: () => (/* binding */ findLast),
/* harmony export */   findLastIdx: () => (/* binding */ findLastIdx),
/* harmony export */   findLastIdxMonotonous: () => (/* binding */ findLastIdxMonotonous),
/* harmony export */   findLastMaxBy: () => (/* binding */ findLastMaxBy),
/* harmony export */   findLastMonotonous: () => (/* binding */ findLastMonotonous),
/* harmony export */   findMaxIdxBy: () => (/* binding */ findMaxIdxBy),
/* harmony export */   mapFindFirst: () => (/* binding */ mapFindFirst)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function findLast(array, predicate, fromIdx) {
    const idx = findLastIdx(array, predicate);
    if (idx === -1) {
        return undefined;
    }
    return array[idx];
}
function findLastIdx(array, predicate, fromIndex = array.length - 1) {
    for (let i = fromIndex; i >= 0; i--) {
        const element = array[i];
        if (predicate(element)) {
            return i;
        }
    }
    return -1;
}
/**
 * Finds the last item where predicate is true using binary search.
 * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!
 *
 * @returns `undefined` if no item matches, otherwise the last item that matches the predicate.
 */
function findLastMonotonous(array, predicate) {
    const idx = findLastIdxMonotonous(array, predicate);
    return idx === -1 ? undefined : array[idx];
}
/**
 * Finds the last item where predicate is true using binary search.
 * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!
 *
 * @returns `startIdx - 1` if predicate is false for all items, otherwise the index of the last item that matches the predicate.
 */
function findLastIdxMonotonous(array, predicate, startIdx = 0, endIdxEx = array.length) {
    let i = startIdx;
    let j = endIdxEx;
    while (i < j) {
        const k = Math.floor((i + j) / 2);
        if (predicate(array[k])) {
            i = k + 1;
        }
        else {
            j = k;
        }
    }
    return i - 1;
}
/**
 * Finds the first item where predicate is true using binary search.
 * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!
 *
 * @returns `undefined` if no item matches, otherwise the first item that matches the predicate.
 */
function findFirstMonotonous(array, predicate) {
    const idx = findFirstIdxMonotonousOrArrLen(array, predicate);
    return idx === array.length ? undefined : array[idx];
}
/**
 * Finds the first item where predicate is true using binary search.
 * `predicate` must be monotonous, i.e. `arr.map(predicate)` must be like `[false, ..., false, true, ..., true]`!
 *
 * @returns `endIdxEx` if predicate is false for all items, otherwise the index of the first item that matches the predicate.
 */
function findFirstIdxMonotonousOrArrLen(array, predicate, startIdx = 0, endIdxEx = array.length) {
    let i = startIdx;
    let j = endIdxEx;
    while (i < j) {
        const k = Math.floor((i + j) / 2);
        if (predicate(array[k])) {
            j = k;
        }
        else {
            i = k + 1;
        }
    }
    return i;
}
/**
 * Use this when
 * * You have a sorted array
 * * You query this array with a monotonous predicate to find the last item that has a certain property.
 * * You query this array multiple times with monotonous predicates that get weaker and weaker.
 */
class MonotonousArray {
    constructor(_array) {
        this._array = _array;
        this._findLastMonotonousLastIdx = 0;
    }
    /**
     * The predicate must be monotonous, i.e. `arr.map(predicate)` must be like `[true, ..., true, false, ..., false]`!
     * For subsequent calls, current predicate must be weaker than (or equal to) the previous predicate, i.e. more entries must be `true`.
     */
    findLastMonotonous(predicate) {
        if (MonotonousArray.assertInvariants) {
            if (this._prevFindLastPredicate) {
                for (const item of this._array) {
                    if (this._prevFindLastPredicate(item) && !predicate(item)) {
                        throw new Error('MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.');
                    }
                }
            }
            this._prevFindLastPredicate = predicate;
        }
        const idx = findLastIdxMonotonous(this._array, predicate, this._findLastMonotonousLastIdx);
        this._findLastMonotonousLastIdx = idx + 1;
        return idx === -1 ? undefined : this._array[idx];
    }
}
MonotonousArray.assertInvariants = false;
/**
 * Returns the first item that is equal to or greater than every other item.
*/
function findFirstMaxBy(array, comparator) {
    if (array.length === 0) {
        return undefined;
    }
    let max = array[0];
    for (let i = 1; i < array.length; i++) {
        const item = array[i];
        if (comparator(item, max) > 0) {
            max = item;
        }
    }
    return max;
}
/**
 * Returns the last item that is equal to or greater than every other item.
*/
function findLastMaxBy(array, comparator) {
    if (array.length === 0) {
        return undefined;
    }
    let max = array[0];
    for (let i = 1; i < array.length; i++) {
        const item = array[i];
        if (comparator(item, max) >= 0) {
            max = item;
        }
    }
    return max;
}
/**
 * Returns the first item that is equal to or less than every other item.
*/
function findFirstMinBy(array, comparator) {
    return findFirstMaxBy(array, (a, b) => -comparator(a, b));
}
function findMaxIdxBy(array, comparator) {
    if (array.length === 0) {
        return -1;
    }
    let maxIdx = 0;
    for (let i = 1; i < array.length; i++) {
        const item = array[i];
        if (comparator(item, array[maxIdx]) > 0) {
            maxIdx = i;
        }
    }
    return maxIdx;
}
/**
 * Returns the first mapped value of the array which is not undefined.
 */
function mapFindFirst(items, mapFn) {
    for (const value of items) {
        const mapped = mapFn(value);
        if (mapped !== undefined) {
            return mapped;
        }
    }
    return undefined;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/assert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/assert.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertFn: () => (/* binding */ assertFn),
/* harmony export */   assertNever: () => (/* binding */ assertNever),
/* harmony export */   checkAdjacentItems: () => (/* binding */ checkAdjacentItems),
/* harmony export */   ok: () => (/* binding */ ok)
/* harmony export */ });
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ "./node_modules/monaco-editor/esm/vs/base/common/errors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.
 *
 * @deprecated Use `assert(...)` instead.
 * This method is usually used like this:
 * ```ts
 * import * as assert from 'vs/base/common/assert';
 * assert.ok(...);
 * ```
 *
 * However, `assert` in that example is a user chosen name.
 * There is no tooling for generating such an import statement.
 * Thus, the `assert(...)` function should be used instead.
 */
function ok(value, message) {
    if (!value) {
        throw new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');
    }
}
function assertNever(value, message = 'Unreachable') {
    throw new Error(message);
}
/**
 * condition must be side-effect free!
 */
function assertFn(condition) {
    if (!condition()) {
        // eslint-disable-next-line no-debugger
        debugger;
        // Reevaluate `condition` again to make debugging easier
        condition();
        (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(new _errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError('Assertion Failed'));
    }
}
function checkAdjacentItems(items, predicate) {
    let i = 0;
    while (i < items.length - 1) {
        const a = items[i];
        const b = items[i + 1];
        if (!predicate(a, b)) {
            return false;
        }
        i++;
    }
    return true;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cache.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cache.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CachedFunction: () => (/* binding */ CachedFunction),
/* harmony export */   LRUCachedFunction: () => (/* binding */ LRUCachedFunction)
/* harmony export */ });
/**
 * Uses a LRU cache to make a given parametrized function cached.
 * Caches just the last value.
 * The key must be JSON serializable.
*/
class LRUCachedFunction {
    constructor(fn) {
        this.fn = fn;
        this.lastCache = undefined;
        this.lastArgKey = undefined;
    }
    get(arg) {
        const key = JSON.stringify(arg);
        if (this.lastArgKey !== key) {
            this.lastArgKey = key;
            this.lastCache = this.fn(arg);
        }
        return this.lastCache;
    }
}
/**
 * Uses an unbounded cache (referential equality) to memoize the results of the given function.
*/
class CachedFunction {
    get cachedValues() {
        return this._map;
    }
    constructor(fn) {
        this.fn = fn;
        this._map = new Map();
    }
    get(arg) {
        if (this._map.has(arg)) {
            return this._map.get(arg);
        }
        const value = this.fn(arg);
        this._map.set(arg, value);
        return value;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/cancellation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/cancellation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CancellationToken: () => (/* binding */ CancellationToken),
/* harmony export */   CancellationTokenSource: () => (/* binding */ CancellationTokenSource)
/* harmony export */ });
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ "./node_modules/monaco-editor/esm/vs/base/common/event.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = setTimeout(callback.bind(context), 0);
    return { dispose() { clearTimeout(handle); } };
});
var CancellationToken;
(function (CancellationToken) {
    function isCancellationToken(thing) {
        if (thing === CancellationToken.None || thing === CancellationToken.Cancelled) {
            return true;
        }
        if (thing instanceof MutableToken) {
            return true;
        }
        if (!thing || typeof thing !== 'object') {
            return false;
        }
        return typeof thing.isCancellationRequested === 'boolean'
            && typeof thing.onCancellationRequested === 'function';
    }
    CancellationToken.isCancellationToken = isCancellationToken;
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: _event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: shortcutEvent
    });
})(CancellationToken || (CancellationToken = {}));
class MutableToken {
    constructor() {
        this._isCancelled = false;
        this._emitter = null;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = null;
        }
    }
}
class CancellationTokenSource {
    constructor(parent) {
        this._token = undefined;
        this._parentListener = undefined;
        this._parentListener = parent && parent.onCancellationRequested(this.cancel, this);
    }
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else if (this._token instanceof MutableToken) {
            // actually cancel
            this._token.cancel();
        }
    }
    dispose(cancel = false) {
        var _a;
        if (cancel) {
            this.cancel();
        }
        (_a = this._parentListener) === null || _a === void 0 ? void 0 : _a.dispose();
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/codicons.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/codicons.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Codicon: () => (/* binding */ Codicon),
/* harmony export */   getCodiconFontCharacters: () => (/* binding */ getCodiconFontCharacters)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ "./node_modules/monaco-editor/esm/vs/base/common/types.js");

const _codiconFontCharacters = Object.create(null);
function register(id, fontCharacter) {
    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isString)(fontCharacter)) {
        const val = _codiconFontCharacters[fontCharacter];
        if (val === undefined) {
            throw new Error(`${id} references an unknown codicon: ${fontCharacter}`);
        }
        fontCharacter = val;
    }
    _codiconFontCharacters[id] = fontCharacter;
    return { id };
}
/**
 * Only to be used by the iconRegistry.
 */
function getCodiconFontCharacters() {
    return _codiconFontCharacters;
}
/**
 * The Codicon library is a set of default icons that are built-in in VS Code.
 *
 * In the product (outside of base) Codicons should only be used as defaults. In order to have all icons in VS Code
 * themeable, component should define new, UI component specific icons using `iconRegistry.registerIcon`.
 * In that call a Codicon can be named as default.
 */
const Codicon = {
    // built-in icons, with image name
    add: register('add', 0xea60),
    plus: register('plus', 0xea60),
    gistNew: register('gist-new', 0xea60),
    repoCreate: register('repo-create', 0xea60),
    lightbulb: register('lightbulb', 0xea61),
    lightBulb: register('light-bulb', 0xea61),
    repo: register('repo', 0xea62),
    repoDelete: register('repo-delete', 0xea62),
    gistFork: register('gist-fork', 0xea63),
    repoForked: register('repo-forked', 0xea63),
    gitPullRequest: register('git-pull-request', 0xea64),
    gitPullRequestAbandoned: register('git-pull-request-abandoned', 0xea64),
    recordKeys: register('record-keys', 0xea65),
    keyboard: register('keyboard', 0xea65),
    tag: register('tag', 0xea66),
    tagAdd: register('tag-add', 0xea66),
    tagRemove: register('tag-remove', 0xea66),
    gitPullRequestLabel: register('git-pull-request-label', 0xea66),
    person: register('person', 0xea67),
    personFollow: register('person-follow', 0xea67),
    personOutline: register('person-outline', 0xea67),
    personFilled: register('person-filled', 0xea67),
    gitBranch: register('git-branch', 0xea68),
    gitBranchCreate: register('git-branch-create', 0xea68),
    gitBranchDelete: register('git-branch-delete', 0xea68),
    sourceControl: register('source-control', 0xea68),
    mirror: register('mirror', 0xea69),
    mirrorPublic: register('mirror-public', 0xea69),
    star: register('star', 0xea6a),
    starAdd: register('star-add', 0xea6a),
    starDelete: register('star-delete', 0xea6a),
    starEmpty: register('star-empty', 0xea6a),
    comment: register('comment', 0xea6b),
    commentAdd: register('comment-add', 0xea6b),
    alert: register('alert', 0xea6c),
    warning: register('warning', 0xea6c),
    search: register('search', 0xea6d),
    searchSave: register('search-save', 0xea6d),
    logOut: register('log-out', 0xea6e),
    signOut: register('sign-out', 0xea6e),
    logIn: register('log-in', 0xea6f),
    signIn: register('sign-in', 0xea6f),
    eye: register('eye', 0xea70),
    eyeUnwatch: register('eye-unwatch', 0xea70),
    eyeWatch: register('eye-watch', 0xea70),
    circleFilled: register('circle-filled', 0xea71),
    primitiveDot: register('primitive-dot', 0xea71),
    closeDirty: register('close-dirty', 0xea71),
    debugBreakpoint: register('debug-breakpoint', 0xea71),
    debugBreakpointDisabled: register('debug-breakpoint-disabled', 0xea71),
    debugHint: register('debug-hint', 0xea71),
    primitiveSquare: register('primitive-square', 0xea72),
    edit: register('edit', 0xea73),
    pencil: register('pencil', 0xea73),
    info: register('info', 0xea74),
    issueOpened: register('issue-opened', 0xea74),
    gistPrivate: register('gist-private', 0xea75),
    gitForkPrivate: register('git-fork-private', 0xea75),
    lock: register('lock', 0xea75),
    mirrorPrivate: register('mirror-private', 0xea75),
    close: register('close', 0xea76),
    removeClose: register('remove-close', 0xea76),
    x: register('x', 0xea76),
    repoSync: register('repo-sync', 0xea77),
    sync: register('sync', 0xea77),
    clone: register('clone', 0xea78),
    desktopDownload: register('desktop-download', 0xea78),
    beaker: register('beaker', 0xea79),
    microscope: register('microscope', 0xea79),
    vm: register('vm', 0xea7a),
    deviceDesktop: register('device-desktop', 0xea7a),
    file: register('file', 0xea7b),
    fileText: register('file-text', 0xea7b),
    more: register('more', 0xea7c),
    ellipsis: register('ellipsis', 0xea7c),
    kebabHorizontal: register('kebab-horizontal', 0xea7c),
    mailReply: register('mail-reply', 0xea7d),
    reply: register('reply', 0xea7d),
    organization: register('organization', 0xea7e),
    organizationFilled: register('organization-filled', 0xea7e),
    organizationOutline: register('organization-outline', 0xea7e),
    newFile: register('new-file', 0xea7f),
    fileAdd: register('file-add', 0xea7f),
    newFolder: register('new-folder', 0xea80),
    fileDirectoryCreate: register('file-directory-create', 0xea80),
    trash: register('trash', 0xea81),
    trashcan: register('trashcan', 0xea81),
    history: register('history', 0xea82),
    clock: register('clock', 0xea82),
    folder: register('folder', 0xea83),
    fileDirectory: register('file-directory', 0xea83),
    symbolFolder: register('symbol-folder', 0xea83),
    logoGithub: register('logo-github', 0xea84),
    markGithub: register('mark-github', 0xea84),
    github: register('github', 0xea84),
    terminal: register('terminal', 0xea85),
    console: register('console', 0xea85),
    repl: register('repl', 0xea85),
    zap: register('zap', 0xea86),
    symbolEvent: register('symbol-event', 0xea86),
    error: register('error', 0xea87),
    stop: register('stop', 0xea87),
    variable: register('variable', 0xea88),
    symbolVariable: register('symbol-variable', 0xea88),
    array: register('array', 0xea8a),
    symbolArray: register('symbol-array', 0xea8a),
    symbolModule: register('symbol-module', 0xea8b),
    symbolPackage: register('symbol-package', 0xea8b),
    symbolNamespace: register('symbol-namespace', 0xea8b),
    symbolObject: register('symbol-object', 0xea8b),
    symbolMethod: register('symbol-method', 0xea8c),
    symbolFunction: register('symbol-function', 0xea8c),
    symbolConstructor: register('symbol-constructor', 0xea8c),
    symbolBoolean: register('symbol-boolean', 0xea8f),
    symbolNull: register('symbol-null', 0xea8f),
    symbolNumeric: register('symbol-numeric', 0xea90),
    symbolNumber: register('symbol-number', 0xea90),
    symbolStructure: register('symbol-structure', 0xea91),
    symbolStruct: register('symbol-struct', 0xea91),
    symbolParameter: register('symbol-parameter', 0xea92),
    symbolTypeParameter: register('symbol-type-parameter', 0xea92),
    symbolKey: register('symbol-key', 0xea93),
    symbolText: register('symbol-text', 0xea93),
    symbolReference: register('symbol-reference', 0xea94),
    goToFile: register('go-to-file', 0xea94),
    symbolEnum: register('symbol-enum', 0xea95),
    symbolValue: register('symbol-value', 0xea95),
    symbolRuler: register('symbol-ruler', 0xea96),
    symbolUnit: register('symbol-unit', 0xea96),
    activateBreakpoints: register('activate-breakpoints', 0xea97),
    archive: register('archive', 0xea98),
    arrowBoth: register('arrow-both', 0xea99),
    arrowDown: register('arrow-down', 0xea9a),
    arrowLeft: register('arrow-left', 0xea9b),
    arrowRight: register('arrow-right', 0xea9c),
    arrowSmallDown: register('arrow-small-down', 0xea9d),
    arrowSmallLeft: register('arrow-small-left', 0xea9e),
    arrowSmallRight: register('arrow-small-right', 0xea9f),
    arrowSmallUp: register('arrow-small-up', 0xeaa0),
    arrowUp: register('arrow-up', 0xeaa1),
    bell: register('bell', 0xeaa2),
    bold: register('bold', 0xeaa3),
    book: register('book', 0xeaa4),
    bookmark: register('bookmark', 0xeaa5),
    debugBreakpointConditionalUnverified: register('debug-breakpoint-conditional-unverified', 0xeaa6),
    debugBreakpointConditional: register('debug-breakpoint-conditional', 0xeaa7),
    debugBreakpointConditionalDisabled: register('debug-breakpoint-conditional-disabled', 0xeaa7),
    debugBreakpointDataUnverified: register('debug-breakpoint-data-unverified', 0xeaa8),
    debugBreakpointData: register('debug-breakpoint-data', 0xeaa9),
    debugBreakpointDataDisabled: register('debug-breakpoint-data-disabled', 0xeaa9),
    debugBreakpointLogUnverified: register('debug-breakpoint-log-unverified', 0xeaaa),
    debugBreakpointLog: register('debug-breakpoint-log', 0xeaab),
    debugBreakpointLogDisabled: register('debug-breakpoint-log-disabled', 0xeaab),
    briefcase: register('briefcase', 0xeaac),
    broadcast: register('broadcast', 0xeaad),
    browser: register('browser', 0xeaae),
    bug: register('bug', 0xeaaf),
    calendar: register('calendar', 0xeab0),
    caseSensitive: register('case-sensitive', 0xeab1),
    check: register('check', 0xeab2),
    checklist: register('checklist', 0xeab3),
    chevronDown: register('chevron-down', 0xeab4),
    dropDownButton: register('drop-down-button', 0xeab4),
    chevronLeft: register('chevron-left', 0xeab5),
    chevronRight: register('chevron-right', 0xeab6),
    chevronUp: register('chevron-up', 0xeab7),
    chromeClose: register('chrome-close', 0xeab8),
    chromeMaximize: register('chrome-maximize', 0xeab9),
    chromeMinimize: register('chrome-minimize', 0xeaba),
    chromeRestore: register('chrome-restore', 0xeabb),
    circle: register('circle', 0xeabc),
    circleOutline: register('circle-outline', 0xeabc),
    debugBreakpointUnverified: register('debug-breakpoint-unverified', 0xeabc),
    circleSlash: register('circle-slash', 0xeabd),
    circuitBoard: register('circuit-board', 0xeabe),
    clearAll: register('clear-all', 0xeabf),
    clippy: register('clippy', 0xeac0),
    closeAll: register('close-all', 0xeac1),
    cloudDownload: register('cloud-download', 0xeac2),
    cloudUpload: register('cloud-upload', 0xeac3),
    code: register('code', 0xeac4),
    collapseAll: register('collapse-all', 0xeac5),
    colorMode: register('color-mode', 0xeac6),
    commentDiscussion: register('comment-discussion', 0xeac7),
    compareChanges: register('compare-changes', 0xeafd),
    creditCard: register('credit-card', 0xeac9),
    dash: register('dash', 0xeacc),
    dashboard: register('dashboard', 0xeacd),
    database: register('database', 0xeace),
    debugContinue: register('debug-continue', 0xeacf),
    debugDisconnect: register('debug-disconnect', 0xead0),
    debugPause: register('debug-pause', 0xead1),
    debugRestart: register('debug-restart', 0xead2),
    debugStart: register('debug-start', 0xead3),
    debugStepInto: register('debug-step-into', 0xead4),
    debugStepOut: register('debug-step-out', 0xead5),
    debugStepOver: register('debug-step-over', 0xead6),
    debugStop: register('debug-stop', 0xead7),
    debug: register('debug', 0xead8),
    deviceCameraVideo: register('device-camera-video', 0xead9),
    deviceCamera: register('device-camera', 0xeada),
    deviceMobile: register('device-mobile', 0xeadb),
    diffAdded: register('diff-added', 0xeadc),
    diffIgnored: register('diff-ignored', 0xeadd),
    diffModified: register('diff-modified', 0xeade),
    diffRemoved: register('diff-removed', 0xeadf),
    diffRenamed: register('diff-renamed', 0xeae0),
    diff: register('diff', 0xeae1),
    discard: register('discard', 0xeae2),
    editorLayout: register('editor-layout', 0xeae3),
    emptyWindow: register('empty-window', 0xeae4),
    exclude: register('exclude', 0xeae5),
    extensions: register('extensions', 0xeae6),
    eyeClosed: register('eye-closed', 0xeae7),
    fileBinary: register('file-binary', 0xeae8),
    fileCode: register('file-code', 0xeae9),
    fileMedia: register('file-media', 0xeaea),
    filePdf: register('file-pdf', 0xeaeb),
    fileSubmodule: register('file-submodule', 0xeaec),
    fileSymlinkDirectory: register('file-symlink-directory', 0xeaed),
    fileSymlinkFile: register('file-symlink-file', 0xeaee),
    fileZip: register('file-zip', 0xeaef),
    files: register('files', 0xeaf0),
    filter: register('filter', 0xeaf1),
    flame: register('flame', 0xeaf2),
    foldDown: register('fold-down', 0xeaf3),
    foldUp: register('fold-up', 0xeaf4),
    fold: register('fold', 0xeaf5),
    folderActive: register('folder-active', 0xeaf6),
    folderOpened: register('folder-opened', 0xeaf7),
    gear: register('gear', 0xeaf8),
    gift: register('gift', 0xeaf9),
    gistSecret: register('gist-secret', 0xeafa),
    gist: register('gist', 0xeafb),
    gitCommit: register('git-commit', 0xeafc),
    gitCompare: register('git-compare', 0xeafd),
    gitMerge: register('git-merge', 0xeafe),
    githubAction: register('github-action', 0xeaff),
    githubAlt: register('github-alt', 0xeb00),
    globe: register('globe', 0xeb01),
    grabber: register('grabber', 0xeb02),
    graph: register('graph', 0xeb03),
    gripper: register('gripper', 0xeb04),
    heart: register('heart', 0xeb05),
    home: register('home', 0xeb06),
    horizontalRule: register('horizontal-rule', 0xeb07),
    hubot: register('hubot', 0xeb08),
    inbox: register('inbox', 0xeb09),
    issueClosed: register('issue-closed', 0xeba4),
    issueReopened: register('issue-reopened', 0xeb0b),
    issues: register('issues', 0xeb0c),
    italic: register('italic', 0xeb0d),
    jersey: register('jersey', 0xeb0e),
    json: register('json', 0xeb0f),
    bracket: register('bracket', 0xeb0f),
    kebabVertical: register('kebab-vertical', 0xeb10),
    key: register('key', 0xeb11),
    law: register('law', 0xeb12),
    lightbulbAutofix: register('lightbulb-autofix', 0xeb13),
    linkExternal: register('link-external', 0xeb14),
    link: register('link', 0xeb15),
    listOrdered: register('list-ordered', 0xeb16),
    listUnordered: register('list-unordered', 0xeb17),
    liveShare: register('live-share', 0xeb18),
    loading: register('loading', 0xeb19),
    location: register('location', 0xeb1a),
    mailRead: register('mail-read', 0xeb1b),
    mail: register('mail', 0xeb1c),
    markdown: register('markdown', 0xeb1d),
    megaphone: register('megaphone', 0xeb1e),
    mention: register('mention', 0xeb1f),
    milestone: register('milestone', 0xeb20),
    gitPullRequestMilestone: register('git-pull-request-milestone', 0xeb20),
    mortarBoard: register('mortar-board', 0xeb21),
    move: register('move', 0xeb22),
    multipleWindows: register('multiple-windows', 0xeb23),
    mute: register('mute', 0xeb24),
    noNewline: register('no-newline', 0xeb25),
    note: register('note', 0xeb26),
    octoface: register('octoface', 0xeb27),
    openPreview: register('open-preview', 0xeb28),
    package: register('package', 0xeb29),
    paintcan: register('paintcan', 0xeb2a),
    pin: register('pin', 0xeb2b),
    play: register('play', 0xeb2c),
    run: register('run', 0xeb2c),
    plug: register('plug', 0xeb2d),
    preserveCase: register('preserve-case', 0xeb2e),
    preview: register('preview', 0xeb2f),
    project: register('project', 0xeb30),
    pulse: register('pulse', 0xeb31),
    question: register('question', 0xeb32),
    quote: register('quote', 0xeb33),
    radioTower: register('radio-tower', 0xeb34),
    reactions: register('reactions', 0xeb35),
    references: register('references', 0xeb36),
    refresh: register('refresh', 0xeb37),
    regex: register('regex', 0xeb38),
    remoteExplorer: register('remote-explorer', 0xeb39),
    remote: register('remote', 0xeb3a),
    remove: register('remove', 0xeb3b),
    replaceAll: register('replace-all', 0xeb3c),
    replace: register('replace', 0xeb3d),
    repoClone: register('repo-clone', 0xeb3e),
    repoForcePush: register('repo-force-push', 0xeb3f),
    repoPull: register('repo-pull', 0xeb40),
    repoPush: register('repo-push', 0xeb41),
    report: register('report', 0xeb42),
    requestChanges: register('request-changes', 0xeb43),
    rocket: register('rocket', 0xeb44),
    rootFolderOpened: register('root-folder-opened', 0xeb45),
    rootFolder: register('root-folder', 0xeb46),
    rss: register('rss', 0xeb47),
    ruby: register('ruby', 0xeb48),
    saveAll: register('save-all', 0xeb49),
    saveAs: register('save-as', 0xeb4a),
    save: register('save', 0xeb4b),
    screenFull: register('screen-full', 0xeb4c),
    screenNormal: register('screen-normal', 0xeb4d),
    searchStop: register('search-stop', 0xeb4e),
    server: register('server', 0xeb50),
    settingsGear: register('settings-gear', 0xeb51),
    settings: register('settings', 0xeb52),
    shield: register('shield', 0xeb53),
    smiley: register('smiley', 0xeb54),
    sortPrecedence: register('sort-precedence', 0xeb55),
    splitHorizontal: register('split-horizontal', 0xeb56),
    splitVertical: register('split-vertical', 0xeb57),
    squirrel: register('squirrel', 0xeb58),
    starFull: register('star-full', 0xeb59),
    starHalf: register('star-half', 0xeb5a),
    symbolClass: register('symbol-class', 0xeb5b),
    symbolColor: register('symbol-color', 0xeb5c),
    symbolCustomColor: register('symbol-customcolor', 0xeb5c),
    symbolConstant: register('symbol-constant', 0xeb5d),
    symbolEnumMember: register('symbol-enum-member', 0xeb5e),
    symbolField: register('symbol-field', 0xeb5f),
    symbolFile: register('symbol-file', 0xeb60),
    symbolInterface: register('symbol-interface', 0xeb61),
    symbolKeyword: register('symbol-keyword', 0xeb62),
    symbolMisc: register('symbol-misc', 0xeb63),
    symbolOperator: register('symbol-operator', 0xeb64),
    symbolProperty: register('symbol-property', 0xeb65),
    wrench: register('wrench', 0xeb65),
    wrenchSubaction: register('wrench-subaction', 0xeb65),
    symbolSnippet: register('symbol-snippet', 0xeb66),
    tasklist: register('tasklist', 0xeb67),
    telescope: register('telescope', 0xeb68),
    textSize: register('text-size', 0xeb69),
    threeBars: register('three-bars', 0xeb6a),
    thumbsdown: register('thumbsdown', 0xeb6b),
    thumbsup: register('thumbsup', 0xeb6c),
    tools: register('tools', 0xeb6d),
    triangleDown: register('triangle-down', 0xeb6e),
    triangleLeft: register('triangle-left', 0xeb6f),
    triangleRight: register('triangle-right', 0xeb70),
    triangleUp: register('triangle-up', 0xeb71),
    twitter: register('twitter', 0xeb72),
    unfold: register('unfold', 0xeb73),
    unlock: register('unlock', 0xeb74),
    unmute: register('unmute', 0xeb75),
    unverified: register('unverified', 0xeb76),
    verified: register('verified', 0xeb77),
    versions: register('versions', 0xeb78),
    vmActive: register('vm-active', 0xeb79),
    vmOutline: register('vm-outline', 0xeb7a),
    vmRunning: register('vm-running', 0xeb7b),
    watch: register('watch', 0xeb7c),
    whitespace: register('whitespace', 0xeb7d),
    wholeWord: register('whole-word', 0xeb7e),
    window: register('window', 0xeb7f),
    wordWrap: register('word-wrap', 0xeb80),
    zoomIn: register('zoom-in', 0xeb81),
    zoomOut: register('zoom-out', 0xeb82),
    listFilter: register('list-filter', 0xeb83),
    listFlat: register('list-flat', 0xeb84),
    listSelection: register('list-selection', 0xeb85),
    selection: register('selection', 0xeb85),
    listTree: register('list-tree', 0xeb86),
    debugBreakpointFunctionUnverified: register('debug-breakpoint-function-unverified', 0xeb87),
    debugBreakpointFunction: register('debug-breakpoint-function', 0xeb88),
    debugBreakpointFunctionDisabled: register('debug-breakpoint-function-disabled', 0xeb88),
    debugStackframeActive: register('debug-stackframe-active', 0xeb89),
    circleSmallFilled: register('circle-small-filled', 0xeb8a),
    debugStackframeDot: register('debug-stackframe-dot', 0xeb8a),
    debugStackframe: register('debug-stackframe', 0xeb8b),
    debugStackframeFocused: register('debug-stackframe-focused', 0xeb8b),
    debugBreakpointUnsupported: register('debug-breakpoint-unsupported', 0xeb8c),
    symbolString: register('symbol-string', 0xeb8d),
    debugReverseContinue: register('debug-reverse-continue', 0xeb8e),
    debugStepBack: register('debug-step-back', 0xeb8f),
    debugRestartFrame: register('debug-restart-frame', 0xeb90),
    callIncoming: register('call-incoming', 0xeb92),
    callOutgoing: register('call-outgoing', 0xeb93),
    menu: register('menu', 0xeb94),
    expandAll: register('expand-all', 0xeb95),
    feedback: register('feedback', 0xeb96),
    gitPullRequestReviewer: register('git-pull-request-reviewer', 0xeb96),
    groupByRefType: register('group-by-ref-type', 0xeb97),
    ungroupByRefType: register('ungroup-by-ref-type', 0xeb98),
    account: register('account', 0xeb99),
    gitPullRequestAssignee: register('git-pull-request-assignee', 0xeb99),
    bellDot: register('bell-dot', 0xeb9a),
    debugConsole: register('debug-console', 0xeb9b),
    library: register('library', 0xeb9c),
    output: register('output', 0xeb9d),
    runAll: register('run-all', 0xeb9e),
    syncIgnored: register('sync-ignored', 0xeb9f),
    pinned: register('pinned', 0xeba0),
    githubInverted: register('github-inverted', 0xeba1),
    debugAlt: register('debug-alt', 0xeb91),
    serverProcess: register('server-process', 0xeba2),
    serverEnvironment: register('server-environment', 0xeba3),
    pass: register('pass', 0xeba4),
    stopCircle: register('stop-circle', 0xeba5),
    playCircle: register('play-circle', 0xeba6),
    record: register('record', 0xeba7),
    debugAltSmall: register('debug-alt-small', 0xeba8),
    vmConnect: register('vm-connect', 0xeba9),
    cloud: register('cloud', 0xebaa),
    merge: register('merge', 0xebab),
    exportIcon: register('export', 0xebac),
    graphLeft: register('graph-left', 0xebad),
    magnet: register('magnet', 0xebae),
    notebook: register('notebook', 0xebaf),
    redo: register('redo', 0xebb0),
    checkAll: register('check-all', 0xebb1),
    pinnedDirty: register('pinned-dirty', 0xebb2),
    passFilled: register('pass-filled', 0xebb3),
    circleLargeFilled: register('circle-large-filled', 0xebb4),
    circleLarge: register('circle-large', 0xebb5),
    circleLargeOutline: register('circle-large-outline', 0xebb5),
    combine: register('combine', 0xebb6),
    gather: register('gather', 0xebb6),
    table: register('table', 0xebb7),
    variableGroup: register('variable-group', 0xebb8),
    typeHierarchy: register('type-hierarchy', 0xebb9),
    typeHierarchySub: register('type-hierarchy-sub', 0xebba),
    typeHierarchySuper: register('type-hierarchy-super', 0xebbb),
    gitPullRequestCreate: register('git-pull-request-create', 0xebbc),
    runAbove: register('run-above', 0xebbd),
    runBelow: register('run-below', 0xebbe),
    notebookTemplate: register('notebook-template', 0xebbf),
    debugRerun: register('debug-rerun', 0xebc0),
    workspaceTrusted: register('workspace-trusted', 0xebc1),
    workspaceUntrusted: register('workspace-untrusted', 0xebc2),
    workspaceUnspecified: register('workspace-unspecified', 0xebc3),
    terminalCmd: register('terminal-cmd', 0xebc4),
    terminalDebian: register('terminal-debian', 0xebc5),
    terminalLinux: register('terminal-linux', 0xebc6),
    terminalPowershell: register('terminal-powershell', 0xebc7),
    terminalTmux: register('terminal-tmux', 0xebc8),
    terminalUbuntu: register('terminal-ubuntu', 0xebc9),
    terminalBash: register('terminal-bash', 0xebca),
    arrowSwap: register('arrow-swap', 0xebcb),
    copy: register('copy', 0xebcc),
    personAdd: register('person-add', 0xebcd),
    filterFilled: register('filter-filled', 0xebce),
    wand: register('wand', 0xebcf),
    debugLineByLine: register('debug-line-by-line', 0xebd0),
    inspect: register('inspect', 0xebd1),
    layers: register('layers', 0xebd2),
    layersDot: register('layers-dot', 0xebd3),
    layersActive: register('layers-active', 0xebd4),
    compass: register('compass', 0xebd5),
    compassDot: register('compass-dot', 0xebd6),
    compassActive: register('compass-active', 0xebd7),
    azure: register('azure', 0xebd8),
    issueDraft: register('issue-draft', 0xebd9),
    gitPullRequestClosed: register('git-pull-request-closed', 0xebda),
    gitPullRequestDraft: register('git-pull-request-draft', 0xebdb),
    debugAll: register('debug-all', 0xebdc),
    debugCoverage: register('debug-coverage', 0xebdd),
    runErrors: register('run-errors', 0xebde),
    folderLibrary: register('folder-library', 0xebdf),
    debugContinueSmall: register('debug-continue-small', 0xebe0),
    beakerStop: register('beaker-stop', 0xebe1),
    graphLine: register('graph-line', 0xebe2),
    graphScatter: register('graph-scatter', 0xebe3),
    pieChart: register('pie-chart', 0xebe4),
    bracketDot: register('bracket-dot', 0xebe5),
    bracketError: register('bracket-error', 0xebe6),
    lockSmall: register('lock-small', 0xebe7),
    azureDevops: register('azure-devops', 0xebe8),
    verifiedFilled: register('verified-filled', 0xebe9),
    newLine: register('newline', 0xebea),
    layout: register('layout', 0xebeb),
    layoutActivitybarLeft: register('layout-activitybar-left', 0xebec),
    layoutActivitybarRight: register('layout-activitybar-right', 0xebed),
    layoutPanelLeft: register('layout-panel-left', 0xebee),
    layoutPanelCenter: register('layout-panel-center', 0xebef),
    layoutPanelJustify: register('layout-panel-justify', 0xebf0),
    layoutPanelRight: register('layout-panel-right', 0xebf1),
    layoutPanel: register('layout-panel', 0xebf2),
    layoutSidebarLeft: register('layout-sidebar-left', 0xebf3),
    layoutSidebarRight: register('layout-sidebar-right', 0xebf4),
    layoutStatusbar: register('layout-statusbar', 0xebf5),
    layoutMenubar: register('layout-menubar', 0xebf6),
    layoutCentered: register('layout-centered', 0xebf7),
    layoutSidebarRightOff: register('layout-sidebar-right-off', 0xec00),
    layoutPanelOff: register('layout-panel-off', 0xec01),
    layoutSidebarLeftOff: register('layout-sidebar-left-off', 0xec02),
    target: register('target', 0xebf8),
    indent: register('indent', 0xebf9),
    recordSmall: register('record-small', 0xebfa),
    errorSmall: register('error-small', 0xebfb),
    arrowCircleDown: register('arrow-circle-down', 0xebfc),
    arrowCircleLeft: register('arrow-circle-left', 0xebfd),
    arrowCircleRight: register('arrow-circle-right', 0xebfe),
    arrowCircleUp: register('arrow-circle-up', 0xebff),
    heartFilled: register('heart-filled', 0xec04),
    map: register('map', 0xec05),
    mapFilled: register('map-filled', 0xec06),
    circleSmall: register('circle-small', 0xec07),
    bellSlash: register('bell-slash', 0xec08),
    bellSlashDot: register('bell-slash-dot', 0xec09),
    commentUnresolved: register('comment-unresolved', 0xec0a),
    gitPullRequestGoToChanges: register('git-pull-request-go-to-changes', 0xec0b),
    gitPullRequestNewChanges: register('git-pull-request-new-changes', 0xec0c),
    searchFuzzy: register('search-fuzzy', 0xec0d),
    commentDraft: register('comment-draft', 0xec0e),
    send: register('send', 0xec0f),
    sparkle: register('sparkle', 0xec10),
    insert: register('insert', 0xec11),
    mic: register('mic', 0xec12),
    // derived icons, that could become separate icons
    dialogError: register('dialog-error', 'error'),
    dialogWarning: register('dialog-warning', 'warning'),
    dialogInfo: register('dialog-info', 'info'),
    dialogClose: register('dialog-close', 'close'),
    treeItemExpanded: register('tree-item-expanded', 'chevron-down'), // collapsed is done with rotation
    treeFilterOnTypeOn: register('tree-filter-on-type-on', 'list-filter'),
    treeFilterOnTypeOff: register('tree-filter-on-type-off', 'list-selection'),
    treeFilterClear: register('tree-filter-clear', 'close'),
    treeItemLoading: register('tree-item-loading', 'loading'),
    menuSelection: register('menu-selection', 'check'),
    menuSubmenu: register('menu-submenu', 'chevron-right'),
    menuBarMore: register('menubar-more', 'more'),
    scrollbarButtonLeft: register('scrollbar-button-left', 'triangle-left'),
    scrollbarButtonRight: register('scrollbar-button-right', 'triangle-right'),
    scrollbarButtonUp: register('scrollbar-button-up', 'triangle-up'),
    scrollbarButtonDown: register('scrollbar-button-down', 'triangle-down'),
    toolBarMore: register('toolbar-more', 'more'),
    quickInputBack: register('quick-input-back', 'arrow-left')
};


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/color.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/color.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   HSLA: () => (/* binding */ HSLA),
/* harmony export */   HSVA: () => (/* binding */ HSVA),
/* harmony export */   RGBA: () => (/* binding */ RGBA)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function roundFloat(number, decimalPoints) {
    const decimal = Math.pow(10, decimalPoints);
    return Math.round(number * decimal) / decimal;
}
class RGBA {
    constructor(r, g, b, a = 1) {
        this._rgbaBrand = undefined;
        this.r = Math.min(255, Math.max(0, r)) | 0;
        this.g = Math.min(255, Math.max(0, g)) | 0;
        this.b = Math.min(255, Math.max(0, b)) | 0;
        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);
    }
    static equals(a, b) {
        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
    }
}
class HSLA {
    constructor(h, s, l, a) {
        this._hslaBrand = undefined;
        this.h = Math.max(Math.min(360, h), 0) | 0;
        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);
        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);
        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);
    }
    static equals(a, b) {
        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;
    }
    /**
     * Converts an RGB color value to HSL. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h in the set [0, 360], s, and l in the set [0, 1].
     */
    static fromRGBA(rgba) {
        const r = rgba.r / 255;
        const g = rgba.g / 255;
        const b = rgba.b / 255;
        const a = rgba.a;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h = 0;
        let s = 0;
        const l = (min + max) / 2;
        const chroma = max - min;
        if (chroma > 0) {
            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);
            switch (max) {
                case r:
                    h = (g - b) / chroma + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / chroma + 2;
                    break;
                case b:
                    h = (r - g) / chroma + 4;
                    break;
            }
            h *= 60;
            h = Math.round(h);
        }
        return new HSLA(h, s, l, a);
    }
    static _hue2rgb(p, q, t) {
        if (t < 0) {
            t += 1;
        }
        if (t > 1) {
            t -= 1;
        }
        if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
            return q;
        }
        if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
    }
    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     */
    static toRGBA(hsla) {
        const h = hsla.h / 360;
        const { s, l, a } = hsla;
        let r, g, b;
        if (s === 0) {
            r = g = b = l; // achromatic
        }
        else {
            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;
            r = HSLA._hue2rgb(p, q, h + 1 / 3);
            g = HSLA._hue2rgb(p, q, h);
            b = HSLA._hue2rgb(p, q, h - 1 / 3);
        }
        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);
    }
}
class HSVA {
    constructor(h, s, v, a) {
        this._hsvaBrand = undefined;
        this.h = Math.max(Math.min(360, h), 0) | 0;
        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);
        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);
        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);
    }
    static equals(a, b) {
        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;
    }
    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm
    static fromRGBA(rgba) {
        const r = rgba.r / 255;
        const g = rgba.g / 255;
        const b = rgba.b / 255;
        const cmax = Math.max(r, g, b);
        const cmin = Math.min(r, g, b);
        const delta = cmax - cmin;
        const s = cmax === 0 ? 0 : (delta / cmax);
        let m;
        if (delta === 0) {
            m = 0;
        }
        else if (cmax === r) {
            m = ((((g - b) / delta) % 6) + 6) % 6;
        }
        else if (cmax === g) {
            m = ((b - r) / delta) + 2;
        }
        else {
            m = ((r - g) / delta) + 4;
        }
        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);
    }
    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm
    static toRGBA(hsva) {
        const { h, s, v, a } = hsva;
        const c = v * s;
        const x = c * (1 - Math.abs((h / 60) % 2 - 1));
        const m = v - c;
        let [r, g, b] = [0, 0, 0];
        if (h < 60) {
            r = c;
            g = x;
        }
        else if (h < 120) {
            r = x;
            g = c;
        }
        else if (h < 180) {
            g = c;
            b = x;
        }
        else if (h < 240) {
            g = x;
            b = c;
        }
        else if (h < 300) {
            r = x;
            b = c;
        }
        else if (h <= 360) {
            r = c;
            b = x;
        }
        r = Math.round((r + m) * 255);
        g = Math.round((g + m) * 255);
        b = Math.round((b + m) * 255);
        return new RGBA(r, g, b, a);
    }
}
class Color {
    static fromHex(hex) {
        return Color.Format.CSS.parseHex(hex) || Color.red;
    }
    static equals(a, b) {
        if (!a && !b) {
            return true;
        }
        if (!a || !b) {
            return false;
        }
        return a.equals(b);
    }
    get hsla() {
        if (this._hsla) {
            return this._hsla;
        }
        else {
            return HSLA.fromRGBA(this.rgba);
        }
    }
    get hsva() {
        if (this._hsva) {
            return this._hsva;
        }
        return HSVA.fromRGBA(this.rgba);
    }
    constructor(arg) {
        if (!arg) {
            throw new Error('Color needs a value');
        }
        else if (arg instanceof RGBA) {
            this.rgba = arg;
        }
        else if (arg instanceof HSLA) {
            this._hsla = arg;
            this.rgba = HSLA.toRGBA(arg);
        }
        else if (arg instanceof HSVA) {
            this._hsva = arg;
            this.rgba = HSVA.toRGBA(arg);
        }
        else {
            throw new Error('Invalid color ctor argument');
        }
    }
    equals(other) {
        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);
    }
    /**
     * http://www.w3.org/TR/WCAG20/#relativeluminancedef
     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.
     */
    getRelativeLuminance() {
        const R = Color._relativeLuminanceForComponent(this.rgba.r);
        const G = Color._relativeLuminanceForComponent(this.rgba.g);
        const B = Color._relativeLuminanceForComponent(this.rgba.b);
        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;
        return roundFloat(luminance, 4);
    }
    static _relativeLuminanceForComponent(color) {
        const c = color / 255;
        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);
    }
    /**
     *	http://24ways.org/2010/calculating-color-contrast
     *  Return 'true' if lighter color otherwise 'false'
     */
    isLighter() {
        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;
        return yiq >= 128;
    }
    isLighterThan(another) {
        const lum1 = this.getRelativeLuminance();
        const lum2 = another.getRelativeLuminance();
        return lum1 > lum2;
    }
    isDarkerThan(another) {
        const lum1 = this.getRelativeLuminance();
        const lum2 = another.getRelativeLuminance();
        return lum1 < lum2;
    }
    lighten(factor) {
        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));
    }
    darken(factor) {
        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));
    }
    transparent(factor) {
        const { r, g, b, a } = this.rgba;
        return new Color(new RGBA(r, g, b, a * factor));
    }
    isTransparent() {
        return this.rgba.a === 0;
    }
    isOpaque() {
        return this.rgba.a === 1;
    }
    opposite() {
        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));
    }
    makeOpaque(opaqueBackground) {
        if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {
            // only allow to blend onto a non-opaque color onto a opaque color
            return this;
        }
        const { r, g, b, a } = this.rgba;
        // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity
        return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));
    }
    toString() {
        if (!this._toString) {
            this._toString = Color.Format.CSS.format(this);
        }
        return this._toString;
    }
    static getLighterColor(of, relative, factor) {
        if (of.isLighterThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        const lum1 = of.getRelativeLuminance();
        const lum2 = relative.getRelativeLuminance();
        factor = factor * (lum2 - lum1) / lum2;
        return of.lighten(factor);
    }
    static getDarkerColor(of, relative, factor) {
        if (of.isDarkerThan(relative)) {
            return of;
        }
        factor = factor ? factor : 0.5;
        const lum1 = of.getRelativeLuminance();
        const lum2 = relative.getRelativeLuminance();
        factor = factor * (lum1 - lum2) / lum1;
        return of.darken(factor);
    }
}
Color.white = new Color(new RGBA(255, 255, 255, 1));
Color.black = new Color(new RGBA(0, 0, 0, 1));
Color.red = new Color(new RGBA(255, 0, 0, 1));
Color.blue = new Color(new RGBA(0, 0, 255, 1));
Color.green = new Color(new RGBA(0, 255, 0, 1));
Color.cyan = new Color(new RGBA(0, 255, 255, 1));
Color.lightgrey = new Color(new RGBA(211, 211, 211, 1));
Color.transparent = new Color(new RGBA(0, 0, 0, 0));
(function (Color) {
    let Format;
    (function (Format) {
        let CSS;
        (function (CSS) {
            function formatRGB(color) {
                if (color.rgba.a === 1) {
                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;
                }
                return Color.Format.CSS.formatRGBA(color);
            }
            CSS.formatRGB = formatRGB;
            function formatRGBA(color) {
                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;
            }
            CSS.formatRGBA = formatRGBA;
            function formatHSL(color) {
                if (color.hsla.a === 1) {
                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;
                }
                return Color.Format.CSS.formatHSLA(color);
            }
            CSS.formatHSL = formatHSL;
            function formatHSLA(color) {
                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;
            }
            CSS.formatHSLA = formatHSLA;
            function _toTwoDigitHex(n) {
                const r = n.toString(16);
                return r.length !== 2 ? '0' + r : r;
            }
            /**
             * Formats the color as #RRGGBB
             */
            function formatHex(color) {
                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;
            }
            CSS.formatHex = formatHex;
            /**
             * Formats the color as #RRGGBBAA
             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB
             */
            function formatHexA(color, compact = false) {
                if (compact && color.rgba.a === 1) {
                    return Color.Format.CSS.formatHex(color);
                }
                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;
            }
            CSS.formatHexA = formatHexA;
            /**
             * The default format will use HEX if opaque and RGBA otherwise.
             */
            function format(color) {
                if (color.isOpaque()) {
                    return Color.Format.CSS.formatHex(color);
                }
                return Color.Format.CSS.formatRGBA(color);
            }
            CSS.format = format;
            /**
             * Converts an Hex color value to a Color.
             * returns r, g, and b are contained in the set [0, 255]
             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).
             */
            function parseHex(hex) {
                const length = hex.length;
                if (length === 0) {
                    // Invalid color
                    return null;
                }
                if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {
                    // Does not begin with a #
                    return null;
                }
                if (length === 7) {
                    // #RRGGBB format
                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
                    return new Color(new RGBA(r, g, b, 1));
                }
                if (length === 9) {
                    // #RRGGBBAA format
                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));
                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));
                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));
                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));
                    return new Color(new RGBA(r, g, b, a / 255));
                }
                if (length === 4) {
                    // #RGB format
                    const r = _parseHexDigit(hex.charCodeAt(1));
                    const g = _parseHexDigit(hex.charCodeAt(2));
                    const b = _parseHexDigit(hex.charCodeAt(3));
                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));
                }
                if (length === 5) {
                    // #RGBA format
                    const r = _parseHexDigit(hex.charCodeAt(1));
                    const g = _parseHexDigit(hex.charCodeAt(2));
                    const b = _parseHexDigit(hex.charCodeAt(3));
                    const a = _parseHexDigit(hex.charCodeAt(4));
                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));
                }
                // Invalid color
                return null;
            }
            CSS.parseHex = parseHex;
            function _parseHexDigit(charCode) {
                switch (charCode) {
                    case 48 /* CharCode.Digit0 */: return 0;
                    case 49 /* CharCode.Digit1 */: return 1;
                    case 50 /* CharCode.Digit2 */: return 2;
                    case 51 /* CharCode.Digit3 */: return 3;
                    case 52 /* CharCode.Digit4 */: return 4;
                    case 53 /* CharCode.Digit5 */: return 5;
                    case 54 /* CharCode.Digit6 */: return 6;
                    case 55 /* CharCode.Digit7 */: return 7;
                    case 56 /* CharCode.Digit8 */: return 8;
                    case 57 /* CharCode.Digit9 */: return 9;
                    case 97 /* CharCode.a */: return 10;
                    case 65 /* CharCode.A */: return 10;
                    case 98 /* CharCode.b */: return 11;
                    case 66 /* CharCode.B */: return 11;
                    case 99 /* CharCode.c */: return 12;
                    case 67 /* CharCode.C */: return 12;
                    case 100 /* CharCode.d */: return 13;
                    case 68 /* CharCode.D */: return 13;
                    case 101 /* CharCode.e */: return 14;
                    case 69 /* CharCode.E */: return 14;
                    case 102 /* CharCode.f */: return 15;
                    case 70 /* CharCode.F */: return 15;
                }
                return 0;
            }
        })(CSS = Format.CSS || (Format.CSS = {}));
    })(Format = Color.Format || (Color.Format = {}));
})(Color || (Color = {}));


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LcsDiff: () => (/* binding */ LcsDiff),
/* harmony export */   StringDiffSequence: () => (/* binding */ StringDiffSequence),
/* harmony export */   stringDiff: () => (/* binding */ stringDiff)
/* harmony export */ });
/* harmony import */ var _diffChange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diffChange.js */ "./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js");
/* harmony import */ var _hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash.js */ "./node_modules/monaco-editor/esm/vs/base/common/hash.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class StringDiffSequence {
    constructor(source) {
        this.source = source;
    }
    getElements() {
        const source = this.source;
        const characters = new Int32Array(source.length);
        for (let i = 0, len = source.length; i < len; i++) {
            characters[i] = source.charCodeAt(i);
        }
        return characters;
    }
}
function stringDiff(original, modified, pretty) {
    return new LcsDiff(new StringDiffSequence(original), new StringDiffSequence(modified)).ComputeDiff(pretty).changes;
}
//
// The code below has been ported from a C# implementation in VS
//
class Debug {
    static Assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
}
class MyArray {
    /**
     * Copies a range of elements from an Array starting at the specified source index and pastes
     * them to another Array starting at the specified destination index. The length and the indexes
     * are specified as 64-bit integers.
     * sourceArray:
     *		The Array that contains the data to copy.
     * sourceIndex:
     *		A 64-bit integer that represents the index in the sourceArray at which copying begins.
     * destinationArray:
     *		The Array that receives the data.
     * destinationIndex:
     *		A 64-bit integer that represents the index in the destinationArray at which storing begins.
     * length:
     *		A 64-bit integer that represents the number of elements to copy.
     */
    static Copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for (let i = 0; i < length; i++) {
            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
        }
    }
    static Copy2(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for (let i = 0; i < length; i++) {
            destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
        }
    }
}
/**
 * A utility class which helps to create the set of DiffChanges from
 * a difference operation. This class accepts original DiffElements and
 * modified DiffElements that are involved in a particular change. The
 * MarkNextChange() method can be called to mark the separation between
 * distinct changes. At the end, the Changes property can be called to retrieve
 * the constructed changes.
 */
class DiffChangeHelper {
    /**
     * Constructs a new DiffChangeHelper for the given DiffSequences.
     */
    constructor() {
        this.m_changes = [];
        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;
        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;
        this.m_originalCount = 0;
        this.m_modifiedCount = 0;
    }
    /**
     * Marks the beginning of the next change in the set of differences.
     */
    MarkNextChange() {
        // Only add to the list if there is something to add
        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
            // Add the new change to our list
            this.m_changes.push(new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount));
        }
        // Reset for the next change
        this.m_originalCount = 0;
        this.m_modifiedCount = 0;
        this.m_originalStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;
        this.m_modifiedStart = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;
    }
    /**
     * Adds the original element at the given position to the elements
     * affected by the current change. The modified index gives context
     * to the change position with respect to the original sequence.
     * @param originalIndex The index of the original element to add.
     * @param modifiedIndex The index of the modified element that provides corresponding position in the modified sequence.
     */
    AddOriginalElement(originalIndex, modifiedIndex) {
        // The 'true' start index is the smallest of the ones we've seen
        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);
        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);
        this.m_originalCount++;
    }
    /**
     * Adds the modified element at the given position to the elements
     * affected by the current change. The original index gives context
     * to the change position with respect to the modified sequence.
     * @param originalIndex The index of the original element that provides corresponding position in the original sequence.
     * @param modifiedIndex The index of the modified element to add.
     */
    AddModifiedElement(originalIndex, modifiedIndex) {
        // The 'true' start index is the smallest of the ones we've seen
        this.m_originalStart = Math.min(this.m_originalStart, originalIndex);
        this.m_modifiedStart = Math.min(this.m_modifiedStart, modifiedIndex);
        this.m_modifiedCount++;
    }
    /**
     * Retrieves all of the changes marked by the class.
     */
    getChanges() {
        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
            // Finish up on whatever is left
            this.MarkNextChange();
        }
        return this.m_changes;
    }
    /**
     * Retrieves all of the changes marked by the class in the reverse order
     */
    getReverseChanges() {
        if (this.m_originalCount > 0 || this.m_modifiedCount > 0) {
            // Finish up on whatever is left
            this.MarkNextChange();
        }
        this.m_changes.reverse();
        return this.m_changes;
    }
}
/**
 * An implementation of the difference algorithm described in
 * "An O(ND) Difference Algorithm and its variations" by Eugene W. Myers
 */
class LcsDiff {
    /**
     * Constructs the DiffFinder
     */
    constructor(originalSequence, modifiedSequence, continueProcessingPredicate = null) {
        this.ContinueProcessingPredicate = continueProcessingPredicate;
        this._originalSequence = originalSequence;
        this._modifiedSequence = modifiedSequence;
        const [originalStringElements, originalElementsOrHash, originalHasStrings] = LcsDiff._getElements(originalSequence);
        const [modifiedStringElements, modifiedElementsOrHash, modifiedHasStrings] = LcsDiff._getElements(modifiedSequence);
        this._hasStrings = (originalHasStrings && modifiedHasStrings);
        this._originalStringElements = originalStringElements;
        this._originalElementsOrHash = originalElementsOrHash;
        this._modifiedStringElements = modifiedStringElements;
        this._modifiedElementsOrHash = modifiedElementsOrHash;
        this.m_forwardHistory = [];
        this.m_reverseHistory = [];
    }
    static _isStringArray(arr) {
        return (arr.length > 0 && typeof arr[0] === 'string');
    }
    static _getElements(sequence) {
        const elements = sequence.getElements();
        if (LcsDiff._isStringArray(elements)) {
            const hashes = new Int32Array(elements.length);
            for (let i = 0, len = elements.length; i < len; i++) {
                hashes[i] = (0,_hash_js__WEBPACK_IMPORTED_MODULE_1__.stringHash)(elements[i], 0);
            }
            return [elements, hashes, true];
        }
        if (elements instanceof Int32Array) {
            return [[], elements, false];
        }
        return [[], new Int32Array(elements), false];
    }
    ElementsAreEqual(originalIndex, newIndex) {
        if (this._originalElementsOrHash[originalIndex] !== this._modifiedElementsOrHash[newIndex]) {
            return false;
        }
        return (this._hasStrings ? this._originalStringElements[originalIndex] === this._modifiedStringElements[newIndex] : true);
    }
    ElementsAreStrictEqual(originalIndex, newIndex) {
        if (!this.ElementsAreEqual(originalIndex, newIndex)) {
            return false;
        }
        const originalElement = LcsDiff._getStrictElement(this._originalSequence, originalIndex);
        const modifiedElement = LcsDiff._getStrictElement(this._modifiedSequence, newIndex);
        return (originalElement === modifiedElement);
    }
    static _getStrictElement(sequence, index) {
        if (typeof sequence.getStrictElement === 'function') {
            return sequence.getStrictElement(index);
        }
        return null;
    }
    OriginalElementsAreEqual(index1, index2) {
        if (this._originalElementsOrHash[index1] !== this._originalElementsOrHash[index2]) {
            return false;
        }
        return (this._hasStrings ? this._originalStringElements[index1] === this._originalStringElements[index2] : true);
    }
    ModifiedElementsAreEqual(index1, index2) {
        if (this._modifiedElementsOrHash[index1] !== this._modifiedElementsOrHash[index2]) {
            return false;
        }
        return (this._hasStrings ? this._modifiedStringElements[index1] === this._modifiedStringElements[index2] : true);
    }
    ComputeDiff(pretty) {
        return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, pretty);
    }
    /**
     * Computes the differences between the original and modified input
     * sequences on the bounded range.
     * @returns An array of the differences between the two input sequences.
     */
    _ComputeDiff(originalStart, originalEnd, modifiedStart, modifiedEnd, pretty) {
        const quitEarlyArr = [false];
        let changes = this.ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr);
        if (pretty) {
            // We have to clean up the computed diff to be more intuitive
            // but it turns out this cannot be done correctly until the entire set
            // of diffs have been computed
            changes = this.PrettifyChanges(changes);
        }
        return {
            quitEarly: quitEarlyArr[0],
            changes: changes
        };
    }
    /**
     * Private helper method which computes the differences on the bounded range
     * recursively.
     * @returns An array of the differences between the two input sequences.
     */
    ComputeDiffRecursive(originalStart, originalEnd, modifiedStart, modifiedEnd, quitEarlyArr) {
        quitEarlyArr[0] = false;
        // Find the start of the differences
        while (originalStart <= originalEnd && modifiedStart <= modifiedEnd && this.ElementsAreEqual(originalStart, modifiedStart)) {
            originalStart++;
            modifiedStart++;
        }
        // Find the end of the differences
        while (originalEnd >= originalStart && modifiedEnd >= modifiedStart && this.ElementsAreEqual(originalEnd, modifiedEnd)) {
            originalEnd--;
            modifiedEnd--;
        }
        // In the special case where we either have all insertions or all deletions or the sequences are identical
        if (originalStart > originalEnd || modifiedStart > modifiedEnd) {
            let changes;
            if (modifiedStart <= modifiedEnd) {
                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');
                // All insertions
                changes = [
                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, 0, modifiedStart, modifiedEnd - modifiedStart + 1)
                ];
            }
            else if (originalStart <= originalEnd) {
                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');
                // All deletions
                changes = [
                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, 0)
                ];
            }
            else {
                Debug.Assert(originalStart === originalEnd + 1, 'originalStart should only be one more than originalEnd');
                Debug.Assert(modifiedStart === modifiedEnd + 1, 'modifiedStart should only be one more than modifiedEnd');
                // Identical sequences - No differences
                changes = [];
            }
            return changes;
        }
        // This problem can be solved using the Divide-And-Conquer technique.
        const midOriginalArr = [0];
        const midModifiedArr = [0];
        const result = this.ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr);
        const midOriginal = midOriginalArr[0];
        const midModified = midModifiedArr[0];
        if (result !== null) {
            // Result is not-null when there was enough memory to compute the changes while
            // searching for the recursion point
            return result;
        }
        else if (!quitEarlyArr[0]) {
            // We can break the problem down recursively by finding the changes in the
            // First Half:   (originalStart, modifiedStart) to (midOriginal, midModified)
            // Second Half:  (midOriginal + 1, minModified + 1) to (originalEnd, modifiedEnd)
            // NOTE: ComputeDiff() is inclusive, therefore the second range starts on the next point
            const leftChanges = this.ComputeDiffRecursive(originalStart, midOriginal, modifiedStart, midModified, quitEarlyArr);
            let rightChanges = [];
            if (!quitEarlyArr[0]) {
                rightChanges = this.ComputeDiffRecursive(midOriginal + 1, originalEnd, midModified + 1, modifiedEnd, quitEarlyArr);
            }
            else {
                // We didn't have time to finish the first half, so we don't have time to compute this half.
                // Consider the entire rest of the sequence different.
                rightChanges = [
                    new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(midOriginal + 1, originalEnd - (midOriginal + 1) + 1, midModified + 1, modifiedEnd - (midModified + 1) + 1)
                ];
            }
            return this.ConcatenateChanges(leftChanges, rightChanges);
        }
        // If we hit here, we quit early, and so can't return anything meaningful
        return [
            new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)
        ];
    }
    WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr) {
        let forwardChanges = null;
        let reverseChanges = null;
        // First, walk backward through the forward diagonals history
        let changeHelper = new DiffChangeHelper();
        let diagonalMin = diagonalForwardStart;
        let diagonalMax = diagonalForwardEnd;
        let diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalForwardOffset;
        let lastOriginalIndex = -1073741824 /* Constants.MIN_SAFE_SMALL_INTEGER */;
        let historyIndex = this.m_forwardHistory.length - 1;
        do {
            // Get the diagonal index from the relative diagonal number
            const diagonal = diagonalRelative + diagonalForwardBase;
            // Figure out where we came from
            if (diagonal === diagonalMin || (diagonal < diagonalMax && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {
                // Vertical line (the element is an insert)
                originalIndex = forwardPoints[diagonal + 1];
                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;
                if (originalIndex < lastOriginalIndex) {
                    changeHelper.MarkNextChange();
                }
                lastOriginalIndex = originalIndex;
                changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex);
                diagonalRelative = (diagonal + 1) - diagonalForwardBase; //Setup for the next iteration
            }
            else {
                // Horizontal line (the element is a deletion)
                originalIndex = forwardPoints[diagonal - 1] + 1;
                modifiedIndex = originalIndex - diagonalRelative - diagonalForwardOffset;
                if (originalIndex < lastOriginalIndex) {
                    changeHelper.MarkNextChange();
                }
                lastOriginalIndex = originalIndex - 1;
                changeHelper.AddOriginalElement(originalIndex, modifiedIndex + 1);
                diagonalRelative = (diagonal - 1) - diagonalForwardBase; //Setup for the next iteration
            }
            if (historyIndex >= 0) {
                forwardPoints = this.m_forwardHistory[historyIndex];
                diagonalForwardBase = forwardPoints[0]; //We stored this in the first spot
                diagonalMin = 1;
                diagonalMax = forwardPoints.length - 1;
            }
        } while (--historyIndex >= -1);
        // Ironically, we get the forward changes as the reverse of the
        // order we added them since we technically added them backwards
        forwardChanges = changeHelper.getReverseChanges();
        if (quitEarlyArr[0]) {
            // TODO: Calculate a partial from the reverse diagonals.
            //       For now, just assume everything after the midOriginal/midModified point is a diff
            let originalStartPoint = midOriginalArr[0] + 1;
            let modifiedStartPoint = midModifiedArr[0] + 1;
            if (forwardChanges !== null && forwardChanges.length > 0) {
                const lastForwardChange = forwardChanges[forwardChanges.length - 1];
                originalStartPoint = Math.max(originalStartPoint, lastForwardChange.getOriginalEnd());
                modifiedStartPoint = Math.max(modifiedStartPoint, lastForwardChange.getModifiedEnd());
            }
            reverseChanges = [
                new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStartPoint, originalEnd - originalStartPoint + 1, modifiedStartPoint, modifiedEnd - modifiedStartPoint + 1)
            ];
        }
        else {
            // Now walk backward through the reverse diagonals history
            changeHelper = new DiffChangeHelper();
            diagonalMin = diagonalReverseStart;
            diagonalMax = diagonalReverseEnd;
            diagonalRelative = (midOriginalArr[0] - midModifiedArr[0]) - diagonalReverseOffset;
            lastOriginalIndex = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;
            historyIndex = (deltaIsEven) ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;
            do {
                // Get the diagonal index from the relative diagonal number
                const diagonal = diagonalRelative + diagonalReverseBase;
                // Figure out where we came from
                if (diagonal === diagonalMin || (diagonal < diagonalMax && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {
                    // Horizontal line (the element is a deletion))
                    originalIndex = reversePoints[diagonal + 1] - 1;
                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;
                    if (originalIndex > lastOriginalIndex) {
                        changeHelper.MarkNextChange();
                    }
                    lastOriginalIndex = originalIndex + 1;
                    changeHelper.AddOriginalElement(originalIndex + 1, modifiedIndex + 1);
                    diagonalRelative = (diagonal + 1) - diagonalReverseBase; //Setup for the next iteration
                }
                else {
                    // Vertical line (the element is an insertion)
                    originalIndex = reversePoints[diagonal - 1];
                    modifiedIndex = originalIndex - diagonalRelative - diagonalReverseOffset;
                    if (originalIndex > lastOriginalIndex) {
                        changeHelper.MarkNextChange();
                    }
                    lastOriginalIndex = originalIndex;
                    changeHelper.AddModifiedElement(originalIndex + 1, modifiedIndex + 1);
                    diagonalRelative = (diagonal - 1) - diagonalReverseBase; //Setup for the next iteration
                }
                if (historyIndex >= 0) {
                    reversePoints = this.m_reverseHistory[historyIndex];
                    diagonalReverseBase = reversePoints[0]; //We stored this in the first spot
                    diagonalMin = 1;
                    diagonalMax = reversePoints.length - 1;
                }
            } while (--historyIndex >= -1);
            // There are cases where the reverse history will find diffs that
            // are correct, but not intuitive, so we need shift them.
            reverseChanges = changeHelper.getChanges();
        }
        return this.ConcatenateChanges(forwardChanges, reverseChanges);
    }
    /**
     * Given the range to compute the diff on, this method finds the point:
     * (midOriginal, midModified)
     * that exists in the middle of the LCS of the two sequences and
     * is the point at which the LCS problem may be broken down recursively.
     * This method will try to keep the LCS trace in memory. If the LCS recursion
     * point is calculated and the full trace is available in memory, then this method
     * will return the change list.
     * @param originalStart The start bound of the original sequence range
     * @param originalEnd The end bound of the original sequence range
     * @param modifiedStart The start bound of the modified sequence range
     * @param modifiedEnd The end bound of the modified sequence range
     * @param midOriginal The middle point of the original sequence range
     * @param midModified The middle point of the modified sequence range
     * @returns The diff changes, if available, otherwise null
     */
    ComputeRecursionPoint(originalStart, originalEnd, modifiedStart, modifiedEnd, midOriginalArr, midModifiedArr, quitEarlyArr) {
        let originalIndex = 0, modifiedIndex = 0;
        let diagonalForwardStart = 0, diagonalForwardEnd = 0;
        let diagonalReverseStart = 0, diagonalReverseEnd = 0;
        // To traverse the edit graph and produce the proper LCS, our actual
        // start position is just outside the given boundary
        originalStart--;
        modifiedStart--;
        // We set these up to make the compiler happy, but they will
        // be replaced before we return with the actual recursion point
        midOriginalArr[0] = 0;
        midModifiedArr[0] = 0;
        // Clear out the history
        this.m_forwardHistory = [];
        this.m_reverseHistory = [];
        // Each cell in the two arrays corresponds to a diagonal in the edit graph.
        // The integer value in the cell represents the originalIndex of the furthest
        // reaching point found so far that ends in that diagonal.
        // The modifiedIndex can be computed mathematically from the originalIndex and the diagonal number.
        const maxDifferences = (originalEnd - originalStart) + (modifiedEnd - modifiedStart);
        const numDiagonals = maxDifferences + 1;
        const forwardPoints = new Int32Array(numDiagonals);
        const reversePoints = new Int32Array(numDiagonals);
        // diagonalForwardBase: Index into forwardPoints of the diagonal which passes through (originalStart, modifiedStart)
        // diagonalReverseBase: Index into reversePoints of the diagonal which passes through (originalEnd, modifiedEnd)
        const diagonalForwardBase = (modifiedEnd - modifiedStart);
        const diagonalReverseBase = (originalEnd - originalStart);
        // diagonalForwardOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the
        //    diagonal number (relative to diagonalForwardBase)
        // diagonalReverseOffset: Geometric offset which allows modifiedIndex to be computed from originalIndex and the
        //    diagonal number (relative to diagonalReverseBase)
        const diagonalForwardOffset = (originalStart - modifiedStart);
        const diagonalReverseOffset = (originalEnd - modifiedEnd);
        // delta: The difference between the end diagonal and the start diagonal. This is used to relate diagonal numbers
        //   relative to the start diagonal with diagonal numbers relative to the end diagonal.
        // The Even/Oddn-ness of this delta is important for determining when we should check for overlap
        const delta = diagonalReverseBase - diagonalForwardBase;
        const deltaIsEven = (delta % 2 === 0);
        // Here we set up the start and end points as the furthest points found so far
        // in both the forward and reverse directions, respectively
        forwardPoints[diagonalForwardBase] = originalStart;
        reversePoints[diagonalReverseBase] = originalEnd;
        // Remember if we quit early, and thus need to do a best-effort result instead of a real result.
        quitEarlyArr[0] = false;
        // A couple of points:
        // --With this method, we iterate on the number of differences between the two sequences.
        //   The more differences there actually are, the longer this will take.
        // --Also, as the number of differences increases, we have to search on diagonals further
        //   away from the reference diagonal (which is diagonalForwardBase for forward, diagonalReverseBase for reverse).
        // --We extend on even diagonals (relative to the reference diagonal) only when numDifferences
        //   is even and odd diagonals only when numDifferences is odd.
        for (let numDifferences = 1; numDifferences <= (maxDifferences / 2) + 1; numDifferences++) {
            let furthestOriginalIndex = 0;
            let furthestModifiedIndex = 0;
            // Run the algorithm in the forward direction
            diagonalForwardStart = this.ClipDiagonalBound(diagonalForwardBase - numDifferences, numDifferences, diagonalForwardBase, numDiagonals);
            diagonalForwardEnd = this.ClipDiagonalBound(diagonalForwardBase + numDifferences, numDifferences, diagonalForwardBase, numDiagonals);
            for (let diagonal = diagonalForwardStart; diagonal <= diagonalForwardEnd; diagonal += 2) {
                // STEP 1: We extend the furthest reaching point in the present diagonal
                // by looking at the diagonals above and below and picking the one whose point
                // is further away from the start point (originalStart, modifiedStart)
                if (diagonal === diagonalForwardStart || (diagonal < diagonalForwardEnd && forwardPoints[diagonal - 1] < forwardPoints[diagonal + 1])) {
                    originalIndex = forwardPoints[diagonal + 1];
                }
                else {
                    originalIndex = forwardPoints[diagonal - 1] + 1;
                }
                modifiedIndex = originalIndex - (diagonal - diagonalForwardBase) - diagonalForwardOffset;
                // Save the current originalIndex so we can test for false overlap in step 3
                const tempOriginalIndex = originalIndex;
                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal
                // so long as the elements are equal.
                while (originalIndex < originalEnd && modifiedIndex < modifiedEnd && this.ElementsAreEqual(originalIndex + 1, modifiedIndex + 1)) {
                    originalIndex++;
                    modifiedIndex++;
                }
                forwardPoints[diagonal] = originalIndex;
                if (originalIndex + modifiedIndex > furthestOriginalIndex + furthestModifiedIndex) {
                    furthestOriginalIndex = originalIndex;
                    furthestModifiedIndex = modifiedIndex;
                }
                // STEP 3: If delta is odd (overlap first happens on forward when delta is odd)
                // and diagonal is in the range of reverse diagonals computed for numDifferences-1
                // (the previous iteration; we haven't computed reverse diagonals for numDifferences yet)
                // then check for overlap.
                if (!deltaIsEven && Math.abs(diagonal - diagonalReverseBase) <= (numDifferences - 1)) {
                    if (originalIndex >= reversePoints[diagonal]) {
                        midOriginalArr[0] = originalIndex;
                        midModifiedArr[0] = modifiedIndex;
                        if (tempOriginalIndex <= reversePoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {
                            // BINGO! We overlapped, and we have the full trace in memory!
                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
                        }
                        else {
                            // Either false overlap, or we didn't have enough memory for the full trace
                            // Just return the recursion point
                            return null;
                        }
                    }
                }
            }
            // Check to see if we should be quitting early, before moving on to the next iteration.
            const matchLengthOfLongest = ((furthestOriginalIndex - originalStart) + (furthestModifiedIndex - modifiedStart) - numDifferences) / 2;
            if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(furthestOriginalIndex, matchLengthOfLongest)) {
                // We can't finish, so skip ahead to generating a result from what we have.
                quitEarlyArr[0] = true;
                // Use the furthest distance we got in the forward direction.
                midOriginalArr[0] = furthestOriginalIndex;
                midModifiedArr[0] = furthestModifiedIndex;
                if (matchLengthOfLongest > 0 && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {
                    // Enough of the history is in memory to walk it backwards
                    return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
                }
                else {
                    // We didn't actually remember enough of the history.
                    //Since we are quitting the diff early, we need to shift back the originalStart and modified start
                    //back into the boundary limits since we decremented their value above beyond the boundary limit.
                    originalStart++;
                    modifiedStart++;
                    return [
                        new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalEnd - originalStart + 1, modifiedStart, modifiedEnd - modifiedStart + 1)
                    ];
                }
            }
            // Run the algorithm in the reverse direction
            diagonalReverseStart = this.ClipDiagonalBound(diagonalReverseBase - numDifferences, numDifferences, diagonalReverseBase, numDiagonals);
            diagonalReverseEnd = this.ClipDiagonalBound(diagonalReverseBase + numDifferences, numDifferences, diagonalReverseBase, numDiagonals);
            for (let diagonal = diagonalReverseStart; diagonal <= diagonalReverseEnd; diagonal += 2) {
                // STEP 1: We extend the furthest reaching point in the present diagonal
                // by looking at the diagonals above and below and picking the one whose point
                // is further away from the start point (originalEnd, modifiedEnd)
                if (diagonal === diagonalReverseStart || (diagonal < diagonalReverseEnd && reversePoints[diagonal - 1] >= reversePoints[diagonal + 1])) {
                    originalIndex = reversePoints[diagonal + 1] - 1;
                }
                else {
                    originalIndex = reversePoints[diagonal - 1];
                }
                modifiedIndex = originalIndex - (diagonal - diagonalReverseBase) - diagonalReverseOffset;
                // Save the current originalIndex so we can test for false overlap
                const tempOriginalIndex = originalIndex;
                // STEP 2: We can continue to extend the furthest reaching point in the present diagonal
                // as long as the elements are equal.
                while (originalIndex > originalStart && modifiedIndex > modifiedStart && this.ElementsAreEqual(originalIndex, modifiedIndex)) {
                    originalIndex--;
                    modifiedIndex--;
                }
                reversePoints[diagonal] = originalIndex;
                // STEP 4: If delta is even (overlap first happens on reverse when delta is even)
                // and diagonal is in the range of forward diagonals computed for numDifferences
                // then check for overlap.
                if (deltaIsEven && Math.abs(diagonal - diagonalForwardBase) <= numDifferences) {
                    if (originalIndex <= forwardPoints[diagonal]) {
                        midOriginalArr[0] = originalIndex;
                        midModifiedArr[0] = modifiedIndex;
                        if (tempOriginalIndex >= forwardPoints[diagonal] && 1447 /* LocalConstants.MaxDifferencesHistory */ > 0 && numDifferences <= (1447 /* LocalConstants.MaxDifferencesHistory */ + 1)) {
                            // BINGO! We overlapped, and we have the full trace in memory!
                            return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
                        }
                        else {
                            // Either false overlap, or we didn't have enough memory for the full trace
                            // Just return the recursion point
                            return null;
                        }
                    }
                }
            }
            // Save current vectors to history before the next iteration
            if (numDifferences <= 1447 /* LocalConstants.MaxDifferencesHistory */) {
                // We are allocating space for one extra int, which we fill with
                // the index of the diagonal base index
                let temp = new Int32Array(diagonalForwardEnd - diagonalForwardStart + 2);
                temp[0] = diagonalForwardBase - diagonalForwardStart + 1;
                MyArray.Copy2(forwardPoints, diagonalForwardStart, temp, 1, diagonalForwardEnd - diagonalForwardStart + 1);
                this.m_forwardHistory.push(temp);
                temp = new Int32Array(diagonalReverseEnd - diagonalReverseStart + 2);
                temp[0] = diagonalReverseBase - diagonalReverseStart + 1;
                MyArray.Copy2(reversePoints, diagonalReverseStart, temp, 1, diagonalReverseEnd - diagonalReverseStart + 1);
                this.m_reverseHistory.push(temp);
            }
        }
        // If we got here, then we have the full trace in history. We just have to convert it to a change list
        // NOTE: This part is a bit messy
        return this.WALKTRACE(diagonalForwardBase, diagonalForwardStart, diagonalForwardEnd, diagonalForwardOffset, diagonalReverseBase, diagonalReverseStart, diagonalReverseEnd, diagonalReverseOffset, forwardPoints, reversePoints, originalIndex, originalEnd, midOriginalArr, modifiedIndex, modifiedEnd, midModifiedArr, deltaIsEven, quitEarlyArr);
    }
    /**
     * Shifts the given changes to provide a more intuitive diff.
     * While the first element in a diff matches the first element after the diff,
     * we shift the diff down.
     *
     * @param changes The list of changes to shift
     * @returns The shifted changes
     */
    PrettifyChanges(changes) {
        // Shift all the changes down first
        for (let i = 0; i < changes.length; i++) {
            const change = changes[i];
            const originalStop = (i < changes.length - 1) ? changes[i + 1].originalStart : this._originalElementsOrHash.length;
            const modifiedStop = (i < changes.length - 1) ? changes[i + 1].modifiedStart : this._modifiedElementsOrHash.length;
            const checkOriginal = change.originalLength > 0;
            const checkModified = change.modifiedLength > 0;
            while (change.originalStart + change.originalLength < originalStop
                && change.modifiedStart + change.modifiedLength < modifiedStop
                && (!checkOriginal || this.OriginalElementsAreEqual(change.originalStart, change.originalStart + change.originalLength))
                && (!checkModified || this.ModifiedElementsAreEqual(change.modifiedStart, change.modifiedStart + change.modifiedLength))) {
                const startStrictEqual = this.ElementsAreStrictEqual(change.originalStart, change.modifiedStart);
                const endStrictEqual = this.ElementsAreStrictEqual(change.originalStart + change.originalLength, change.modifiedStart + change.modifiedLength);
                if (endStrictEqual && !startStrictEqual) {
                    // moving the change down would create an equal change, but the elements are not strict equal
                    break;
                }
                change.originalStart++;
                change.modifiedStart++;
            }
            const mergedChangeArr = [null];
            if (i < changes.length - 1 && this.ChangesOverlap(changes[i], changes[i + 1], mergedChangeArr)) {
                changes[i] = mergedChangeArr[0];
                changes.splice(i + 1, 1);
                i--;
                continue;
            }
        }
        // Shift changes back up until we hit empty or whitespace-only lines
        for (let i = changes.length - 1; i >= 0; i--) {
            const change = changes[i];
            let originalStop = 0;
            let modifiedStop = 0;
            if (i > 0) {
                const prevChange = changes[i - 1];
                originalStop = prevChange.originalStart + prevChange.originalLength;
                modifiedStop = prevChange.modifiedStart + prevChange.modifiedLength;
            }
            const checkOriginal = change.originalLength > 0;
            const checkModified = change.modifiedLength > 0;
            let bestDelta = 0;
            let bestScore = this._boundaryScore(change.originalStart, change.originalLength, change.modifiedStart, change.modifiedLength);
            for (let delta = 1;; delta++) {
                const originalStart = change.originalStart - delta;
                const modifiedStart = change.modifiedStart - delta;
                if (originalStart < originalStop || modifiedStart < modifiedStop) {
                    break;
                }
                if (checkOriginal && !this.OriginalElementsAreEqual(originalStart, originalStart + change.originalLength)) {
                    break;
                }
                if (checkModified && !this.ModifiedElementsAreEqual(modifiedStart, modifiedStart + change.modifiedLength)) {
                    break;
                }
                const touchingPreviousChange = (originalStart === originalStop && modifiedStart === modifiedStop);
                const score = ((touchingPreviousChange ? 5 : 0)
                    + this._boundaryScore(originalStart, change.originalLength, modifiedStart, change.modifiedLength));
                if (score > bestScore) {
                    bestScore = score;
                    bestDelta = delta;
                }
            }
            change.originalStart -= bestDelta;
            change.modifiedStart -= bestDelta;
            const mergedChangeArr = [null];
            if (i > 0 && this.ChangesOverlap(changes[i - 1], changes[i], mergedChangeArr)) {
                changes[i - 1] = mergedChangeArr[0];
                changes.splice(i, 1);
                i++;
                continue;
            }
        }
        // There could be multiple longest common substrings.
        // Give preference to the ones containing longer lines
        if (this._hasStrings) {
            for (let i = 1, len = changes.length; i < len; i++) {
                const aChange = changes[i - 1];
                const bChange = changes[i];
                const matchedLength = bChange.originalStart - aChange.originalStart - aChange.originalLength;
                const aOriginalStart = aChange.originalStart;
                const bOriginalEnd = bChange.originalStart + bChange.originalLength;
                const abOriginalLength = bOriginalEnd - aOriginalStart;
                const aModifiedStart = aChange.modifiedStart;
                const bModifiedEnd = bChange.modifiedStart + bChange.modifiedLength;
                const abModifiedLength = bModifiedEnd - aModifiedStart;
                // Avoid wasting a lot of time with these searches
                if (matchedLength < 5 && abOriginalLength < 20 && abModifiedLength < 20) {
                    const t = this._findBetterContiguousSequence(aOriginalStart, abOriginalLength, aModifiedStart, abModifiedLength, matchedLength);
                    if (t) {
                        const [originalMatchStart, modifiedMatchStart] = t;
                        if (originalMatchStart !== aChange.originalStart + aChange.originalLength || modifiedMatchStart !== aChange.modifiedStart + aChange.modifiedLength) {
                            // switch to another sequence that has a better score
                            aChange.originalLength = originalMatchStart - aChange.originalStart;
                            aChange.modifiedLength = modifiedMatchStart - aChange.modifiedStart;
                            bChange.originalStart = originalMatchStart + matchedLength;
                            bChange.modifiedStart = modifiedMatchStart + matchedLength;
                            bChange.originalLength = bOriginalEnd - bChange.originalStart;
                            bChange.modifiedLength = bModifiedEnd - bChange.modifiedStart;
                        }
                    }
                }
            }
        }
        return changes;
    }
    _findBetterContiguousSequence(originalStart, originalLength, modifiedStart, modifiedLength, desiredLength) {
        if (originalLength < desiredLength || modifiedLength < desiredLength) {
            return null;
        }
        const originalMax = originalStart + originalLength - desiredLength + 1;
        const modifiedMax = modifiedStart + modifiedLength - desiredLength + 1;
        let bestScore = 0;
        let bestOriginalStart = 0;
        let bestModifiedStart = 0;
        for (let i = originalStart; i < originalMax; i++) {
            for (let j = modifiedStart; j < modifiedMax; j++) {
                const score = this._contiguousSequenceScore(i, j, desiredLength);
                if (score > 0 && score > bestScore) {
                    bestScore = score;
                    bestOriginalStart = i;
                    bestModifiedStart = j;
                }
            }
        }
        if (bestScore > 0) {
            return [bestOriginalStart, bestModifiedStart];
        }
        return null;
    }
    _contiguousSequenceScore(originalStart, modifiedStart, length) {
        let score = 0;
        for (let l = 0; l < length; l++) {
            if (!this.ElementsAreEqual(originalStart + l, modifiedStart + l)) {
                return 0;
            }
            score += this._originalStringElements[originalStart + l].length;
        }
        return score;
    }
    _OriginalIsBoundary(index) {
        if (index <= 0 || index >= this._originalElementsOrHash.length - 1) {
            return true;
        }
        return (this._hasStrings && /^\s*$/.test(this._originalStringElements[index]));
    }
    _OriginalRegionIsBoundary(originalStart, originalLength) {
        if (this._OriginalIsBoundary(originalStart) || this._OriginalIsBoundary(originalStart - 1)) {
            return true;
        }
        if (originalLength > 0) {
            const originalEnd = originalStart + originalLength;
            if (this._OriginalIsBoundary(originalEnd - 1) || this._OriginalIsBoundary(originalEnd)) {
                return true;
            }
        }
        return false;
    }
    _ModifiedIsBoundary(index) {
        if (index <= 0 || index >= this._modifiedElementsOrHash.length - 1) {
            return true;
        }
        return (this._hasStrings && /^\s*$/.test(this._modifiedStringElements[index]));
    }
    _ModifiedRegionIsBoundary(modifiedStart, modifiedLength) {
        if (this._ModifiedIsBoundary(modifiedStart) || this._ModifiedIsBoundary(modifiedStart - 1)) {
            return true;
        }
        if (modifiedLength > 0) {
            const modifiedEnd = modifiedStart + modifiedLength;
            if (this._ModifiedIsBoundary(modifiedEnd - 1) || this._ModifiedIsBoundary(modifiedEnd)) {
                return true;
            }
        }
        return false;
    }
    _boundaryScore(originalStart, originalLength, modifiedStart, modifiedLength) {
        const originalScore = (this._OriginalRegionIsBoundary(originalStart, originalLength) ? 1 : 0);
        const modifiedScore = (this._ModifiedRegionIsBoundary(modifiedStart, modifiedLength) ? 1 : 0);
        return (originalScore + modifiedScore);
    }
    /**
     * Concatenates the two input DiffChange lists and returns the resulting
     * list.
     * @param The left changes
     * @param The right changes
     * @returns The concatenated list
     */
    ConcatenateChanges(left, right) {
        const mergedChangeArr = [];
        if (left.length === 0 || right.length === 0) {
            return (right.length > 0) ? right : left;
        }
        else if (this.ChangesOverlap(left[left.length - 1], right[0], mergedChangeArr)) {
            // Since we break the problem down recursively, it is possible that we
            // might recurse in the middle of a change thereby splitting it into
            // two changes. Here in the combining stage, we detect and fuse those
            // changes back together
            const result = new Array(left.length + right.length - 1);
            MyArray.Copy(left, 0, result, 0, left.length - 1);
            result[left.length - 1] = mergedChangeArr[0];
            MyArray.Copy(right, 1, result, left.length, right.length - 1);
            return result;
        }
        else {
            const result = new Array(left.length + right.length);
            MyArray.Copy(left, 0, result, 0, left.length);
            MyArray.Copy(right, 0, result, left.length, right.length);
            return result;
        }
    }
    /**
     * Returns true if the two changes overlap and can be merged into a single
     * change
     * @param left The left change
     * @param right The right change
     * @param mergedChange The merged change if the two overlap, null otherwise
     * @returns True if the two changes overlap
     */
    ChangesOverlap(left, right, mergedChangeArr) {
        Debug.Assert(left.originalStart <= right.originalStart, 'Left change is not less than or equal to right change');
        Debug.Assert(left.modifiedStart <= right.modifiedStart, 'Left change is not less than or equal to right change');
        if (left.originalStart + left.originalLength >= right.originalStart || left.modifiedStart + left.modifiedLength >= right.modifiedStart) {
            const originalStart = left.originalStart;
            let originalLength = left.originalLength;
            const modifiedStart = left.modifiedStart;
            let modifiedLength = left.modifiedLength;
            if (left.originalStart + left.originalLength >= right.originalStart) {
                originalLength = right.originalStart + right.originalLength - left.originalStart;
            }
            if (left.modifiedStart + left.modifiedLength >= right.modifiedStart) {
                modifiedLength = right.modifiedStart + right.modifiedLength - left.modifiedStart;
            }
            mergedChangeArr[0] = new _diffChange_js__WEBPACK_IMPORTED_MODULE_0__.DiffChange(originalStart, originalLength, modifiedStart, modifiedLength);
            return true;
        }
        else {
            mergedChangeArr[0] = null;
            return false;
        }
    }
    /**
     * Helper method used to clip a diagonal index to the range of valid
     * diagonals. This also decides whether or not the diagonal index,
     * if it exceeds the boundary, should be clipped to the boundary or clipped
     * one inside the boundary depending on the Even/Odd status of the boundary
     * and numDifferences.
     * @param diagonal The index of the diagonal to clip.
     * @param numDifferences The current number of differences being iterated upon.
     * @param diagonalBaseIndex The base reference diagonal.
     * @param numDiagonals The total number of diagonals.
     * @returns The clipped diagonal index.
     */
    ClipDiagonalBound(diagonal, numDifferences, diagonalBaseIndex, numDiagonals) {
        if (diagonal >= 0 && diagonal < numDiagonals) {
            // Nothing to clip, its in range
            return diagonal;
        }
        // diagonalsBelow: The number of diagonals below the reference diagonal
        // diagonalsAbove: The number of diagonals above the reference diagonal
        const diagonalsBelow = diagonalBaseIndex;
        const diagonalsAbove = numDiagonals - diagonalBaseIndex - 1;
        const diffEven = (numDifferences % 2 === 0);
        if (diagonal < 0) {
            const lowerBoundEven = (diagonalsBelow % 2 === 0);
            return (diffEven === lowerBoundEven) ? 0 : 1;
        }
        else {
            const upperBoundEven = (diagonalsAbove % 2 === 0);
            return (diffEven === upperBoundEven) ? numDiagonals - 1 : numDiagonals - 2;
        }
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DiffChange: () => (/* binding */ DiffChange)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Represents information about a specific difference between two sequences.
 */
class DiffChange {
    /**
     * Constructs a new DiffChange with the given sequence information
     * and content.
     */
    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {
        //Debug.Assert(originalLength > 0 || modifiedLength > 0, "originalLength and modifiedLength cannot both be <= 0");
        this.originalStart = originalStart;
        this.originalLength = originalLength;
        this.modifiedStart = modifiedStart;
        this.modifiedLength = modifiedLength;
    }
    /**
     * The end point (exclusive) of the change in the original sequence.
     */
    getOriginalEnd() {
        return this.originalStart + this.originalLength;
    }
    /**
     * The end point (exclusive) of the change in the modified sequence.
     */
    getModifiedEnd() {
        return this.modifiedStart + this.modifiedLength;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BugIndicatingError: () => (/* binding */ BugIndicatingError),
/* harmony export */   CancellationError: () => (/* binding */ CancellationError),
/* harmony export */   ErrorHandler: () => (/* binding */ ErrorHandler),
/* harmony export */   ErrorNoTelemetry: () => (/* binding */ ErrorNoTelemetry),
/* harmony export */   NotSupportedError: () => (/* binding */ NotSupportedError),
/* harmony export */   canceled: () => (/* binding */ canceled),
/* harmony export */   errorHandler: () => (/* binding */ errorHandler),
/* harmony export */   illegalArgument: () => (/* binding */ illegalArgument),
/* harmony export */   illegalState: () => (/* binding */ illegalState),
/* harmony export */   isCancellationError: () => (/* binding */ isCancellationError),
/* harmony export */   onUnexpectedError: () => (/* binding */ onUnexpectedError),
/* harmony export */   onUnexpectedExternalError: () => (/* binding */ onUnexpectedExternalError),
/* harmony export */   transformErrorForSerialization: () => (/* binding */ transformErrorForSerialization)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Avoid circular dependency on EventEmitter by implementing a subset of the interface.
class ErrorHandler {
    constructor() {
        this.listeners = [];
        this.unexpectedErrorHandler = function (e) {
            setTimeout(() => {
                if (e.stack) {
                    if (ErrorNoTelemetry.isErrorNoTelemetry(e)) {
                        throw new ErrorNoTelemetry(e.message + '\n\n' + e.stack);
                    }
                    throw new Error(e.message + '\n\n' + e.stack);
                }
                throw e;
            }, 0);
        };
    }
    emit(e) {
        this.listeners.forEach((listener) => {
            listener(e);
        });
    }
    onUnexpectedError(e) {
        this.unexpectedErrorHandler(e);
        this.emit(e);
    }
    // For external errors, we don't want the listeners to be called
    onUnexpectedExternalError(e) {
        this.unexpectedErrorHandler(e);
    }
}
const errorHandler = new ErrorHandler();
function onUnexpectedError(e) {
    // ignore errors from cancelled promises
    if (!isCancellationError(e)) {
        errorHandler.onUnexpectedError(e);
    }
    return undefined;
}
function onUnexpectedExternalError(e) {
    // ignore errors from cancelled promises
    if (!isCancellationError(e)) {
        errorHandler.onUnexpectedExternalError(e);
    }
    return undefined;
}
function transformErrorForSerialization(error) {
    if (error instanceof Error) {
        const { name, message } = error;
        const stack = error.stacktrace || error.stack;
        return {
            $isError: true,
            name,
            message,
            stack,
            noTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)
        };
    }
    // return as is
    return error;
}
const canceledName = 'Canceled';
/**
 * Checks if the given error is a promise in canceled state
 */
function isCancellationError(error) {
    if (error instanceof CancellationError) {
        return true;
    }
    return error instanceof Error && error.name === canceledName && error.message === canceledName;
}
// !!!IMPORTANT!!!
// Do NOT change this class because it is also used as an API-type.
class CancellationError extends Error {
    constructor() {
        super(canceledName);
        this.name = this.message;
    }
}
/**
 * @deprecated use {@link CancellationError `new CancellationError()`} instead
 */
function canceled() {
    const error = new Error(canceledName);
    error.name = error.message;
    return error;
}
function illegalArgument(name) {
    if (name) {
        return new Error(`Illegal argument: ${name}`);
    }
    else {
        return new Error('Illegal argument');
    }
}
function illegalState(name) {
    if (name) {
        return new Error(`Illegal state: ${name}`);
    }
    else {
        return new Error('Illegal state');
    }
}
class NotSupportedError extends Error {
    constructor(message) {
        super('NotSupported');
        if (message) {
            this.message = message;
        }
    }
}
/**
 * Error that when thrown won't be logged in telemetry as an unhandled error.
 */
class ErrorNoTelemetry extends Error {
    constructor(msg) {
        super(msg);
        this.name = 'CodeExpectedError';
    }
    static fromError(err) {
        if (err instanceof ErrorNoTelemetry) {
            return err;
        }
        const result = new ErrorNoTelemetry();
        result.message = err.message;
        result.stack = err.stack;
        return result;
    }
    static isErrorNoTelemetry(err) {
        return err.name === 'CodeExpectedError';
    }
}
/**
 * This error indicates a bug.
 * Do not throw this for invalid user input.
 * Only catch this error to recover gracefully from bugs.
 */
class BugIndicatingError extends Error {
    constructor(message) {
        super(message || 'An unexpected bug occurred.');
        Object.setPrototypeOf(this, BugIndicatingError.prototype);
        // Because we know for sure only buggy code throws this,
        // we definitely want to break here and fix the bug.
        // eslint-disable-next-line no-debugger
        // debugger;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/event.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/event.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DebounceEmitter: () => (/* binding */ DebounceEmitter),
/* harmony export */   Emitter: () => (/* binding */ Emitter),
/* harmony export */   Event: () => (/* binding */ Event),
/* harmony export */   EventBufferer: () => (/* binding */ EventBufferer),
/* harmony export */   EventMultiplexer: () => (/* binding */ EventMultiplexer),
/* harmony export */   EventProfiling: () => (/* binding */ EventProfiling),
/* harmony export */   MicrotaskEmitter: () => (/* binding */ MicrotaskEmitter),
/* harmony export */   PauseableEmitter: () => (/* binding */ PauseableEmitter),
/* harmony export */   Relay: () => (/* binding */ Relay),
/* harmony export */   createEventDeliveryQueue: () => (/* binding */ createEventDeliveryQueue)
/* harmony export */ });
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ "./node_modules/monaco-editor/esm/vs/base/common/errors.js");
/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional.js */ "./node_modules/monaco-editor/esm/vs/base/common/functional.js");
/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lifecycle.js */ "./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js");
/* harmony import */ var _linkedList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./linkedList.js */ "./node_modules/monaco-editor/esm/vs/base/common/linkedList.js");
/* harmony import */ var _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stopwatch.js */ "./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");





// -----------------------------------------------------------------------------------------------------------------------
// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.
// -----------------------------------------------------------------------------------------------------------------------
const _enableDisposeWithListenerWarning = false;
// _enableDisposeWithListenerWarning = Boolean("TRUE"); // causes a linter warning so that it cannot be pushed
// -----------------------------------------------------------------------------------------------------------------------
// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.
// See https://github.com/microsoft/vscode/issues/142851
// -----------------------------------------------------------------------------------------------------------------------
const _enableSnapshotPotentialLeakWarning = false;
var Event;
(function (Event) {
    Event.None = () => _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;
    function _addLeakageTraceLogic(options) {
        if (_enableSnapshotPotentialLeakWarning) {
            const { onDidAddListener: origListenerDidAdd } = options;
            const stack = Stacktrace.create();
            let count = 0;
            options.onDidAddListener = () => {
                if (++count === 2) {
                    console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');
                    stack.print();
                }
                origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();
            };
        }
    }
    /**
     * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared
     * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a
     * result of merging events and to try prevent race conditions that could arise when using related deferred and
     * non-deferred events.
     *
     * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work
     * (eg. latency of keypress to text rendered).
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param disposable A disposable store to add the new EventEmitter to.
     */
    function defer(event, disposable) {
        return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);
    }
    Event.defer = defer;
    /**
     * Given an event, returns another event which only fires once.
     *
     * @param event The event source for the new event.
     */
    function once(event) {
        return (listener, thisArgs = null, disposables) => {
            // we need this, in case the event fires during the listener call
            let didFire = false;
            let result = undefined;
            result = event(e => {
                if (didFire) {
                    return;
                }
                else if (result) {
                    result.dispose();
                }
                else {
                    didFire = true;
                }
                return listener.call(thisArgs, e);
            }, null, disposables);
            if (didFire) {
                result.dispose();
            }
            return result;
        };
    }
    Event.once = once;
    /**
     * Maps an event of one type into an event of another type using a mapping function, similar to how
     * `Array.prototype.map` works.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param map The mapping function.
     * @param disposable A disposable store to add the new EventEmitter to.
     */
    function map(event, map, disposable) {
        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);
    }
    Event.map = map;
    /**
     * Wraps an event in another event that performs some function on the event object before firing.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param each The function to perform on the event object.
     * @param disposable A disposable store to add the new EventEmitter to.
     */
    function forEach(event, each, disposable) {
        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables), disposable);
    }
    Event.forEach = forEach;
    function filter(event, filter, disposable) {
        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);
    }
    Event.filter = filter;
    /**
     * Given an event, returns the same event but typed as `Event<void>`.
     */
    function signal(event) {
        return event;
    }
    Event.signal = signal;
    function any(...events) {
        return (listener, thisArgs = null, disposables) => {
            const disposable = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.combinedDisposable)(...events.map(event => event(e => listener.call(thisArgs, e))));
            return addAndReturnDisposable(disposable, disposables);
        };
    }
    Event.any = any;
    /**
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     */
    function reduce(event, merge, initial, disposable) {
        let output = initial;
        return map(event, e => {
            output = merge(output, e);
            return output;
        }, disposable);
    }
    Event.reduce = reduce;
    function snapshot(event, disposable) {
        let listener;
        const options = {
            onWillAddFirstListener() {
                listener = event(emitter.fire, emitter);
            },
            onDidRemoveLastListener() {
                listener === null || listener === void 0 ? void 0 : listener.dispose();
            }
        };
        if (!disposable) {
            _addLeakageTraceLogic(options);
        }
        const emitter = new Emitter(options);
        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);
        return emitter.event;
    }
    /**
     * Adds the IDisposable to the store if it's set, and returns it. Useful to
     * Event function implementation.
     */
    function addAndReturnDisposable(d, store) {
        if (store instanceof Array) {
            store.push(d);
        }
        else if (store) {
            store.add(d);
        }
        return d;
    }
    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {
        let subscription;
        let output = undefined;
        let handle = undefined;
        let numDebouncedCalls = 0;
        let doFire;
        const options = {
            leakWarningThreshold,
            onWillAddFirstListener() {
                subscription = event(cur => {
                    numDebouncedCalls++;
                    output = merge(output, cur);
                    if (leading && !handle) {
                        emitter.fire(output);
                        output = undefined;
                    }
                    doFire = () => {
                        const _output = output;
                        output = undefined;
                        handle = undefined;
                        if (!leading || numDebouncedCalls > 1) {
                            emitter.fire(_output);
                        }
                        numDebouncedCalls = 0;
                    };
                    if (typeof delay === 'number') {
                        clearTimeout(handle);
                        handle = setTimeout(doFire, delay);
                    }
                    else {
                        if (handle === undefined) {
                            handle = 0;
                            queueMicrotask(doFire);
                        }
                    }
                });
            },
            onWillRemoveListener() {
                if (flushOnListenerRemove && numDebouncedCalls > 0) {
                    doFire === null || doFire === void 0 ? void 0 : doFire();
                }
            },
            onDidRemoveLastListener() {
                doFire = undefined;
                subscription.dispose();
            }
        };
        if (!disposable) {
            _addLeakageTraceLogic(options);
        }
        const emitter = new Emitter(options);
        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);
        return emitter.event;
    }
    Event.debounce = debounce;
    /**
     * Debounces an event, firing after some delay (default=0) with an array of all event original objects.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     */
    function accumulate(event, delay = 0, disposable) {
        return Event.debounce(event, (last, e) => {
            if (!last) {
                return [e];
            }
            last.push(e);
            return last;
        }, delay, undefined, true, undefined, disposable);
    }
    Event.accumulate = accumulate;
    /**
     * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate
     * event objects from different sources do not fire the same event object.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param equals The equality condition.
     * @param disposable A disposable store to add the new EventEmitter to.
     *
     * @example
     * ```
     * // Fire only one time when a single window is opened or focused
     * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))
     * ```
     */
    function latch(event, equals = (a, b) => a === b, disposable) {
        let firstCall = true;
        let cache;
        return filter(event, value => {
            const shouldEmit = firstCall || !equals(value, cache);
            firstCall = false;
            cache = value;
            return shouldEmit;
        }, disposable);
    }
    Event.latch = latch;
    /**
     * Splits an event whose parameter is a union type into 2 separate events for each type in the union.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @example
     * ```
     * const event = new EventEmitter<number | undefined>().event;
     * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);
     * ```
     *
     * @param event The event source for the new event.
     * @param isT A function that determines what event is of the first type.
     * @param disposable A disposable store to add the new EventEmitter to.
     */
    function split(event, isT, disposable) {
        return [
            Event.filter(event, isT, disposable),
            Event.filter(event, e => !isT(e), disposable),
        ];
    }
    Event.split = split;
    /**
     * Buffers an event until it has a listener attached.
     *
     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
     * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
     * returned event causes this utility to leak a listener on the original event.
     *
     * @param event The event source for the new event.
     * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a
     * `setTimeout` when the first event listener is added.
     * @param _buffer Internal: A source event array used for tests.
     *
     * @example
     * ```
     * // Start accumulating events, when the first listener is attached, flush
     * // the event after a timeout such that multiple listeners attached before
     * // the timeout would receive the event
     * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);
     * ```
     */
    function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {
        let buffer = _buffer.slice();
        let listener = event(e => {
            if (buffer) {
                buffer.push(e);
            }
            else {
                emitter.fire(e);
            }
        });
        if (disposable) {
            disposable.add(listener);
        }
        const flush = () => {
            buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));
            buffer = null;
        };
        const emitter = new Emitter({
            onWillAddFirstListener() {
                if (!listener) {
                    listener = event(e => emitter.fire(e));
                    if (disposable) {
                        disposable.add(listener);
                    }
                }
            },
            onDidAddFirstListener() {
                if (buffer) {
                    if (flushAfterTimeout) {
                        setTimeout(flush);
                    }
                    else {
                        flush();
                    }
                }
            },
            onDidRemoveLastListener() {
                if (listener) {
                    listener.dispose();
                }
                listener = null;
            }
        });
        if (disposable) {
            disposable.add(emitter);
        }
        return emitter.event;
    }
    Event.buffer = buffer;
    /**
     * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.
     *
     * @example
     * ```
     * // Normal
     * const onEnterPressNormal = Event.filter(
     *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),
     *   e.keyCode === KeyCode.Enter
     * ).event;
     *
     * // Using chain
     * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $
     *   .map(e => new StandardKeyboardEvent(e))
     *   .filter(e => e.keyCode === KeyCode.Enter)
     * );
     * ```
     */
    function chain(event, sythensize) {
        const fn = (listener, thisArgs, disposables) => {
            const cs = sythensize(new ChainableSynthesis());
            return event(function (value) {
                const result = cs.evaluate(value);
                if (result !== HaltChainable) {
                    listener.call(thisArgs, result);
                }
            }, undefined, disposables);
        };
        return fn;
    }
    Event.chain = chain;
    const HaltChainable = Symbol('HaltChainable');
    class ChainableSynthesis {
        constructor() {
            this.steps = [];
        }
        map(fn) {
            this.steps.push(fn);
            return this;
        }
        forEach(fn) {
            this.steps.push(v => {
                fn(v);
                return v;
            });
            return this;
        }
        filter(fn) {
            this.steps.push(v => fn(v) ? v : HaltChainable);
            return this;
        }
        reduce(merge, initial) {
            let last = initial;
            this.steps.push(v => {
                last = merge(last, v);
                return last;
            });
            return this;
        }
        latch(equals = (a, b) => a === b) {
            let firstCall = true;
            let cache;
            this.steps.push(value => {
                const shouldEmit = firstCall || !equals(value, cache);
                firstCall = false;
                cache = value;
                return shouldEmit ? value : HaltChainable;
            });
            return this;
        }
        evaluate(value) {
            for (const step of this.steps) {
                value = step(value);
                if (value === HaltChainable) {
                    break;
                }
            }
            return value;
        }
    }
    /**
     * Creates an {@link Event} from a node event emitter.
     */
    function fromNodeEventEmitter(emitter, eventName, map = id => id) {
        const fn = (...args) => result.fire(map(...args));
        const onFirstListenerAdd = () => emitter.on(eventName, fn);
        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);
        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });
        return result.event;
    }
    Event.fromNodeEventEmitter = fromNodeEventEmitter;
    /**
     * Creates an {@link Event} from a DOM event emitter.
     */
    function fromDOMEventEmitter(emitter, eventName, map = id => id) {
        const fn = (...args) => result.fire(map(...args));
        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);
        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);
        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });
        return result.event;
    }
    Event.fromDOMEventEmitter = fromDOMEventEmitter;
    /**
     * Creates a promise out of an event, using the {@link Event.once} helper.
     */
    function toPromise(event) {
        return new Promise(resolve => once(event)(resolve));
    }
    Event.toPromise = toPromise;
    /**
     * Creates an event out of a promise that fires once when the promise is
     * resolved with the result of the promise or `undefined`.
     */
    function fromPromise(promise) {
        const result = new Emitter();
        promise.then(res => {
            result.fire(res);
        }, () => {
            result.fire(undefined);
        }).finally(() => {
            result.dispose();
        });
        return result.event;
    }
    Event.fromPromise = fromPromise;
    /**
     * Adds a listener to an event and calls the listener immediately with undefined as the event object.
     *
     * @example
     * ```
     * // Initialize the UI and update it when dataChangeEvent fires
     * runAndSubscribe(dataChangeEvent, () => this._updateUI());
     * ```
     */
    function runAndSubscribe(event, handler) {
        handler(undefined);
        return event(e => handler(e));
    }
    Event.runAndSubscribe = runAndSubscribe;
    /**
     * Adds a listener to an event and calls the listener immediately with undefined as the event object. A new
     * {@link DisposableStore} is passed to the listener which is disposed when the returned disposable is disposed.
     */
    function runAndSubscribeWithStore(event, handler) {
        let store = null;
        function run(e) {
            store === null || store === void 0 ? void 0 : store.dispose();
            store = new _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore();
            handler(e, store);
        }
        run(undefined);
        const disposable = event(e => run(e));
        return (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {
            disposable.dispose();
            store === null || store === void 0 ? void 0 : store.dispose();
        });
    }
    Event.runAndSubscribeWithStore = runAndSubscribeWithStore;
    class EmitterObserver {
        constructor(_observable, store) {
            this._observable = _observable;
            this._counter = 0;
            this._hasChanged = false;
            const options = {
                onWillAddFirstListener: () => {
                    _observable.addObserver(this);
                },
                onDidRemoveLastListener: () => {
                    _observable.removeObserver(this);
                }
            };
            if (!store) {
                _addLeakageTraceLogic(options);
            }
            this.emitter = new Emitter(options);
            if (store) {
                store.add(this.emitter);
            }
        }
        beginUpdate(_observable) {
            // assert(_observable === this.obs);
            this._counter++;
        }
        handlePossibleChange(_observable) {
            // assert(_observable === this.obs);
        }
        handleChange(_observable, _change) {
            // assert(_observable === this.obs);
            this._hasChanged = true;
        }
        endUpdate(_observable) {
            // assert(_observable === this.obs);
            this._counter--;
            if (this._counter === 0) {
                this._observable.reportChanges();
                if (this._hasChanged) {
                    this._hasChanged = false;
                    this.emitter.fire(this._observable.get());
                }
            }
        }
    }
    /**
     * Creates an event emitter that is fired when the observable changes.
     * Each listeners subscribes to the emitter.
     */
    function fromObservable(obs, store) {
        const observer = new EmitterObserver(obs, store);
        return observer.emitter.event;
    }
    Event.fromObservable = fromObservable;
    /**
     * Each listener is attached to the observable directly.
     */
    function fromObservableLight(observable) {
        return (listener) => {
            let count = 0;
            let didChange = false;
            const observer = {
                beginUpdate() {
                    count++;
                },
                endUpdate() {
                    count--;
                    if (count === 0) {
                        observable.reportChanges();
                        if (didChange) {
                            didChange = false;
                            listener();
                        }
                    }
                },
                handlePossibleChange() {
                    // noop
                },
                handleChange() {
                    didChange = true;
                }
            };
            observable.addObserver(observer);
            observable.reportChanges();
            return {
                dispose() {
                    observable.removeObserver(observer);
                }
            };
        };
    }
    Event.fromObservableLight = fromObservableLight;
})(Event || (Event = {}));
class EventProfiling {
    constructor(name) {
        this.listenerCount = 0;
        this.invocationCount = 0;
        this.elapsedOverall = 0;
        this.durations = [];
        this.name = `${name}_${EventProfiling._idPool++}`;
        EventProfiling.all.add(this);
    }
    start(listenerCount) {
        this._stopWatch = new _stopwatch_js__WEBPACK_IMPORTED_MODULE_4__.StopWatch();
        this.listenerCount = listenerCount;
    }
    stop() {
        if (this._stopWatch) {
            const elapsed = this._stopWatch.elapsed();
            this.durations.push(elapsed);
            this.elapsedOverall += elapsed;
            this.invocationCount += 1;
            this._stopWatch = undefined;
        }
    }
}
EventProfiling.all = new Set();
EventProfiling._idPool = 0;
let _globalLeakWarningThreshold = -1;
class LeakageMonitor {
    constructor(threshold, name = Math.random().toString(18).slice(2, 5)) {
        this.threshold = threshold;
        this.name = name;
        this._warnCountdown = 0;
    }
    dispose() {
        var _a;
        (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();
    }
    check(stack, listenerCount) {
        const threshold = this.threshold;
        if (threshold <= 0 || listenerCount < threshold) {
            return undefined;
        }
        if (!this._stacks) {
            this._stacks = new Map();
        }
        const count = (this._stacks.get(stack.value) || 0);
        this._stacks.set(stack.value, count + 1);
        this._warnCountdown -= 1;
        if (this._warnCountdown <= 0) {
            // only warn on first exceed and then every time the limit
            // is exceeded by 50% again
            this._warnCountdown = threshold * 0.5;
            // find most frequent listener and print warning
            let topStack;
            let topCount = 0;
            for (const [stack, count] of this._stacks) {
                if (!topStack || topCount < count) {
                    topStack = stack;
                    topCount = count;
                }
            }
            console.warn(`[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`);
            console.warn(topStack);
        }
        return () => {
            const count = (this._stacks.get(stack.value) || 0);
            this._stacks.set(stack.value, count - 1);
        };
    }
}
class Stacktrace {
    static create() {
        var _a;
        return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');
    }
    constructor(value) {
        this.value = value;
    }
    print() {
        console.warn(this.value.split('\n').slice(2).join('\n'));
    }
}
class UniqueContainer {
    constructor(value) {
        this.value = value;
    }
}
const compactionThreshold = 2;
const forEachListener = (listeners, fn) => {
    if (listeners instanceof UniqueContainer) {
        fn(listeners);
    }
    else {
        for (let i = 0; i < listeners.length; i++) {
            const l = listeners[i];
            if (l) {
                fn(l);
            }
        }
    }
};
/**
 * The Emitter can be used to expose an Event to the public
 * to fire it from the insides.
 * Sample:
    class Document {

        private readonly _onDidChange = new Emitter<(value:string)=>any>();

        public onDidChange = this._onDidChange.event;

        // getter-style
        // get onDidChange(): Event<(value:string)=>any> {
        // 	return this._onDidChange.event;
        // }

        private _doIt() {
            //...
            this._onDidChange.fire(value);
        }
    }
 */
class Emitter {
    constructor(options) {
        var _a, _b, _c, _d, _e;
        this._size = 0;
        this._options = options;
        this._leakageMon = _globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold) ? new LeakageMonitor((_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.leakWarningThreshold) !== null && _c !== void 0 ? _c : _globalLeakWarningThreshold) : undefined;
        this._perfMon = ((_d = this._options) === null || _d === void 0 ? void 0 : _d._profName) ? new EventProfiling(this._options._profName) : undefined;
        this._deliveryQueue = (_e = this._options) === null || _e === void 0 ? void 0 : _e.deliveryQueue;
    }
    dispose() {
        var _a, _b, _c, _d;
        if (!this._disposed) {
            this._disposed = true;
            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter
            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and
            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the
            // the following programming pattern is very popular:
            //
            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model
            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener
            // ...later...
            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the "overall dispose" is done
            if (((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) === this) {
                this._deliveryQueue.reset();
            }
            if (this._listeners) {
                if (_enableDisposeWithListenerWarning) {
                    const listeners = this._listeners;
                    queueMicrotask(() => {
                        forEachListener(listeners, l => { var _a; return (_a = l.stack) === null || _a === void 0 ? void 0 : _a.print(); });
                    });
                }
                this._listeners = undefined;
                this._size = 0;
            }
            (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);
            (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();
        }
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        var _a;
        (_a = this._event) !== null && _a !== void 0 ? _a : (this._event = (callback, thisArgs, disposables) => {
            var _a, _b, _c, _d, _e;
            if (this._leakageMon && this._size > this._leakageMon.threshold * 3) {
                console.warn(`[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far`);
                return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;
            }
            if (this._disposed) {
                // todo: should we warn if a listener is added to a disposed emitter? This happens often
                return _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;
            }
            if (thisArgs) {
                callback = callback.bind(thisArgs);
            }
            const contained = new UniqueContainer(callback);
            let removeMonitor;
            let stack;
            if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {
                // check and record this emitter for potential leakage
                contained.stack = Stacktrace.create();
                removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);
            }
            if (_enableDisposeWithListenerWarning) {
                contained.stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();
            }
            if (!this._listeners) {
                (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillAddFirstListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);
                this._listeners = contained;
                (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidAddFirstListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);
            }
            else if (this._listeners instanceof UniqueContainer) {
                (_e = this._deliveryQueue) !== null && _e !== void 0 ? _e : (this._deliveryQueue = new EventDeliveryQueuePrivate());
                this._listeners = [this._listeners, contained];
            }
            else {
                this._listeners.push(contained);
            }
            this._size++;
            const result = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => { removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor(); this._removeListener(contained); });
            if (disposables instanceof _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore) {
                disposables.add(result);
            }
            else if (Array.isArray(disposables)) {
                disposables.push(result);
            }
            return result;
        });
        return this._event;
    }
    _removeListener(listener) {
        var _a, _b, _c, _d;
        (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);
        if (!this._listeners) {
            return; // expected if a listener gets disposed
        }
        if (this._size === 1) {
            this._listeners = undefined;
            (_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidRemoveLastListener) === null || _d === void 0 ? void 0 : _d.call(_c, this);
            this._size = 0;
            return;
        }
        // size > 1 which requires that listeners be a list:
        const listeners = this._listeners;
        const index = listeners.indexOf(listener);
        if (index === -1) {
            console.log('disposed?', this._disposed);
            console.log('size?', this._size);
            console.log('arr?', JSON.stringify(this._listeners));
            throw new Error('Attempted to dispose unknown listener');
        }
        this._size--;
        listeners[index] = undefined;
        const adjustDeliveryQueue = this._deliveryQueue.current === this;
        if (this._size * compactionThreshold <= listeners.length) {
            let n = 0;
            for (let i = 0; i < listeners.length; i++) {
                if (listeners[i]) {
                    listeners[n++] = listeners[i];
                }
                else if (adjustDeliveryQueue) {
                    this._deliveryQueue.end--;
                    if (n < this._deliveryQueue.i) {
                        this._deliveryQueue.i--;
                    }
                }
            }
            listeners.length = n;
        }
    }
    _deliver(listener, value) {
        var _a;
        if (!listener) {
            return;
        }
        const errorHandler = ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onListenerError) || _errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError;
        if (!errorHandler) {
            listener.value(value);
            return;
        }
        try {
            listener.value(value);
        }
        catch (e) {
            errorHandler(e);
        }
    }
    /** Delivers items in the queue. Assumes the queue is ready to go. */
    _deliverQueue(dq) {
        const listeners = dq.current._listeners;
        while (dq.i < dq.end) {
            // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()
            this._deliver(listeners[dq.i++], dq.value);
        }
        dq.reset();
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        var _a, _b, _c, _d;
        if ((_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.current) {
            this._deliverQueue(this._deliveryQueue);
            (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch
        }
        (_c = this._perfMon) === null || _c === void 0 ? void 0 : _c.start(this._size);
        if (!this._listeners) {
            // no-op
        }
        else if (this._listeners instanceof UniqueContainer) {
            this._deliver(this._listeners, event);
        }
        else {
            const dq = this._deliveryQueue;
            dq.enqueue(this, event, this._listeners.length);
            this._deliverQueue(dq);
        }
        (_d = this._perfMon) === null || _d === void 0 ? void 0 : _d.stop();
    }
    hasListeners() {
        return this._size > 0;
    }
}
const createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();
class EventDeliveryQueuePrivate {
    constructor() {
        /**
         * Index in current's listener list.
         */
        this.i = -1;
        /**
         * The last index in the listener's list to deliver.
         */
        this.end = 0;
    }
    enqueue(emitter, value, end) {
        this.i = 0;
        this.end = end;
        this.current = emitter;
        this.value = value;
    }
    reset() {
        this.i = this.end; // force any current emission loop to stop, mainly for during dispose
        this.current = undefined;
        this.value = undefined;
    }
}
class PauseableEmitter extends Emitter {
    constructor(options) {
        super(options);
        this._isPaused = 0;
        this._eventQueue = new _linkedList_js__WEBPACK_IMPORTED_MODULE_3__.LinkedList();
        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;
    }
    pause() {
        this._isPaused++;
    }
    resume() {
        if (this._isPaused !== 0 && --this._isPaused === 0) {
            if (this._mergeFn) {
                // use the merge function to create a single composite
                // event. make a copy in case firing pauses this emitter
                if (this._eventQueue.size > 0) {
                    const events = Array.from(this._eventQueue);
                    this._eventQueue.clear();
                    super.fire(this._mergeFn(events));
                }
            }
            else {
                // no merging, fire each event individually and test
                // that this emitter isn't paused halfway through
                while (!this._isPaused && this._eventQueue.size !== 0) {
                    super.fire(this._eventQueue.shift());
                }
            }
        }
    }
    fire(event) {
        if (this._size) {
            if (this._isPaused !== 0) {
                this._eventQueue.push(event);
            }
            else {
                super.fire(event);
            }
        }
    }
}
class DebounceEmitter extends PauseableEmitter {
    constructor(options) {
        var _a;
        super(options);
        this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;
    }
    fire(event) {
        if (!this._handle) {
            this.pause();
            this._handle = setTimeout(() => {
                this._handle = undefined;
                this.resume();
            }, this._delay);
        }
        super.fire(event);
    }
}
/**
 * An emitter which queue all events and then process them at the
 * end of the event loop.
 */
class MicrotaskEmitter extends Emitter {
    constructor(options) {
        super(options);
        this._queuedEvents = [];
        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;
    }
    fire(event) {
        if (!this.hasListeners()) {
            return;
        }
        this._queuedEvents.push(event);
        if (this._queuedEvents.length === 1) {
            queueMicrotask(() => {
                if (this._mergeFn) {
                    super.fire(this._mergeFn(this._queuedEvents));
                }
                else {
                    this._queuedEvents.forEach(e => super.fire(e));
                }
                this._queuedEvents = [];
            });
        }
    }
}
/**
 * An event emitter that multiplexes many events into a single event.
 *
 * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s
 * to the multiplexer as needed.
 *
 * ```typescript
 * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();
 *
 * const thingListeners = DisposableMap<Thing, IDisposable>();
 *
 * thingService.onDidAddThing(thing => {
 *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);
 * });
 * thingService.onDidRemoveThing(thing => {
 *   thingListeners.deleteAndDispose(thing);
 * });
 *
 * anythingDataMultiplexer.event(e => {
 *   console.log('Something fired data ' + e.data)
 * });
 * ```
 */
class EventMultiplexer {
    constructor() {
        this.hasListeners = false;
        this.events = [];
        this.emitter = new Emitter({
            onWillAddFirstListener: () => this.onFirstListenerAdd(),
            onDidRemoveLastListener: () => this.onLastListenerRemove()
        });
    }
    get event() {
        return this.emitter.event;
    }
    add(event) {
        const e = { event: event, listener: null };
        this.events.push(e);
        if (this.hasListeners) {
            this.hook(e);
        }
        const dispose = () => {
            if (this.hasListeners) {
                this.unhook(e);
            }
            const idx = this.events.indexOf(e);
            this.events.splice(idx, 1);
        };
        return (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)((0,_functional_js__WEBPACK_IMPORTED_MODULE_1__.createSingleCallFunction)(dispose));
    }
    onFirstListenerAdd() {
        this.hasListeners = true;
        this.events.forEach(e => this.hook(e));
    }
    onLastListenerRemove() {
        this.hasListeners = false;
        this.events.forEach(e => this.unhook(e));
    }
    hook(e) {
        e.listener = e.event(r => this.emitter.fire(r));
    }
    unhook(e) {
        if (e.listener) {
            e.listener.dispose();
        }
        e.listener = null;
    }
    dispose() {
        this.emitter.dispose();
    }
}
/**
 * The EventBufferer is useful in situations in which you want
 * to delay firing your events during some code.
 * You can wrap that code and be sure that the event will not
 * be fired during that wrap.
 *
 * ```
 * const emitter: Emitter;
 * const delayer = new EventDelayer();
 * const delayedEvent = delayer.wrapEvent(emitter.event);
 *
 * delayedEvent(console.log);
 *
 * delayer.bufferEvents(() => {
 *   emitter.fire(); // event will not be fired yet
 * });
 *
 * // event will only be fired at this point
 * ```
 */
class EventBufferer {
    constructor() {
        this.buffers = [];
    }
    wrapEvent(event) {
        return (listener, thisArgs, disposables) => {
            return event(i => {
                const buffer = this.buffers[this.buffers.length - 1];
                if (buffer) {
                    buffer.push(() => listener.call(thisArgs, i));
                }
                else {
                    listener.call(thisArgs, i);
                }
            }, undefined, disposables);
        };
    }
    bufferEvents(fn) {
        const buffer = [];
        this.buffers.push(buffer);
        const r = fn();
        this.buffers.pop();
        buffer.forEach(flush => flush());
        return r;
    }
}
/**
 * A Relay is an event forwarder which functions as a replugabble event pipe.
 * Once created, you can connect an input event to it and it will simply forward
 * events from that input event through its own `event` property. The `input`
 * can be changed at any point in time.
 */
class Relay {
    constructor() {
        this.listening = false;
        this.inputEvent = Event.None;
        this.inputEventListener = _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable.None;
        this.emitter = new Emitter({
            onDidAddFirstListener: () => {
                this.listening = true;
                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);
            },
            onDidRemoveLastListener: () => {
                this.listening = false;
                this.inputEventListener.dispose();
            }
        });
        this.event = this.emitter.event;
    }
    set input(event) {
        this.inputEvent = event;
        if (this.listening) {
            this.inputEventListener.dispose();
            this.inputEventListener = event(this.emitter.fire, this.emitter);
        }
    }
    dispose() {
        this.inputEventListener.dispose();
        this.emitter.dispose();
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/functional.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/functional.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createSingleCallFunction: () => (/* binding */ createSingleCallFunction)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * Given a function, returns a function that is only calling that function once.
 */
function createSingleCallFunction(fn) {
    const _this = this;
    let didCall = false;
    let result;
    return function () {
        if (didCall) {
            return result;
        }
        didCall = true;
        result = fn.apply(_this, arguments);
        return result;
    };
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/hash.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/hash.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StringSHA1: () => (/* binding */ StringSHA1),
/* harmony export */   doHash: () => (/* binding */ doHash),
/* harmony export */   hash: () => (/* binding */ hash),
/* harmony export */   numberHash: () => (/* binding */ numberHash),
/* harmony export */   stringHash: () => (/* binding */ stringHash),
/* harmony export */   toHexString: () => (/* binding */ toHexString)
/* harmony export */ });
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings.js */ "./node_modules/monaco-editor/esm/vs/base/common/strings.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Return a hash value for an object.
 */
function hash(obj) {
    return doHash(obj, 0);
}
function doHash(obj, hashVal) {
    switch (typeof obj) {
        case 'object':
            if (obj === null) {
                return numberHash(349, hashVal);
            }
            else if (Array.isArray(obj)) {
                return arrayHash(obj, hashVal);
            }
            return objectHash(obj, hashVal);
        case 'string':
            return stringHash(obj, hashVal);
        case 'boolean':
            return booleanHash(obj, hashVal);
        case 'number':
            return numberHash(obj, hashVal);
        case 'undefined':
            return numberHash(937, hashVal);
        default:
            return numberHash(617, hashVal);
    }
}
function numberHash(val, initialHashVal) {
    return (((initialHashVal << 5) - initialHashVal) + val) | 0; // hashVal * 31 + ch, keep as int32
}
function booleanHash(b, initialHashVal) {
    return numberHash(b ? 433 : 863, initialHashVal);
}
function stringHash(s, hashVal) {
    hashVal = numberHash(149417, hashVal);
    for (let i = 0, length = s.length; i < length; i++) {
        hashVal = numberHash(s.charCodeAt(i), hashVal);
    }
    return hashVal;
}
function arrayHash(arr, initialHashVal) {
    initialHashVal = numberHash(104579, initialHashVal);
    return arr.reduce((hashVal, item) => doHash(item, hashVal), initialHashVal);
}
function objectHash(obj, initialHashVal) {
    initialHashVal = numberHash(181387, initialHashVal);
    return Object.keys(obj).sort().reduce((hashVal, key) => {
        hashVal = stringHash(key, hashVal);
        return doHash(obj[key], hashVal);
    }, initialHashVal);
}
function leftRotate(value, bits, totalBits = 32) {
    // delta + bits = totalBits
    const delta = totalBits - bits;
    // All ones, expect `delta` zeros aligned to the right
    const mask = ~((1 << delta) - 1);
    // Join (value left-shifted `bits` bits) with (masked value right-shifted `delta` bits)
    return ((value << bits) | ((mask & value) >>> delta)) >>> 0;
}
function fill(dest, index = 0, count = dest.byteLength, value = 0) {
    for (let i = 0; i < count; i++) {
        dest[index + i] = value;
    }
}
function leftPad(value, length, char = '0') {
    while (value.length < length) {
        value = char + value;
    }
    return value;
}
function toHexString(bufferOrValue, bitsize = 32) {
    if (bufferOrValue instanceof ArrayBuffer) {
        return Array.from(new Uint8Array(bufferOrValue)).map(b => b.toString(16).padStart(2, '0')).join('');
    }
    return leftPad((bufferOrValue >>> 0).toString(16), bitsize / 4);
}
/**
 * A SHA1 implementation that works with strings and does not allocate.
 */
class StringSHA1 {
    constructor() {
        this._h0 = 0x67452301;
        this._h1 = 0xEFCDAB89;
        this._h2 = 0x98BADCFE;
        this._h3 = 0x10325476;
        this._h4 = 0xC3D2E1F0;
        this._buff = new Uint8Array(64 /* SHA1Constant.BLOCK_SIZE */ + 3 /* to fit any utf-8 */);
        this._buffDV = new DataView(this._buff.buffer);
        this._buffLen = 0;
        this._totalLen = 0;
        this._leftoverHighSurrogate = 0;
        this._finished = false;
    }
    update(str) {
        const strLen = str.length;
        if (strLen === 0) {
            return;
        }
        const buff = this._buff;
        let buffLen = this._buffLen;
        let leftoverHighSurrogate = this._leftoverHighSurrogate;
        let charCode;
        let offset;
        if (leftoverHighSurrogate !== 0) {
            charCode = leftoverHighSurrogate;
            offset = -1;
            leftoverHighSurrogate = 0;
        }
        else {
            charCode = str.charCodeAt(0);
            offset = 0;
        }
        while (true) {
            let codePoint = charCode;
            if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isHighSurrogate(charCode)) {
                if (offset + 1 < strLen) {
                    const nextCharCode = str.charCodeAt(offset + 1);
                    if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(nextCharCode)) {
                        offset++;
                        codePoint = _strings_js__WEBPACK_IMPORTED_MODULE_0__.computeCodePoint(charCode, nextCharCode);
                    }
                    else {
                        // illegal => unicode replacement character
                        codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;
                    }
                }
                else {
                    // last character is a surrogate pair
                    leftoverHighSurrogate = charCode;
                    break;
                }
            }
            else if (_strings_js__WEBPACK_IMPORTED_MODULE_0__.isLowSurrogate(charCode)) {
                // illegal => unicode replacement character
                codePoint = 65533 /* SHA1Constant.UNICODE_REPLACEMENT */;
            }
            buffLen = this._push(buff, buffLen, codePoint);
            offset++;
            if (offset < strLen) {
                charCode = str.charCodeAt(offset);
            }
            else {
                break;
            }
        }
        this._buffLen = buffLen;
        this._leftoverHighSurrogate = leftoverHighSurrogate;
    }
    _push(buff, buffLen, codePoint) {
        if (codePoint < 0x0080) {
            buff[buffLen++] = codePoint;
        }
        else if (codePoint < 0x0800) {
            buff[buffLen++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);
            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);
        }
        else if (codePoint < 0x10000) {
            buff[buffLen++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);
            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);
            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);
        }
        else {
            buff[buffLen++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);
            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);
            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);
            buff[buffLen++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);
        }
        if (buffLen >= 64 /* SHA1Constant.BLOCK_SIZE */) {
            this._step();
            buffLen -= 64 /* SHA1Constant.BLOCK_SIZE */;
            this._totalLen += 64 /* SHA1Constant.BLOCK_SIZE */;
            // take last 3 in case of UTF8 overflow
            buff[0] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 0];
            buff[1] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 1];
            buff[2] = buff[64 /* SHA1Constant.BLOCK_SIZE */ + 2];
        }
        return buffLen;
    }
    digest() {
        if (!this._finished) {
            this._finished = true;
            if (this._leftoverHighSurrogate) {
                // illegal => unicode replacement character
                this._leftoverHighSurrogate = 0;
                this._buffLen = this._push(this._buff, this._buffLen, 65533 /* SHA1Constant.UNICODE_REPLACEMENT */);
            }
            this._totalLen += this._buffLen;
            this._wrapUp();
        }
        return toHexString(this._h0) + toHexString(this._h1) + toHexString(this._h2) + toHexString(this._h3) + toHexString(this._h4);
    }
    _wrapUp() {
        this._buff[this._buffLen++] = 0x80;
        fill(this._buff, this._buffLen);
        if (this._buffLen > 56) {
            this._step();
            fill(this._buff);
        }
        // this will fit because the mantissa can cover up to 52 bits
        const ml = 8 * this._totalLen;
        this._buffDV.setUint32(56, Math.floor(ml / 4294967296), false);
        this._buffDV.setUint32(60, ml % 4294967296, false);
        this._step();
    }
    _step() {
        const bigBlock32 = StringSHA1._bigBlock32;
        const data = this._buffDV;
        for (let j = 0; j < 64 /* 16*4 */; j += 4) {
            bigBlock32.setUint32(j, data.getUint32(j, false), false);
        }
        for (let j = 64; j < 320 /* 80*4 */; j += 4) {
            bigBlock32.setUint32(j, leftRotate((bigBlock32.getUint32(j - 12, false) ^ bigBlock32.getUint32(j - 32, false) ^ bigBlock32.getUint32(j - 56, false) ^ bigBlock32.getUint32(j - 64, false)), 1), false);
        }
        let a = this._h0;
        let b = this._h1;
        let c = this._h2;
        let d = this._h3;
        let e = this._h4;
        let f, k;
        let temp;
        for (let j = 0; j < 80; j++) {
            if (j < 20) {
                f = (b & c) | ((~b) & d);
                k = 0x5A827999;
            }
            else if (j < 40) {
                f = b ^ c ^ d;
                k = 0x6ED9EBA1;
            }
            else if (j < 60) {
                f = (b & c) | (b & d) | (c & d);
                k = 0x8F1BBCDC;
            }
            else {
                f = b ^ c ^ d;
                k = 0xCA62C1D6;
            }
            temp = (leftRotate(a, 5) + f + e + k + bigBlock32.getUint32(j * 4, false)) & 0xffffffff;
            e = d;
            d = c;
            c = leftRotate(b, 30);
            b = a;
            a = temp;
        }
        this._h0 = (this._h0 + a) & 0xffffffff;
        this._h1 = (this._h1 + b) & 0xffffffff;
        this._h2 = (this._h2 + c) & 0xffffffff;
        this._h3 = (this._h3 + d) & 0xffffffff;
        this._h4 = (this._h4 + e) & 0xffffffff;
    }
}
StringSHA1._bigBlock32 = new DataView(new ArrayBuffer(320)); // 80 * 4 = 320


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/iterator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Iterable: () => (/* binding */ Iterable)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var Iterable;
(function (Iterable) {
    function is(thing) {
        return thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';
    }
    Iterable.is = is;
    const _empty = Object.freeze([]);
    function empty() {
        return _empty;
    }
    Iterable.empty = empty;
    function* single(element) {
        yield element;
    }
    Iterable.single = single;
    function wrap(iterableOrElement) {
        if (is(iterableOrElement)) {
            return iterableOrElement;
        }
        else {
            return single(iterableOrElement);
        }
    }
    Iterable.wrap = wrap;
    function from(iterable) {
        return iterable || _empty;
    }
    Iterable.from = from;
    function* reverse(array) {
        for (let i = array.length - 1; i >= 0; i--) {
            yield array[i];
        }
    }
    Iterable.reverse = reverse;
    function isEmpty(iterable) {
        return !iterable || iterable[Symbol.iterator]().next().done === true;
    }
    Iterable.isEmpty = isEmpty;
    function first(iterable) {
        return iterable[Symbol.iterator]().next().value;
    }
    Iterable.first = first;
    function some(iterable, predicate) {
        for (const element of iterable) {
            if (predicate(element)) {
                return true;
            }
        }
        return false;
    }
    Iterable.some = some;
    function find(iterable, predicate) {
        for (const element of iterable) {
            if (predicate(element)) {
                return element;
            }
        }
        return undefined;
    }
    Iterable.find = find;
    function* filter(iterable, predicate) {
        for (const element of iterable) {
            if (predicate(element)) {
                yield element;
            }
        }
    }
    Iterable.filter = filter;
    function* map(iterable, fn) {
        let index = 0;
        for (const element of iterable) {
            yield fn(element, index++);
        }
    }
    Iterable.map = map;
    function* concat(...iterables) {
        for (const iterable of iterables) {
            for (const element of iterable) {
                yield element;
            }
        }
    }
    Iterable.concat = concat;
    function reduce(iterable, reducer, initialValue) {
        let value = initialValue;
        for (const element of iterable) {
            value = reducer(value, element);
        }
        return value;
    }
    Iterable.reduce = reduce;
    /**
     * Returns an iterable slice of the array, with the same semantics as `array.slice()`.
     */
    function* slice(arr, from, to = arr.length) {
        if (from < 0) {
            from += arr.length;
        }
        if (to < 0) {
            to += arr.length;
        }
        else if (to > arr.length) {
            to = arr.length;
        }
        for (; from < to; from++) {
            yield arr[from];
        }
    }
    Iterable.slice = slice;
    /**
     * Consumes `atMost` elements from iterable and returns the consumed elements,
     * and an iterable for the rest of the elements.
     */
    function consume(iterable, atMost = Number.POSITIVE_INFINITY) {
        const consumed = [];
        if (atMost === 0) {
            return [consumed, iterable];
        }
        const iterator = iterable[Symbol.iterator]();
        for (let i = 0; i < atMost; i++) {
            const next = iterator.next();
            if (next.done) {
                return [consumed, Iterable.empty()];
            }
            consumed.push(next.value);
        }
        return [consumed, { [Symbol.iterator]() { return iterator; } }];
    }
    Iterable.consume = consume;
})(Iterable || (Iterable = {}));


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EVENT_KEY_CODE_MAP: () => (/* binding */ EVENT_KEY_CODE_MAP),
/* harmony export */   IMMUTABLE_CODE_TO_KEY_CODE: () => (/* binding */ IMMUTABLE_CODE_TO_KEY_CODE),
/* harmony export */   IMMUTABLE_KEY_CODE_TO_CODE: () => (/* binding */ IMMUTABLE_KEY_CODE_TO_CODE),
/* harmony export */   KeyChord: () => (/* binding */ KeyChord),
/* harmony export */   KeyCodeUtils: () => (/* binding */ KeyCodeUtils),
/* harmony export */   NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE: () => (/* binding */ NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class KeyCodeStrMap {
    constructor() {
        this._keyCodeToStr = [];
        this._strToKeyCode = Object.create(null);
    }
    define(keyCode, str) {
        this._keyCodeToStr[keyCode] = str;
        this._strToKeyCode[str.toLowerCase()] = keyCode;
    }
    keyCodeToStr(keyCode) {
        return this._keyCodeToStr[keyCode];
    }
    strToKeyCode(str) {
        return this._strToKeyCode[str.toLowerCase()] || 0 /* KeyCode.Unknown */;
    }
}
const uiMap = new KeyCodeStrMap();
const userSettingsUSMap = new KeyCodeStrMap();
const userSettingsGeneralMap = new KeyCodeStrMap();
const EVENT_KEY_CODE_MAP = new Array(230);
const NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE = {};
const scanCodeIntToStr = [];
const scanCodeStrToInt = Object.create(null);
const scanCodeLowerCaseStrToInt = Object.create(null);
/**
 * -1 if a ScanCode => KeyCode mapping depends on kb layout.
 */
const IMMUTABLE_CODE_TO_KEY_CODE = [];
/**
 * -1 if a KeyCode => ScanCode mapping depends on kb layout.
 */
const IMMUTABLE_KEY_CODE_TO_CODE = [];
for (let i = 0; i <= 193 /* ScanCode.MAX_VALUE */; i++) {
    IMMUTABLE_CODE_TO_KEY_CODE[i] = -1 /* KeyCode.DependsOnKbLayout */;
}
for (let i = 0; i <= 132 /* KeyCode.MAX_VALUE */; i++) {
    IMMUTABLE_KEY_CODE_TO_CODE[i] = -1 /* ScanCode.DependsOnKbLayout */;
}
(function () {
    // See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
    // See https://github.com/microsoft/node-native-keymap/blob/88c0b0e5/deps/chromium/keyboard_codes_win.h
    const empty = '';
    const mappings = [
        // immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel
        [1, 0 /* ScanCode.None */, 'None', 0 /* KeyCode.Unknown */, 'unknown', 0, 'VK_UNKNOWN', empty, empty],
        [1, 1 /* ScanCode.Hyper */, 'Hyper', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 2 /* ScanCode.Super */, 'Super', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 3 /* ScanCode.Fn */, 'Fn', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 4 /* ScanCode.FnLock */, 'FnLock', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 5 /* ScanCode.Suspend */, 'Suspend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 6 /* ScanCode.Resume */, 'Resume', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 7 /* ScanCode.Turbo */, 'Turbo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 8 /* ScanCode.Sleep */, 'Sleep', 0 /* KeyCode.Unknown */, empty, 0, 'VK_SLEEP', empty, empty],
        [1, 9 /* ScanCode.WakeUp */, 'WakeUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [0, 10 /* ScanCode.KeyA */, 'KeyA', 31 /* KeyCode.KeyA */, 'A', 65, 'VK_A', empty, empty],
        [0, 11 /* ScanCode.KeyB */, 'KeyB', 32 /* KeyCode.KeyB */, 'B', 66, 'VK_B', empty, empty],
        [0, 12 /* ScanCode.KeyC */, 'KeyC', 33 /* KeyCode.KeyC */, 'C', 67, 'VK_C', empty, empty],
        [0, 13 /* ScanCode.KeyD */, 'KeyD', 34 /* KeyCode.KeyD */, 'D', 68, 'VK_D', empty, empty],
        [0, 14 /* ScanCode.KeyE */, 'KeyE', 35 /* KeyCode.KeyE */, 'E', 69, 'VK_E', empty, empty],
        [0, 15 /* ScanCode.KeyF */, 'KeyF', 36 /* KeyCode.KeyF */, 'F', 70, 'VK_F', empty, empty],
        [0, 16 /* ScanCode.KeyG */, 'KeyG', 37 /* KeyCode.KeyG */, 'G', 71, 'VK_G', empty, empty],
        [0, 17 /* ScanCode.KeyH */, 'KeyH', 38 /* KeyCode.KeyH */, 'H', 72, 'VK_H', empty, empty],
        [0, 18 /* ScanCode.KeyI */, 'KeyI', 39 /* KeyCode.KeyI */, 'I', 73, 'VK_I', empty, empty],
        [0, 19 /* ScanCode.KeyJ */, 'KeyJ', 40 /* KeyCode.KeyJ */, 'J', 74, 'VK_J', empty, empty],
        [0, 20 /* ScanCode.KeyK */, 'KeyK', 41 /* KeyCode.KeyK */, 'K', 75, 'VK_K', empty, empty],
        [0, 21 /* ScanCode.KeyL */, 'KeyL', 42 /* KeyCode.KeyL */, 'L', 76, 'VK_L', empty, empty],
        [0, 22 /* ScanCode.KeyM */, 'KeyM', 43 /* KeyCode.KeyM */, 'M', 77, 'VK_M', empty, empty],
        [0, 23 /* ScanCode.KeyN */, 'KeyN', 44 /* KeyCode.KeyN */, 'N', 78, 'VK_N', empty, empty],
        [0, 24 /* ScanCode.KeyO */, 'KeyO', 45 /* KeyCode.KeyO */, 'O', 79, 'VK_O', empty, empty],
        [0, 25 /* ScanCode.KeyP */, 'KeyP', 46 /* KeyCode.KeyP */, 'P', 80, 'VK_P', empty, empty],
        [0, 26 /* ScanCode.KeyQ */, 'KeyQ', 47 /* KeyCode.KeyQ */, 'Q', 81, 'VK_Q', empty, empty],
        [0, 27 /* ScanCode.KeyR */, 'KeyR', 48 /* KeyCode.KeyR */, 'R', 82, 'VK_R', empty, empty],
        [0, 28 /* ScanCode.KeyS */, 'KeyS', 49 /* KeyCode.KeyS */, 'S', 83, 'VK_S', empty, empty],
        [0, 29 /* ScanCode.KeyT */, 'KeyT', 50 /* KeyCode.KeyT */, 'T', 84, 'VK_T', empty, empty],
        [0, 30 /* ScanCode.KeyU */, 'KeyU', 51 /* KeyCode.KeyU */, 'U', 85, 'VK_U', empty, empty],
        [0, 31 /* ScanCode.KeyV */, 'KeyV', 52 /* KeyCode.KeyV */, 'V', 86, 'VK_V', empty, empty],
        [0, 32 /* ScanCode.KeyW */, 'KeyW', 53 /* KeyCode.KeyW */, 'W', 87, 'VK_W', empty, empty],
        [0, 33 /* ScanCode.KeyX */, 'KeyX', 54 /* KeyCode.KeyX */, 'X', 88, 'VK_X', empty, empty],
        [0, 34 /* ScanCode.KeyY */, 'KeyY', 55 /* KeyCode.KeyY */, 'Y', 89, 'VK_Y', empty, empty],
        [0, 35 /* ScanCode.KeyZ */, 'KeyZ', 56 /* KeyCode.KeyZ */, 'Z', 90, 'VK_Z', empty, empty],
        [0, 36 /* ScanCode.Digit1 */, 'Digit1', 22 /* KeyCode.Digit1 */, '1', 49, 'VK_1', empty, empty],
        [0, 37 /* ScanCode.Digit2 */, 'Digit2', 23 /* KeyCode.Digit2 */, '2', 50, 'VK_2', empty, empty],
        [0, 38 /* ScanCode.Digit3 */, 'Digit3', 24 /* KeyCode.Digit3 */, '3', 51, 'VK_3', empty, empty],
        [0, 39 /* ScanCode.Digit4 */, 'Digit4', 25 /* KeyCode.Digit4 */, '4', 52, 'VK_4', empty, empty],
        [0, 40 /* ScanCode.Digit5 */, 'Digit5', 26 /* KeyCode.Digit5 */, '5', 53, 'VK_5', empty, empty],
        [0, 41 /* ScanCode.Digit6 */, 'Digit6', 27 /* KeyCode.Digit6 */, '6', 54, 'VK_6', empty, empty],
        [0, 42 /* ScanCode.Digit7 */, 'Digit7', 28 /* KeyCode.Digit7 */, '7', 55, 'VK_7', empty, empty],
        [0, 43 /* ScanCode.Digit8 */, 'Digit8', 29 /* KeyCode.Digit8 */, '8', 56, 'VK_8', empty, empty],
        [0, 44 /* ScanCode.Digit9 */, 'Digit9', 30 /* KeyCode.Digit9 */, '9', 57, 'VK_9', empty, empty],
        [0, 45 /* ScanCode.Digit0 */, 'Digit0', 21 /* KeyCode.Digit0 */, '0', 48, 'VK_0', empty, empty],
        [1, 46 /* ScanCode.Enter */, 'Enter', 3 /* KeyCode.Enter */, 'Enter', 13, 'VK_RETURN', empty, empty],
        [1, 47 /* ScanCode.Escape */, 'Escape', 9 /* KeyCode.Escape */, 'Escape', 27, 'VK_ESCAPE', empty, empty],
        [1, 48 /* ScanCode.Backspace */, 'Backspace', 1 /* KeyCode.Backspace */, 'Backspace', 8, 'VK_BACK', empty, empty],
        [1, 49 /* ScanCode.Tab */, 'Tab', 2 /* KeyCode.Tab */, 'Tab', 9, 'VK_TAB', empty, empty],
        [1, 50 /* ScanCode.Space */, 'Space', 10 /* KeyCode.Space */, 'Space', 32, 'VK_SPACE', empty, empty],
        [0, 51 /* ScanCode.Minus */, 'Minus', 88 /* KeyCode.Minus */, '-', 189, 'VK_OEM_MINUS', '-', 'OEM_MINUS'],
        [0, 52 /* ScanCode.Equal */, 'Equal', 86 /* KeyCode.Equal */, '=', 187, 'VK_OEM_PLUS', '=', 'OEM_PLUS'],
        [0, 53 /* ScanCode.BracketLeft */, 'BracketLeft', 92 /* KeyCode.BracketLeft */, '[', 219, 'VK_OEM_4', '[', 'OEM_4'],
        [0, 54 /* ScanCode.BracketRight */, 'BracketRight', 94 /* KeyCode.BracketRight */, ']', 221, 'VK_OEM_6', ']', 'OEM_6'],
        [0, 55 /* ScanCode.Backslash */, 'Backslash', 93 /* KeyCode.Backslash */, '\\', 220, 'VK_OEM_5', '\\', 'OEM_5'],
        [0, 56 /* ScanCode.IntlHash */, 'IntlHash', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty], // has been dropped from the w3c spec
        [0, 57 /* ScanCode.Semicolon */, 'Semicolon', 85 /* KeyCode.Semicolon */, ';', 186, 'VK_OEM_1', ';', 'OEM_1'],
        [0, 58 /* ScanCode.Quote */, 'Quote', 95 /* KeyCode.Quote */, '\'', 222, 'VK_OEM_7', '\'', 'OEM_7'],
        [0, 59 /* ScanCode.Backquote */, 'Backquote', 91 /* KeyCode.Backquote */, '`', 192, 'VK_OEM_3', '`', 'OEM_3'],
        [0, 60 /* ScanCode.Comma */, 'Comma', 87 /* KeyCode.Comma */, ',', 188, 'VK_OEM_COMMA', ',', 'OEM_COMMA'],
        [0, 61 /* ScanCode.Period */, 'Period', 89 /* KeyCode.Period */, '.', 190, 'VK_OEM_PERIOD', '.', 'OEM_PERIOD'],
        [0, 62 /* ScanCode.Slash */, 'Slash', 90 /* KeyCode.Slash */, '/', 191, 'VK_OEM_2', '/', 'OEM_2'],
        [1, 63 /* ScanCode.CapsLock */, 'CapsLock', 8 /* KeyCode.CapsLock */, 'CapsLock', 20, 'VK_CAPITAL', empty, empty],
        [1, 64 /* ScanCode.F1 */, 'F1', 59 /* KeyCode.F1 */, 'F1', 112, 'VK_F1', empty, empty],
        [1, 65 /* ScanCode.F2 */, 'F2', 60 /* KeyCode.F2 */, 'F2', 113, 'VK_F2', empty, empty],
        [1, 66 /* ScanCode.F3 */, 'F3', 61 /* KeyCode.F3 */, 'F3', 114, 'VK_F3', empty, empty],
        [1, 67 /* ScanCode.F4 */, 'F4', 62 /* KeyCode.F4 */, 'F4', 115, 'VK_F4', empty, empty],
        [1, 68 /* ScanCode.F5 */, 'F5', 63 /* KeyCode.F5 */, 'F5', 116, 'VK_F5', empty, empty],
        [1, 69 /* ScanCode.F6 */, 'F6', 64 /* KeyCode.F6 */, 'F6', 117, 'VK_F6', empty, empty],
        [1, 70 /* ScanCode.F7 */, 'F7', 65 /* KeyCode.F7 */, 'F7', 118, 'VK_F7', empty, empty],
        [1, 71 /* ScanCode.F8 */, 'F8', 66 /* KeyCode.F8 */, 'F8', 119, 'VK_F8', empty, empty],
        [1, 72 /* ScanCode.F9 */, 'F9', 67 /* KeyCode.F9 */, 'F9', 120, 'VK_F9', empty, empty],
        [1, 73 /* ScanCode.F10 */, 'F10', 68 /* KeyCode.F10 */, 'F10', 121, 'VK_F10', empty, empty],
        [1, 74 /* ScanCode.F11 */, 'F11', 69 /* KeyCode.F11 */, 'F11', 122, 'VK_F11', empty, empty],
        [1, 75 /* ScanCode.F12 */, 'F12', 70 /* KeyCode.F12 */, 'F12', 123, 'VK_F12', empty, empty],
        [1, 76 /* ScanCode.PrintScreen */, 'PrintScreen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 77 /* ScanCode.ScrollLock */, 'ScrollLock', 84 /* KeyCode.ScrollLock */, 'ScrollLock', 145, 'VK_SCROLL', empty, empty],
        [1, 78 /* ScanCode.Pause */, 'Pause', 7 /* KeyCode.PauseBreak */, 'PauseBreak', 19, 'VK_PAUSE', empty, empty],
        [1, 79 /* ScanCode.Insert */, 'Insert', 19 /* KeyCode.Insert */, 'Insert', 45, 'VK_INSERT', empty, empty],
        [1, 80 /* ScanCode.Home */, 'Home', 14 /* KeyCode.Home */, 'Home', 36, 'VK_HOME', empty, empty],
        [1, 81 /* ScanCode.PageUp */, 'PageUp', 11 /* KeyCode.PageUp */, 'PageUp', 33, 'VK_PRIOR', empty, empty],
        [1, 82 /* ScanCode.Delete */, 'Delete', 20 /* KeyCode.Delete */, 'Delete', 46, 'VK_DELETE', empty, empty],
        [1, 83 /* ScanCode.End */, 'End', 13 /* KeyCode.End */, 'End', 35, 'VK_END', empty, empty],
        [1, 84 /* ScanCode.PageDown */, 'PageDown', 12 /* KeyCode.PageDown */, 'PageDown', 34, 'VK_NEXT', empty, empty],
        [1, 85 /* ScanCode.ArrowRight */, 'ArrowRight', 17 /* KeyCode.RightArrow */, 'RightArrow', 39, 'VK_RIGHT', 'Right', empty],
        [1, 86 /* ScanCode.ArrowLeft */, 'ArrowLeft', 15 /* KeyCode.LeftArrow */, 'LeftArrow', 37, 'VK_LEFT', 'Left', empty],
        [1, 87 /* ScanCode.ArrowDown */, 'ArrowDown', 18 /* KeyCode.DownArrow */, 'DownArrow', 40, 'VK_DOWN', 'Down', empty],
        [1, 88 /* ScanCode.ArrowUp */, 'ArrowUp', 16 /* KeyCode.UpArrow */, 'UpArrow', 38, 'VK_UP', 'Up', empty],
        [1, 89 /* ScanCode.NumLock */, 'NumLock', 83 /* KeyCode.NumLock */, 'NumLock', 144, 'VK_NUMLOCK', empty, empty],
        [1, 90 /* ScanCode.NumpadDivide */, 'NumpadDivide', 113 /* KeyCode.NumpadDivide */, 'NumPad_Divide', 111, 'VK_DIVIDE', empty, empty],
        [1, 91 /* ScanCode.NumpadMultiply */, 'NumpadMultiply', 108 /* KeyCode.NumpadMultiply */, 'NumPad_Multiply', 106, 'VK_MULTIPLY', empty, empty],
        [1, 92 /* ScanCode.NumpadSubtract */, 'NumpadSubtract', 111 /* KeyCode.NumpadSubtract */, 'NumPad_Subtract', 109, 'VK_SUBTRACT', empty, empty],
        [1, 93 /* ScanCode.NumpadAdd */, 'NumpadAdd', 109 /* KeyCode.NumpadAdd */, 'NumPad_Add', 107, 'VK_ADD', empty, empty],
        [1, 94 /* ScanCode.NumpadEnter */, 'NumpadEnter', 3 /* KeyCode.Enter */, empty, 0, empty, empty, empty],
        [1, 95 /* ScanCode.Numpad1 */, 'Numpad1', 99 /* KeyCode.Numpad1 */, 'NumPad1', 97, 'VK_NUMPAD1', empty, empty],
        [1, 96 /* ScanCode.Numpad2 */, 'Numpad2', 100 /* KeyCode.Numpad2 */, 'NumPad2', 98, 'VK_NUMPAD2', empty, empty],
        [1, 97 /* ScanCode.Numpad3 */, 'Numpad3', 101 /* KeyCode.Numpad3 */, 'NumPad3', 99, 'VK_NUMPAD3', empty, empty],
        [1, 98 /* ScanCode.Numpad4 */, 'Numpad4', 102 /* KeyCode.Numpad4 */, 'NumPad4', 100, 'VK_NUMPAD4', empty, empty],
        [1, 99 /* ScanCode.Numpad5 */, 'Numpad5', 103 /* KeyCode.Numpad5 */, 'NumPad5', 101, 'VK_NUMPAD5', empty, empty],
        [1, 100 /* ScanCode.Numpad6 */, 'Numpad6', 104 /* KeyCode.Numpad6 */, 'NumPad6', 102, 'VK_NUMPAD6', empty, empty],
        [1, 101 /* ScanCode.Numpad7 */, 'Numpad7', 105 /* KeyCode.Numpad7 */, 'NumPad7', 103, 'VK_NUMPAD7', empty, empty],
        [1, 102 /* ScanCode.Numpad8 */, 'Numpad8', 106 /* KeyCode.Numpad8 */, 'NumPad8', 104, 'VK_NUMPAD8', empty, empty],
        [1, 103 /* ScanCode.Numpad9 */, 'Numpad9', 107 /* KeyCode.Numpad9 */, 'NumPad9', 105, 'VK_NUMPAD9', empty, empty],
        [1, 104 /* ScanCode.Numpad0 */, 'Numpad0', 98 /* KeyCode.Numpad0 */, 'NumPad0', 96, 'VK_NUMPAD0', empty, empty],
        [1, 105 /* ScanCode.NumpadDecimal */, 'NumpadDecimal', 112 /* KeyCode.NumpadDecimal */, 'NumPad_Decimal', 110, 'VK_DECIMAL', empty, empty],
        [0, 106 /* ScanCode.IntlBackslash */, 'IntlBackslash', 97 /* KeyCode.IntlBackslash */, 'OEM_102', 226, 'VK_OEM_102', empty, empty],
        [1, 107 /* ScanCode.ContextMenu */, 'ContextMenu', 58 /* KeyCode.ContextMenu */, 'ContextMenu', 93, empty, empty, empty],
        [1, 108 /* ScanCode.Power */, 'Power', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 109 /* ScanCode.NumpadEqual */, 'NumpadEqual', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 110 /* ScanCode.F13 */, 'F13', 71 /* KeyCode.F13 */, 'F13', 124, 'VK_F13', empty, empty],
        [1, 111 /* ScanCode.F14 */, 'F14', 72 /* KeyCode.F14 */, 'F14', 125, 'VK_F14', empty, empty],
        [1, 112 /* ScanCode.F15 */, 'F15', 73 /* KeyCode.F15 */, 'F15', 126, 'VK_F15', empty, empty],
        [1, 113 /* ScanCode.F16 */, 'F16', 74 /* KeyCode.F16 */, 'F16', 127, 'VK_F16', empty, empty],
        [1, 114 /* ScanCode.F17 */, 'F17', 75 /* KeyCode.F17 */, 'F17', 128, 'VK_F17', empty, empty],
        [1, 115 /* ScanCode.F18 */, 'F18', 76 /* KeyCode.F18 */, 'F18', 129, 'VK_F18', empty, empty],
        [1, 116 /* ScanCode.F19 */, 'F19', 77 /* KeyCode.F19 */, 'F19', 130, 'VK_F19', empty, empty],
        [1, 117 /* ScanCode.F20 */, 'F20', 78 /* KeyCode.F20 */, 'F20', 131, 'VK_F20', empty, empty],
        [1, 118 /* ScanCode.F21 */, 'F21', 79 /* KeyCode.F21 */, 'F21', 132, 'VK_F21', empty, empty],
        [1, 119 /* ScanCode.F22 */, 'F22', 80 /* KeyCode.F22 */, 'F22', 133, 'VK_F22', empty, empty],
        [1, 120 /* ScanCode.F23 */, 'F23', 81 /* KeyCode.F23 */, 'F23', 134, 'VK_F23', empty, empty],
        [1, 121 /* ScanCode.F24 */, 'F24', 82 /* KeyCode.F24 */, 'F24', 135, 'VK_F24', empty, empty],
        [1, 122 /* ScanCode.Open */, 'Open', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 123 /* ScanCode.Help */, 'Help', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 124 /* ScanCode.Select */, 'Select', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 125 /* ScanCode.Again */, 'Again', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 126 /* ScanCode.Undo */, 'Undo', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 127 /* ScanCode.Cut */, 'Cut', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 128 /* ScanCode.Copy */, 'Copy', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 129 /* ScanCode.Paste */, 'Paste', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 130 /* ScanCode.Find */, 'Find', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 131 /* ScanCode.AudioVolumeMute */, 'AudioVolumeMute', 117 /* KeyCode.AudioVolumeMute */, 'AudioVolumeMute', 173, 'VK_VOLUME_MUTE', empty, empty],
        [1, 132 /* ScanCode.AudioVolumeUp */, 'AudioVolumeUp', 118 /* KeyCode.AudioVolumeUp */, 'AudioVolumeUp', 175, 'VK_VOLUME_UP', empty, empty],
        [1, 133 /* ScanCode.AudioVolumeDown */, 'AudioVolumeDown', 119 /* KeyCode.AudioVolumeDown */, 'AudioVolumeDown', 174, 'VK_VOLUME_DOWN', empty, empty],
        [1, 134 /* ScanCode.NumpadComma */, 'NumpadComma', 110 /* KeyCode.NUMPAD_SEPARATOR */, 'NumPad_Separator', 108, 'VK_SEPARATOR', empty, empty],
        [0, 135 /* ScanCode.IntlRo */, 'IntlRo', 115 /* KeyCode.ABNT_C1 */, 'ABNT_C1', 193, 'VK_ABNT_C1', empty, empty],
        [1, 136 /* ScanCode.KanaMode */, 'KanaMode', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [0, 137 /* ScanCode.IntlYen */, 'IntlYen', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 138 /* ScanCode.Convert */, 'Convert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 139 /* ScanCode.NonConvert */, 'NonConvert', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 140 /* ScanCode.Lang1 */, 'Lang1', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 141 /* ScanCode.Lang2 */, 'Lang2', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 142 /* ScanCode.Lang3 */, 'Lang3', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 143 /* ScanCode.Lang4 */, 'Lang4', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 144 /* ScanCode.Lang5 */, 'Lang5', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 145 /* ScanCode.Abort */, 'Abort', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 146 /* ScanCode.Props */, 'Props', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 147 /* ScanCode.NumpadParenLeft */, 'NumpadParenLeft', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 148 /* ScanCode.NumpadParenRight */, 'NumpadParenRight', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 149 /* ScanCode.NumpadBackspace */, 'NumpadBackspace', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 150 /* ScanCode.NumpadMemoryStore */, 'NumpadMemoryStore', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 151 /* ScanCode.NumpadMemoryRecall */, 'NumpadMemoryRecall', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 152 /* ScanCode.NumpadMemoryClear */, 'NumpadMemoryClear', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 153 /* ScanCode.NumpadMemoryAdd */, 'NumpadMemoryAdd', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 154 /* ScanCode.NumpadMemorySubtract */, 'NumpadMemorySubtract', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 155 /* ScanCode.NumpadClear */, 'NumpadClear', 131 /* KeyCode.Clear */, 'Clear', 12, 'VK_CLEAR', empty, empty],
        [1, 156 /* ScanCode.NumpadClearEntry */, 'NumpadClearEntry', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 0 /* ScanCode.None */, empty, 5 /* KeyCode.Ctrl */, 'Ctrl', 17, 'VK_CONTROL', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 4 /* KeyCode.Shift */, 'Shift', 16, 'VK_SHIFT', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 6 /* KeyCode.Alt */, 'Alt', 18, 'VK_MENU', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 57 /* KeyCode.Meta */, 'Meta', 91, 'VK_COMMAND', empty, empty],
        [1, 157 /* ScanCode.ControlLeft */, 'ControlLeft', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_LCONTROL', empty, empty],
        [1, 158 /* ScanCode.ShiftLeft */, 'ShiftLeft', 4 /* KeyCode.Shift */, empty, 0, 'VK_LSHIFT', empty, empty],
        [1, 159 /* ScanCode.AltLeft */, 'AltLeft', 6 /* KeyCode.Alt */, empty, 0, 'VK_LMENU', empty, empty],
        [1, 160 /* ScanCode.MetaLeft */, 'MetaLeft', 57 /* KeyCode.Meta */, empty, 0, 'VK_LWIN', empty, empty],
        [1, 161 /* ScanCode.ControlRight */, 'ControlRight', 5 /* KeyCode.Ctrl */, empty, 0, 'VK_RCONTROL', empty, empty],
        [1, 162 /* ScanCode.ShiftRight */, 'ShiftRight', 4 /* KeyCode.Shift */, empty, 0, 'VK_RSHIFT', empty, empty],
        [1, 163 /* ScanCode.AltRight */, 'AltRight', 6 /* KeyCode.Alt */, empty, 0, 'VK_RMENU', empty, empty],
        [1, 164 /* ScanCode.MetaRight */, 'MetaRight', 57 /* KeyCode.Meta */, empty, 0, 'VK_RWIN', empty, empty],
        [1, 165 /* ScanCode.BrightnessUp */, 'BrightnessUp', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 166 /* ScanCode.BrightnessDown */, 'BrightnessDown', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 167 /* ScanCode.MediaPlay */, 'MediaPlay', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 168 /* ScanCode.MediaRecord */, 'MediaRecord', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 169 /* ScanCode.MediaFastForward */, 'MediaFastForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 170 /* ScanCode.MediaRewind */, 'MediaRewind', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 171 /* ScanCode.MediaTrackNext */, 'MediaTrackNext', 124 /* KeyCode.MediaTrackNext */, 'MediaTrackNext', 176, 'VK_MEDIA_NEXT_TRACK', empty, empty],
        [1, 172 /* ScanCode.MediaTrackPrevious */, 'MediaTrackPrevious', 125 /* KeyCode.MediaTrackPrevious */, 'MediaTrackPrevious', 177, 'VK_MEDIA_PREV_TRACK', empty, empty],
        [1, 173 /* ScanCode.MediaStop */, 'MediaStop', 126 /* KeyCode.MediaStop */, 'MediaStop', 178, 'VK_MEDIA_STOP', empty, empty],
        [1, 174 /* ScanCode.Eject */, 'Eject', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 175 /* ScanCode.MediaPlayPause */, 'MediaPlayPause', 127 /* KeyCode.MediaPlayPause */, 'MediaPlayPause', 179, 'VK_MEDIA_PLAY_PAUSE', empty, empty],
        [1, 176 /* ScanCode.MediaSelect */, 'MediaSelect', 128 /* KeyCode.LaunchMediaPlayer */, 'LaunchMediaPlayer', 181, 'VK_MEDIA_LAUNCH_MEDIA_SELECT', empty, empty],
        [1, 177 /* ScanCode.LaunchMail */, 'LaunchMail', 129 /* KeyCode.LaunchMail */, 'LaunchMail', 180, 'VK_MEDIA_LAUNCH_MAIL', empty, empty],
        [1, 178 /* ScanCode.LaunchApp2 */, 'LaunchApp2', 130 /* KeyCode.LaunchApp2 */, 'LaunchApp2', 183, 'VK_MEDIA_LAUNCH_APP2', empty, empty],
        [1, 179 /* ScanCode.LaunchApp1 */, 'LaunchApp1', 0 /* KeyCode.Unknown */, empty, 0, 'VK_MEDIA_LAUNCH_APP1', empty, empty],
        [1, 180 /* ScanCode.SelectTask */, 'SelectTask', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 181 /* ScanCode.LaunchScreenSaver */, 'LaunchScreenSaver', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 182 /* ScanCode.BrowserSearch */, 'BrowserSearch', 120 /* KeyCode.BrowserSearch */, 'BrowserSearch', 170, 'VK_BROWSER_SEARCH', empty, empty],
        [1, 183 /* ScanCode.BrowserHome */, 'BrowserHome', 121 /* KeyCode.BrowserHome */, 'BrowserHome', 172, 'VK_BROWSER_HOME', empty, empty],
        [1, 184 /* ScanCode.BrowserBack */, 'BrowserBack', 122 /* KeyCode.BrowserBack */, 'BrowserBack', 166, 'VK_BROWSER_BACK', empty, empty],
        [1, 185 /* ScanCode.BrowserForward */, 'BrowserForward', 123 /* KeyCode.BrowserForward */, 'BrowserForward', 167, 'VK_BROWSER_FORWARD', empty, empty],
        [1, 186 /* ScanCode.BrowserStop */, 'BrowserStop', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_STOP', empty, empty],
        [1, 187 /* ScanCode.BrowserRefresh */, 'BrowserRefresh', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_REFRESH', empty, empty],
        [1, 188 /* ScanCode.BrowserFavorites */, 'BrowserFavorites', 0 /* KeyCode.Unknown */, empty, 0, 'VK_BROWSER_FAVORITES', empty, empty],
        [1, 189 /* ScanCode.ZoomToggle */, 'ZoomToggle', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 190 /* ScanCode.MailReply */, 'MailReply', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 191 /* ScanCode.MailForward */, 'MailForward', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        [1, 192 /* ScanCode.MailSend */, 'MailSend', 0 /* KeyCode.Unknown */, empty, 0, empty, empty, empty],
        // See https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
        // If an Input Method Editor is processing key input and the event is keydown, return 229.
        [1, 0 /* ScanCode.None */, empty, 114 /* KeyCode.KEY_IN_COMPOSITION */, 'KeyInComposition', 229, empty, empty, empty],
        [1, 0 /* ScanCode.None */, empty, 116 /* KeyCode.ABNT_C2 */, 'ABNT_C2', 194, 'VK_ABNT_C2', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 96 /* KeyCode.OEM_8 */, 'OEM_8', 223, 'VK_OEM_8', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANA', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANGUL', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_JUNJA', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_FINAL', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HANJA', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_KANJI', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CONVERT', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONCONVERT', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ACCEPT', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_MODECHANGE', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SELECT', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PRINT', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXECUTE', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_SNAPSHOT', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_HELP', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_APPS', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PROCESSKEY', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PACKET', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_SBCSCHAR', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_DBE_DBCSCHAR', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ATTN', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_CRSEL', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EXSEL', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_EREOF', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PLAY', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_ZOOM', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_NONAME', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_PA1', empty, empty],
        [1, 0 /* ScanCode.None */, empty, 0 /* KeyCode.Unknown */, empty, 0, 'VK_OEM_CLEAR', empty, empty],
    ];
    const seenKeyCode = [];
    const seenScanCode = [];
    for (const mapping of mappings) {
        const [immutable, scanCode, scanCodeStr, keyCode, keyCodeStr, eventKeyCode, vkey, usUserSettingsLabel, generalUserSettingsLabel] = mapping;
        if (!seenScanCode[scanCode]) {
            seenScanCode[scanCode] = true;
            scanCodeIntToStr[scanCode] = scanCodeStr;
            scanCodeStrToInt[scanCodeStr] = scanCode;
            scanCodeLowerCaseStrToInt[scanCodeStr.toLowerCase()] = scanCode;
            if (immutable) {
                IMMUTABLE_CODE_TO_KEY_CODE[scanCode] = keyCode;
                if ((keyCode !== 0 /* KeyCode.Unknown */)
                    && (keyCode !== 3 /* KeyCode.Enter */)
                    && (keyCode !== 5 /* KeyCode.Ctrl */)
                    && (keyCode !== 4 /* KeyCode.Shift */)
                    && (keyCode !== 6 /* KeyCode.Alt */)
                    && (keyCode !== 57 /* KeyCode.Meta */)) {
                    IMMUTABLE_KEY_CODE_TO_CODE[keyCode] = scanCode;
                }
            }
        }
        if (!seenKeyCode[keyCode]) {
            seenKeyCode[keyCode] = true;
            if (!keyCodeStr) {
                throw new Error(`String representation missing for key code ${keyCode} around scan code ${scanCodeStr}`);
            }
            uiMap.define(keyCode, keyCodeStr);
            userSettingsUSMap.define(keyCode, usUserSettingsLabel || keyCodeStr);
            userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel || usUserSettingsLabel || keyCodeStr);
        }
        if (eventKeyCode) {
            EVENT_KEY_CODE_MAP[eventKeyCode] = keyCode;
        }
        if (vkey) {
            NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[vkey] = keyCode;
        }
    }
    // Manually added due to the exclusion above (due to duplication with NumpadEnter)
    IMMUTABLE_KEY_CODE_TO_CODE[3 /* KeyCode.Enter */] = 46 /* ScanCode.Enter */;
})();
var KeyCodeUtils;
(function (KeyCodeUtils) {
    function toString(keyCode) {
        return uiMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toString = toString;
    function fromString(key) {
        return uiMap.strToKeyCode(key);
    }
    KeyCodeUtils.fromString = fromString;
    function toUserSettingsUS(keyCode) {
        return userSettingsUSMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toUserSettingsUS = toUserSettingsUS;
    function toUserSettingsGeneral(keyCode) {
        return userSettingsGeneralMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toUserSettingsGeneral = toUserSettingsGeneral;
    function fromUserSettings(key) {
        return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);
    }
    KeyCodeUtils.fromUserSettings = fromUserSettings;
    function toElectronAccelerator(keyCode) {
        if (keyCode >= 98 /* KeyCode.Numpad0 */ && keyCode <= 113 /* KeyCode.NumpadDivide */) {
            // [Electron Accelerators] Electron is able to parse numpad keys, but unfortunately it
            // renders them just as regular keys in menus. For example, num0 is rendered as "0",
            // numdiv is rendered as "/", numsub is rendered as "-".
            //
            // This can lead to incredible confusion, as it makes numpad based keybindings indistinguishable
            // from keybindings based on regular keys.
            //
            // We therefore need to fall back to custom rendering for numpad keys.
            return null;
        }
        switch (keyCode) {
            case 16 /* KeyCode.UpArrow */:
                return 'Up';
            case 18 /* KeyCode.DownArrow */:
                return 'Down';
            case 15 /* KeyCode.LeftArrow */:
                return 'Left';
            case 17 /* KeyCode.RightArrow */:
                return 'Right';
        }
        return uiMap.keyCodeToStr(keyCode);
    }
    KeyCodeUtils.toElectronAccelerator = toElectronAccelerator;
})(KeyCodeUtils || (KeyCodeUtils = {}));
function KeyChord(firstPart, secondPart) {
    const chordPart = ((secondPart & 0x0000FFFF) << 16) >>> 0;
    return (firstPart | chordPart) >>> 0;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lazy.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lazy.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Lazy: () => (/* binding */ Lazy)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class Lazy {
    constructor(executor) {
        this.executor = executor;
        this._didRun = false;
    }
    /**
     * Get the wrapped value.
     *
     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only
     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value
     */
    get value() {
        if (!this._didRun) {
            try {
                this._value = this.executor();
            }
            catch (err) {
                this._error = err;
            }
            finally {
                this._didRun = true;
            }
        }
        if (this._error) {
            throw this._error;
        }
        return this._value;
    }
    /**
     * Get the wrapped value without forcing evaluation.
     */
    get rawValue() { return this._value; }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Disposable: () => (/* binding */ Disposable),
/* harmony export */   DisposableMap: () => (/* binding */ DisposableMap),
/* harmony export */   DisposableStore: () => (/* binding */ DisposableStore),
/* harmony export */   ImmortalReference: () => (/* binding */ ImmortalReference),
/* harmony export */   MutableDisposable: () => (/* binding */ MutableDisposable),
/* harmony export */   RefCountedDisposable: () => (/* binding */ RefCountedDisposable),
/* harmony export */   combinedDisposable: () => (/* binding */ combinedDisposable),
/* harmony export */   dispose: () => (/* binding */ dispose),
/* harmony export */   isDisposable: () => (/* binding */ isDisposable),
/* harmony export */   markAsDisposed: () => (/* binding */ markAsDisposed),
/* harmony export */   markAsSingleton: () => (/* binding */ markAsSingleton),
/* harmony export */   setDisposableTracker: () => (/* binding */ setDisposableTracker),
/* harmony export */   toDisposable: () => (/* binding */ toDisposable),
/* harmony export */   trackDisposable: () => (/* binding */ trackDisposable)
/* harmony export */ });
/* harmony import */ var _functional_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional.js */ "./node_modules/monaco-editor/esm/vs/base/common/functional.js");
/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterator.js */ "./node_modules/monaco-editor/esm/vs/base/common/iterator.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");


// #region Disposable Tracking
/**
 * Enables logging of potentially leaked disposables.
 *
 * A disposable is considered leaked if it is not disposed or not registered as the child of
 * another disposable. This tracking is very simple an only works for classes that either
 * extend Disposable or use a DisposableStore. This means there are a lot of false positives.
 */
const TRACK_DISPOSABLES = false;
let disposableTracker = null;
function setDisposableTracker(tracker) {
    disposableTracker = tracker;
}
if (TRACK_DISPOSABLES) {
    const __is_disposable_tracked__ = '__is_disposable_tracked__';
    setDisposableTracker(new class {
        trackDisposable(x) {
            const stack = new Error('Potentially leaked disposable').stack;
            setTimeout(() => {
                if (!x[__is_disposable_tracked__]) {
                    console.log(stack);
                }
            }, 3000);
        }
        setParent(child, parent) {
            if (child && child !== Disposable.None) {
                try {
                    child[__is_disposable_tracked__] = true;
                }
                catch (_a) {
                    // noop
                }
            }
        }
        markAsDisposed(disposable) {
            if (disposable && disposable !== Disposable.None) {
                try {
                    disposable[__is_disposable_tracked__] = true;
                }
                catch (_a) {
                    // noop
                }
            }
        }
        markAsSingleton(disposable) { }
    });
}
function trackDisposable(x) {
    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.trackDisposable(x);
    return x;
}
function markAsDisposed(disposable) {
    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsDisposed(disposable);
}
function setParentOfDisposable(child, parent) {
    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.setParent(child, parent);
}
function setParentOfDisposables(children, parent) {
    if (!disposableTracker) {
        return;
    }
    for (const child of children) {
        disposableTracker.setParent(child, parent);
    }
}
/**
 * Indicates that the given object is a singleton which does not need to be disposed.
*/
function markAsSingleton(singleton) {
    disposableTracker === null || disposableTracker === void 0 ? void 0 : disposableTracker.markAsSingleton(singleton);
    return singleton;
}
/**
 * Check if `thing` is {@link IDisposable disposable}.
 */
function isDisposable(thing) {
    return typeof thing.dispose === 'function' && thing.dispose.length === 0;
}
function dispose(arg) {
    if (_iterator_js__WEBPACK_IMPORTED_MODULE_1__.Iterable.is(arg)) {
        const errors = [];
        for (const d of arg) {
            if (d) {
                try {
                    d.dispose();
                }
                catch (e) {
                    errors.push(e);
                }
            }
        }
        if (errors.length === 1) {
            throw errors[0];
        }
        else if (errors.length > 1) {
            throw new AggregateError(errors, 'Encountered errors while disposing of store');
        }
        return Array.isArray(arg) ? [] : arg;
    }
    else if (arg) {
        arg.dispose();
        return arg;
    }
}
/**
 * Combine multiple disposable values into a single {@link IDisposable}.
 */
function combinedDisposable(...disposables) {
    const parent = toDisposable(() => dispose(disposables));
    setParentOfDisposables(disposables, parent);
    return parent;
}
/**
 * Turn a function that implements dispose into an {@link IDisposable}.
 *
 * @param fn Clean up function, guaranteed to be called only **once**.
 */
function toDisposable(fn) {
    const self = trackDisposable({
        dispose: (0,_functional_js__WEBPACK_IMPORTED_MODULE_0__.createSingleCallFunction)(() => {
            markAsDisposed(self);
            fn();
        })
    });
    return self;
}
/**
 * Manages a collection of disposable values.
 *
 * This is the preferred way to manage multiple disposables. A `DisposableStore` is safer to work with than an
 * `IDisposable[]` as it considers edge cases, such as registering the same value multiple times or adding an item to a
 * store that has already been disposed of.
 */
class DisposableStore {
    constructor() {
        this._toDispose = new Set();
        this._isDisposed = false;
        trackDisposable(this);
    }
    /**
     * Dispose of all registered disposables and mark this object as disposed.
     *
     * Any future disposables added to this object will be disposed of on `add`.
     */
    dispose() {
        if (this._isDisposed) {
            return;
        }
        markAsDisposed(this);
        this._isDisposed = true;
        this.clear();
    }
    /**
     * @return `true` if this object has been disposed of.
     */
    get isDisposed() {
        return this._isDisposed;
    }
    /**
     * Dispose of all registered disposables but do not mark this object as disposed.
     */
    clear() {
        if (this._toDispose.size === 0) {
            return;
        }
        try {
            dispose(this._toDispose);
        }
        finally {
            this._toDispose.clear();
        }
    }
    /**
     * Add a new {@link IDisposable disposable} to the collection.
     */
    add(o) {
        if (!o) {
            return o;
        }
        if (o === this) {
            throw new Error('Cannot register a disposable on itself!');
        }
        setParentOfDisposable(o, this);
        if (this._isDisposed) {
            if (!DisposableStore.DISABLE_DISPOSED_WARNING) {
                console.warn(new Error('Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!').stack);
            }
        }
        else {
            this._toDispose.add(o);
        }
        return o;
    }
    /**
     * Deletes the value from the store, but does not dispose it.
     */
    deleteAndLeak(o) {
        if (!o) {
            return;
        }
        if (this._toDispose.has(o)) {
            this._toDispose.delete(o);
            setParentOfDisposable(o, null);
        }
    }
}
DisposableStore.DISABLE_DISPOSED_WARNING = false;
/**
 * Abstract base class for a {@link IDisposable disposable} object.
 *
 * Subclasses can {@linkcode _register} disposables that will be automatically cleaned up when this object is disposed of.
 */
class Disposable {
    constructor() {
        this._store = new DisposableStore();
        trackDisposable(this);
        setParentOfDisposable(this._store, this);
    }
    dispose() {
        markAsDisposed(this);
        this._store.dispose();
    }
    /**
     * Adds `o` to the collection of disposables managed by this object.
     */
    _register(o) {
        if (o === this) {
            throw new Error('Cannot register a disposable on itself!');
        }
        return this._store.add(o);
    }
}
/**
 * A disposable that does nothing when it is disposed of.
 *
 * TODO: This should not be a static property.
 */
Disposable.None = Object.freeze({ dispose() { } });
/**
 * Manages the lifecycle of a disposable value that may be changed.
 *
 * This ensures that when the disposable value is changed, the previously held disposable is disposed of. You can
 * also register a `MutableDisposable` on a `Disposable` to ensure it is automatically cleaned up.
 */
class MutableDisposable {
    constructor() {
        this._isDisposed = false;
        trackDisposable(this);
    }
    get value() {
        return this._isDisposed ? undefined : this._value;
    }
    set value(value) {
        var _a;
        if (this._isDisposed || value === this._value) {
            return;
        }
        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();
        if (value) {
            setParentOfDisposable(value, this);
        }
        this._value = value;
    }
    /**
     * Resets the stored value and disposed of the previously stored value.
     */
    clear() {
        this.value = undefined;
    }
    dispose() {
        var _a;
        this._isDisposed = true;
        markAsDisposed(this);
        (_a = this._value) === null || _a === void 0 ? void 0 : _a.dispose();
        this._value = undefined;
    }
}
class RefCountedDisposable {
    constructor(_disposable) {
        this._disposable = _disposable;
        this._counter = 1;
    }
    acquire() {
        this._counter++;
        return this;
    }
    release() {
        if (--this._counter === 0) {
            this._disposable.dispose();
        }
        return this;
    }
}
class ImmortalReference {
    constructor(object) {
        this.object = object;
    }
    dispose() { }
}
/**
 * A map the manages the lifecycle of the values that it stores.
 */
class DisposableMap {
    constructor() {
        this._store = new Map();
        this._isDisposed = false;
        trackDisposable(this);
    }
    /**
     * Disposes of all stored values and mark this object as disposed.
     *
     * Trying to use this object after it has been disposed of is an error.
     */
    dispose() {
        markAsDisposed(this);
        this._isDisposed = true;
        this.clearAndDisposeAll();
    }
    /**
     * Disposes of all stored values and clear the map, but DO NOT mark this object as disposed.
     */
    clearAndDisposeAll() {
        if (!this._store.size) {
            return;
        }
        try {
            dispose(this._store.values());
        }
        finally {
            this._store.clear();
        }
    }
    get(key) {
        return this._store.get(key);
    }
    set(key, value, skipDisposeOnOverwrite = false) {
        var _a;
        if (this._isDisposed) {
            console.warn(new Error('Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!').stack);
        }
        if (!skipDisposeOnOverwrite) {
            (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();
        }
        this._store.set(key, value);
    }
    /**
     * Delete the value stored for `key` from this map and also dispose of it.
     */
    deleteAndDispose(key) {
        var _a;
        (_a = this._store.get(key)) === null || _a === void 0 ? void 0 : _a.dispose();
        this._store.delete(key);
    }
    [Symbol.iterator]() {
        return this._store[Symbol.iterator]();
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/linkedList.js":
/*!*********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/linkedList.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinkedList: () => (/* binding */ LinkedList)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class Node {
    constructor(element) {
        this.element = element;
        this.next = Node.Undefined;
        this.prev = Node.Undefined;
    }
}
Node.Undefined = new Node(undefined);
class LinkedList {
    constructor() {
        this._first = Node.Undefined;
        this._last = Node.Undefined;
        this._size = 0;
    }
    get size() {
        return this._size;
    }
    isEmpty() {
        return this._first === Node.Undefined;
    }
    clear() {
        let node = this._first;
        while (node !== Node.Undefined) {
            const next = node.next;
            node.prev = Node.Undefined;
            node.next = Node.Undefined;
            node = next;
        }
        this._first = Node.Undefined;
        this._last = Node.Undefined;
        this._size = 0;
    }
    unshift(element) {
        return this._insert(element, false);
    }
    push(element) {
        return this._insert(element, true);
    }
    _insert(element, atTheEnd) {
        const newNode = new Node(element);
        if (this._first === Node.Undefined) {
            this._first = newNode;
            this._last = newNode;
        }
        else if (atTheEnd) {
            // push
            const oldLast = this._last;
            this._last = newNode;
            newNode.prev = oldLast;
            oldLast.next = newNode;
        }
        else {
            // unshift
            const oldFirst = this._first;
            this._first = newNode;
            newNode.next = oldFirst;
            oldFirst.prev = newNode;
        }
        this._size += 1;
        let didRemove = false;
        return () => {
            if (!didRemove) {
                didRemove = true;
                this._remove(newNode);
            }
        };
    }
    shift() {
        if (this._first === Node.Undefined) {
            return undefined;
        }
        else {
            const res = this._first.element;
            this._remove(this._first);
            return res;
        }
    }
    pop() {
        if (this._last === Node.Undefined) {
            return undefined;
        }
        else {
            const res = this._last.element;
            this._remove(this._last);
            return res;
        }
    }
    _remove(node) {
        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {
            // middle
            const anchor = node.prev;
            anchor.next = node.next;
            node.next.prev = anchor;
        }
        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {
            // only node
            this._first = Node.Undefined;
            this._last = Node.Undefined;
        }
        else if (node.next === Node.Undefined) {
            // last
            this._last = this._last.prev;
            this._last.next = Node.Undefined;
        }
        else if (node.prev === Node.Undefined) {
            // first
            this._first = this._first.next;
            this._first.prev = Node.Undefined;
        }
        // done
        this._size -= 1;
    }
    *[Symbol.iterator]() {
        let node = this._first;
        while (node !== Node.Undefined) {
            yield node.element;
            node = node.next;
        }
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/map.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BidirectionalMap: () => (/* binding */ BidirectionalMap),
/* harmony export */   LRUCache: () => (/* binding */ LRUCache),
/* harmony export */   LinkedMap: () => (/* binding */ LinkedMap),
/* harmony export */   ResourceMap: () => (/* binding */ ResourceMap),
/* harmony export */   SetMap: () => (/* binding */ SetMap)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a, _b;
class ResourceMapEntry {
    constructor(uri, value) {
        this.uri = uri;
        this.value = value;
    }
}
function isEntries(arg) {
    return Array.isArray(arg);
}
class ResourceMap {
    constructor(arg, toKey) {
        this[_a] = 'ResourceMap';
        if (arg instanceof ResourceMap) {
            this.map = new Map(arg.map);
            this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;
        }
        else if (isEntries(arg)) {
            this.map = new Map();
            this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;
            for (const [resource, value] of arg) {
                this.set(resource, value);
            }
        }
        else {
            this.map = new Map();
            this.toKey = arg !== null && arg !== void 0 ? arg : ResourceMap.defaultToKey;
        }
    }
    set(resource, value) {
        this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));
        return this;
    }
    get(resource) {
        var _c;
        return (_c = this.map.get(this.toKey(resource))) === null || _c === void 0 ? void 0 : _c.value;
    }
    has(resource) {
        return this.map.has(this.toKey(resource));
    }
    get size() {
        return this.map.size;
    }
    clear() {
        this.map.clear();
    }
    delete(resource) {
        return this.map.delete(this.toKey(resource));
    }
    forEach(clb, thisArg) {
        if (typeof thisArg !== 'undefined') {
            clb = clb.bind(thisArg);
        }
        for (const [_, entry] of this.map) {
            clb(entry.value, entry.uri, this);
        }
    }
    *values() {
        for (const entry of this.map.values()) {
            yield entry.value;
        }
    }
    *keys() {
        for (const entry of this.map.values()) {
            yield entry.uri;
        }
    }
    *entries() {
        for (const entry of this.map.values()) {
            yield [entry.uri, entry.value];
        }
    }
    *[(_a = Symbol.toStringTag, Symbol.iterator)]() {
        for (const [, entry] of this.map) {
            yield [entry.uri, entry.value];
        }
    }
}
ResourceMap.defaultToKey = (resource) => resource.toString();
class LinkedMap {
    constructor() {
        this[_b] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        var _c;
        return (_c = this._head) === null || _c === void 0 ? void 0 : _c.value;
    }
    get last() {
        var _c;
        return (_c = this._tail) === null || _c === void 0 ? void 0 : _c.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = 0 /* Touch.None */) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== 0 /* Touch.None */) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = 0 /* Touch.None */) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== 0 /* Touch.None */) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case 0 /* Touch.None */:
                    this.addItemLast(item);
                    break;
                case 1 /* Touch.AsOld */:
                    this.addItemFirst(item);
                    break;
                case 2 /* Touch.AsNew */:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]() {
                return iterator;
            },
            next() {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]() {
                return iterator;
            },
            next() {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const map = this;
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]() {
                return iterator;
            },
            next() {
                if (map._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [(_b = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happen if size === 1 which is handled
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happen if size === 1 which is handled
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== 1 /* Touch.AsOld */ && touch !== 2 /* Touch.AsNew */)) {
            return;
        }
        if (touch === 1 /* Touch.AsOld */) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === 2 /* Touch.AsNew */) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get(key, touch = 2 /* Touch.AsNew */) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, 0 /* Touch.None */);
    }
    set(key, value) {
        super.set(key, value, 2 /* Touch.AsNew */);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
/**
 * A map that allows access both by keys and values.
 * **NOTE**: values need to be unique.
 */
class BidirectionalMap {
    constructor(entries) {
        this._m1 = new Map();
        this._m2 = new Map();
        if (entries) {
            for (const [key, value] of entries) {
                this.set(key, value);
            }
        }
    }
    clear() {
        this._m1.clear();
        this._m2.clear();
    }
    set(key, value) {
        this._m1.set(key, value);
        this._m2.set(value, key);
    }
    get(key) {
        return this._m1.get(key);
    }
    getKey(value) {
        return this._m2.get(value);
    }
    delete(key) {
        const value = this._m1.get(key);
        if (value === undefined) {
            return false;
        }
        this._m1.delete(key);
        this._m2.delete(value);
        return true;
    }
    keys() {
        return this._m1.keys();
    }
    values() {
        return this._m1.values();
    }
}
class SetMap {
    constructor() {
        this.map = new Map();
    }
    add(key, value) {
        let values = this.map.get(key);
        if (!values) {
            values = new Set();
            this.map.set(key, values);
        }
        values.add(value);
    }
    delete(key, value) {
        const values = this.map.get(key);
        if (!values) {
            return;
        }
        values.delete(value);
        if (values.size === 0) {
            this.map.delete(key);
        }
    }
    forEach(key, fn) {
        const values = this.map.get(key);
        if (!values) {
            return;
        }
        values.forEach(fn);
    }
    get(key) {
        const values = this.map.get(key);
        if (!values) {
            return new Set();
        }
        return values;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/objects.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/objects.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cloneAndChange: () => (/* binding */ cloneAndChange),
/* harmony export */   createProxyObject: () => (/* binding */ createProxyObject),
/* harmony export */   deepClone: () => (/* binding */ deepClone),
/* harmony export */   deepFreeze: () => (/* binding */ deepFreeze),
/* harmony export */   equals: () => (/* binding */ equals),
/* harmony export */   getAllMethodNames: () => (/* binding */ getAllMethodNames),
/* harmony export */   getAllPropertyNames: () => (/* binding */ getAllPropertyNames),
/* harmony export */   mixin: () => (/* binding */ mixin)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ "./node_modules/monaco-editor/esm/vs/base/common/types.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function deepClone(obj) {
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    if (obj instanceof RegExp) {
        return obj;
    }
    const result = Array.isArray(obj) ? [] : {};
    Object.entries(obj).forEach(([key, value]) => {
        result[key] = value && typeof value === 'object' ? deepClone(value) : value;
    });
    return result;
}
function deepFreeze(obj) {
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    const stack = [obj];
    while (stack.length > 0) {
        const obj = stack.shift();
        Object.freeze(obj);
        for (const key in obj) {
            if (_hasOwnProperty.call(obj, key)) {
                const prop = obj[key];
                if (typeof prop === 'object' && !Object.isFrozen(prop) && !(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isTypedArray)(prop)) {
                    stack.push(prop);
                }
            }
        }
    }
    return obj;
}
const _hasOwnProperty = Object.prototype.hasOwnProperty;
function cloneAndChange(obj, changer) {
    return _cloneAndChange(obj, changer, new Set());
}
function _cloneAndChange(obj, changer, seen) {
    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isUndefinedOrNull)(obj)) {
        return obj;
    }
    const changed = changer(obj);
    if (typeof changed !== 'undefined') {
        return changed;
    }
    if (Array.isArray(obj)) {
        const r1 = [];
        for (const e of obj) {
            r1.push(_cloneAndChange(e, changer, seen));
        }
        return r1;
    }
    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(obj)) {
        if (seen.has(obj)) {
            throw new Error('Cannot clone recursive data-structure');
        }
        seen.add(obj);
        const r2 = {};
        for (const i2 in obj) {
            if (_hasOwnProperty.call(obj, i2)) {
                r2[i2] = _cloneAndChange(obj[i2], changer, seen);
            }
        }
        seen.delete(obj);
        return r2;
    }
    return obj;
}
/**
 * Copies all properties of source into destination. The optional parameter "overwrite" allows to control
 * if existing properties on the destination should be overwritten or not. Defaults to true (overwrite).
 */
function mixin(destination, source, overwrite = true) {
    if (!(0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination)) {
        return source;
    }
    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source)) {
        Object.keys(source).forEach(key => {
            if (key in destination) {
                if (overwrite) {
                    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(destination[key]) && (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source[key])) {
                        mixin(destination[key], source[key], overwrite);
                    }
                    else {
                        destination[key] = source[key];
                    }
                }
            }
            else {
                destination[key] = source[key];
            }
        });
    }
    return destination;
}
function equals(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === undefined || other === null || other === undefined) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== 'object') {
        return false;
    }
    if ((Array.isArray(one)) !== (Array.isArray(other))) {
        return false;
    }
    let i;
    let key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for (i = 0; i < one.length; i++) {
            if (!equals(one[i], other[i])) {
                return false;
            }
        }
    }
    else {
        const oneKeys = [];
        for (key in one) {
            oneKeys.push(key);
        }
        oneKeys.sort();
        const otherKeys = [];
        for (key in other) {
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals(oneKeys, otherKeys)) {
            return false;
        }
        for (i = 0; i < oneKeys.length; i++) {
            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function getAllPropertyNames(obj) {
    let res = [];
    while (Object.prototype !== obj) {
        res = res.concat(Object.getOwnPropertyNames(obj));
        obj = Object.getPrototypeOf(obj);
    }
    return res;
}
function getAllMethodNames(obj) {
    const methods = [];
    for (const prop of getAllPropertyNames(obj)) {
        if (typeof obj[prop] === 'function') {
            methods.push(prop);
        }
    }
    return methods;
}
function createProxyObject(methodNames, invoke) {
    const createProxyMethod = (method) => {
        return function () {
            const args = Array.prototype.slice.call(arguments, 0);
            return invoke(method, args);
        };
    };
    const result = {};
    for (const methodName of methodNames) {
        result[methodName] = createProxyMethod(methodName);
    }
    return result;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/path.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/path.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   basename: () => (/* binding */ basename),
/* harmony export */   dirname: () => (/* binding */ dirname),
/* harmony export */   extname: () => (/* binding */ extname),
/* harmony export */   normalize: () => (/* binding */ normalize),
/* harmony export */   posix: () => (/* binding */ posix),
/* harmony export */   relative: () => (/* binding */ relative),
/* harmony export */   resolve: () => (/* binding */ resolve),
/* harmony export */   sep: () => (/* binding */ sep),
/* harmony export */   win32: () => (/* binding */ win32)
/* harmony export */ });
/* harmony import */ var _process_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./process.js */ "./node_modules/monaco-editor/esm/vs/base/common/process.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace
// Copied from: https://github.com/nodejs/node/blob/v16.14.2/lib/path.js
/**
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const CHAR_UPPERCASE_A = 65; /* A */
const CHAR_LOWERCASE_A = 97; /* a */
const CHAR_UPPERCASE_Z = 90; /* Z */
const CHAR_LOWERCASE_Z = 122; /* z */
const CHAR_DOT = 46; /* . */
const CHAR_FORWARD_SLASH = 47; /* / */
const CHAR_BACKWARD_SLASH = 92; /* \ */
const CHAR_COLON = 58; /* : */
const CHAR_QUESTION_MARK = 63; /* ? */
class ErrorInvalidArgType extends Error {
    constructor(name, expected, actual) {
        // determiner: 'must be' or 'must not be'
        let determiner;
        if (typeof expected === 'string' && expected.indexOf('not ') === 0) {
            determiner = 'must not be';
            expected = expected.replace(/^not /, '');
        }
        else {
            determiner = 'must be';
        }
        const type = name.indexOf('.') !== -1 ? 'property' : 'argument';
        let msg = `The "${name}" ${type} ${determiner} of type ${expected}`;
        msg += `. Received type ${typeof actual}`;
        super(msg);
        this.code = 'ERR_INVALID_ARG_TYPE';
    }
}
function validateObject(pathObject, name) {
    if (pathObject === null || typeof pathObject !== 'object') {
        throw new ErrorInvalidArgType(name, 'Object', pathObject);
    }
}
function validateString(value, name) {
    if (typeof value !== 'string') {
        throw new ErrorInvalidArgType(name, 'string', value);
    }
}
const platformIsWin32 = (_process_js__WEBPACK_IMPORTED_MODULE_0__.platform === 'win32');
function isPathSeparator(code) {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
}
function isPosixPathSeparator(code) {
    return code === CHAR_FORWARD_SLASH;
}
function isWindowsDeviceRoot(code) {
    return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||
        (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);
}
// Resolves . and .. elements in a path with directory names
function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
    let res = '';
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code = 0;
    for (let i = 0; i <= path.length; ++i) {
        if (i < path.length) {
            code = path.charCodeAt(i);
        }
        else if (isPathSeparator(code)) {
            break;
        }
        else {
            code = CHAR_FORWARD_SLASH;
        }
        if (isPathSeparator(code)) {
            if (lastSlash === i - 1 || dots === 1) {
                // NOOP
            }
            else if (dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 ||
                    res.charCodeAt(res.length - 1) !== CHAR_DOT ||
                    res.charCodeAt(res.length - 2) !== CHAR_DOT) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = '';
                            lastSegmentLength = 0;
                        }
                        else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                    else if (res.length !== 0) {
                        res = '';
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    res += res.length > 0 ? `${separator}..` : '..';
                    lastSegmentLength = 2;
                }
            }
            else {
                if (res.length > 0) {
                    res += `${separator}${path.slice(lastSlash + 1, i)}`;
                }
                else {
                    res = path.slice(lastSlash + 1, i);
                }
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        }
        else if (code === CHAR_DOT && dots !== -1) {
            ++dots;
        }
        else {
            dots = -1;
        }
    }
    return res;
}
function _format(sep, pathObject) {
    validateObject(pathObject, 'pathObject');
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base ||
        `${pathObject.name || ''}${pathObject.ext || ''}`;
    if (!dir) {
        return base;
    }
    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;
}
const win32 = {
    // path.resolve([from ...], to)
    resolve(...pathSegments) {
        let resolvedDevice = '';
        let resolvedTail = '';
        let resolvedAbsolute = false;
        for (let i = pathSegments.length - 1; i >= -1; i--) {
            let path;
            if (i >= 0) {
                path = pathSegments[i];
                validateString(path, 'path');
                // Skip empty entries
                if (path.length === 0) {
                    continue;
                }
            }
            else if (resolvedDevice.length === 0) {
                path = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();
            }
            else {
                // Windows has the concept of drive-specific current working
                // directories. If we've resolved a drive letter but not yet an
                // absolute path, get cwd for that drive, or the process cwd if
                // the drive cwd is not available. We're sure the device is not
                // a UNC path at this points, because UNC paths are always absolute.
                path = _process_js__WEBPACK_IMPORTED_MODULE_0__.env[`=${resolvedDevice}`] || _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();
                // Verify that a cwd was found and that it actually points
                // to our drive. If not, default to the drive's root.
                if (path === undefined ||
                    (path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() &&
                        path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {
                    path = `${resolvedDevice}\\`;
                }
            }
            const len = path.length;
            let rootEnd = 0;
            let device = '';
            let isAbsolute = false;
            const code = path.charCodeAt(0);
            // Try to match a root
            if (len === 1) {
                if (isPathSeparator(code)) {
                    // `path` contains just a path separator
                    rootEnd = 1;
                    isAbsolute = true;
                }
            }
            else if (isPathSeparator(code)) {
                // Possible UNC root
                // If we started with a separator, we know we at least have an
                // absolute path of some kind (UNC or otherwise)
                isAbsolute = true;
                if (isPathSeparator(path.charCodeAt(1))) {
                    // Matched double path separator at beginning
                    let j = 2;
                    let last = j;
                    // Match 1 or more non-path separators
                    while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                        j++;
                    }
                    if (j < len && j !== last) {
                        const firstPart = path.slice(last, j);
                        // Matched!
                        last = j;
                        // Match 1 or more path separators
                        while (j < len && isPathSeparator(path.charCodeAt(j))) {
                            j++;
                        }
                        if (j < len && j !== last) {
                            // Matched!
                            last = j;
                            // Match 1 or more non-path separators
                            while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                                j++;
                            }
                            if (j === len || j !== last) {
                                // We matched a UNC root
                                device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                                rootEnd = j;
                            }
                        }
                    }
                }
                else {
                    rootEnd = 1;
                }
            }
            else if (isWindowsDeviceRoot(code) &&
                path.charCodeAt(1) === CHAR_COLON) {
                // Possible device root
                device = path.slice(0, 2);
                rootEnd = 2;
                if (len > 2 && isPathSeparator(path.charCodeAt(2))) {
                    // Treat separator following drive name as an absolute path
                    // indicator
                    isAbsolute = true;
                    rootEnd = 3;
                }
            }
            if (device.length > 0) {
                if (resolvedDevice.length > 0) {
                    if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {
                        // This path points to another device so it is not applicable
                        continue;
                    }
                }
                else {
                    resolvedDevice = device;
                }
            }
            if (resolvedAbsolute) {
                if (resolvedDevice.length > 0) {
                    break;
                }
            }
            else {
                resolvedTail = `${path.slice(rootEnd)}\\${resolvedTail}`;
                resolvedAbsolute = isAbsolute;
                if (isAbsolute && resolvedDevice.length > 0) {
                    break;
                }
            }
        }
        // At this point the path should be resolved to a full absolute path,
        // but handle relative paths to be safe (might happen when process.cwd()
        // fails)
        // Normalize the tail path
        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\', isPathSeparator);
        return resolvedAbsolute ?
            `${resolvedDevice}\\${resolvedTail}` :
            `${resolvedDevice}${resolvedTail}` || '.';
    },
    normalize(path) {
        validateString(path, 'path');
        const len = path.length;
        if (len === 0) {
            return '.';
        }
        let rootEnd = 0;
        let device;
        let isAbsolute = false;
        const code = path.charCodeAt(0);
        // Try to match a root
        if (len === 1) {
            // `path` contains just a single char, exit early to avoid
            // unnecessary work
            return isPosixPathSeparator(code) ? '\\' : path;
        }
        if (isPathSeparator(code)) {
            // Possible UNC root
            // If we started with a separator, we know we at least have an absolute
            // path of some kind (UNC or otherwise)
            isAbsolute = true;
            if (isPathSeparator(path.charCodeAt(1))) {
                // Matched double path separator at beginning
                let j = 2;
                let last = j;
                // Match 1 or more non-path separators
                while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                    j++;
                }
                if (j < len && j !== last) {
                    const firstPart = path.slice(last, j);
                    // Matched!
                    last = j;
                    // Match 1 or more path separators
                    while (j < len && isPathSeparator(path.charCodeAt(j))) {
                        j++;
                    }
                    if (j < len && j !== last) {
                        // Matched!
                        last = j;
                        // Match 1 or more non-path separators
                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                            j++;
                        }
                        if (j === len) {
                            // We matched a UNC root only
                            // Return the normalized version of the UNC root since there
                            // is nothing left to process
                            return `\\\\${firstPart}\\${path.slice(last)}\\`;
                        }
                        if (j !== last) {
                            // We matched a UNC root with leftovers
                            device = `\\\\${firstPart}\\${path.slice(last, j)}`;
                            rootEnd = j;
                        }
                    }
                }
            }
            else {
                rootEnd = 1;
            }
        }
        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
            // Possible device root
            device = path.slice(0, 2);
            rootEnd = 2;
            if (len > 2 && isPathSeparator(path.charCodeAt(2))) {
                // Treat separator following drive name as an absolute path
                // indicator
                isAbsolute = true;
                rootEnd = 3;
            }
        }
        let tail = rootEnd < len ?
            normalizeString(path.slice(rootEnd), !isAbsolute, '\\', isPathSeparator) :
            '';
        if (tail.length === 0 && !isAbsolute) {
            tail = '.';
        }
        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {
            tail += '\\';
        }
        if (device === undefined) {
            return isAbsolute ? `\\${tail}` : tail;
        }
        return isAbsolute ? `${device}\\${tail}` : `${device}${tail}`;
    },
    isAbsolute(path) {
        validateString(path, 'path');
        const len = path.length;
        if (len === 0) {
            return false;
        }
        const code = path.charCodeAt(0);
        return isPathSeparator(code) ||
            // Possible device root
            (len > 2 &&
                isWindowsDeviceRoot(code) &&
                path.charCodeAt(1) === CHAR_COLON &&
                isPathSeparator(path.charCodeAt(2)));
    },
    join(...paths) {
        if (paths.length === 0) {
            return '.';
        }
        let joined;
        let firstPart;
        for (let i = 0; i < paths.length; ++i) {
            const arg = paths[i];
            validateString(arg, 'path');
            if (arg.length > 0) {
                if (joined === undefined) {
                    joined = firstPart = arg;
                }
                else {
                    joined += `\\${arg}`;
                }
            }
        }
        if (joined === undefined) {
            return '.';
        }
        // Make sure that the joined path doesn't start with two slashes, because
        // normalize() will mistake it for a UNC path then.
        //
        // This step is skipped when it is very clear that the user actually
        // intended to point at a UNC path. This is assumed when the first
        // non-empty string arguments starts with exactly two slashes followed by
        // at least one more non-slash character.
        //
        // Note that for normalize() to treat a path as a UNC path it needs to
        // have at least 2 components, so we don't filter for that here.
        // This means that the user can use join to construct UNC paths from
        // a server name and a share name; for example:
        //   path.join('//server', 'share') -> '\\\\server\\share\\')
        let needsReplace = true;
        let slashCount = 0;
        if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {
            ++slashCount;
            const firstLen = firstPart.length;
            if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) {
                        ++slashCount;
                    }
                    else {
                        // We matched a UNC path in the first part
                        needsReplace = false;
                    }
                }
            }
        }
        if (needsReplace) {
            // Find any more consecutive slashes we need to replace
            while (slashCount < joined.length &&
                isPathSeparator(joined.charCodeAt(slashCount))) {
                slashCount++;
            }
            // Replace the slashes if needed
            if (slashCount >= 2) {
                joined = `\\${joined.slice(slashCount)}`;
            }
        }
        return win32.normalize(joined);
    },
    // It will solve the relative path from `from` to `to`, for instance:
    //  from = 'C:\\orandea\\test\\aaa'
    //  to = 'C:\\orandea\\impl\\bbb'
    // The output of the function should be: '..\\..\\impl\\bbb'
    relative(from, to) {
        validateString(from, 'from');
        validateString(to, 'to');
        if (from === to) {
            return '';
        }
        const fromOrig = win32.resolve(from);
        const toOrig = win32.resolve(to);
        if (fromOrig === toOrig) {
            return '';
        }
        from = fromOrig.toLowerCase();
        to = toOrig.toLowerCase();
        if (from === to) {
            return '';
        }
        // Trim any leading backslashes
        let fromStart = 0;
        while (fromStart < from.length &&
            from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {
            fromStart++;
        }
        // Trim trailing backslashes (applicable to UNC paths only)
        let fromEnd = from.length;
        while (fromEnd - 1 > fromStart &&
            from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {
            fromEnd--;
        }
        const fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        let toStart = 0;
        while (toStart < to.length &&
            to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {
            toStart++;
        }
        // Trim trailing backslashes (applicable to UNC paths only)
        let toEnd = to.length;
        while (toEnd - 1 > toStart &&
            to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {
            toEnd--;
        }
        const toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        const length = fromLen < toLen ? fromLen : toLen;
        let lastCommonSep = -1;
        let i = 0;
        for (; i < length; i++) {
            const fromCode = from.charCodeAt(fromStart + i);
            if (fromCode !== to.charCodeAt(toStart + i)) {
                break;
            }
            else if (fromCode === CHAR_BACKWARD_SLASH) {
                lastCommonSep = i;
            }
        }
        // We found a mismatch before the first common path separator was seen, so
        // return the original `to`.
        if (i !== length) {
            if (lastCommonSep === -1) {
                return toOrig;
            }
        }
        else {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {
                    // We get here if `from` is the exact base path for `to`.
                    // For example: from='C:\\foo\\bar'; to='C:\\foo\\bar\\baz'
                    return toOrig.slice(toStart + i + 1);
                }
                if (i === 2) {
                    // We get here if `from` is the device root.
                    // For example: from='C:\\'; to='C:\\foo'
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {
                    // We get here if `to` is the exact base path for `from`.
                    // For example: from='C:\\foo\\bar'; to='C:\\foo'
                    lastCommonSep = i;
                }
                else if (i === 2) {
                    // We get here if `to` is the device root.
                    // For example: from='C:\\foo\\bar'; to='C:\\'
                    lastCommonSep = 3;
                }
            }
            if (lastCommonSep === -1) {
                lastCommonSep = 0;
            }
        }
        let out = '';
        // Generate the relative path based on the path difference between `to` and
        // `from`
        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {
                out += out.length === 0 ? '..' : '\\..';
            }
        }
        toStart += lastCommonSep;
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) {
            return `${out}${toOrig.slice(toStart, toEnd)}`;
        }
        if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {
            ++toStart;
        }
        return toOrig.slice(toStart, toEnd);
    },
    toNamespacedPath(path) {
        // Note: this will *probably* throw somewhere.
        if (typeof path !== 'string' || path.length === 0) {
            return path;
        }
        const resolvedPath = win32.resolve(path);
        if (resolvedPath.length <= 2) {
            return path;
        }
        if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {
            // Possible UNC root
            if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {
                    // Matched non-long UNC root, convert the path to a long UNC path
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        }
        else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&
            resolvedPath.charCodeAt(1) === CHAR_COLON &&
            resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
            // Matched device root, convert the path to a long UNC path
            return `\\\\?\\${resolvedPath}`;
        }
        return path;
    },
    dirname(path) {
        validateString(path, 'path');
        const len = path.length;
        if (len === 0) {
            return '.';
        }
        let rootEnd = -1;
        let offset = 0;
        const code = path.charCodeAt(0);
        if (len === 1) {
            // `path` contains just a path separator, exit early to avoid
            // unnecessary work or a dot.
            return isPathSeparator(code) ? path : '.';
        }
        // Try to match a root
        if (isPathSeparator(code)) {
            // Possible UNC root
            rootEnd = offset = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                // Matched double path separator at beginning
                let j = 2;
                let last = j;
                // Match 1 or more non-path separators
                while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                    j++;
                }
                if (j < len && j !== last) {
                    // Matched!
                    last = j;
                    // Match 1 or more path separators
                    while (j < len && isPathSeparator(path.charCodeAt(j))) {
                        j++;
                    }
                    if (j < len && j !== last) {
                        // Matched!
                        last = j;
                        // Match 1 or more non-path separators
                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                            j++;
                        }
                        if (j === len) {
                            // We matched a UNC root only
                            return path;
                        }
                        if (j !== last) {
                            // We matched a UNC root with leftovers
                            // Offset by 1 to include the separator after the UNC root to
                            // treat it as a "normal root" on top of a (UNC) root
                            rootEnd = offset = j + 1;
                        }
                    }
                }
            }
            // Possible device root
        }
        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
            rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;
            offset = rootEnd;
        }
        let end = -1;
        let matchedSlash = true;
        for (let i = len - 1; i >= offset; --i) {
            if (isPathSeparator(path.charCodeAt(i))) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            }
            else {
                // We saw the first non-path separator
                matchedSlash = false;
            }
        }
        if (end === -1) {
            if (rootEnd === -1) {
                return '.';
            }
            end = rootEnd;
        }
        return path.slice(0, end);
    },
    basename(path, ext) {
        if (ext !== undefined) {
            validateString(ext, 'ext');
        }
        validateString(path, 'path');
        let start = 0;
        let end = -1;
        let matchedSlash = true;
        let i;
        // Check for a drive letter prefix so as not to mistake the following
        // path separator as an extra separator at the end of the path that can be
        // disregarded
        if (path.length >= 2 &&
            isWindowsDeviceRoot(path.charCodeAt(0)) &&
            path.charCodeAt(1) === CHAR_COLON) {
            start = 2;
        }
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext === path) {
                return '';
            }
            let extIdx = ext.length - 1;
            let firstNonSlashEnd = -1;
            for (i = path.length - 1; i >= start; --i) {
                const code = path.charCodeAt(i);
                if (isPathSeparator(code)) {
                    // If we reached a path separator that was not part of a set of path
                    // separators at the end of the string, stop now
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                }
                else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) {
                                // We matched the extension, so mark this as the end of our path
                                // component
                                end = i;
                            }
                        }
                        else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) {
                end = firstNonSlashEnd;
            }
            else if (end === -1) {
                end = path.length;
            }
            return path.slice(start, end);
        }
        for (i = path.length - 1; i >= start; --i) {
            if (isPathSeparator(path.charCodeAt(i))) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            }
            else if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // path component
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) {
            return '';
        }
        return path.slice(start, end);
    },
    extname(path) {
        validateString(path, 'path');
        let start = 0;
        let startDot = -1;
        let startPart = 0;
        let end = -1;
        let matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        // Check for a drive letter prefix so as not to mistake the following
        // path separator as an extra separator at the end of the path that can be
        // disregarded
        if (path.length >= 2 &&
            path.charCodeAt(1) === CHAR_COLON &&
            isWindowsDeviceRoot(path.charCodeAt(0))) {
            start = startPart = 2;
        }
        for (let i = path.length - 1; i >= start; --i) {
            const code = path.charCodeAt(i);
            if (isPathSeparator(code)) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                }
                else if (preDotState !== 1) {
                    preDotState = 1;
                }
            }
            else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (startDot === -1 ||
            end === -1 ||
            // We saw a non-dot character immediately before the dot
            preDotState === 0 ||
            // The (right-most) trimmed path component is exactly '..'
            (preDotState === 1 &&
                startDot === end - 1 &&
                startDot === startPart + 1)) {
            return '';
        }
        return path.slice(startDot, end);
    },
    format: _format.bind(null, '\\'),
    parse(path) {
        validateString(path, 'path');
        const ret = { root: '', dir: '', base: '', ext: '', name: '' };
        if (path.length === 0) {
            return ret;
        }
        const len = path.length;
        let rootEnd = 0;
        let code = path.charCodeAt(0);
        if (len === 1) {
            if (isPathSeparator(code)) {
                // `path` contains just a path separator, exit early to avoid
                // unnecessary work
                ret.root = ret.dir = path;
                return ret;
            }
            ret.base = ret.name = path;
            return ret;
        }
        // Try to match a root
        if (isPathSeparator(code)) {
            // Possible UNC root
            rootEnd = 1;
            if (isPathSeparator(path.charCodeAt(1))) {
                // Matched double path separator at beginning
                let j = 2;
                let last = j;
                // Match 1 or more non-path separators
                while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                    j++;
                }
                if (j < len && j !== last) {
                    // Matched!
                    last = j;
                    // Match 1 or more path separators
                    while (j < len && isPathSeparator(path.charCodeAt(j))) {
                        j++;
                    }
                    if (j < len && j !== last) {
                        // Matched!
                        last = j;
                        // Match 1 or more non-path separators
                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {
                            j++;
                        }
                        if (j === len) {
                            // We matched a UNC root only
                            rootEnd = j;
                        }
                        else if (j !== last) {
                            // We matched a UNC root with leftovers
                            rootEnd = j + 1;
                        }
                    }
                }
            }
        }
        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {
            // Possible device root
            if (len <= 2) {
                // `path` contains just a drive root, exit early to avoid
                // unnecessary work
                ret.root = ret.dir = path;
                return ret;
            }
            rootEnd = 2;
            if (isPathSeparator(path.charCodeAt(2))) {
                if (len === 3) {
                    // `path` contains just a drive root, exit early to avoid
                    // unnecessary work
                    ret.root = ret.dir = path;
                    return ret;
                }
                rootEnd = 3;
            }
        }
        if (rootEnd > 0) {
            ret.root = path.slice(0, rootEnd);
        }
        let startDot = -1;
        let startPart = rootEnd;
        let end = -1;
        let matchedSlash = true;
        let i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        // Get non-dir info
        for (; i >= rootEnd; --i) {
            code = path.charCodeAt(i);
            if (isPathSeparator(code)) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                }
                else if (preDotState !== 1) {
                    preDotState = 1;
                }
            }
            else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (end !== -1) {
            if (startDot === -1 ||
                // We saw a non-dot character immediately before the dot
                preDotState === 0 ||
                // The (right-most) trimmed path component is exactly '..'
                (preDotState === 1 &&
                    startDot === end - 1 &&
                    startDot === startPart + 1)) {
                ret.base = ret.name = path.slice(startPart, end);
            }
            else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
                ret.ext = path.slice(startDot, end);
            }
        }
        // If the directory is the root, use the entire root as the `dir` including
        // the trailing slash if any (`C:\abc` -> `C:\`). Otherwise, strip out the
        // trailing slash (`C:\abc\def` -> `C:\abc`).
        if (startPart > 0 && startPart !== rootEnd) {
            ret.dir = path.slice(0, startPart - 1);
        }
        else {
            ret.dir = ret.root;
        }
        return ret;
    },
    sep: '\\',
    delimiter: ';',
    win32: null,
    posix: null
};
const posixCwd = (() => {
    if (platformIsWin32) {
        // Converts Windows' backslash path separators to POSIX forward slashes
        // and truncates any drive indicator
        const regexp = /\\/g;
        return () => {
            const cwd = _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd().replace(regexp, '/');
            return cwd.slice(cwd.indexOf('/'));
        };
    }
    // We're already on POSIX, no need for any transformations
    return () => _process_js__WEBPACK_IMPORTED_MODULE_0__.cwd();
})();
const posix = {
    // path.resolve([from ...], to)
    resolve(...pathSegments) {
        let resolvedPath = '';
        let resolvedAbsolute = false;
        for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            const path = i >= 0 ? pathSegments[i] : posixCwd();
            validateString(path, 'path');
            // Skip empty entries
            if (path.length === 0) {
                continue;
            }
            resolvedPath = `${path}/${resolvedPath}`;
            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);
        if (resolvedAbsolute) {
            return `/${resolvedPath}`;
        }
        return resolvedPath.length > 0 ? resolvedPath : '.';
    },
    normalize(path) {
        validateString(path, 'path');
        if (path.length === 0) {
            return '.';
        }
        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;
        // Normalize the path
        path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);
        if (path.length === 0) {
            if (isAbsolute) {
                return '/';
            }
            return trailingSeparator ? './' : '.';
        }
        if (trailingSeparator) {
            path += '/';
        }
        return isAbsolute ? `/${path}` : path;
    },
    isAbsolute(path) {
        validateString(path, 'path');
        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;
    },
    join(...paths) {
        if (paths.length === 0) {
            return '.';
        }
        let joined;
        for (let i = 0; i < paths.length; ++i) {
            const arg = paths[i];
            validateString(arg, 'path');
            if (arg.length > 0) {
                if (joined === undefined) {
                    joined = arg;
                }
                else {
                    joined += `/${arg}`;
                }
            }
        }
        if (joined === undefined) {
            return '.';
        }
        return posix.normalize(joined);
    },
    relative(from, to) {
        validateString(from, 'from');
        validateString(to, 'to');
        if (from === to) {
            return '';
        }
        // Trim leading forward slashes.
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to) {
            return '';
        }
        const fromStart = 1;
        const fromEnd = from.length;
        const fromLen = fromEnd - fromStart;
        const toStart = 1;
        const toLen = to.length - toStart;
        // Compare paths to find the longest common path from root
        const length = (fromLen < toLen ? fromLen : toLen);
        let lastCommonSep = -1;
        let i = 0;
        for (; i < length; i++) {
            const fromCode = from.charCodeAt(fromStart + i);
            if (fromCode !== to.charCodeAt(toStart + i)) {
                break;
            }
            else if (fromCode === CHAR_FORWARD_SLASH) {
                lastCommonSep = i;
            }
        }
        if (i === length) {
            if (toLen > length) {
                if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {
                    // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                }
                if (i === 0) {
                    // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                }
            }
            else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {
                    // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                }
                else if (i === 0) {
                    // We get here if `to` is the root.
                    // For example: from='/foo/bar'; to='/'
                    lastCommonSep = 0;
                }
            }
        }
        let out = '';
        // Generate the relative path based on the path difference between `to`
        // and `from`.
        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {
                out += out.length === 0 ? '..' : '/..';
            }
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts.
        return `${out}${to.slice(toStart + lastCommonSep)}`;
    },
    toNamespacedPath(path) {
        // Non-op on posix systems
        return path;
    },
    dirname(path) {
        validateString(path, 'path');
        if (path.length === 0) {
            return '.';
        }
        const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        let end = -1;
        let matchedSlash = true;
        for (let i = path.length - 1; i >= 1; --i) {
            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            }
            else {
                // We saw the first non-path separator
                matchedSlash = false;
            }
        }
        if (end === -1) {
            return hasRoot ? '/' : '.';
        }
        if (hasRoot && end === 1) {
            return '//';
        }
        return path.slice(0, end);
    },
    basename(path, ext) {
        if (ext !== undefined) {
            validateString(ext, 'ext');
        }
        validateString(path, 'path');
        let start = 0;
        let end = -1;
        let matchedSlash = true;
        let i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext === path) {
                return '';
            }
            let extIdx = ext.length - 1;
            let firstNonSlashEnd = -1;
            for (i = path.length - 1; i >= 0; --i) {
                const code = path.charCodeAt(i);
                if (code === CHAR_FORWARD_SLASH) {
                    // If we reached a path separator that was not part of a set of path
                    // separators at the end of the string, stop now
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                }
                else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) {
                                // We matched the extension, so mark this as the end of our path
                                // component
                                end = i;
                            }
                        }
                        else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) {
                end = firstNonSlashEnd;
            }
            else if (end === -1) {
                end = path.length;
            }
            return path.slice(start, end);
        }
        for (i = path.length - 1; i >= 0; --i) {
            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            }
            else if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // path component
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) {
            return '';
        }
        return path.slice(start, end);
    },
    extname(path) {
        validateString(path, 'path');
        let startDot = -1;
        let startPart = 0;
        let end = -1;
        let matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        for (let i = path.length - 1; i >= 0; --i) {
            const code = path.charCodeAt(i);
            if (code === CHAR_FORWARD_SLASH) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                }
                else if (preDotState !== 1) {
                    preDotState = 1;
                }
            }
            else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (startDot === -1 ||
            end === -1 ||
            // We saw a non-dot character immediately before the dot
            preDotState === 0 ||
            // The (right-most) trimmed path component is exactly '..'
            (preDotState === 1 &&
                startDot === end - 1 &&
                startDot === startPart + 1)) {
            return '';
        }
        return path.slice(startDot, end);
    },
    format: _format.bind(null, '/'),
    parse(path) {
        validateString(path, 'path');
        const ret = { root: '', dir: '', base: '', ext: '', name: '' };
        if (path.length === 0) {
            return ret;
        }
        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;
        let start;
        if (isAbsolute) {
            ret.root = '/';
            start = 1;
        }
        else {
            start = 0;
        }
        let startDot = -1;
        let startPart = 0;
        let end = -1;
        let matchedSlash = true;
        let i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        let preDotState = 0;
        // Get non-dir info
        for (; i >= start; --i) {
            const code = path.charCodeAt(i);
            if (code === CHAR_FORWARD_SLASH) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === CHAR_DOT) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) {
                    startDot = i;
                }
                else if (preDotState !== 1) {
                    preDotState = 1;
                }
            }
            else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
            }
        }
        if (end !== -1) {
            const start = startPart === 0 && isAbsolute ? 1 : startPart;
            if (startDot === -1 ||
                // We saw a non-dot character immediately before the dot
                preDotState === 0 ||
                // The (right-most) trimmed path component is exactly '..'
                (preDotState === 1 &&
                    startDot === end - 1 &&
                    startDot === startPart + 1)) {
                ret.base = ret.name = path.slice(start, end);
            }
            else {
                ret.name = path.slice(start, startDot);
                ret.base = path.slice(start, end);
                ret.ext = path.slice(startDot, end);
            }
        }
        if (startPart > 0) {
            ret.dir = path.slice(0, startPart - 1);
        }
        else if (isAbsolute) {
            ret.dir = '/';
        }
        return ret;
    },
    sep: '/',
    delimiter: ':',
    win32: null,
    posix: null
};
posix.win32 = win32.win32 = win32;
posix.posix = win32.posix = posix;
const normalize = (platformIsWin32 ? win32.normalize : posix.normalize);
const resolve = (platformIsWin32 ? win32.resolve : posix.resolve);
const relative = (platformIsWin32 ? win32.relative : posix.relative);
const dirname = (platformIsWin32 ? win32.dirname : posix.dirname);
const basename = (platformIsWin32 ? win32.basename : posix.basename);
const extname = (platformIsWin32 ? win32.extname : posix.extname);
const sep = (platformIsWin32 ? win32.sep : posix.sep);


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/platform.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/platform.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LANGUAGE_DEFAULT: () => (/* binding */ LANGUAGE_DEFAULT),
/* harmony export */   OS: () => (/* binding */ OS),
/* harmony export */   globals: () => (/* binding */ globals),
/* harmony export */   isAndroid: () => (/* binding */ isAndroid),
/* harmony export */   isChrome: () => (/* binding */ isChrome),
/* harmony export */   isEdge: () => (/* binding */ isEdge),
/* harmony export */   isFirefox: () => (/* binding */ isFirefox),
/* harmony export */   isIOS: () => (/* binding */ isIOS),
/* harmony export */   isLinux: () => (/* binding */ isLinux),
/* harmony export */   isLittleEndian: () => (/* binding */ isLittleEndian),
/* harmony export */   isMacintosh: () => (/* binding */ isMacintosh),
/* harmony export */   isMobile: () => (/* binding */ isMobile),
/* harmony export */   isNative: () => (/* binding */ isNative),
/* harmony export */   isSafari: () => (/* binding */ isSafari),
/* harmony export */   isWeb: () => (/* binding */ isWeb),
/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker),
/* harmony export */   isWindows: () => (/* binding */ isWindows),
/* harmony export */   language: () => (/* binding */ language),
/* harmony export */   setTimeout0: () => (/* binding */ setTimeout0),
/* harmony export */   setTimeout0IsFaster: () => (/* binding */ setTimeout0IsFaster),
/* harmony export */   userAgent: () => (/* binding */ userAgent)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/monaco-editor/esm/vs/nls.js");
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
var _a;
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

const LANGUAGE_DEFAULT = 'en';
let _isWindows = false;
let _isMacintosh = false;
let _isLinux = false;
let _isLinuxSnap = false;
let _isNative = false;
let _isWeb = false;
let _isElectron = false;
let _isIOS = false;
let _isCI = false;
let _isMobile = false;
let _locale = undefined;
let _language = LANGUAGE_DEFAULT;
let _platformLocale = LANGUAGE_DEFAULT;
let _translationsConfigFile = undefined;
let _userAgent = undefined;
/**
 * @deprecated use `globalThis` instead
 */
const globals = (typeof self === 'object' ? self : typeof __webpack_require__.g === 'object' ? __webpack_require__.g : {});
let nodeProcess = undefined;
if (typeof globals.vscode !== 'undefined' && typeof globals.vscode.process !== 'undefined') {
    // Native environment (sandboxed)
    nodeProcess = globals.vscode.process;
}
else if (typeof process !== 'undefined') {
    // Native environment (non-sandboxed)
    nodeProcess = process;
}
const isElectronProcess = typeof ((_a = nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.versions) === null || _a === void 0 ? void 0 : _a.electron) === 'string';
const isElectronRenderer = isElectronProcess && (nodeProcess === null || nodeProcess === void 0 ? void 0 : nodeProcess.type) === 'renderer';
// Web environment
if (typeof navigator === 'object' && !isElectronRenderer) {
    _userAgent = navigator.userAgent;
    _isWindows = _userAgent.indexOf('Windows') >= 0;
    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;
    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;
    _isLinux = _userAgent.indexOf('Linux') >= 0;
    _isMobile = (_userAgent === null || _userAgent === void 0 ? void 0 : _userAgent.indexOf('Mobi')) >= 0;
    _isWeb = true;
    const configuredLocale = _nls_js__WEBPACK_IMPORTED_MODULE_0__.getConfiguredDefaultLocale(
    // This call _must_ be done in the file that calls `nls.getConfiguredDefaultLocale`
    // to ensure that the NLS AMD Loader plugin has been loaded and configured.
    // This is because the loader plugin decides what the default locale is based on
    // how it's able to resolve the strings.
    _nls_js__WEBPACK_IMPORTED_MODULE_0__.localize({ key: 'ensureLoaderPluginIsLoaded', comment: ['{Locked}'] }, '_'));
    _locale = configuredLocale || LANGUAGE_DEFAULT;
    _language = _locale;
    _platformLocale = navigator.language;
}
// Native environment
else if (typeof nodeProcess === 'object') {
    _isWindows = (nodeProcess.platform === 'win32');
    _isMacintosh = (nodeProcess.platform === 'darwin');
    _isLinux = (nodeProcess.platform === 'linux');
    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];
    _isElectron = isElectronProcess;
    _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];
    _locale = LANGUAGE_DEFAULT;
    _language = LANGUAGE_DEFAULT;
    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];
    if (rawNlsConfig) {
        try {
            const nlsConfig = JSON.parse(rawNlsConfig);
            const resolved = nlsConfig.availableLanguages['*'];
            _locale = nlsConfig.locale;
            _platformLocale = nlsConfig.osLocale;
            // VSCode's default language is 'en'
            _language = resolved ? resolved : LANGUAGE_DEFAULT;
            _translationsConfigFile = nlsConfig._translationsConfigFile;
        }
        catch (e) {
        }
    }
    _isNative = true;
}
// Unknown environment
else {
    console.error('Unable to resolve platform.');
}
let _platform = 0 /* Platform.Web */;
if (_isMacintosh) {
    _platform = 1 /* Platform.Mac */;
}
else if (_isWindows) {
    _platform = 3 /* Platform.Windows */;
}
else if (_isLinux) {
    _platform = 2 /* Platform.Linux */;
}
const isWindows = _isWindows;
const isMacintosh = _isMacintosh;
const isLinux = _isLinux;
const isNative = _isNative;
const isWeb = _isWeb;
const isWebWorker = (_isWeb && typeof globals.importScripts === 'function');
const isIOS = _isIOS;
const isMobile = _isMobile;
const userAgent = _userAgent;
/**
 * The language used for the user interface. The format of
 * the string is all lower case (e.g. zh-tw for Traditional
 * Chinese)
 */
const language = _language;
const setTimeout0IsFaster = (typeof globals.postMessage === 'function' && !globals.importScripts);
/**
 * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.
 *
 * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay
 * that browsers set when the nesting level is > 5.
 */
const setTimeout0 = (() => {
    if (setTimeout0IsFaster) {
        const pending = [];
        globals.addEventListener('message', (e) => {
            if (e.data && e.data.vscodeScheduleAsyncWork) {
                for (let i = 0, len = pending.length; i < len; i++) {
                    const candidate = pending[i];
                    if (candidate.id === e.data.vscodeScheduleAsyncWork) {
                        pending.splice(i, 1);
                        candidate.callback();
                        return;
                    }
                }
            }
        });
        let lastId = 0;
        return (callback) => {
            const myId = ++lastId;
            pending.push({
                id: myId,
                callback: callback
            });
            globals.postMessage({ vscodeScheduleAsyncWork: myId }, '*');
        };
    }
    return (callback) => setTimeout(callback);
})();
const OS = (_isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : (_isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */));
let _isLittleEndian = true;
let _isLittleEndianComputed = false;
function isLittleEndian() {
    if (!_isLittleEndianComputed) {
        _isLittleEndianComputed = true;
        const test = new Uint8Array(2);
        test[0] = 1;
        test[1] = 2;
        const view = new Uint16Array(test.buffer);
        _isLittleEndian = (view[0] === (2 << 8) + 1);
    }
    return _isLittleEndian;
}
const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);
const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);
const isSafari = !!(!isChrome && (userAgent && userAgent.indexOf('Safari') >= 0));
const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);
const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/process.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/process.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cwd: () => (/* binding */ cwd),
/* harmony export */   env: () => (/* binding */ env),
/* harmony export */   platform: () => (/* binding */ platform)
/* harmony export */ });
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform.js */ "./node_modules/monaco-editor/esm/vs/base/common/platform.js");
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

let safeProcess;
// Native sandbox environment
if (typeof _platform_js__WEBPACK_IMPORTED_MODULE_0__.globals.vscode !== 'undefined' && typeof _platform_js__WEBPACK_IMPORTED_MODULE_0__.globals.vscode.process !== 'undefined') {
    const sandboxProcess = _platform_js__WEBPACK_IMPORTED_MODULE_0__.globals.vscode.process;
    safeProcess = {
        get platform() { return sandboxProcess.platform; },
        get arch() { return sandboxProcess.arch; },
        get env() { return sandboxProcess.env; },
        cwd() { return sandboxProcess.cwd(); }
    };
}
// Native node.js environment
else if (typeof process !== 'undefined') {
    safeProcess = {
        get platform() { return process.platform; },
        get arch() { return process.arch; },
        get env() { return process.env; },
        cwd() { return process.env['VSCODE_CWD'] || process.cwd(); }
    };
}
// Web environment
else {
    safeProcess = {
        // Supported
        get platform() { return _platform_js__WEBPACK_IMPORTED_MODULE_0__.isWindows ? 'win32' : _platform_js__WEBPACK_IMPORTED_MODULE_0__.isMacintosh ? 'darwin' : 'linux'; },
        get arch() { return undefined; /* arch is undefined in web */ },
        // Unsupported
        get env() { return {}; },
        cwd() { return '/'; }
    };
}
/**
 * Provides safe access to the `cwd` property in node.js, sandboxed or web
 * environments.
 *
 * Note: in web, this property is hardcoded to be `/`.
 *
 * @skipMangle
 */
const cwd = safeProcess.cwd;
/**
 * Provides safe access to the `env` property in node.js, sandboxed or web
 * environments.
 *
 * Note: in web, this property is hardcoded to be `{}`.
 */
const env = safeProcess.env;
/**
 * Provides safe access to the `platform` property in node.js, sandboxed or web
 * environments.
 */
const platform = safeProcess.platform;


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js":
/*!********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StopWatch: () => (/* binding */ StopWatch)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const hasPerformanceNow = (globalThis.performance && typeof globalThis.performance.now === 'function');
class StopWatch {
    static create(highResolution) {
        return new StopWatch(highResolution);
    }
    constructor(highResolution) {
        this._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance.now.bind(globalThis.performance);
        this._startTime = this._now();
        this._stopTime = -1;
    }
    stop() {
        this._stopTime = this._now();
    }
    elapsed() {
        if (this._stopTime !== -1) {
            return this._stopTime - this._startTime;
        }
        return this._now() - this._startTime;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/strings.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/strings.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AmbiguousCharacters: () => (/* binding */ AmbiguousCharacters),
/* harmony export */   CodePointIterator: () => (/* binding */ CodePointIterator),
/* harmony export */   GraphemeIterator: () => (/* binding */ GraphemeIterator),
/* harmony export */   InvisibleCharacters: () => (/* binding */ InvisibleCharacters),
/* harmony export */   UNUSUAL_LINE_TERMINATORS: () => (/* binding */ UNUSUAL_LINE_TERMINATORS),
/* harmony export */   UTF8_BOM_CHARACTER: () => (/* binding */ UTF8_BOM_CHARACTER),
/* harmony export */   commonPrefixLength: () => (/* binding */ commonPrefixLength),
/* harmony export */   commonSuffixLength: () => (/* binding */ commonSuffixLength),
/* harmony export */   compare: () => (/* binding */ compare),
/* harmony export */   compareIgnoreCase: () => (/* binding */ compareIgnoreCase),
/* harmony export */   compareSubstring: () => (/* binding */ compareSubstring),
/* harmony export */   compareSubstringIgnoreCase: () => (/* binding */ compareSubstringIgnoreCase),
/* harmony export */   computeCodePoint: () => (/* binding */ computeCodePoint),
/* harmony export */   containsRTL: () => (/* binding */ containsRTL),
/* harmony export */   containsUnusualLineTerminators: () => (/* binding */ containsUnusualLineTerminators),
/* harmony export */   containsUppercaseCharacter: () => (/* binding */ containsUppercaseCharacter),
/* harmony export */   convertSimple2RegExpPattern: () => (/* binding */ convertSimple2RegExpPattern),
/* harmony export */   createRegExp: () => (/* binding */ createRegExp),
/* harmony export */   equalsIgnoreCase: () => (/* binding */ equalsIgnoreCase),
/* harmony export */   escape: () => (/* binding */ escape),
/* harmony export */   escapeRegExpCharacters: () => (/* binding */ escapeRegExpCharacters),
/* harmony export */   firstNonWhitespaceIndex: () => (/* binding */ firstNonWhitespaceIndex),
/* harmony export */   format: () => (/* binding */ format),
/* harmony export */   getCharContainingOffset: () => (/* binding */ getCharContainingOffset),
/* harmony export */   getLeadingWhitespace: () => (/* binding */ getLeadingWhitespace),
/* harmony export */   getLeftDeleteOffset: () => (/* binding */ getLeftDeleteOffset),
/* harmony export */   getNextCodePoint: () => (/* binding */ getNextCodePoint),
/* harmony export */   isAsciiDigit: () => (/* binding */ isAsciiDigit),
/* harmony export */   isBasicASCII: () => (/* binding */ isBasicASCII),
/* harmony export */   isEmojiImprecise: () => (/* binding */ isEmojiImprecise),
/* harmony export */   isFalsyOrWhitespace: () => (/* binding */ isFalsyOrWhitespace),
/* harmony export */   isFullWidthCharacter: () => (/* binding */ isFullWidthCharacter),
/* harmony export */   isHighSurrogate: () => (/* binding */ isHighSurrogate),
/* harmony export */   isLowSurrogate: () => (/* binding */ isLowSurrogate),
/* harmony export */   isLowerAsciiLetter: () => (/* binding */ isLowerAsciiLetter),
/* harmony export */   isUpperAsciiLetter: () => (/* binding */ isUpperAsciiLetter),
/* harmony export */   lastNonWhitespaceIndex: () => (/* binding */ lastNonWhitespaceIndex),
/* harmony export */   ltrim: () => (/* binding */ ltrim),
/* harmony export */   nextCharLength: () => (/* binding */ nextCharLength),
/* harmony export */   noBreakWhitespace: () => (/* binding */ noBreakWhitespace),
/* harmony export */   prevCharLength: () => (/* binding */ prevCharLength),
/* harmony export */   regExpLeadsToEndlessLoop: () => (/* binding */ regExpLeadsToEndlessLoop),
/* harmony export */   rtrim: () => (/* binding */ rtrim),
/* harmony export */   singleLetterHash: () => (/* binding */ singleLetterHash),
/* harmony export */   splitLines: () => (/* binding */ splitLines),
/* harmony export */   startsWithIgnoreCase: () => (/* binding */ startsWithIgnoreCase),
/* harmony export */   startsWithUTF8BOM: () => (/* binding */ startsWithUTF8BOM),
/* harmony export */   stripWildcards: () => (/* binding */ stripWildcards),
/* harmony export */   trim: () => (/* binding */ trim)
/* harmony export */ });
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache.js */ "./node_modules/monaco-editor/esm/vs/base/common/cache.js");
/* harmony import */ var _lazy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lazy.js */ "./node_modules/monaco-editor/esm/vs/base/common/lazy.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a;


function isFalsyOrWhitespace(str) {
    if (!str || typeof str !== 'string') {
        return true;
    }
    return str.trim().length === 0;
}
const _formatRegexp = /{(\d+)}/g;
/**
 * Helper to produce a string with a variable number of arguments. Insert variable segments
 * into the string using the {n} notation where N is the index of the argument following the string.
 * @param value string to which formatting is applied
 * @param args replacements for {n}-entries
 */
function format(value, ...args) {
    if (args.length === 0) {
        return value;
    }
    return value.replace(_formatRegexp, function (match, group) {
        const idx = parseInt(group, 10);
        return isNaN(idx) || idx < 0 || idx >= args.length ?
            match :
            args[idx];
    });
}
/**
 * Converts HTML characters inside the string to use entities instead. Makes the string safe from
 * being used e.g. in HTMLElement.innerHTML.
 */
function escape(html) {
    return html.replace(/[<>&]/g, function (match) {
        switch (match) {
            case '<': return '&lt;';
            case '>': return '&gt;';
            case '&': return '&amp;';
            default: return match;
        }
    });
}
/**
 * Escapes regular expression characters in a given string
 */
function escapeRegExpCharacters(value) {
    return value.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, '\\$&');
}
/**
 * Removes all occurrences of needle from the beginning and end of haystack.
 * @param haystack string to trim
 * @param needle the thing to trim (default is a blank)
 */
function trim(haystack, needle = ' ') {
    const trimmed = ltrim(haystack, needle);
    return rtrim(trimmed, needle);
}
/**
 * Removes all occurrences of needle from the beginning of haystack.
 * @param haystack string to trim
 * @param needle the thing to trim
 */
function ltrim(haystack, needle) {
    if (!haystack || !needle) {
        return haystack;
    }
    const needleLen = needle.length;
    if (needleLen === 0 || haystack.length === 0) {
        return haystack;
    }
    let offset = 0;
    while (haystack.indexOf(needle, offset) === offset) {
        offset = offset + needleLen;
    }
    return haystack.substring(offset);
}
/**
 * Removes all occurrences of needle from the end of haystack.
 * @param haystack string to trim
 * @param needle the thing to trim
 */
function rtrim(haystack, needle) {
    if (!haystack || !needle) {
        return haystack;
    }
    const needleLen = needle.length, haystackLen = haystack.length;
    if (needleLen === 0 || haystackLen === 0) {
        return haystack;
    }
    let offset = haystackLen, idx = -1;
    while (true) {
        idx = haystack.lastIndexOf(needle, offset - 1);
        if (idx === -1 || idx + needleLen !== offset) {
            break;
        }
        if (idx === 0) {
            return '';
        }
        offset = idx;
    }
    return haystack.substring(0, offset);
}
function convertSimple2RegExpPattern(pattern) {
    return pattern.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, '\\$&').replace(/[\*]/g, '.*');
}
function stripWildcards(pattern) {
    return pattern.replace(/\*/g, '');
}
function createRegExp(searchString, isRegex, options = {}) {
    if (!searchString) {
        throw new Error('Cannot create regex from empty string');
    }
    if (!isRegex) {
        searchString = escapeRegExpCharacters(searchString);
    }
    if (options.wholeWord) {
        if (!/\B/.test(searchString.charAt(0))) {
            searchString = '\\b' + searchString;
        }
        if (!/\B/.test(searchString.charAt(searchString.length - 1))) {
            searchString = searchString + '\\b';
        }
    }
    let modifiers = '';
    if (options.global) {
        modifiers += 'g';
    }
    if (!options.matchCase) {
        modifiers += 'i';
    }
    if (options.multiline) {
        modifiers += 'm';
    }
    if (options.unicode) {
        modifiers += 'u';
    }
    return new RegExp(searchString, modifiers);
}
function regExpLeadsToEndlessLoop(regexp) {
    // Exit early if it's one of these special cases which are meant to match
    // against an empty string
    if (regexp.source === '^' || regexp.source === '^$' || regexp.source === '$' || regexp.source === '^\\s*$') {
        return false;
    }
    // We check against an empty string. If the regular expression doesn't advance
    // (e.g. ends in an endless loop) it will match an empty string.
    const match = regexp.exec('');
    return !!(match && regexp.lastIndex === 0);
}
function splitLines(str) {
    return str.split(/\r\n|\r|\n/);
}
/**
 * Returns first index of the string that is not whitespace.
 * If string is empty or contains only whitespaces, returns -1
 */
function firstNonWhitespaceIndex(str) {
    for (let i = 0, len = str.length; i < len; i++) {
        const chCode = str.charCodeAt(i);
        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {
            return i;
        }
    }
    return -1;
}
/**
 * Returns the leading whitespace of the string.
 * If the string contains only whitespaces, returns entire string
 */
function getLeadingWhitespace(str, start = 0, end = str.length) {
    for (let i = start; i < end; i++) {
        const chCode = str.charCodeAt(i);
        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {
            return str.substring(start, i);
        }
    }
    return str.substring(start, end);
}
/**
 * Returns last index of the string that is not whitespace.
 * If string is empty or contains only whitespaces, returns -1
 */
function lastNonWhitespaceIndex(str, startIndex = str.length - 1) {
    for (let i = startIndex; i >= 0; i--) {
        const chCode = str.charCodeAt(i);
        if (chCode !== 32 /* CharCode.Space */ && chCode !== 9 /* CharCode.Tab */) {
            return i;
        }
    }
    return -1;
}
function compare(a, b) {
    if (a < b) {
        return -1;
    }
    else if (a > b) {
        return 1;
    }
    else {
        return 0;
    }
}
function compareSubstring(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {
    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {
        const codeA = a.charCodeAt(aStart);
        const codeB = b.charCodeAt(bStart);
        if (codeA < codeB) {
            return -1;
        }
        else if (codeA > codeB) {
            return 1;
        }
    }
    const aLen = aEnd - aStart;
    const bLen = bEnd - bStart;
    if (aLen < bLen) {
        return -1;
    }
    else if (aLen > bLen) {
        return 1;
    }
    return 0;
}
function compareIgnoreCase(a, b) {
    return compareSubstringIgnoreCase(a, b, 0, a.length, 0, b.length);
}
function compareSubstringIgnoreCase(a, b, aStart = 0, aEnd = a.length, bStart = 0, bEnd = b.length) {
    for (; aStart < aEnd && bStart < bEnd; aStart++, bStart++) {
        let codeA = a.charCodeAt(aStart);
        let codeB = b.charCodeAt(bStart);
        if (codeA === codeB) {
            // equal
            continue;
        }
        if (codeA >= 128 || codeB >= 128) {
            // not ASCII letters -> fallback to lower-casing strings
            return compareSubstring(a.toLowerCase(), b.toLowerCase(), aStart, aEnd, bStart, bEnd);
        }
        // mapper lower-case ascii letter onto upper-case varinats
        // [97-122] (lower ascii) --> [65-90] (upper ascii)
        if (isLowerAsciiLetter(codeA)) {
            codeA -= 32;
        }
        if (isLowerAsciiLetter(codeB)) {
            codeB -= 32;
        }
        // compare both code points
        const diff = codeA - codeB;
        if (diff === 0) {
            continue;
        }
        return diff;
    }
    const aLen = aEnd - aStart;
    const bLen = bEnd - bStart;
    if (aLen < bLen) {
        return -1;
    }
    else if (aLen > bLen) {
        return 1;
    }
    return 0;
}
function isAsciiDigit(code) {
    return code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */;
}
function isLowerAsciiLetter(code) {
    return code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */;
}
function isUpperAsciiLetter(code) {
    return code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */;
}
function equalsIgnoreCase(a, b) {
    return a.length === b.length && compareSubstringIgnoreCase(a, b) === 0;
}
function startsWithIgnoreCase(str, candidate) {
    const candidateLength = candidate.length;
    if (candidate.length > str.length) {
        return false;
    }
    return compareSubstringIgnoreCase(str, candidate, 0, candidateLength) === 0;
}
/**
 * @returns the length of the common prefix of the two strings.
 */
function commonPrefixLength(a, b) {
    const len = Math.min(a.length, b.length);
    let i;
    for (i = 0; i < len; i++) {
        if (a.charCodeAt(i) !== b.charCodeAt(i)) {
            return i;
        }
    }
    return len;
}
/**
 * @returns the length of the common suffix of the two strings.
 */
function commonSuffixLength(a, b) {
    const len = Math.min(a.length, b.length);
    let i;
    const aLastIndex = a.length - 1;
    const bLastIndex = b.length - 1;
    for (i = 0; i < len; i++) {
        if (a.charCodeAt(aLastIndex - i) !== b.charCodeAt(bLastIndex - i)) {
            return i;
        }
    }
    return len;
}
/**
 * See http://en.wikipedia.org/wiki/Surrogate_pair
 */
function isHighSurrogate(charCode) {
    return (0xD800 <= charCode && charCode <= 0xDBFF);
}
/**
 * See http://en.wikipedia.org/wiki/Surrogate_pair
 */
function isLowSurrogate(charCode) {
    return (0xDC00 <= charCode && charCode <= 0xDFFF);
}
/**
 * See http://en.wikipedia.org/wiki/Surrogate_pair
 */
function computeCodePoint(highSurrogate, lowSurrogate) {
    return ((highSurrogate - 0xD800) << 10) + (lowSurrogate - 0xDC00) + 0x10000;
}
/**
 * get the code point that begins at offset `offset`
 */
function getNextCodePoint(str, len, offset) {
    const charCode = str.charCodeAt(offset);
    if (isHighSurrogate(charCode) && offset + 1 < len) {
        const nextCharCode = str.charCodeAt(offset + 1);
        if (isLowSurrogate(nextCharCode)) {
            return computeCodePoint(charCode, nextCharCode);
        }
    }
    return charCode;
}
/**
 * get the code point that ends right before offset `offset`
 */
function getPrevCodePoint(str, offset) {
    const charCode = str.charCodeAt(offset - 1);
    if (isLowSurrogate(charCode) && offset > 1) {
        const prevCharCode = str.charCodeAt(offset - 2);
        if (isHighSurrogate(prevCharCode)) {
            return computeCodePoint(prevCharCode, charCode);
        }
    }
    return charCode;
}
class CodePointIterator {
    get offset() {
        return this._offset;
    }
    constructor(str, offset = 0) {
        this._str = str;
        this._len = str.length;
        this._offset = offset;
    }
    setOffset(offset) {
        this._offset = offset;
    }
    prevCodePoint() {
        const codePoint = getPrevCodePoint(this._str, this._offset);
        this._offset -= (codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);
        return codePoint;
    }
    nextCodePoint() {
        const codePoint = getNextCodePoint(this._str, this._len, this._offset);
        this._offset += (codePoint >= 65536 /* Constants.UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);
        return codePoint;
    }
    eol() {
        return (this._offset >= this._len);
    }
}
class GraphemeIterator {
    get offset() {
        return this._iterator.offset;
    }
    constructor(str, offset = 0) {
        this._iterator = new CodePointIterator(str, offset);
    }
    nextGraphemeLength() {
        const graphemeBreakTree = GraphemeBreakTree.getInstance();
        const iterator = this._iterator;
        const initialOffset = iterator.offset;
        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());
        while (!iterator.eol()) {
            const offset = iterator.offset;
            const nextGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.nextCodePoint());
            if (breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {
                // move iterator back
                iterator.setOffset(offset);
                break;
            }
            graphemeBreakType = nextGraphemeBreakType;
        }
        return (iterator.offset - initialOffset);
    }
    prevGraphemeLength() {
        const graphemeBreakTree = GraphemeBreakTree.getInstance();
        const iterator = this._iterator;
        const initialOffset = iterator.offset;
        let graphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());
        while (iterator.offset > 0) {
            const offset = iterator.offset;
            const prevGraphemeBreakType = graphemeBreakTree.getGraphemeBreakType(iterator.prevCodePoint());
            if (breakBetweenGraphemeBreakType(prevGraphemeBreakType, graphemeBreakType)) {
                // move iterator back
                iterator.setOffset(offset);
                break;
            }
            graphemeBreakType = prevGraphemeBreakType;
        }
        return (initialOffset - iterator.offset);
    }
    eol() {
        return this._iterator.eol();
    }
}
function nextCharLength(str, initialOffset) {
    const iterator = new GraphemeIterator(str, initialOffset);
    return iterator.nextGraphemeLength();
}
function prevCharLength(str, initialOffset) {
    const iterator = new GraphemeIterator(str, initialOffset);
    return iterator.prevGraphemeLength();
}
function getCharContainingOffset(str, offset) {
    if (offset > 0 && isLowSurrogate(str.charCodeAt(offset))) {
        offset--;
    }
    const endOffset = offset + nextCharLength(str, offset);
    const startOffset = endOffset - prevCharLength(str, endOffset);
    return [startOffset, endOffset];
}
let CONTAINS_RTL = undefined;
function makeContainsRtl() {
    // Generated using https://github.com/alexdima/unicode-utils/blob/main/rtl-test.js
    return /(?:[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u0710\u0712-\u072F\u074D-\u07A5\u07B1-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u0858\u085E-\u088E\u08A0-\u08C9\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFD3D\uFD50-\uFDC7\uFDF0-\uFDFC\uFE70-\uFEFC]|\uD802[\uDC00-\uDD1B\uDD20-\uDE00\uDE10-\uDE35\uDE40-\uDEE4\uDEEB-\uDF35\uDF40-\uDFFF]|\uD803[\uDC00-\uDD23\uDE80-\uDEA9\uDEAD-\uDF45\uDF51-\uDF81\uDF86-\uDFF6]|\uD83A[\uDC00-\uDCCF\uDD00-\uDD43\uDD4B-\uDFFF]|\uD83B[\uDC00-\uDEBB])/;
}
/**
 * Returns true if `str` contains any Unicode character that is classified as "R" or "AL".
 */
function containsRTL(str) {
    if (!CONTAINS_RTL) {
        CONTAINS_RTL = makeContainsRtl();
    }
    return CONTAINS_RTL.test(str);
}
const IS_BASIC_ASCII = /^[\t\n\r\x20-\x7E]*$/;
/**
 * Returns true if `str` contains only basic ASCII characters in the range 32 - 126 (including 32 and 126) or \n, \r, \t
 */
function isBasicASCII(str) {
    return IS_BASIC_ASCII.test(str);
}
const UNUSUAL_LINE_TERMINATORS = /[\u2028\u2029]/; // LINE SEPARATOR (LS) or PARAGRAPH SEPARATOR (PS)
/**
 * Returns true if `str` contains unusual line terminators, like LS or PS
 */
function containsUnusualLineTerminators(str) {
    return UNUSUAL_LINE_TERMINATORS.test(str);
}
function isFullWidthCharacter(charCode) {
    // Do a cheap trick to better support wrapping of wide characters, treat them as 2 columns
    // http://jrgraphix.net/research/unicode_blocks.php
    //          2E80 - 2EFF   CJK Radicals Supplement
    //          2F00 - 2FDF   Kangxi Radicals
    //          2FF0 - 2FFF   Ideographic Description Characters
    //          3000 - 303F   CJK Symbols and Punctuation
    //          3040 - 309F   Hiragana
    //          30A0 - 30FF   Katakana
    //          3100 - 312F   Bopomofo
    //          3130 - 318F   Hangul Compatibility Jamo
    //          3190 - 319F   Kanbun
    //          31A0 - 31BF   Bopomofo Extended
    //          31F0 - 31FF   Katakana Phonetic Extensions
    //          3200 - 32FF   Enclosed CJK Letters and Months
    //          3300 - 33FF   CJK Compatibility
    //          3400 - 4DBF   CJK Unified Ideographs Extension A
    //          4DC0 - 4DFF   Yijing Hexagram Symbols
    //          4E00 - 9FFF   CJK Unified Ideographs
    //          A000 - A48F   Yi Syllables
    //          A490 - A4CF   Yi Radicals
    //          AC00 - D7AF   Hangul Syllables
    // [IGNORE] D800 - DB7F   High Surrogates
    // [IGNORE] DB80 - DBFF   High Private Use Surrogates
    // [IGNORE] DC00 - DFFF   Low Surrogates
    // [IGNORE] E000 - F8FF   Private Use Area
    //          F900 - FAFF   CJK Compatibility Ideographs
    // [IGNORE] FB00 - FB4F   Alphabetic Presentation Forms
    // [IGNORE] FB50 - FDFF   Arabic Presentation Forms-A
    // [IGNORE] FE00 - FE0F   Variation Selectors
    // [IGNORE] FE20 - FE2F   Combining Half Marks
    // [IGNORE] FE30 - FE4F   CJK Compatibility Forms
    // [IGNORE] FE50 - FE6F   Small Form Variants
    // [IGNORE] FE70 - FEFF   Arabic Presentation Forms-B
    //          FF00 - FFEF   Halfwidth and Fullwidth Forms
    //               [https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms]
    //               of which FF01 - FF5E fullwidth ASCII of 21 to 7E
    // [IGNORE]    and FF65 - FFDC halfwidth of Katakana and Hangul
    // [IGNORE] FFF0 - FFFF   Specials
    return ((charCode >= 0x2E80 && charCode <= 0xD7AF)
        || (charCode >= 0xF900 && charCode <= 0xFAFF)
        || (charCode >= 0xFF01 && charCode <= 0xFF5E));
}
/**
 * A fast function (therefore imprecise) to check if code points are emojis.
 * Generated using https://github.com/alexdima/unicode-utils/blob/main/emoji-test.js
 */
function isEmojiImprecise(x) {
    return ((x >= 0x1F1E6 && x <= 0x1F1FF) || (x === 8986) || (x === 8987) || (x === 9200)
        || (x === 9203) || (x >= 9728 && x <= 10175) || (x === 11088) || (x === 11093)
        || (x >= 127744 && x <= 128591) || (x >= 128640 && x <= 128764)
        || (x >= 128992 && x <= 129008) || (x >= 129280 && x <= 129535)
        || (x >= 129648 && x <= 129782));
}
// -- UTF-8 BOM
const UTF8_BOM_CHARACTER = String.fromCharCode(65279 /* CharCode.UTF8_BOM */);
function startsWithUTF8BOM(str) {
    return !!(str && str.length > 0 && str.charCodeAt(0) === 65279 /* CharCode.UTF8_BOM */);
}
function containsUppercaseCharacter(target, ignoreEscapedChars = false) {
    if (!target) {
        return false;
    }
    if (ignoreEscapedChars) {
        target = target.replace(/\\./g, '');
    }
    return target.toLowerCase() !== target;
}
/**
 * Produces 'a'-'z', followed by 'A'-'Z'... followed by 'a'-'z', etc.
 */
function singleLetterHash(n) {
    const LETTERS_CNT = (90 /* CharCode.Z */ - 65 /* CharCode.A */ + 1);
    n = n % (2 * LETTERS_CNT);
    if (n < LETTERS_CNT) {
        return String.fromCharCode(97 /* CharCode.a */ + n);
    }
    return String.fromCharCode(65 /* CharCode.A */ + n - LETTERS_CNT);
}
function breakBetweenGraphemeBreakType(breakTypeA, breakTypeB) {
    // http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules
    // !!! Let's make the common case a bit faster
    if (breakTypeA === 0 /* GraphemeBreakType.Other */) {
        // see https://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakTest-13.0.0d10.html#table
        return (breakTypeB !== 5 /* GraphemeBreakType.Extend */ && breakTypeB !== 7 /* GraphemeBreakType.SpacingMark */);
    }
    // Do not break between a CR and LF. Otherwise, break before and after controls.
    // GB3                                        CR × LF
    // GB4                       (Control | CR | LF) ÷
    // GB5                                           ÷ (Control | CR | LF)
    if (breakTypeA === 2 /* GraphemeBreakType.CR */) {
        if (breakTypeB === 3 /* GraphemeBreakType.LF */) {
            return false; // GB3
        }
    }
    if (breakTypeA === 4 /* GraphemeBreakType.Control */ || breakTypeA === 2 /* GraphemeBreakType.CR */ || breakTypeA === 3 /* GraphemeBreakType.LF */) {
        return true; // GB4
    }
    if (breakTypeB === 4 /* GraphemeBreakType.Control */ || breakTypeB === 2 /* GraphemeBreakType.CR */ || breakTypeB === 3 /* GraphemeBreakType.LF */) {
        return true; // GB5
    }
    // Do not break Hangul syllable sequences.
    // GB6                                         L × (L | V | LV | LVT)
    // GB7                                  (LV | V) × (V | T)
    // GB8                                 (LVT | T) × T
    if (breakTypeA === 8 /* GraphemeBreakType.L */) {
        if (breakTypeB === 8 /* GraphemeBreakType.L */ || breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 11 /* GraphemeBreakType.LV */ || breakTypeB === 12 /* GraphemeBreakType.LVT */) {
            return false; // GB6
        }
    }
    if (breakTypeA === 11 /* GraphemeBreakType.LV */ || breakTypeA === 9 /* GraphemeBreakType.V */) {
        if (breakTypeB === 9 /* GraphemeBreakType.V */ || breakTypeB === 10 /* GraphemeBreakType.T */) {
            return false; // GB7
        }
    }
    if (breakTypeA === 12 /* GraphemeBreakType.LVT */ || breakTypeA === 10 /* GraphemeBreakType.T */) {
        if (breakTypeB === 10 /* GraphemeBreakType.T */) {
            return false; // GB8
        }
    }
    // Do not break before extending characters or ZWJ.
    // GB9                                           × (Extend | ZWJ)
    if (breakTypeB === 5 /* GraphemeBreakType.Extend */ || breakTypeB === 13 /* GraphemeBreakType.ZWJ */) {
        return false; // GB9
    }
    // The GB9a and GB9b rules only apply to extended grapheme clusters:
    // Do not break before SpacingMarks, or after Prepend characters.
    // GB9a                                          × SpacingMark
    // GB9b                                  Prepend ×
    if (breakTypeB === 7 /* GraphemeBreakType.SpacingMark */) {
        return false; // GB9a
    }
    if (breakTypeA === 1 /* GraphemeBreakType.Prepend */) {
        return false; // GB9b
    }
    // Do not break within emoji modifier sequences or emoji zwj sequences.
    // GB11    \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
    if (breakTypeA === 13 /* GraphemeBreakType.ZWJ */ && breakTypeB === 14 /* GraphemeBreakType.Extended_Pictographic */) {
        // Note: we are not implementing the rule entirely here to avoid introducing states
        return false; // GB11
    }
    // GB12                          sot (RI RI)* RI × RI
    // GB13                        [^RI] (RI RI)* RI × RI
    if (breakTypeA === 6 /* GraphemeBreakType.Regional_Indicator */ && breakTypeB === 6 /* GraphemeBreakType.Regional_Indicator */) {
        // Note: we are not implementing the rule entirely here to avoid introducing states
        return false; // GB12 & GB13
    }
    // GB999                                     Any ÷ Any
    return true;
}
class GraphemeBreakTree {
    static getInstance() {
        if (!GraphemeBreakTree._INSTANCE) {
            GraphemeBreakTree._INSTANCE = new GraphemeBreakTree();
        }
        return GraphemeBreakTree._INSTANCE;
    }
    constructor() {
        this._data = getGraphemeBreakRawData();
    }
    getGraphemeBreakType(codePoint) {
        // !!! Let's make 7bit ASCII a bit faster: 0..31
        if (codePoint < 32) {
            if (codePoint === 10 /* CharCode.LineFeed */) {
                return 3 /* GraphemeBreakType.LF */;
            }
            if (codePoint === 13 /* CharCode.CarriageReturn */) {
                return 2 /* GraphemeBreakType.CR */;
            }
            return 4 /* GraphemeBreakType.Control */;
        }
        // !!! Let's make 7bit ASCII a bit faster: 32..126
        if (codePoint < 127) {
            return 0 /* GraphemeBreakType.Other */;
        }
        const data = this._data;
        const nodeCount = data.length / 3;
        let nodeIndex = 1;
        while (nodeIndex <= nodeCount) {
            if (codePoint < data[3 * nodeIndex]) {
                // go left
                nodeIndex = 2 * nodeIndex;
            }
            else if (codePoint > data[3 * nodeIndex + 1]) {
                // go right
                nodeIndex = 2 * nodeIndex + 1;
            }
            else {
                // hit
                return data[3 * nodeIndex + 2];
            }
        }
        return 0 /* GraphemeBreakType.Other */;
    }
}
GraphemeBreakTree._INSTANCE = null;
function getGraphemeBreakRawData() {
    // generated using https://github.com/alexdima/unicode-utils/blob/main/grapheme-break.js
    return JSON.parse('[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]');
}
//#endregion
/**
 * Computes the offset after performing a left delete on the given string,
 * while considering unicode grapheme/emoji rules.
*/
function getLeftDeleteOffset(offset, str) {
    if (offset === 0) {
        return 0;
    }
    // Try to delete emoji part.
    const emojiOffset = getOffsetBeforeLastEmojiComponent(offset, str);
    if (emojiOffset !== undefined) {
        return emojiOffset;
    }
    // Otherwise, just skip a single code point.
    const iterator = new CodePointIterator(str, offset);
    iterator.prevCodePoint();
    return iterator.offset;
}
function getOffsetBeforeLastEmojiComponent(initialOffset, str) {
    // See https://www.unicode.org/reports/tr51/tr51-14.html#EBNF_and_Regex for the
    // structure of emojis.
    const iterator = new CodePointIterator(str, initialOffset);
    let codePoint = iterator.prevCodePoint();
    // Skip modifiers
    while ((isEmojiModifier(codePoint) || codePoint === 65039 /* CodePoint.emojiVariantSelector */ || codePoint === 8419 /* CodePoint.enclosingKeyCap */)) {
        if (iterator.offset === 0) {
            // Cannot skip modifier, no preceding emoji base.
            return undefined;
        }
        codePoint = iterator.prevCodePoint();
    }
    // Expect base emoji
    if (!isEmojiImprecise(codePoint)) {
        // Unexpected code point, not a valid emoji.
        return undefined;
    }
    let resultOffset = iterator.offset;
    if (resultOffset > 0) {
        // Skip optional ZWJ code points that combine multiple emojis.
        // In theory, we should check if that ZWJ actually combines multiple emojis
        // to prevent deleting ZWJs in situations we didn't account for.
        const optionalZwjCodePoint = iterator.prevCodePoint();
        if (optionalZwjCodePoint === 8205 /* CodePoint.zwj */) {
            resultOffset = iterator.offset;
        }
    }
    return resultOffset;
}
function isEmojiModifier(codePoint) {
    return 0x1F3FB <= codePoint && codePoint <= 0x1F3FF;
}
const noBreakWhitespace = '\xa0';
class AmbiguousCharacters {
    static getInstance(locales) {
        return _a.cache.get(Array.from(locales));
    }
    static getLocales() {
        return _a._locales.value;
    }
    constructor(confusableDictionary) {
        this.confusableDictionary = confusableDictionary;
    }
    isAmbiguous(codePoint) {
        return this.confusableDictionary.has(codePoint);
    }
    /**
     * Returns the non basic ASCII code point that the given code point can be confused,
     * or undefined if such code point does note exist.
     */
    getPrimaryConfusable(codePoint) {
        return this.confusableDictionary.get(codePoint);
    }
    getConfusableCodePoints() {
        return new Set(this.confusableDictionary.keys());
    }
}
_a = AmbiguousCharacters;
AmbiguousCharacters.ambiguousCharacterData = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => {
    // Generated using https://github.com/hediet/vscode-unicode-data
    // Stored as key1, value1, key2, value2, ...
    return JSON.parse('{\"_common\":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],\"_default\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"cs\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"de\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"es\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"fr\":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"it\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"ja\":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],\"ko\":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"pl\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"pt-BR\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"qps-ploc\":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"ru\":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"tr\":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],\"zh-hans\":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],\"zh-hant\":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}');
});
AmbiguousCharacters.cache = new _cache_js__WEBPACK_IMPORTED_MODULE_0__.LRUCachedFunction((locales) => {
    function arrayToMap(arr) {
        const result = new Map();
        for (let i = 0; i < arr.length; i += 2) {
            result.set(arr[i], arr[i + 1]);
        }
        return result;
    }
    function mergeMaps(map1, map2) {
        const result = new Map(map1);
        for (const [key, value] of map2) {
            result.set(key, value);
        }
        return result;
    }
    function intersectMaps(map1, map2) {
        if (!map1) {
            return map2;
        }
        const result = new Map();
        for (const [key, value] of map1) {
            if (map2.has(key)) {
                result.set(key, value);
            }
        }
        return result;
    }
    const data = _a.ambiguousCharacterData.value;
    let filteredLocales = locales.filter((l) => !l.startsWith('_') && l in data);
    if (filteredLocales.length === 0) {
        filteredLocales = ['_default'];
    }
    let languageSpecificMap = undefined;
    for (const locale of filteredLocales) {
        const map = arrayToMap(data[locale]);
        languageSpecificMap = intersectMaps(languageSpecificMap, map);
    }
    const commonMap = arrayToMap(data['_common']);
    const map = mergeMaps(commonMap, languageSpecificMap);
    return new _a(map);
});
AmbiguousCharacters._locales = new _lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(() => Object.keys(_a.ambiguousCharacterData.value).filter((k) => !k.startsWith('_')));
class InvisibleCharacters {
    static getRawData() {
        // Generated using https://github.com/hediet/vscode-unicode-data
        return JSON.parse('[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]');
    }
    static getData() {
        if (!this._data) {
            this._data = new Set(InvisibleCharacters.getRawData());
        }
        return this._data;
    }
    static isInvisibleCharacter(codePoint) {
        return InvisibleCharacters.getData().has(codePoint);
    }
    static get codePoints() {
        return InvisibleCharacters.getData();
    }
}
InvisibleCharacters._data = undefined;


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assertIsDefined: () => (/* binding */ assertIsDefined),
/* harmony export */   assertType: () => (/* binding */ assertType),
/* harmony export */   isBoolean: () => (/* binding */ isBoolean),
/* harmony export */   isDefined: () => (/* binding */ isDefined),
/* harmony export */   isFunction: () => (/* binding */ isFunction),
/* harmony export */   isIterable: () => (/* binding */ isIterable),
/* harmony export */   isNumber: () => (/* binding */ isNumber),
/* harmony export */   isObject: () => (/* binding */ isObject),
/* harmony export */   isString: () => (/* binding */ isString),
/* harmony export */   isTypedArray: () => (/* binding */ isTypedArray),
/* harmony export */   isUndefined: () => (/* binding */ isUndefined),
/* harmony export */   isUndefinedOrNull: () => (/* binding */ isUndefinedOrNull),
/* harmony export */   validateConstraint: () => (/* binding */ validateConstraint),
/* harmony export */   validateConstraints: () => (/* binding */ validateConstraints)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * @returns whether the provided parameter is a JavaScript String or not.
 */
function isString(str) {
    return (typeof str === 'string');
}
/**
 * @returns whether the provided parameter is of type `object` but **not**
 *	`null`, an `array`, a `regexp`, nor a `date`.
 */
function isObject(obj) {
    // The method can't do a type cast since there are type (like strings) which
    // are subclasses of any put not positvely matched by the function. Hence type
    // narrowing results in wrong results.
    return typeof obj === 'object'
        && obj !== null
        && !Array.isArray(obj)
        && !(obj instanceof RegExp)
        && !(obj instanceof Date);
}
/**
 * @returns whether the provided parameter is of type `Buffer` or Uint8Array dervived type
 */
function isTypedArray(obj) {
    const TypedArray = Object.getPrototypeOf(Uint8Array);
    return typeof obj === 'object'
        && obj instanceof TypedArray;
}
/**
 * In **contrast** to just checking `typeof` this will return `false` for `NaN`.
 * @returns whether the provided parameter is a JavaScript Number or not.
 */
function isNumber(obj) {
    return (typeof obj === 'number' && !isNaN(obj));
}
/**
 * @returns whether the provided parameter is an Iterable, casting to the given generic
 */
function isIterable(obj) {
    return !!obj && typeof obj[Symbol.iterator] === 'function';
}
/**
 * @returns whether the provided parameter is a JavaScript Boolean or not.
 */
function isBoolean(obj) {
    return (obj === true || obj === false);
}
/**
 * @returns whether the provided parameter is undefined.
 */
function isUndefined(obj) {
    return (typeof obj === 'undefined');
}
/**
 * @returns whether the provided parameter is defined.
 */
function isDefined(arg) {
    return !isUndefinedOrNull(arg);
}
/**
 * @returns whether the provided parameter is undefined or null.
 */
function isUndefinedOrNull(obj) {
    return (isUndefined(obj) || obj === null);
}
function assertType(condition, type) {
    if (!condition) {
        throw new Error(type ? `Unexpected type, expected '${type}'` : 'Unexpected type');
    }
}
/**
 * Asserts that the argument passed in is neither undefined nor null.
 */
function assertIsDefined(arg) {
    if (isUndefinedOrNull(arg)) {
        throw new Error('Assertion Failed: argument is undefined or null');
    }
    return arg;
}
/**
 * @returns whether the provided parameter is a JavaScript Function or not.
 */
function isFunction(obj) {
    return (typeof obj === 'function');
}
function validateConstraints(args, constraints) {
    const len = Math.min(args.length, constraints.length);
    for (let i = 0; i < len; i++) {
        validateConstraint(args[i], constraints[i]);
    }
}
function validateConstraint(arg, constraint) {
    if (isString(constraint)) {
        if (typeof arg !== constraint) {
            throw new Error(`argument does not match constraint: typeof ${constraint}`);
        }
    }
    else if (isFunction(constraint)) {
        try {
            if (arg instanceof constraint) {
                return;
            }
        }
        catch (_a) {
            // ignore
        }
        if (!isUndefinedOrNull(arg) && arg.constructor === constraint) {
            return;
        }
        if (constraint.length === 1 && constraint.call(undefined, arg) === true) {
            return;
        }
        throw new Error(`argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true`);
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uint.js":
/*!***************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uint.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toUint32: () => (/* binding */ toUint32),
/* harmony export */   toUint8: () => (/* binding */ toUint8)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
function toUint8(v) {
    if (v < 0) {
        return 0;
    }
    if (v > 255 /* Constants.MAX_UINT_8 */) {
        return 255 /* Constants.MAX_UINT_8 */;
    }
    return v | 0;
}
function toUint32(v) {
    if (v < 0) {
        return 0;
    }
    if (v > 4294967295 /* Constants.MAX_UINT_32 */) {
        return 4294967295 /* Constants.MAX_UINT_32 */;
    }
    return v | 0;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/uri.js":
/*!**************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/uri.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   URI: () => (/* binding */ URI),
/* harmony export */   uriToFsPath: () => (/* binding */ uriToFsPath)
/* harmony export */ });
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path.js */ "./node_modules/monaco-editor/esm/vs/base/common/path.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform.js */ "./node_modules/monaco-editor/esm/vs/base/common/platform.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const _schemePattern = /^\w[\w\d+.-]*$/;
const _singleSlashStart = /^\//;
const _doubleSlashStart = /^\/\//;
function _validateUri(ret, _strict) {
    // scheme, must be set
    if (!ret.scheme && _strict) {
        throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${ret.authority}", path: "${ret.path}", query: "${ret.query}", fragment: "${ret.fragment}"}`);
    }
    // scheme, https://tools.ietf.org/html/rfc3986#section-3.1
    // ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
    if (ret.scheme && !_schemePattern.test(ret.scheme)) {
        throw new Error('[UriError]: Scheme contains illegal characters.');
    }
    // path, http://tools.ietf.org/html/rfc3986#section-3.3
    // If a URI contains an authority component, then the path component
    // must either be empty or begin with a slash ("/") character.  If a URI
    // does not contain an authority component, then the path cannot begin
    // with two slash characters ("//").
    if (ret.path) {
        if (ret.authority) {
            if (!_singleSlashStart.test(ret.path)) {
                throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
            }
        }
        else {
            if (_doubleSlashStart.test(ret.path)) {
                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
            }
        }
    }
}
// for a while we allowed uris *without* schemes and this is the migration
// for them, e.g. an uri without scheme and without strict-mode warns and falls
// back to the file-scheme. that should cause the least carnage and still be a
// clear warning
function _schemeFix(scheme, _strict) {
    if (!scheme && !_strict) {
        return 'file';
    }
    return scheme;
}
// implements a bit of https://tools.ietf.org/html/rfc3986#section-5
function _referenceResolution(scheme, path) {
    // the slash-character is our 'default base' as we don't
    // support constructing URIs relative to other URIs. This
    // also means that we alter and potentially break paths.
    // see https://tools.ietf.org/html/rfc3986#section-5.1.4
    switch (scheme) {
        case 'https':
        case 'http':
        case 'file':
            if (!path) {
                path = _slash;
            }
            else if (path[0] !== _slash) {
                path = _slash + path;
            }
            break;
    }
    return path;
}
const _empty = '';
const _slash = '/';
const _regexp = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
/**
 * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.
 * This class is a simple parser which creates the basic component parts
 * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation
 * and encoding.
 *
 * ```txt
 *       foo://example.com:8042/over/there?name=ferret#nose
 *       \_/   \______________/\_________/ \_________/ \__/
 *        |           |            |            |        |
 *     scheme     authority       path        query   fragment
 *        |   _____________________|__
 *       / \ /                        \
 *       urn:example:animal:ferret:nose
 * ```
 */
class URI {
    static isUri(thing) {
        if (thing instanceof URI) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return typeof thing.authority === 'string'
            && typeof thing.fragment === 'string'
            && typeof thing.path === 'string'
            && typeof thing.query === 'string'
            && typeof thing.scheme === 'string'
            && typeof thing.fsPath === 'string'
            && typeof thing.with === 'function'
            && typeof thing.toString === 'function';
    }
    /**
     * @internal
     */
    constructor(schemeOrData, authority, path, query, fragment, _strict = false) {
        if (typeof schemeOrData === 'object') {
            this.scheme = schemeOrData.scheme || _empty;
            this.authority = schemeOrData.authority || _empty;
            this.path = schemeOrData.path || _empty;
            this.query = schemeOrData.query || _empty;
            this.fragment = schemeOrData.fragment || _empty;
            // no validation because it's this URI
            // that creates uri components.
            // _validateUri(this);
        }
        else {
            this.scheme = _schemeFix(schemeOrData, _strict);
            this.authority = authority || _empty;
            this.path = _referenceResolution(this.scheme, path || _empty);
            this.query = query || _empty;
            this.fragment = fragment || _empty;
            _validateUri(this, _strict);
        }
    }
    // ---- filesystem path -----------------------
    /**
     * Returns a string representing the corresponding file system path of this URI.
     * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the
     * platform specific path separator.
     *
     * * Will *not* validate the path for invalid characters and semantics.
     * * Will *not* look at the scheme of this URI.
     * * The result shall *not* be used for display purposes but for accessing a file on disk.
     *
     *
     * The *difference* to `URI#path` is the use of the platform specific separator and the handling
     * of UNC paths. See the below sample of a file-uri with an authority (UNC path).
     *
     * ```ts
        const u = URI.parse('file://server/c$/folder/file.txt')
        u.authority === 'server'
        u.path === '/shares/c$/file.txt'
        u.fsPath === '\\server\c$\folder\file.txt'
    ```
     *
     * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,
     * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working
     * with URIs that represent files on disk (`file` scheme).
     */
    get fsPath() {
        // if (this.scheme !== 'file') {
        // 	console.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);
        // }
        return uriToFsPath(this, false);
    }
    // ---- modify to new -------------------------
    with(change) {
        if (!change) {
            return this;
        }
        let { scheme, authority, path, query, fragment } = change;
        if (scheme === undefined) {
            scheme = this.scheme;
        }
        else if (scheme === null) {
            scheme = _empty;
        }
        if (authority === undefined) {
            authority = this.authority;
        }
        else if (authority === null) {
            authority = _empty;
        }
        if (path === undefined) {
            path = this.path;
        }
        else if (path === null) {
            path = _empty;
        }
        if (query === undefined) {
            query = this.query;
        }
        else if (query === null) {
            query = _empty;
        }
        if (fragment === undefined) {
            fragment = this.fragment;
        }
        else if (fragment === null) {
            fragment = _empty;
        }
        if (scheme === this.scheme
            && authority === this.authority
            && path === this.path
            && query === this.query
            && fragment === this.fragment) {
            return this;
        }
        return new Uri(scheme, authority, path, query, fragment);
    }
    // ---- parse & validate ------------------------
    /**
     * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,
     * `file:///usr/home`, or `scheme:with/path`.
     *
     * @param value A string which represents an URI (see `URI#toString`).
     */
    static parse(value, _strict = false) {
        const match = _regexp.exec(value);
        if (!match) {
            return new Uri(_empty, _empty, _empty, _empty, _empty);
        }
        return new Uri(match[2] || _empty, percentDecode(match[4] || _empty), percentDecode(match[5] || _empty), percentDecode(match[7] || _empty), percentDecode(match[9] || _empty), _strict);
    }
    /**
     * Creates a new URI from a file system path, e.g. `c:\my\files`,
     * `/usr/home`, or `\\server\share\some\path`.
     *
     * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument
     * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**
     * `URI.parse('file://' + path)` because the path might contain characters that are
     * interpreted (# and ?). See the following sample:
     * ```ts
    const good = URI.file('/coding/c#/project1');
    good.scheme === 'file';
    good.path === '/coding/c#/project1';
    good.fragment === '';
    const bad = URI.parse('file://' + '/coding/c#/project1');
    bad.scheme === 'file';
    bad.path === '/coding/c'; // path is now broken
    bad.fragment === '/project1';
    ```
     *
     * @param path A file system path (see `URI#fsPath`)
     */
    static file(path) {
        let authority = _empty;
        // normalize to fwd-slashes on windows,
        // on other systems bwd-slashes are valid
        // filename character, eg /f\oo/ba\r.txt
        if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {
            path = path.replace(/\\/g, _slash);
        }
        // check for authority as used in UNC shares
        // or use the path as given
        if (path[0] === _slash && path[1] === _slash) {
            const idx = path.indexOf(_slash, 2);
            if (idx === -1) {
                authority = path.substring(2);
                path = _slash;
            }
            else {
                authority = path.substring(2, idx);
                path = path.substring(idx) || _slash;
            }
        }
        return new Uri('file', authority, path, _empty, _empty);
    }
    /**
     * Creates new URI from uri components.
     *
     * Unless `strict` is `true` the scheme is defaults to be `file`. This function performs
     * validation and should be used for untrusted uri components retrieved from storage,
     * user input, command arguments etc
     */
    static from(components, strict) {
        const result = new Uri(components.scheme, components.authority, components.path, components.query, components.fragment, strict);
        return result;
    }
    /**
     * Join a URI path with path fragments and normalizes the resulting path.
     *
     * @param uri The input URI.
     * @param pathFragment The path fragment to add to the URI path.
     * @returns The resulting URI.
     */
    static joinPath(uri, ...pathFragment) {
        if (!uri.path) {
            throw new Error(`[UriError]: cannot call joinPath on URI without path`);
        }
        let newPath;
        if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows && uri.scheme === 'file') {
            newPath = URI.file(_path_js__WEBPACK_IMPORTED_MODULE_0__.win32.join(uriToFsPath(uri, true), ...pathFragment)).path;
        }
        else {
            newPath = _path_js__WEBPACK_IMPORTED_MODULE_0__.posix.join(uri.path, ...pathFragment);
        }
        return uri.with({ path: newPath });
    }
    // ---- printing/externalize ---------------------------
    /**
     * Creates a string representation for this URI. It's guaranteed that calling
     * `URI.parse` with the result of this function creates an URI which is equal
     * to this URI.
     *
     * * The result shall *not* be used for display purposes but for externalization or transport.
     * * The result will be encoded using the percentage encoding and encoding happens mostly
     * ignore the scheme-specific encoding rules.
     *
     * @param skipEncoding Do not encode the result, default is `false`
     */
    toString(skipEncoding = false) {
        return _asFormatted(this, skipEncoding);
    }
    toJSON() {
        return this;
    }
    static revive(data) {
        var _a, _b;
        if (!data) {
            return data;
        }
        else if (data instanceof URI) {
            return data;
        }
        else {
            const result = new Uri(data);
            result._formatted = (_a = data.external) !== null && _a !== void 0 ? _a : null;
            result._fsPath = data._sep === _pathSepMarker ? (_b = data.fsPath) !== null && _b !== void 0 ? _b : null : null;
            return result;
        }
    }
}
const _pathSepMarker = _platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows ? 1 : undefined;
// This class exists so that URI is compatible with vscode.Uri (API).
class Uri extends URI {
    constructor() {
        super(...arguments);
        this._formatted = null;
        this._fsPath = null;
    }
    get fsPath() {
        if (!this._fsPath) {
            this._fsPath = uriToFsPath(this, false);
        }
        return this._fsPath;
    }
    toString(skipEncoding = false) {
        if (!skipEncoding) {
            if (!this._formatted) {
                this._formatted = _asFormatted(this, false);
            }
            return this._formatted;
        }
        else {
            // we don't cache that
            return _asFormatted(this, true);
        }
    }
    toJSON() {
        const res = {
            $mid: 1 /* MarshalledId.Uri */
        };
        // cached state
        if (this._fsPath) {
            res.fsPath = this._fsPath;
            res._sep = _pathSepMarker;
        }
        if (this._formatted) {
            res.external = this._formatted;
        }
        //--- uri components
        if (this.path) {
            res.path = this.path;
        }
        // TODO
        // this isn't correct and can violate the UriComponents contract but
        // this is part of the vscode.Uri API and we shouldn't change how that
        // works anymore
        if (this.scheme) {
            res.scheme = this.scheme;
        }
        if (this.authority) {
            res.authority = this.authority;
        }
        if (this.query) {
            res.query = this.query;
        }
        if (this.fragment) {
            res.fragment = this.fragment;
        }
        return res;
    }
}
// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2
const encodeTable = {
    [58 /* CharCode.Colon */]: '%3A', // gen-delims
    [47 /* CharCode.Slash */]: '%2F',
    [63 /* CharCode.QuestionMark */]: '%3F',
    [35 /* CharCode.Hash */]: '%23',
    [91 /* CharCode.OpenSquareBracket */]: '%5B',
    [93 /* CharCode.CloseSquareBracket */]: '%5D',
    [64 /* CharCode.AtSign */]: '%40',
    [33 /* CharCode.ExclamationMark */]: '%21', // sub-delims
    [36 /* CharCode.DollarSign */]: '%24',
    [38 /* CharCode.Ampersand */]: '%26',
    [39 /* CharCode.SingleQuote */]: '%27',
    [40 /* CharCode.OpenParen */]: '%28',
    [41 /* CharCode.CloseParen */]: '%29',
    [42 /* CharCode.Asterisk */]: '%2A',
    [43 /* CharCode.Plus */]: '%2B',
    [44 /* CharCode.Comma */]: '%2C',
    [59 /* CharCode.Semicolon */]: '%3B',
    [61 /* CharCode.Equals */]: '%3D',
    [32 /* CharCode.Space */]: '%20',
};
function encodeURIComponentFast(uriComponent, isPath, isAuthority) {
    let res = undefined;
    let nativeEncodePos = -1;
    for (let pos = 0; pos < uriComponent.length; pos++) {
        const code = uriComponent.charCodeAt(pos);
        // unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3
        if ((code >= 97 /* CharCode.a */ && code <= 122 /* CharCode.z */)
            || (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */)
            || (code >= 48 /* CharCode.Digit0 */ && code <= 57 /* CharCode.Digit9 */)
            || code === 45 /* CharCode.Dash */
            || code === 46 /* CharCode.Period */
            || code === 95 /* CharCode.Underline */
            || code === 126 /* CharCode.Tilde */
            || (isPath && code === 47 /* CharCode.Slash */)
            || (isAuthority && code === 91 /* CharCode.OpenSquareBracket */)
            || (isAuthority && code === 93 /* CharCode.CloseSquareBracket */)
            || (isAuthority && code === 58 /* CharCode.Colon */)) {
            // check if we are delaying native encode
            if (nativeEncodePos !== -1) {
                res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
                nativeEncodePos = -1;
            }
            // check if we write into a new string (by default we try to return the param)
            if (res !== undefined) {
                res += uriComponent.charAt(pos);
            }
        }
        else {
            // encoding needed, we need to allocate a new string
            if (res === undefined) {
                res = uriComponent.substr(0, pos);
            }
            // check with default table first
            const escaped = encodeTable[code];
            if (escaped !== undefined) {
                // check if we are delaying native encode
                if (nativeEncodePos !== -1) {
                    res += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));
                    nativeEncodePos = -1;
                }
                // append escaped variant to result
                res += escaped;
            }
            else if (nativeEncodePos === -1) {
                // use native encode only when needed
                nativeEncodePos = pos;
            }
        }
    }
    if (nativeEncodePos !== -1) {
        res += encodeURIComponent(uriComponent.substring(nativeEncodePos));
    }
    return res !== undefined ? res : uriComponent;
}
function encodeURIComponentMinimal(path) {
    let res = undefined;
    for (let pos = 0; pos < path.length; pos++) {
        const code = path.charCodeAt(pos);
        if (code === 35 /* CharCode.Hash */ || code === 63 /* CharCode.QuestionMark */) {
            if (res === undefined) {
                res = path.substr(0, pos);
            }
            res += encodeTable[code];
        }
        else {
            if (res !== undefined) {
                res += path[pos];
            }
        }
    }
    return res !== undefined ? res : path;
}
/**
 * Compute `fsPath` for the given uri
 */
function uriToFsPath(uri, keepDriveLetterCasing) {
    let value;
    if (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {
        // unc path: file://shares/c$/far/boo
        value = `//${uri.authority}${uri.path}`;
    }
    else if (uri.path.charCodeAt(0) === 47 /* CharCode.Slash */
        && (uri.path.charCodeAt(1) >= 65 /* CharCode.A */ && uri.path.charCodeAt(1) <= 90 /* CharCode.Z */ || uri.path.charCodeAt(1) >= 97 /* CharCode.a */ && uri.path.charCodeAt(1) <= 122 /* CharCode.z */)
        && uri.path.charCodeAt(2) === 58 /* CharCode.Colon */) {
        if (!keepDriveLetterCasing) {
            // windows drive letter: file:///c:/far/boo
            value = uri.path[1].toLowerCase() + uri.path.substr(2);
        }
        else {
            value = uri.path.substr(1);
        }
    }
    else {
        // other path
        value = uri.path;
    }
    if (_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows) {
        value = value.replace(/\//g, '\\');
    }
    return value;
}
/**
 * Create the external version of a uri
 */
function _asFormatted(uri, skipEncoding) {
    const encoder = !skipEncoding
        ? encodeURIComponentFast
        : encodeURIComponentMinimal;
    let res = '';
    let { scheme, authority, path, query, fragment } = uri;
    if (scheme) {
        res += scheme;
        res += ':';
    }
    if (authority || scheme === 'file') {
        res += _slash;
        res += _slash;
    }
    if (authority) {
        let idx = authority.indexOf('@');
        if (idx !== -1) {
            // <user>@<auth>
            const userinfo = authority.substr(0, idx);
            authority = authority.substr(idx + 1);
            idx = userinfo.lastIndexOf(':');
            if (idx === -1) {
                res += encoder(userinfo, false, false);
            }
            else {
                // <user>:<pass>@<auth>
                res += encoder(userinfo.substr(0, idx), false, false);
                res += ':';
                res += encoder(userinfo.substr(idx + 1), false, true);
            }
            res += '@';
        }
        authority = authority.toLowerCase();
        idx = authority.lastIndexOf(':');
        if (idx === -1) {
            res += encoder(authority, false, true);
        }
        else {
            // <auth>:<port>
            res += encoder(authority.substr(0, idx), false, true);
            res += authority.substr(idx);
        }
    }
    if (path) {
        // lower-case windows drive letters in /C:/fff or C:/fff
        if (path.length >= 3 && path.charCodeAt(0) === 47 /* CharCode.Slash */ && path.charCodeAt(2) === 58 /* CharCode.Colon */) {
            const code = path.charCodeAt(1);
            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {
                path = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // "/c:".length === 3
            }
        }
        else if (path.length >= 2 && path.charCodeAt(1) === 58 /* CharCode.Colon */) {
            const code = path.charCodeAt(0);
            if (code >= 65 /* CharCode.A */ && code <= 90 /* CharCode.Z */) {
                path = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // "/c:".length === 3
            }
        }
        // encode the rest of the path
        res += encoder(path, true, false);
    }
    if (query) {
        res += '?';
        res += encoder(query, false, false);
    }
    if (fragment) {
        res += '#';
        res += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;
    }
    return res;
}
// --- decode
function decodeURIComponentGraceful(str) {
    try {
        return decodeURIComponent(str);
    }
    catch (_a) {
        if (str.length > 3) {
            return str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));
        }
        else {
            return str;
        }
    }
}
const _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
function percentDecode(str) {
    if (!str.match(_rEncodedAsHex)) {
        return str;
    }
    return str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SimpleWorkerClient: () => (/* binding */ SimpleWorkerClient),
/* harmony export */   SimpleWorkerServer: () => (/* binding */ SimpleWorkerServer),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   logOnceWebWorkerWarning: () => (/* binding */ logOnceWebWorkerWarning)
/* harmony export */ });
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ "./node_modules/monaco-editor/esm/vs/base/common/errors.js");
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event.js */ "./node_modules/monaco-editor/esm/vs/base/common/event.js");
/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lifecycle.js */ "./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js");
/* harmony import */ var _objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../objects.js */ "./node_modules/monaco-editor/esm/vs/base/common/objects.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../platform.js */ "./node_modules/monaco-editor/esm/vs/base/common/platform.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../strings.js */ "./node_modules/monaco-editor/esm/vs/base/common/strings.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






const INITIALIZE = '$initialize';
let webWorkerWarningLogged = false;
function logOnceWebWorkerWarning(err) {
    if (!_platform_js__WEBPACK_IMPORTED_MODULE_4__.isWeb) {
        // running tests
        return;
    }
    if (!webWorkerWarningLogged) {
        webWorkerWarningLogged = true;
        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');
    }
    console.warn(err.message);
}
class RequestMessage {
    constructor(vsWorker, req, method, args) {
        this.vsWorker = vsWorker;
        this.req = req;
        this.method = method;
        this.args = args;
        this.type = 0 /* MessageType.Request */;
    }
}
class ReplyMessage {
    constructor(vsWorker, seq, res, err) {
        this.vsWorker = vsWorker;
        this.seq = seq;
        this.res = res;
        this.err = err;
        this.type = 1 /* MessageType.Reply */;
    }
}
class SubscribeEventMessage {
    constructor(vsWorker, req, eventName, arg) {
        this.vsWorker = vsWorker;
        this.req = req;
        this.eventName = eventName;
        this.arg = arg;
        this.type = 2 /* MessageType.SubscribeEvent */;
    }
}
class EventMessage {
    constructor(vsWorker, req, event) {
        this.vsWorker = vsWorker;
        this.req = req;
        this.event = event;
        this.type = 3 /* MessageType.Event */;
    }
}
class UnsubscribeEventMessage {
    constructor(vsWorker, req) {
        this.vsWorker = vsWorker;
        this.req = req;
        this.type = 4 /* MessageType.UnsubscribeEvent */;
    }
}
class SimpleWorkerProtocol {
    constructor(handler) {
        this._workerId = -1;
        this._handler = handler;
        this._lastSentReq = 0;
        this._pendingReplies = Object.create(null);
        this._pendingEmitters = new Map();
        this._pendingEvents = new Map();
    }
    setWorkerId(workerId) {
        this._workerId = workerId;
    }
    sendMessage(method, args) {
        const req = String(++this._lastSentReq);
        return new Promise((resolve, reject) => {
            this._pendingReplies[req] = {
                resolve: resolve,
                reject: reject
            };
            this._send(new RequestMessage(this._workerId, req, method, args));
        });
    }
    listen(eventName, arg) {
        let req = null;
        const emitter = new _event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter({
            onWillAddFirstListener: () => {
                req = String(++this._lastSentReq);
                this._pendingEmitters.set(req, emitter);
                this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));
            },
            onDidRemoveLastListener: () => {
                this._pendingEmitters.delete(req);
                this._send(new UnsubscribeEventMessage(this._workerId, req));
                req = null;
            }
        });
        return emitter.event;
    }
    handleMessage(message) {
        if (!message || !message.vsWorker) {
            return;
        }
        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {
            return;
        }
        this._handleMessage(message);
    }
    _handleMessage(msg) {
        switch (msg.type) {
            case 1 /* MessageType.Reply */:
                return this._handleReplyMessage(msg);
            case 0 /* MessageType.Request */:
                return this._handleRequestMessage(msg);
            case 2 /* MessageType.SubscribeEvent */:
                return this._handleSubscribeEventMessage(msg);
            case 3 /* MessageType.Event */:
                return this._handleEventMessage(msg);
            case 4 /* MessageType.UnsubscribeEvent */:
                return this._handleUnsubscribeEventMessage(msg);
        }
    }
    _handleReplyMessage(replyMessage) {
        if (!this._pendingReplies[replyMessage.seq]) {
            console.warn('Got reply to unknown seq');
            return;
        }
        const reply = this._pendingReplies[replyMessage.seq];
        delete this._pendingReplies[replyMessage.seq];
        if (replyMessage.err) {
            let err = replyMessage.err;
            if (replyMessage.err.$isError) {
                err = new Error();
                err.name = replyMessage.err.name;
                err.message = replyMessage.err.message;
                err.stack = replyMessage.err.stack;
            }
            reply.reject(err);
            return;
        }
        reply.resolve(replyMessage.res);
    }
    _handleRequestMessage(requestMessage) {
        const req = requestMessage.req;
        const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);
        result.then((r) => {
            this._send(new ReplyMessage(this._workerId, req, r, undefined));
        }, (e) => {
            if (e.detail instanceof Error) {
                // Loading errors have a detail property that points to the actual error
                e.detail = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e.detail);
            }
            this._send(new ReplyMessage(this._workerId, req, undefined, (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(e)));
        });
    }
    _handleSubscribeEventMessage(msg) {
        const req = msg.req;
        const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {
            this._send(new EventMessage(this._workerId, req, event));
        });
        this._pendingEvents.set(req, disposable);
    }
    _handleEventMessage(msg) {
        if (!this._pendingEmitters.has(msg.req)) {
            console.warn('Got event for unknown req');
            return;
        }
        this._pendingEmitters.get(msg.req).fire(msg.event);
    }
    _handleUnsubscribeEventMessage(msg) {
        if (!this._pendingEvents.has(msg.req)) {
            console.warn('Got unsubscribe for unknown req');
            return;
        }
        this._pendingEvents.get(msg.req).dispose();
        this._pendingEvents.delete(msg.req);
    }
    _send(msg) {
        const transfer = [];
        if (msg.type === 0 /* MessageType.Request */) {
            for (let i = 0; i < msg.args.length; i++) {
                if (msg.args[i] instanceof ArrayBuffer) {
                    transfer.push(msg.args[i]);
                }
            }
        }
        else if (msg.type === 1 /* MessageType.Reply */) {
            if (msg.res instanceof ArrayBuffer) {
                transfer.push(msg.res);
            }
        }
        this._handler.sendMessage(msg, transfer);
    }
}
/**
 * Main thread side
 */
class SimpleWorkerClient extends _lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor(workerFactory, moduleId, host) {
        super();
        let lazyProxyReject = null;
        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {
            this._protocol.handleMessage(msg);
        }, (err) => {
            // in Firefox, web workers fail lazily :(
            // we will reject the proxy
            lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);
        }));
        this._protocol = new SimpleWorkerProtocol({
            sendMessage: (msg, transfer) => {
                this._worker.postMessage(msg, transfer);
            },
            handleMessage: (method, args) => {
                if (typeof host[method] !== 'function') {
                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));
                }
                try {
                    return Promise.resolve(host[method].apply(host, args));
                }
                catch (e) {
                    return Promise.reject(e);
                }
            },
            handleEvent: (eventName, arg) => {
                if (propertyIsDynamicEvent(eventName)) {
                    const event = host[eventName].call(host, arg);
                    if (typeof event !== 'function') {
                        throw new Error(`Missing dynamic event ${eventName} on main thread host.`);
                    }
                    return event;
                }
                if (propertyIsEvent(eventName)) {
                    const event = host[eventName];
                    if (typeof event !== 'function') {
                        throw new Error(`Missing event ${eventName} on main thread host.`);
                    }
                    return event;
                }
                throw new Error(`Malformed event name ${eventName}`);
            }
        });
        this._protocol.setWorkerId(this._worker.getId());
        // Gather loader configuration
        let loaderConfiguration = null;
        const globalRequire = globalThis.require;
        if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {
            // Get the configuration from the Monaco AMD Loader
            loaderConfiguration = globalRequire.getConfig();
        }
        else if (typeof globalThis.requirejs !== 'undefined') {
            // Get the configuration from requirejs
            loaderConfiguration = globalThis.requirejs.s.contexts._.config;
        }
        const hostMethods = (0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(host);
        // Send initialize message
        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [
            this._worker.getId(),
            JSON.parse(JSON.stringify(loaderConfiguration)),
            moduleId,
            hostMethods,
        ]);
        // Create proxy to loaded code
        const proxyMethodRequest = (method, args) => {
            return this._request(method, args);
        };
        const proxyListen = (eventName, arg) => {
            return this._protocol.listen(eventName, arg);
        };
        this._lazyProxy = new Promise((resolve, reject) => {
            lazyProxyReject = reject;
            this._onModuleLoaded.then((availableMethods) => {
                resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));
            }, (e) => {
                reject(e);
                this._onError('Worker failed to load ' + moduleId, e);
            });
        });
    }
    getProxyObject() {
        return this._lazyProxy;
    }
    _request(method, args) {
        return new Promise((resolve, reject) => {
            this._onModuleLoaded.then(() => {
                this._protocol.sendMessage(method, args).then(resolve, reject);
            }, reject);
        });
    }
    _onError(message, error) {
        console.error(message);
        console.info(error);
    }
}
function propertyIsEvent(name) {
    // Assume a property is an event if it has a form of "onSomething"
    return name[0] === 'o' && name[1] === 'n' && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(2));
}
function propertyIsDynamicEvent(name) {
    // Assume a property is a dynamic event (a method that returns an event) if it has a form of "onDynamicSomething"
    return /^onDynamic/.test(name) && _strings_js__WEBPACK_IMPORTED_MODULE_5__.isUpperAsciiLetter(name.charCodeAt(9));
}
function createProxyObject(methodNames, invoke, proxyListen) {
    const createProxyMethod = (method) => {
        return function () {
            const args = Array.prototype.slice.call(arguments, 0);
            return invoke(method, args);
        };
    };
    const createProxyDynamicEvent = (eventName) => {
        return function (arg) {
            return proxyListen(eventName, arg);
        };
    };
    const result = {};
    for (const methodName of methodNames) {
        if (propertyIsDynamicEvent(methodName)) {
            result[methodName] = createProxyDynamicEvent(methodName);
            continue;
        }
        if (propertyIsEvent(methodName)) {
            result[methodName] = proxyListen(methodName, undefined);
            continue;
        }
        result[methodName] = createProxyMethod(methodName);
    }
    return result;
}
/**
 * Worker side
 */
class SimpleWorkerServer {
    constructor(postMessage, requestHandlerFactory) {
        this._requestHandlerFactory = requestHandlerFactory;
        this._requestHandler = null;
        this._protocol = new SimpleWorkerProtocol({
            sendMessage: (msg, transfer) => {
                postMessage(msg, transfer);
            },
            handleMessage: (method, args) => this._handleMessage(method, args),
            handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)
        });
    }
    onmessage(msg) {
        this._protocol.handleMessage(msg);
    }
    _handleMessage(method, args) {
        if (method === INITIALIZE) {
            return this.initialize(args[0], args[1], args[2], args[3]);
        }
        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {
            return Promise.reject(new Error('Missing requestHandler or method: ' + method));
        }
        try {
            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
    _handleEvent(eventName, arg) {
        if (!this._requestHandler) {
            throw new Error(`Missing requestHandler`);
        }
        if (propertyIsDynamicEvent(eventName)) {
            const event = this._requestHandler[eventName].call(this._requestHandler, arg);
            if (typeof event !== 'function') {
                throw new Error(`Missing dynamic event ${eventName} on request handler.`);
            }
            return event;
        }
        if (propertyIsEvent(eventName)) {
            const event = this._requestHandler[eventName];
            if (typeof event !== 'function') {
                throw new Error(`Missing event ${eventName} on request handler.`);
            }
            return event;
        }
        throw new Error(`Malformed event name ${eventName}`);
    }
    initialize(workerId, loaderConfig, moduleId, hostMethods) {
        this._protocol.setWorkerId(workerId);
        const proxyMethodRequest = (method, args) => {
            return this._protocol.sendMessage(method, args);
        };
        const proxyListen = (eventName, arg) => {
            return this._protocol.listen(eventName, arg);
        };
        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);
        if (this._requestHandlerFactory) {
            // static request handler
            this._requestHandler = this._requestHandlerFactory(hostProxy);
            return Promise.resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));
        }
        if (loaderConfig) {
            // Remove 'baseUrl', handling it is beyond scope for now
            if (typeof loaderConfig.baseUrl !== 'undefined') {
                delete loaderConfig['baseUrl'];
            }
            if (typeof loaderConfig.paths !== 'undefined') {
                if (typeof loaderConfig.paths.vs !== 'undefined') {
                    delete loaderConfig.paths['vs'];
                }
            }
            if (typeof loaderConfig.trustedTypesPolicy !== undefined) {
                // don't use, it has been destroyed during serialize
                delete loaderConfig['trustedTypesPolicy'];
            }
            // Since this is in a web worker, enable catching errors
            loaderConfig.catchError = true;
            globalThis.require.config(loaderConfig);
        }
        return new Promise((resolve, reject) => {
            // Use the global require to be sure to get the global config
            // ESM-comment-begin
            // 			const req = (globalThis.require || require);
            // ESM-comment-end
            // ESM-uncomment-begin
            const req = globalThis.require;
            // ESM-uncomment-end
            req([moduleId], (module) => {
                this._requestHandler = module.create(hostProxy);
                if (!this._requestHandler) {
                    reject(new Error(`No RequestHandler!`));
                    return;
                }
                resolve((0,_objects_js__WEBPACK_IMPORTED_MODULE_3__.getAllMethodNames)(this._requestHandler));
            }, reject);
        });
    }
}
/**
 * Called on the worker side
 * @skipMangle
 */
function create(postMessage) {
    return new SimpleWorkerServer(postMessage, null);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CharacterClassifier: () => (/* binding */ CharacterClassifier),
/* harmony export */   CharacterSet: () => (/* binding */ CharacterSet)
/* harmony export */ });
/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uint.js */ "./node_modules/monaco-editor/esm/vs/base/common/uint.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * A fast character classifier that uses a compact array for ASCII values.
 */
class CharacterClassifier {
    constructor(_defaultValue) {
        const defaultValue = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_defaultValue);
        this._defaultValue = defaultValue;
        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);
        this._map = new Map();
    }
    static _createAsciiMap(defaultValue) {
        const asciiMap = new Uint8Array(256);
        asciiMap.fill(defaultValue);
        return asciiMap;
    }
    set(charCode, _value) {
        const value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(_value);
        if (charCode >= 0 && charCode < 256) {
            this._asciiMap[charCode] = value;
        }
        else {
            this._map.set(charCode, value);
        }
    }
    get(charCode) {
        if (charCode >= 0 && charCode < 256) {
            return this._asciiMap[charCode];
        }
        else {
            return (this._map.get(charCode) || this._defaultValue);
        }
    }
    clear() {
        this._asciiMap.fill(this._defaultValue);
        this._map.clear();
    }
}
class CharacterSet {
    constructor() {
        this._actual = new CharacterClassifier(0 /* Boolean.False */);
    }
    add(charCode) {
        this._actual.set(charCode, 1 /* Boolean.True */);
    }
    has(charCode) {
        return (this._actual.get(charCode) === 1 /* Boolean.True */);
    }
    clear() {
        return this._actual.clear();
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LineRange: () => (/* binding */ LineRange),
/* harmony export */   LineRangeSet: () => (/* binding */ LineRangeSet)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/monaco-editor/esm/vs/base/common/errors.js");
/* harmony import */ var _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/arraysFind.js */ "./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




/**
 * A range of lines (1-based).
 */
class LineRange {
    static fromRange(range) {
        return new LineRange(range.startLineNumber, range.endLineNumber);
    }
    /**
     * @param lineRanges An array of sorted line ranges.
     */
    static joinMany(lineRanges) {
        if (lineRanges.length === 0) {
            return [];
        }
        let result = new LineRangeSet(lineRanges[0].slice());
        for (let i = 1; i < lineRanges.length; i++) {
            result = result.getUnion(new LineRangeSet(lineRanges[i].slice()));
        }
        return result.ranges;
    }
    static ofLength(startLineNumber, length) {
        return new LineRange(startLineNumber, startLineNumber + length);
    }
    /**
     * @internal
     */
    static deserialize(lineRange) {
        return new LineRange(lineRange[0], lineRange[1]);
    }
    constructor(startLineNumber, endLineNumberExclusive) {
        if (startLineNumber > endLineNumberExclusive) {
            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);
        }
        this.startLineNumber = startLineNumber;
        this.endLineNumberExclusive = endLineNumberExclusive;
    }
    /**
     * Indicates if this line range contains the given line number.
     */
    contains(lineNumber) {
        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;
    }
    /**
     * Indicates if this line range is empty.
     */
    get isEmpty() {
        return this.startLineNumber === this.endLineNumberExclusive;
    }
    /**
     * Moves this line range by the given offset of line numbers.
     */
    delta(offset) {
        return new LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);
    }
    deltaLength(offset) {
        return new LineRange(this.startLineNumber, this.endLineNumberExclusive + offset);
    }
    /**
     * The number of lines this line range spans.
     */
    get length() {
        return this.endLineNumberExclusive - this.startLineNumber;
    }
    /**
     * Creates a line range that combines this and the given line range.
     */
    join(other) {
        return new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive));
    }
    toString() {
        return `[${this.startLineNumber},${this.endLineNumberExclusive})`;
    }
    /**
     * The resulting range is empty if the ranges do not intersect, but touch.
     * If the ranges don't even touch, the result is undefined.
     */
    intersect(other) {
        const startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);
        const endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);
        if (startLineNumber <= endLineNumberExclusive) {
            return new LineRange(startLineNumber, endLineNumberExclusive);
        }
        return undefined;
    }
    intersectsStrict(other) {
        return this.startLineNumber < other.endLineNumberExclusive && other.startLineNumber < this.endLineNumberExclusive;
    }
    overlapOrTouch(other) {
        return this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;
    }
    equals(b) {
        return this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;
    }
    toInclusiveRange() {
        if (this.isEmpty) {
            return null;
        }
        return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER);
    }
    toExclusiveRange() {
        return new _range_js__WEBPACK_IMPORTED_MODULE_2__.Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);
    }
    mapToLineArray(f) {
        const result = [];
        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {
            result.push(f(lineNumber));
        }
        return result;
    }
    forEach(f) {
        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {
            f(lineNumber);
        }
    }
    /**
     * @internal
     */
    serialize() {
        return [this.startLineNumber, this.endLineNumberExclusive];
    }
    includes(lineNumber) {
        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;
    }
    /**
     * Converts this 1-based line range to a 0-based offset range (subtracts 1!).
     * @internal
     */
    toOffsetRange() {
        return new _offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(this.startLineNumber - 1, this.endLineNumberExclusive - 1);
    }
}
class LineRangeSet {
    constructor(
    /**
     * Sorted by start line number.
     * No two line ranges are touching or intersecting.
     */
    _normalizedRanges = []) {
        this._normalizedRanges = _normalizedRanges;
    }
    get ranges() {
        return this._normalizedRanges;
    }
    addRange(range) {
        if (range.length === 0) {
            return;
        }
        // Idea: Find joinRange such that:
        // replaceRange = _normalizedRanges.replaceRange(joinRange, range.joinAll(joinRange.map(idx => this._normalizedRanges[idx])))
        // idx of first element that touches range or that is after range
        const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);
        // idx of element after { last element that touches range or that is before range }
        const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;
        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {
            // If there is no element that touches range, then joinRangeStartIdx === joinRangeEndIdxExclusive and that value is the index of the element after range
            this._normalizedRanges.splice(joinRangeStartIdx, 0, range);
        }
        else if (joinRangeStartIdx === joinRangeEndIdxExclusive - 1) {
            // Else, there is an element that touches range and in this case it is both the first and last element. Thus we can replace it
            const joinRange = this._normalizedRanges[joinRangeStartIdx];
            this._normalizedRanges[joinRangeStartIdx] = joinRange.join(range);
        }
        else {
            // First and last element are different - we need to replace the entire range
            const joinRange = this._normalizedRanges[joinRangeStartIdx].join(this._normalizedRanges[joinRangeEndIdxExclusive - 1]).join(range);
            this._normalizedRanges.splice(joinRangeStartIdx, joinRangeEndIdxExclusive - joinRangeStartIdx, joinRange);
        }
    }
    contains(lineNumber) {
        const rangeThatStartsBeforeEnd = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(this._normalizedRanges, r => r.startLineNumber <= lineNumber);
        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > lineNumber;
    }
    getUnion(other) {
        if (this._normalizedRanges.length === 0) {
            return other;
        }
        if (other._normalizedRanges.length === 0) {
            return this;
        }
        const result = [];
        let i1 = 0;
        let i2 = 0;
        let current = null;
        while (i1 < this._normalizedRanges.length || i2 < other._normalizedRanges.length) {
            let next = null;
            if (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {
                const lineRange1 = this._normalizedRanges[i1];
                const lineRange2 = other._normalizedRanges[i2];
                if (lineRange1.startLineNumber < lineRange2.startLineNumber) {
                    next = lineRange1;
                    i1++;
                }
                else {
                    next = lineRange2;
                    i2++;
                }
            }
            else if (i1 < this._normalizedRanges.length) {
                next = this._normalizedRanges[i1];
                i1++;
            }
            else {
                next = other._normalizedRanges[i2];
                i2++;
            }
            if (current === null) {
                current = next;
            }
            else {
                if (current.endLineNumberExclusive >= next.startLineNumber) {
                    // merge
                    current = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));
                }
                else {
                    // push
                    result.push(current);
                    current = next;
                }
            }
        }
        if (current !== null) {
            result.push(current);
        }
        return new LineRangeSet(result);
    }
    /**
     * Subtracts all ranges in this set from `range` and returns the result.
     */
    subtractFrom(range) {
        // idx of first element that touches range or that is after range
        const joinRangeStartIdx = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findFirstIdxMonotonousOrArrLen)(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);
        // idx of element after { last element that touches range or that is before range }
        const joinRangeEndIdxExclusive = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastIdxMonotonous)(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;
        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {
            return new LineRangeSet([range]);
        }
        const result = [];
        let startLineNumber = range.startLineNumber;
        for (let i = joinRangeStartIdx; i < joinRangeEndIdxExclusive; i++) {
            const r = this._normalizedRanges[i];
            if (r.startLineNumber > startLineNumber) {
                result.push(new LineRange(startLineNumber, r.startLineNumber));
            }
            startLineNumber = r.endLineNumberExclusive;
        }
        if (startLineNumber < range.endLineNumberExclusive) {
            result.push(new LineRange(startLineNumber, range.endLineNumberExclusive));
        }
        return new LineRangeSet(result);
    }
    toString() {
        return this._normalizedRanges.map(r => r.toString()).join(', ');
    }
    getIntersection(other) {
        const result = [];
        let i1 = 0;
        let i2 = 0;
        while (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {
            const r1 = this._normalizedRanges[i1];
            const r2 = other._normalizedRanges[i2];
            const i = r1.intersect(r2);
            if (i && !i.isEmpty) {
                result.push(i);
            }
            if (r1.endLineNumberExclusive < r2.endLineNumberExclusive) {
                i1++;
            }
            else {
                i2++;
            }
        }
        return new LineRangeSet(result);
    }
    getWithDelta(value) {
        return new LineRangeSet(this._normalizedRanges.map(r => r.delta(value)));
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OffsetRange: () => (/* binding */ OffsetRange),
/* harmony export */   OffsetRangeSet: () => (/* binding */ OffsetRangeSet)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/monaco-editor/esm/vs/base/common/errors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * A range of offsets (0-based).
*/
class OffsetRange {
    static addRange(range, sortedRanges) {
        let i = 0;
        while (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {
            i++;
        }
        let j = i;
        while (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {
            j++;
        }
        if (i === j) {
            sortedRanges.splice(i, 0, range);
        }
        else {
            const start = Math.min(range.start, sortedRanges[i].start);
            const end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);
            sortedRanges.splice(i, j - i, new OffsetRange(start, end));
        }
    }
    static tryCreate(start, endExclusive) {
        if (start > endExclusive) {
            return undefined;
        }
        return new OffsetRange(start, endExclusive);
    }
    static ofLength(length) {
        return new OffsetRange(0, length);
    }
    constructor(start, endExclusive) {
        this.start = start;
        this.endExclusive = endExclusive;
        if (start > endExclusive) {
            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid range: ${this.toString()}`);
        }
    }
    get isEmpty() {
        return this.start === this.endExclusive;
    }
    delta(offset) {
        return new OffsetRange(this.start + offset, this.endExclusive + offset);
    }
    deltaStart(offset) {
        return new OffsetRange(this.start + offset, this.endExclusive);
    }
    deltaEnd(offset) {
        return new OffsetRange(this.start, this.endExclusive + offset);
    }
    get length() {
        return this.endExclusive - this.start;
    }
    toString() {
        return `[${this.start}, ${this.endExclusive})`;
    }
    equals(other) {
        return this.start === other.start && this.endExclusive === other.endExclusive;
    }
    containsRange(other) {
        return this.start <= other.start && other.endExclusive <= this.endExclusive;
    }
    contains(offset) {
        return this.start <= offset && offset < this.endExclusive;
    }
    /**
     * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)
     * The joined range is the smallest range that contains both ranges.
     */
    join(other) {
        return new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));
    }
    /**
     * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)
     *
     * The resulting range is empty if the ranges do not intersect, but touch.
     * If the ranges don't even touch, the result is undefined.
     */
    intersect(other) {
        const start = Math.max(this.start, other.start);
        const end = Math.min(this.endExclusive, other.endExclusive);
        if (start <= end) {
            return new OffsetRange(start, end);
        }
        return undefined;
    }
    slice(arr) {
        return arr.slice(this.start, this.endExclusive);
    }
    /**
     * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.
     * The range must not be empty.
     */
    clip(value) {
        if (this.isEmpty) {
            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);
        }
        return Math.max(this.start, Math.min(this.endExclusive - 1, value));
    }
    /**
     * Returns `r := value + k * length` such that `r` is contained in this range.
     * The range must not be empty.
     *
     * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.
     */
    clipCyclic(value) {
        if (this.isEmpty) {
            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.BugIndicatingError(`Invalid clipping range: ${this.toString()}`);
        }
        if (value < this.start) {
            return this.endExclusive - ((this.start - value) % this.length);
        }
        if (value >= this.endExclusive) {
            return this.start + ((value - this.start) % this.length);
        }
        return value;
    }
    forEach(f) {
        for (let i = this.start; i < this.endExclusive; i++) {
            f(i);
        }
    }
}
class OffsetRangeSet {
    constructor() {
        this._sortedRanges = [];
    }
    addRange(range) {
        let i = 0;
        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive < range.start) {
            i++;
        }
        let j = i;
        while (j < this._sortedRanges.length && this._sortedRanges[j].start <= range.endExclusive) {
            j++;
        }
        if (i === j) {
            this._sortedRanges.splice(i, 0, range);
        }
        else {
            const start = Math.min(range.start, this._sortedRanges[i].start);
            const end = Math.max(range.endExclusive, this._sortedRanges[j - 1].endExclusive);
            this._sortedRanges.splice(i, j - i, new OffsetRange(start, end));
        }
    }
    toString() {
        return this._sortedRanges.map(r => r.toString()).join(', ');
    }
    /**
     * Returns of there is a value that is contained in this instance and the given range.
     */
    intersectsStrict(other) {
        // TODO use binary search
        let i = 0;
        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive <= other.start) {
            i++;
        }
        return i < this._sortedRanges.length && this._sortedRanges[i].start < other.endExclusive;
    }
    intersectWithRange(other) {
        // TODO use binary search + slice
        const result = new OffsetRangeSet();
        for (const range of this._sortedRanges) {
            const intersection = range.intersect(other);
            if (intersection) {
                result.addRange(intersection);
            }
        }
        return result;
    }
    intersectWithRangeLength(other) {
        return this.intersectWithRange(other).length;
    }
    get length() {
        return this._sortedRanges.reduce((prev, cur) => prev + cur.length, 0);
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js":
/*!**************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/position.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Position: () => (/* binding */ Position)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/**
 * A position in the editor.
 */
class Position {
    constructor(lineNumber, column) {
        this.lineNumber = lineNumber;
        this.column = column;
    }
    /**
     * Create a new position from this position.
     *
     * @param newLineNumber new line number
     * @param newColumn new column
     */
    with(newLineNumber = this.lineNumber, newColumn = this.column) {
        if (newLineNumber === this.lineNumber && newColumn === this.column) {
            return this;
        }
        else {
            return new Position(newLineNumber, newColumn);
        }
    }
    /**
     * Derive a new position from this position.
     *
     * @param deltaLineNumber line number delta
     * @param deltaColumn column delta
     */
    delta(deltaLineNumber = 0, deltaColumn = 0) {
        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);
    }
    /**
     * Test if this position equals other position
     */
    equals(other) {
        return Position.equals(this, other);
    }
    /**
     * Test if position `a` equals position `b`
     */
    static equals(a, b) {
        if (!a && !b) {
            return true;
        }
        return (!!a &&
            !!b &&
            a.lineNumber === b.lineNumber &&
            a.column === b.column);
    }
    /**
     * Test if this position is before other position.
     * If the two positions are equal, the result will be false.
     */
    isBefore(other) {
        return Position.isBefore(this, other);
    }
    /**
     * Test if position `a` is before position `b`.
     * If the two positions are equal, the result will be false.
     */
    static isBefore(a, b) {
        if (a.lineNumber < b.lineNumber) {
            return true;
        }
        if (b.lineNumber < a.lineNumber) {
            return false;
        }
        return a.column < b.column;
    }
    /**
     * Test if this position is before other position.
     * If the two positions are equal, the result will be true.
     */
    isBeforeOrEqual(other) {
        return Position.isBeforeOrEqual(this, other);
    }
    /**
     * Test if position `a` is before position `b`.
     * If the two positions are equal, the result will be true.
     */
    static isBeforeOrEqual(a, b) {
        if (a.lineNumber < b.lineNumber) {
            return true;
        }
        if (b.lineNumber < a.lineNumber) {
            return false;
        }
        return a.column <= b.column;
    }
    /**
     * A function that compares positions, useful for sorting
     */
    static compare(a, b) {
        const aLineNumber = a.lineNumber | 0;
        const bLineNumber = b.lineNumber | 0;
        if (aLineNumber === bLineNumber) {
            const aColumn = a.column | 0;
            const bColumn = b.column | 0;
            return aColumn - bColumn;
        }
        return aLineNumber - bLineNumber;
    }
    /**
     * Clone this position.
     */
    clone() {
        return new Position(this.lineNumber, this.column);
    }
    /**
     * Convert to a human-readable representation.
     */
    toString() {
        return '(' + this.lineNumber + ',' + this.column + ')';
    }
    // ---
    /**
     * Create a `Position` from an `IPosition`.
     */
    static lift(pos) {
        return new Position(pos.lineNumber, pos.column);
    }
    /**
     * Test if `obj` is an `IPosition`.
     */
    static isIPosition(obj) {
        return (obj
            && (typeof obj.lineNumber === 'number')
            && (typeof obj.column === 'number'));
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js":
/*!***********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/range.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Range: () => (/* binding */ Range)
/* harmony export */ });
/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)
 */
class Range {
    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {
        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {
            this.startLineNumber = endLineNumber;
            this.startColumn = endColumn;
            this.endLineNumber = startLineNumber;
            this.endColumn = startColumn;
        }
        else {
            this.startLineNumber = startLineNumber;
            this.startColumn = startColumn;
            this.endLineNumber = endLineNumber;
            this.endColumn = endColumn;
        }
    }
    /**
     * Test if this range is empty.
     */
    isEmpty() {
        return Range.isEmpty(this);
    }
    /**
     * Test if `range` is empty.
     */
    static isEmpty(range) {
        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);
    }
    /**
     * Test if position is in this range. If the position is at the edges, will return true.
     */
    containsPosition(position) {
        return Range.containsPosition(this, position);
    }
    /**
     * Test if `position` is in `range`. If the position is at the edges, will return true.
     */
    static containsPosition(range, position) {
        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {
            return false;
        }
        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {
            return false;
        }
        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {
            return false;
        }
        return true;
    }
    /**
     * Test if `position` is in `range`. If the position is at the edges, will return false.
     * @internal
     */
    static strictContainsPosition(range, position) {
        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {
            return false;
        }
        if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {
            return false;
        }
        if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {
            return false;
        }
        return true;
    }
    /**
     * Test if range is in this range. If the range is equal to this range, will return true.
     */
    containsRange(range) {
        return Range.containsRange(this, range);
    }
    /**
     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.
     */
    static containsRange(range, otherRange) {
        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {
            return false;
        }
        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {
            return false;
        }
        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {
            return false;
        }
        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {
            return false;
        }
        return true;
    }
    /**
     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.
     */
    strictContainsRange(range) {
        return Range.strictContainsRange(this, range);
    }
    /**
     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.
     */
    static strictContainsRange(range, otherRange) {
        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {
            return false;
        }
        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {
            return false;
        }
        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {
            return false;
        }
        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {
            return false;
        }
        return true;
    }
    /**
     * A reunion of the two ranges.
     * The smallest position will be used as the start point, and the largest one as the end point.
     */
    plusRange(range) {
        return Range.plusRange(this, range);
    }
    /**
     * A reunion of the two ranges.
     * The smallest position will be used as the start point, and the largest one as the end point.
     */
    static plusRange(a, b) {
        let startLineNumber;
        let startColumn;
        let endLineNumber;
        let endColumn;
        if (b.startLineNumber < a.startLineNumber) {
            startLineNumber = b.startLineNumber;
            startColumn = b.startColumn;
        }
        else if (b.startLineNumber === a.startLineNumber) {
            startLineNumber = b.startLineNumber;
            startColumn = Math.min(b.startColumn, a.startColumn);
        }
        else {
            startLineNumber = a.startLineNumber;
            startColumn = a.startColumn;
        }
        if (b.endLineNumber > a.endLineNumber) {
            endLineNumber = b.endLineNumber;
            endColumn = b.endColumn;
        }
        else if (b.endLineNumber === a.endLineNumber) {
            endLineNumber = b.endLineNumber;
            endColumn = Math.max(b.endColumn, a.endColumn);
        }
        else {
            endLineNumber = a.endLineNumber;
            endColumn = a.endColumn;
        }
        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);
    }
    /**
     * A intersection of the two ranges.
     */
    intersectRanges(range) {
        return Range.intersectRanges(this, range);
    }
    /**
     * A intersection of the two ranges.
     */
    static intersectRanges(a, b) {
        let resultStartLineNumber = a.startLineNumber;
        let resultStartColumn = a.startColumn;
        let resultEndLineNumber = a.endLineNumber;
        let resultEndColumn = a.endColumn;
        const otherStartLineNumber = b.startLineNumber;
        const otherStartColumn = b.startColumn;
        const otherEndLineNumber = b.endLineNumber;
        const otherEndColumn = b.endColumn;
        if (resultStartLineNumber < otherStartLineNumber) {
            resultStartLineNumber = otherStartLineNumber;
            resultStartColumn = otherStartColumn;
        }
        else if (resultStartLineNumber === otherStartLineNumber) {
            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);
        }
        if (resultEndLineNumber > otherEndLineNumber) {
            resultEndLineNumber = otherEndLineNumber;
            resultEndColumn = otherEndColumn;
        }
        else if (resultEndLineNumber === otherEndLineNumber) {
            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);
        }
        // Check if selection is now empty
        if (resultStartLineNumber > resultEndLineNumber) {
            return null;
        }
        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {
            return null;
        }
        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);
    }
    /**
     * Test if this range equals other.
     */
    equalsRange(other) {
        return Range.equalsRange(this, other);
    }
    /**
     * Test if range `a` equals `b`.
     */
    static equalsRange(a, b) {
        if (!a && !b) {
            return true;
        }
        return (!!a &&
            !!b &&
            a.startLineNumber === b.startLineNumber &&
            a.startColumn === b.startColumn &&
            a.endLineNumber === b.endLineNumber &&
            a.endColumn === b.endColumn);
    }
    /**
     * Return the end position (which will be after or equal to the start position)
     */
    getEndPosition() {
        return Range.getEndPosition(this);
    }
    /**
     * Return the end position (which will be after or equal to the start position)
     */
    static getEndPosition(range) {
        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.endLineNumber, range.endColumn);
    }
    /**
     * Return the start position (which will be before or equal to the end position)
     */
    getStartPosition() {
        return Range.getStartPosition(this);
    }
    /**
     * Return the start position (which will be before or equal to the end position)
     */
    static getStartPosition(range) {
        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(range.startLineNumber, range.startColumn);
    }
    /**
     * Transform to a user presentable string representation.
     */
    toString() {
        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';
    }
    /**
     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.
     */
    setEndPosition(endLineNumber, endColumn) {
        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);
    }
    /**
     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.
     */
    setStartPosition(startLineNumber, startColumn) {
        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);
    }
    /**
     * Create a new empty range using this range's start position.
     */
    collapseToStart() {
        return Range.collapseToStart(this);
    }
    /**
     * Create a new empty range using this range's start position.
     */
    static collapseToStart(range) {
        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);
    }
    /**
     * Create a new empty range using this range's end position.
     */
    collapseToEnd() {
        return Range.collapseToEnd(this);
    }
    /**
     * Create a new empty range using this range's end position.
     */
    static collapseToEnd(range) {
        return new Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);
    }
    /**
     * Moves the range by the given amount of lines.
     */
    delta(lineCount) {
        return new Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);
    }
    // ---
    static fromPositions(start, end = start) {
        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);
    }
    static lift(range) {
        if (!range) {
            return null;
        }
        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);
    }
    /**
     * Test if `obj` is an `IRange`.
     */
    static isIRange(obj) {
        return (obj
            && (typeof obj.startLineNumber === 'number')
            && (typeof obj.startColumn === 'number')
            && (typeof obj.endLineNumber === 'number')
            && (typeof obj.endColumn === 'number'));
    }
    /**
     * Test if the two ranges are touching in any way.
     */
    static areIntersectingOrTouching(a, b) {
        // Check if `a` is before `b`
        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {
            return false;
        }
        // Check if `b` is before `a`
        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {
            return false;
        }
        // These ranges must intersect
        return true;
    }
    /**
     * Test if the two ranges are intersecting. If the ranges are touching it returns true.
     */
    static areIntersecting(a, b) {
        // Check if `a` is before `b`
        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {
            return false;
        }
        // Check if `b` is before `a`
        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {
            return false;
        }
        // These ranges must intersect
        return true;
    }
    /**
     * A function that compares ranges, useful for sorting ranges
     * It will first compare ranges on the startPosition and then on the endPosition
     */
    static compareRangesUsingStarts(a, b) {
        if (a && b) {
            const aStartLineNumber = a.startLineNumber | 0;
            const bStartLineNumber = b.startLineNumber | 0;
            if (aStartLineNumber === bStartLineNumber) {
                const aStartColumn = a.startColumn | 0;
                const bStartColumn = b.startColumn | 0;
                if (aStartColumn === bStartColumn) {
                    const aEndLineNumber = a.endLineNumber | 0;
                    const bEndLineNumber = b.endLineNumber | 0;
                    if (aEndLineNumber === bEndLineNumber) {
                        const aEndColumn = a.endColumn | 0;
                        const bEndColumn = b.endColumn | 0;
                        return aEndColumn - bEndColumn;
                    }
                    return aEndLineNumber - bEndLineNumber;
                }
                return aStartColumn - bStartColumn;
            }
            return aStartLineNumber - bStartLineNumber;
        }
        const aExists = (a ? 1 : 0);
        const bExists = (b ? 1 : 0);
        return aExists - bExists;
    }
    /**
     * A function that compares ranges, useful for sorting ranges
     * It will first compare ranges on the endPosition and then on the startPosition
     */
    static compareRangesUsingEnds(a, b) {
        if (a.endLineNumber === b.endLineNumber) {
            if (a.endColumn === b.endColumn) {
                if (a.startLineNumber === b.startLineNumber) {
                    return a.startColumn - b.startColumn;
                }
                return a.startLineNumber - b.startLineNumber;
            }
            return a.endColumn - b.endColumn;
        }
        return a.endLineNumber - b.endLineNumber;
    }
    /**
     * Test if the range spans multiple lines.
     */
    static spansMultipleLines(range) {
        return range.endLineNumber > range.startLineNumber;
    }
    toJSON() {
        return this;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js":
/*!***************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Selection: () => (/* binding */ Selection)
/* harmony export */ });
/* harmony import */ var _position_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./position.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js");
/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


/**
 * A selection in the editor.
 * The selection is a range that has an orientation.
 */
class Selection extends _range_js__WEBPACK_IMPORTED_MODULE_1__.Range {
    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {
        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);
        this.selectionStartLineNumber = selectionStartLineNumber;
        this.selectionStartColumn = selectionStartColumn;
        this.positionLineNumber = positionLineNumber;
        this.positionColumn = positionColumn;
    }
    /**
     * Transform to a human-readable representation.
     */
    toString() {
        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';
    }
    /**
     * Test if equals other selection.
     */
    equalsSelection(other) {
        return (Selection.selectionsEqual(this, other));
    }
    /**
     * Test if the two selections are equal.
     */
    static selectionsEqual(a, b) {
        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&
            a.selectionStartColumn === b.selectionStartColumn &&
            a.positionLineNumber === b.positionLineNumber &&
            a.positionColumn === b.positionColumn);
    }
    /**
     * Get directions (LTR or RTL).
     */
    getDirection() {
        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {
            return 0 /* SelectionDirection.LTR */;
        }
        return 1 /* SelectionDirection.RTL */;
    }
    /**
     * Create a new selection with a different `positionLineNumber` and `positionColumn`.
     */
    setEndPosition(endLineNumber, endColumn) {
        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {
            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);
        }
        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);
    }
    /**
     * Get the position at `positionLineNumber` and `positionColumn`.
     */
    getPosition() {
        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.positionLineNumber, this.positionColumn);
    }
    /**
     * Get the position at the start of the selection.
    */
    getSelectionStart() {
        return new _position_js__WEBPACK_IMPORTED_MODULE_0__.Position(this.selectionStartLineNumber, this.selectionStartColumn);
    }
    /**
     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.
     */
    setStartPosition(startLineNumber, startColumn) {
        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {
            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);
        }
        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);
    }
    // ----
    /**
     * Create a `Selection` from one or two positions
     */
    static fromPositions(start, end = start) {
        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);
    }
    /**
     * Creates a `Selection` from a range, given a direction.
     */
    static fromRange(range, direction) {
        if (direction === 0 /* SelectionDirection.LTR */) {
            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);
        }
        else {
            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);
        }
    }
    /**
     * Create a `Selection` from an `ISelection`.
     */
    static liftSelection(sel) {
        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);
    }
    /**
     * `a` equals `b`.
     */
    static selectionsArrEqual(a, b) {
        if (a && !b || !a && b) {
            return false;
        }
        if (!a && !b) {
            return true;
        }
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0, len = a.length; i < len; i++) {
            if (!this.selectionsEqual(a[i], b[i])) {
                return false;
            }
        }
        return true;
    }
    /**
     * Test if `obj` is an `ISelection`.
     */
    static isISelection(obj) {
        return (obj
            && (typeof obj.selectionStartLineNumber === 'number')
            && (typeof obj.selectionStartColumn === 'number')
            && (typeof obj.positionLineNumber === 'number')
            && (typeof obj.positionColumn === 'number'));
    }
    /**
     * Create with a direction.
     */
    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {
        if (direction === 0 /* SelectionDirection.LTR */) {
            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);
        }
        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WordCharacterClassifier: () => (/* binding */ WordCharacterClassifier),
/* harmony export */   getMapForWordSeparators: () => (/* binding */ getMapForWordSeparators)
/* harmony export */ });
/* harmony import */ var _characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./characterClassifier.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

class WordCharacterClassifier extends _characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__.CharacterClassifier {
    constructor(wordSeparators) {
        super(0 /* WordCharacterClass.Regular */);
        for (let i = 0, len = wordSeparators.length; i < len; i++) {
            this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);
        }
        this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);
        this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);
    }
}
function once(computeFn) {
    const cache = {}; // TODO@Alex unbounded cache
    return (input) => {
        if (!cache.hasOwnProperty(input)) {
            cache[input] = computeFn(input);
        }
        return cache[input];
    };
}
const getMapForWordSeparators = once((input) => new WordCharacterClassifier(input));


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_WORD_REGEXP: () => (/* binding */ DEFAULT_WORD_REGEXP),
/* harmony export */   USUAL_WORD_SEPARATORS: () => (/* binding */ USUAL_WORD_SEPARATORS),
/* harmony export */   ensureValidWordDefinition: () => (/* binding */ ensureValidWordDefinition),
/* harmony export */   getWordAtText: () => (/* binding */ getWordAtText)
/* harmony export */ });
/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/iterator.js */ "./node_modules/monaco-editor/esm/vs/base/common/iterator.js");
/* harmony import */ var _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/linkedList.js */ "./node_modules/monaco-editor/esm/vs/base/common/linkedList.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\|;:\'",.<>/?';
/**
 * Create a word definition regular expression based on default word separators.
 * Optionally provide allowed separators that should be included in words.
 *
 * The default would look like this:
 * /(-?\d*\.\d\w*)|([^\`\~\!\@\#\$\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g
 */
function createWordRegExp(allowInWords = '') {
    let source = '(-?\\d*\\.\\d\\w*)|([^';
    for (const sep of USUAL_WORD_SEPARATORS) {
        if (allowInWords.indexOf(sep) >= 0) {
            continue;
        }
        source += '\\' + sep;
    }
    source += '\\s]+)';
    return new RegExp(source, 'g');
}
// catches numbers (including floating numbers) in the first group, and alphanum in the second
const DEFAULT_WORD_REGEXP = createWordRegExp();
function ensureValidWordDefinition(wordDefinition) {
    let result = DEFAULT_WORD_REGEXP;
    if (wordDefinition && (wordDefinition instanceof RegExp)) {
        if (!wordDefinition.global) {
            let flags = 'g';
            if (wordDefinition.ignoreCase) {
                flags += 'i';
            }
            if (wordDefinition.multiline) {
                flags += 'm';
            }
            if (wordDefinition.unicode) {
                flags += 'u';
            }
            result = new RegExp(wordDefinition.source, flags);
        }
        else {
            result = wordDefinition;
        }
    }
    result.lastIndex = 0;
    return result;
}
const _defaultConfig = new _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_1__.LinkedList();
_defaultConfig.unshift({
    maxLen: 1000,
    windowSize: 15,
    timeBudget: 150
});
function getWordAtText(column, wordDefinition, text, textOffset, config) {
    if (!config) {
        config = _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_0__.Iterable.first(_defaultConfig);
    }
    if (text.length > config.maxLen) {
        // don't throw strings that long at the regexp
        // but use a sub-string in which a word must occur
        let start = column - config.maxLen / 2;
        if (start < 0) {
            start = 0;
        }
        else {
            textOffset += start;
        }
        text = text.substring(start, column + config.maxLen / 2);
        return getWordAtText(column, wordDefinition, text, textOffset, config);
    }
    const t1 = Date.now();
    const pos = column - 1 - textOffset;
    let prevRegexIndex = -1;
    let match = null;
    for (let i = 1;; i++) {
        // check time budget
        if (Date.now() - t1 >= config.timeBudget) {
            break;
        }
        // reset the index at which the regexp should start matching, also know where it
        // should stop so that subsequent search don't repeat previous searches
        const regexIndex = pos - config.windowSize * i;
        wordDefinition.lastIndex = Math.max(0, regexIndex);
        const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);
        if (!thisMatch && match) {
            // stop: we have something
            break;
        }
        match = thisMatch;
        // stop: searched at start
        if (regexIndex <= 0) {
            break;
        }
        prevRegexIndex = regexIndex;
    }
    if (match) {
        const result = {
            word: match[0],
            startColumn: textOffset + 1 + match.index,
            endColumn: textOffset + 1 + match.index + match[0].length
        };
        wordDefinition.lastIndex = 0;
        return result;
    }
    return null;
}
function _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {
    let match;
    while (match = wordDefinition.exec(text)) {
        const matchIndex = match.index || 0;
        if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {
            return match;
        }
        else if (stopPos > 0 && matchIndex > stopPos) {
            return null;
        }
    }
    return null;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateTimeout: () => (/* binding */ DateTimeout),
/* harmony export */   DiffAlgorithmResult: () => (/* binding */ DiffAlgorithmResult),
/* harmony export */   InfiniteTimeout: () => (/* binding */ InfiniteTimeout),
/* harmony export */   OffsetPair: () => (/* binding */ OffsetPair),
/* harmony export */   SequenceDiff: () => (/* binding */ SequenceDiff)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base/common/arrays.js */ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../base/common/errors.js */ "./node_modules/monaco-editor/esm/vs/base/common/errors.js");
/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



class DiffAlgorithmResult {
    static trivial(seq1, seq2) {
        return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], false);
    }
    static trivialTimedOut(seq1, seq2) {
        return new DiffAlgorithmResult([new SequenceDiff(_core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq1.length), _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange.ofLength(seq2.length))], true);
    }
    constructor(diffs, 
    /**
     * Indicates if the time out was reached.
     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.
     */
    hitTimeout) {
        this.diffs = diffs;
        this.hitTimeout = hitTimeout;
    }
}
class SequenceDiff {
    static invert(sequenceDiffs, doc1Length) {
        const result = [];
        (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachAdjacent)(sequenceDiffs, (a, b) => {
            result.push(SequenceDiff.fromOffsetPairs(a ? a.getEndExclusives() : OffsetPair.zero, b ? b.getStarts() : new OffsetPair(doc1Length, (a ? a.seq2Range.endExclusive - a.seq1Range.endExclusive : 0) + doc1Length)));
        });
        return result;
    }
    static fromOffsetPairs(start, endExclusive) {
        return new SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset1, endExclusive.offset1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_2__.OffsetRange(start.offset2, endExclusive.offset2));
    }
    constructor(seq1Range, seq2Range) {
        this.seq1Range = seq1Range;
        this.seq2Range = seq2Range;
    }
    swap() {
        return new SequenceDiff(this.seq2Range, this.seq1Range);
    }
    toString() {
        return `${this.seq1Range} <-> ${this.seq2Range}`;
    }
    join(other) {
        return new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));
    }
    delta(offset) {
        if (offset === 0) {
            return this;
        }
        return new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));
    }
    deltaStart(offset) {
        if (offset === 0) {
            return this;
        }
        return new SequenceDiff(this.seq1Range.deltaStart(offset), this.seq2Range.deltaStart(offset));
    }
    deltaEnd(offset) {
        if (offset === 0) {
            return this;
        }
        return new SequenceDiff(this.seq1Range.deltaEnd(offset), this.seq2Range.deltaEnd(offset));
    }
    intersect(other) {
        const i1 = this.seq1Range.intersect(other.seq1Range);
        const i2 = this.seq2Range.intersect(other.seq2Range);
        if (!i1 || !i2) {
            return undefined;
        }
        return new SequenceDiff(i1, i2);
    }
    getStarts() {
        return new OffsetPair(this.seq1Range.start, this.seq2Range.start);
    }
    getEndExclusives() {
        return new OffsetPair(this.seq1Range.endExclusive, this.seq2Range.endExclusive);
    }
}
class OffsetPair {
    constructor(offset1, offset2) {
        this.offset1 = offset1;
        this.offset2 = offset2;
    }
    toString() {
        return `${this.offset1} <-> ${this.offset2}`;
    }
}
OffsetPair.zero = new OffsetPair(0, 0);
OffsetPair.max = new OffsetPair(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
class InfiniteTimeout {
    isValid() {
        return true;
    }
}
InfiniteTimeout.instance = new InfiniteTimeout();
class DateTimeout {
    constructor(timeout) {
        this.timeout = timeout;
        this.startTime = Date.now();
        this.valid = true;
        if (timeout <= 0) {
            throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('timeout must be positive');
        }
    }
    // Recommendation: Set a log-point `{this.disable()}` in the body
    isValid() {
        const valid = Date.now() - this.startTime < this.timeout;
        if (!valid && this.valid) {
            this.valid = false; // timeout reached
            // eslint-disable-next-line no-debugger
            debugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.
        }
        return this.valid;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js":
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DynamicProgrammingDiffing: () => (/* binding */ DynamicProgrammingDiffing)
/* harmony export */ });
/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



/**
 * A O(MN) diffing algorithm that supports a score function.
 * The algorithm can be improved by processing the 2d array diagonally.
*/
class DynamicProgrammingDiffing {
    compute(sequence1, sequence2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance, equalityScore) {
        if (sequence1.length === 0 || sequence2.length === 0) {
            return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(sequence1, sequence2);
        }
        /**
         * lcsLengths.get(i, j): Length of the longest common subsequence of sequence1.substring(0, i + 1) and sequence2.substring(0, j + 1).
         */
        const lcsLengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);
        const directions = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);
        const lengths = new _utils_js__WEBPACK_IMPORTED_MODULE_2__.Array2D(sequence1.length, sequence2.length);
        // ==== Initializing lcsLengths ====
        for (let s1 = 0; s1 < sequence1.length; s1++) {
            for (let s2 = 0; s2 < sequence2.length; s2++) {
                if (!timeout.isValid()) {
                    return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(sequence1, sequence2);
                }
                const horizontalLen = s1 === 0 ? 0 : lcsLengths.get(s1 - 1, s2);
                const verticalLen = s2 === 0 ? 0 : lcsLengths.get(s1, s2 - 1);
                let extendedSeqScore;
                if (sequence1.getElement(s1) === sequence2.getElement(s2)) {
                    if (s1 === 0 || s2 === 0) {
                        extendedSeqScore = 0;
                    }
                    else {
                        extendedSeqScore = lcsLengths.get(s1 - 1, s2 - 1);
                    }
                    if (s1 > 0 && s2 > 0 && directions.get(s1 - 1, s2 - 1) === 3) {
                        // Prefer consecutive diagonals
                        extendedSeqScore += lengths.get(s1 - 1, s2 - 1);
                    }
                    extendedSeqScore += (equalityScore ? equalityScore(s1, s2) : 1);
                }
                else {
                    extendedSeqScore = -1;
                }
                const newValue = Math.max(horizontalLen, verticalLen, extendedSeqScore);
                if (newValue === extendedSeqScore) {
                    // Prefer diagonals
                    const prevLen = s1 > 0 && s2 > 0 ? lengths.get(s1 - 1, s2 - 1) : 0;
                    lengths.set(s1, s2, prevLen + 1);
                    directions.set(s1, s2, 3);
                }
                else if (newValue === horizontalLen) {
                    lengths.set(s1, s2, 0);
                    directions.set(s1, s2, 1);
                }
                else if (newValue === verticalLen) {
                    lengths.set(s1, s2, 0);
                    directions.set(s1, s2, 2);
                }
                lcsLengths.set(s1, s2, newValue);
            }
        }
        // ==== Backtracking ====
        const result = [];
        let lastAligningPosS1 = sequence1.length;
        let lastAligningPosS2 = sequence2.length;
        function reportDecreasingAligningPositions(s1, s2) {
            if (s1 + 1 !== lastAligningPosS1 || s2 + 1 !== lastAligningPosS2) {
                result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s1 + 1, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(s2 + 1, lastAligningPosS2)));
            }
            lastAligningPosS1 = s1;
            lastAligningPosS2 = s2;
        }
        let s1 = sequence1.length - 1;
        let s2 = sequence2.length - 1;
        while (s1 >= 0 && s2 >= 0) {
            if (directions.get(s1, s2) === 3) {
                reportDecreasingAligningPositions(s1, s2);
                s1--;
                s2--;
            }
            else {
                if (directions.get(s1, s2) === 1) {
                    s1--;
                }
                else {
                    s2--;
                }
            }
        }
        reportDecreasingAligningPositions(-1, -1);
        result.reverse();
        return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MyersDiffAlgorithm: () => (/* binding */ MyersDiffAlgorithm)
/* harmony export */ });
/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/* harmony import */ var _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diffAlgorithm.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


/**
 * An O(ND) diff algorithm that has a quadratic space worst-case complexity.
*/
class MyersDiffAlgorithm {
    compute(seq1, seq2, timeout = _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.InfiniteTimeout.instance) {
        // These are common special cases.
        // The early return improves performance dramatically.
        if (seq1.length === 0 || seq2.length === 0) {
            return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivial(seq1, seq2);
        }
        const seqX = seq1; // Text on the x axis
        const seqY = seq2; // Text on the y axis
        function getXAfterSnake(x, y) {
            while (x < seqX.length && y < seqY.length && seqX.getElement(x) === seqY.getElement(y)) {
                x++;
                y++;
            }
            return x;
        }
        let d = 0;
        // V[k]: X value of longest d-line that ends in diagonal k.
        // d-line: path from (0,0) to (x,y) that uses exactly d non-diagonals.
        // diagonal k: Set of points (x,y) with x-y = k.
        // k=1 -> (1,0),(2,1)
        const V = new FastInt32Array();
        V.set(0, getXAfterSnake(0, 0));
        const paths = new FastArrayNegativeIndices();
        paths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));
        let k = 0;
        loop: while (true) {
            d++;
            if (!timeout.isValid()) {
                return _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult.trivialTimedOut(seqX, seqY);
            }
            // The paper has `for (k = -d; k <= d; k += 2)`, but we can ignore diagonals that cannot influence the result.
            const lowerBound = -Math.min(d, seqY.length + (d % 2));
            const upperBound = Math.min(d, seqX.length + (d % 2));
            for (k = lowerBound; k <= upperBound; k += 2) {
                let step = 0;
                // We can use the X values of (d-1)-lines to compute X value of the longest d-lines.
                const maxXofDLineTop = k === upperBound ? -1 : V.get(k + 1); // We take a vertical non-diagonal (add a symbol in seqX)
                const maxXofDLineLeft = k === lowerBound ? -1 : V.get(k - 1) + 1; // We take a horizontal non-diagonal (+1 x) (delete a symbol in seqX)
                step++;
                const x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seqX.length);
                const y = x - k;
                step++;
                if (x > seqX.length || y > seqY.length) {
                    // This diagonal is irrelevant for the result.
                    // TODO: Don't pay the cost for this in the next iteration.
                    continue;
                }
                const newMaxX = getXAfterSnake(x, y);
                V.set(k, newMaxX);
                const lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);
                paths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);
                if (V.get(k) === seqX.length && V.get(k) - k === seqY.length) {
                    break loop;
                }
            }
        }
        let path = paths.get(k);
        const result = [];
        let lastAligningPosS1 = seqX.length;
        let lastAligningPosS2 = seqY.length;
        while (true) {
            const endX = path ? path.x + path.length : 0;
            const endY = path ? path.y + path.length : 0;
            if (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {
                result.push(new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endX, lastAligningPosS1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_0__.OffsetRange(endY, lastAligningPosS2)));
            }
            if (!path) {
                break;
            }
            lastAligningPosS1 = path.x;
            lastAligningPosS2 = path.y;
            path = path.prev;
        }
        result.reverse();
        return new _diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_1__.DiffAlgorithmResult(result, false);
    }
}
class SnakePath {
    constructor(prev, x, y, length) {
        this.prev = prev;
        this.x = x;
        this.y = y;
        this.length = length;
    }
}
/**
 * An array that supports fast negative indices.
*/
class FastInt32Array {
    constructor() {
        this.positiveArr = new Int32Array(10);
        this.negativeArr = new Int32Array(10);
    }
    get(idx) {
        if (idx < 0) {
            idx = -idx - 1;
            return this.negativeArr[idx];
        }
        else {
            return this.positiveArr[idx];
        }
    }
    set(idx, value) {
        if (idx < 0) {
            idx = -idx - 1;
            if (idx >= this.negativeArr.length) {
                const arr = this.negativeArr;
                this.negativeArr = new Int32Array(arr.length * 2);
                this.negativeArr.set(arr);
            }
            this.negativeArr[idx] = value;
        }
        else {
            if (idx >= this.positiveArr.length) {
                const arr = this.positiveArr;
                this.positiveArr = new Int32Array(arr.length * 2);
                this.positiveArr.set(arr);
            }
            this.positiveArr[idx] = value;
        }
    }
}
/**
 * An array that supports fast negative indices.
*/
class FastArrayNegativeIndices {
    constructor() {
        this.positiveArr = [];
        this.negativeArr = [];
    }
    get(idx) {
        if (idx < 0) {
            idx = -idx - 1;
            return this.negativeArr[idx];
        }
        else {
            return this.positiveArr[idx];
        }
    }
    set(idx, value) {
        if (idx < 0) {
            idx = -idx - 1;
            this.negativeArr[idx] = value;
        }
        else {
            this.positiveArr[idx] = value;
        }
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   computeMovedLines: () => (/* binding */ computeMovedLines)
/* harmony export */ });
/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js");
/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rangeMapping.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js");
/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ "./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/map.js */ "./node_modules/monaco-editor/esm/vs/base/common/map.js");
/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/lineRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js");
/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js");
/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/










function computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {
    let { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);
    if (!timeout.isValid()) {
        return [];
    }
    const filteredChanges = changes.filter(c => !excludedChanges.has(c));
    const unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);
    (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.pushMany)(moves, unchangedMoves);
    moves = joinCloseConsecutiveMoves(moves);
    // Ignore too short moves
    moves = moves.filter(current => {
        const originalText = current.original.toOffsetRange().slice(originalLines).map(l => l.trim()).join('\n');
        return originalText.length >= 10;
    });
    moves = removeMovesInSameDiff(changes, moves);
    return moves;
}
function computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {
    const moves = [];
    const deletions = changes
        .filter(c => c.modified.isEmpty && c.original.length >= 3)
        .map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.original, originalLines, d));
    const insertions = new Set(changes
        .filter(c => c.original.isEmpty && c.modified.length >= 3)
        .map(d => new _utils_js__WEBPACK_IMPORTED_MODULE_8__.LineRangeFragment(d.modified, modifiedLines, d)));
    const excludedChanges = new Set();
    for (const deletion of deletions) {
        let highestSimilarity = -1;
        let best;
        for (const insertion of insertions) {
            const similarity = deletion.computeSimilarity(insertion);
            if (similarity > highestSimilarity) {
                highestSimilarity = similarity;
                best = insertion;
            }
        }
        if (highestSimilarity > 0.90 && best) {
            insertions.delete(best);
            moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(deletion.range, best.range));
            excludedChanges.add(deletion.source);
            excludedChanges.add(best.source);
        }
        if (!timeout.isValid()) {
            return { moves, excludedChanges };
        }
    }
    return { moves, excludedChanges };
}
function computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {
    const moves = [];
    const original3LineHashes = new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.SetMap();
    for (const change of changes) {
        for (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {
            const key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;
            original3LineHashes.add(key, { range: new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3) });
        }
    }
    const possibleMappings = [];
    changes.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(c => c.modified.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));
    for (const change of changes) {
        let lastMappings = [];
        for (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {
            const key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;
            const currentModifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(i, i + 3);
            const nextMappings = [];
            original3LineHashes.forEach(key, ({ range }) => {
                for (const lastMapping of lastMappings) {
                    // does this match extend some last match?
                    if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive &&
                        lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {
                        lastMapping.originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);
                        lastMapping.modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);
                        nextMappings.push(lastMapping);
                        return;
                    }
                }
                const mapping = {
                    modifiedLineRange: currentModifiedRange,
                    originalLineRange: range,
                };
                possibleMappings.push(mapping);
                nextMappings.push(mapping);
            });
            lastMappings = nextMappings;
        }
        if (!timeout.isValid()) {
            return [];
        }
    }
    possibleMappings.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.reverseOrder)((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.modifiedLineRange.length, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator)));
    const modifiedSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();
    const originalSet = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRangeSet();
    for (const mapping of possibleMappings) {
        const diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;
        const modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);
        const originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);
        const modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);
        for (const s of modifiedIntersectedSections.ranges) {
            if (s.length < 3) {
                continue;
            }
            const modifiedLineRange = s;
            const originalLineRange = s.delta(-diffOrigToMod);
            moves.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(originalLineRange, modifiedLineRange));
            modifiedSet.addRange(modifiedLineRange);
            originalSet.addRange(originalLineRange);
        }
    }
    moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));
    const monotonousChanges = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);
    for (let i = 0; i < moves.length; i++) {
        const move = moves[i];
        const firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber);
        const firstTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber);
        const linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);
        const lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive);
        const lastTouchingChangeMod = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive);
        const linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);
        let extendToTop;
        for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {
            const origLine = move.original.startLineNumber - extendToTop - 1;
            const modLine = move.modified.startLineNumber - extendToTop - 1;
            if (origLine > originalLines.length || modLine > modifiedLines.length) {
                break;
            }
            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {
                break;
            }
            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {
                break;
            }
        }
        if (extendToTop > 0) {
            originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));
            modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));
        }
        let extendToBottom;
        for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {
            const origLine = move.original.endLineNumberExclusive + extendToBottom;
            const modLine = move.modified.endLineNumberExclusive + extendToBottom;
            if (origLine > originalLines.length || modLine > modifiedLines.length) {
                break;
            }
            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {
                break;
            }
            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {
                break;
            }
        }
        if (extendToBottom > 0) {
            originalSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));
            modifiedSet.addRange(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));
        }
        if (extendToTop > 0 || extendToBottom > 0) {
            moves[i] = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));
        }
    }
    return moves;
}
function areLinesSimilar(line1, line2, timeout) {
    if (line1.trim() === line2.trim()) {
        return true;
    }
    if (line1.length > 300 && line2.length > 300) {
        return false;
    }
    const myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_9__.MyersDiffAlgorithm();
    const result = myersDiffingAlgorithm.compute(new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line1], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_7__.LinesSliceCharSequence([line2], new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_6__.OffsetRange(0, 1), false), timeout);
    let commonNonSpaceCharCount = 0;
    const inverted = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_0__.SequenceDiff.invert(result.diffs, line1.length);
    for (const seq of inverted) {
        seq.seq1Range.forEach(idx => {
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(line1.charCodeAt(idx))) {
                commonNonSpaceCharCount++;
            }
        });
    }
    function countNonWsChars(str) {
        let count = 0;
        for (let i = 0; i < line1.length; i++) {
            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.isSpace)(str.charCodeAt(i))) {
                count++;
            }
        }
        return count;
    }
    const longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);
    const r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;
    return r;
}
function joinCloseConsecutiveMoves(moves) {
    if (moves.length === 0) {
        return moves;
    }
    moves.sort((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.compareBy)(m => m.original.startLineNumber, _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_2__.numberComparator));
    const result = [moves[0]];
    for (let i = 1; i < moves.length; i++) {
        const last = result[result.length - 1];
        const current = moves[i];
        const originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;
        const modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;
        const currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;
        if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {
            result[result.length - 1] = last.join(current);
            continue;
        }
        result.push(current);
    }
    return result;
}
function removeMovesInSameDiff(changes, moves) {
    const changesMonotonous = new _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.MonotonousArray(changes);
    moves = moves.filter(m => {
        const diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(c => c.original.endLineNumberExclusive < m.original.endLineNumberExclusive)
            || new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_1__.LineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_5__.LineRange(1, 1));
        const diffBeforeEndOfMoveModified = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_3__.findLastMonotonous)(changes, c => c.modified.endLineNumberExclusive < m.modified.endLineNumberExclusive);
        const differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;
        return differentDiffs;
    });
    return moves;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultLinesDiffComputer: () => (/* binding */ DefaultLinesDiffComputer),
/* harmony export */   getLineRangeMapping: () => (/* binding */ getLineRangeMapping),
/* harmony export */   lineRangeMappingFromRangeMappings: () => (/* binding */ lineRangeMappingFromRangeMappings)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js");
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/assert.js */ "./node_modules/monaco-editor/esm/vs/base/common/assert.js");
/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/lineRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js");
/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js");
/* harmony import */ var _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./algorithms/dynamicProgrammingDiffing.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing.js");
/* harmony import */ var _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./algorithms/myersDiffAlgorithm.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.js");
/* harmony import */ var _computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./computeMovedLines.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js");
/* harmony import */ var _heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./heuristicSequenceOptimizations.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js");
/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../linesDiffComputer.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js");
/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../rangeMapping.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js");
/* harmony import */ var _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./linesSliceCharSequence.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js");
/* harmony import */ var _lineSequence_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lineSequence.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/














class DefaultLinesDiffComputer {
    constructor() {
        this.dynamicProgrammingDiffing = new _algorithms_dynamicProgrammingDiffing_js__WEBPACK_IMPORTED_MODULE_6__.DynamicProgrammingDiffing();
        this.myersDiffingAlgorithm = new _algorithms_myersDiffAlgorithm_js__WEBPACK_IMPORTED_MODULE_7__.MyersDiffAlgorithm();
    }
    computeDiff(originalLines, modifiedLines, options) {
        if (originalLines.length <= 1 && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(originalLines, modifiedLines, (a, b) => a === b)) {
            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_10__.LinesDiff([], [], false);
        }
        if (originalLines.length === 1 && originalLines[0].length === 0 || modifiedLines.length === 1 && modifiedLines[0].length === 0) {
            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_10__.LinesDiff([
                new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_11__.DetailedLineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, originalLines.length + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(1, modifiedLines.length + 1), [
                    new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_11__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, originalLines.length, originalLines[0].length + 1), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(1, 1, modifiedLines.length, modifiedLines[0].length + 1))
                ])
            ], [], false);
        }
        const timeout = options.maxComputationTimeMs === 0 ? _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.InfiniteTimeout.instance : new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.DateTimeout(options.maxComputationTimeMs);
        const considerWhitespaceChanges = !options.ignoreTrimWhitespace;
        const perfectHashes = new Map();
        function getOrCreateHash(text) {
            let hash = perfectHashes.get(text);
            if (hash === undefined) {
                hash = perfectHashes.size;
                perfectHashes.set(text, hash);
            }
            return hash;
        }
        const originalLinesHashes = originalLines.map((l) => getOrCreateHash(l.trim()));
        const modifiedLinesHashes = modifiedLines.map((l) => getOrCreateHash(l.trim()));
        const sequence1 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_13__.LineSequence(originalLinesHashes, originalLines);
        const sequence2 = new _lineSequence_js__WEBPACK_IMPORTED_MODULE_13__.LineSequence(modifiedLinesHashes, modifiedLines);
        const lineAlignmentResult = (() => {
            if (sequence1.length + sequence2.length < 1700) {
                // Use the improved algorithm for small files
                return this.dynamicProgrammingDiffing.compute(sequence1, sequence2, timeout, (offset1, offset2) => originalLines[offset1] === modifiedLines[offset2]
                    ? modifiedLines[offset2].length === 0
                        ? 0.1
                        : 1 + Math.log(1 + modifiedLines[offset2].length)
                    : 0.99);
            }
            return this.myersDiffingAlgorithm.compute(sequence1, sequence2);
        })();
        let lineAlignments = lineAlignmentResult.diffs;
        let hitTimeout = lineAlignmentResult.hitTimeout;
        lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(sequence1, sequence2, lineAlignments);
        lineAlignments = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingLinesBetweenDiffs)(sequence1, sequence2, lineAlignments);
        const alignments = [];
        const scanForWhitespaceChanges = (equalLinesCount) => {
            if (!considerWhitespaceChanges) {
                return;
            }
            for (let i = 0; i < equalLinesCount; i++) {
                const seq1Offset = seq1LastStart + i;
                const seq2Offset = seq2LastStart + i;
                if (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {
                    // This is because of whitespace changes, diff these lines
                    const characterDiffs = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq1Offset, seq1Offset + 1), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_3__.OffsetRange(seq2Offset, seq2Offset + 1)), timeout, considerWhitespaceChanges);
                    for (const a of characterDiffs.mappings) {
                        alignments.push(a);
                    }
                    if (characterDiffs.hitTimeout) {
                        hitTimeout = true;
                    }
                }
            }
        };
        let seq1LastStart = 0;
        let seq2LastStart = 0;
        for (const diff of lineAlignments) {
            (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);
            const equalLinesCount = diff.seq1Range.start - seq1LastStart;
            scanForWhitespaceChanges(equalLinesCount);
            seq1LastStart = diff.seq1Range.endExclusive;
            seq2LastStart = diff.seq2Range.endExclusive;
            const characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);
            if (characterDiffs.hitTimeout) {
                hitTimeout = true;
            }
            for (const a of characterDiffs.mappings) {
                alignments.push(a);
            }
        }
        scanForWhitespaceChanges(originalLines.length - seq1LastStart);
        const changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);
        let moves = [];
        if (options.computeMoves) {
            moves = this.computeMoves(changes, originalLines, modifiedLines, originalLinesHashes, modifiedLinesHashes, timeout, considerWhitespaceChanges);
        }
        // Make sure all ranges are valid
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {
            function validatePosition(pos, lines) {
                if (pos.lineNumber < 1 || pos.lineNumber > lines.length) {
                    return false;
                }
                const line = lines[pos.lineNumber - 1];
                if (pos.column < 1 || pos.column > line.length + 1) {
                    return false;
                }
                return true;
            }
            function validateRange(range, lines) {
                if (range.startLineNumber < 1 || range.startLineNumber > lines.length + 1) {
                    return false;
                }
                if (range.endLineNumberExclusive < 1 || range.endLineNumberExclusive > lines.length + 1) {
                    return false;
                }
                return true;
            }
            for (const c of changes) {
                if (!c.innerChanges) {
                    return false;
                }
                for (const ic of c.innerChanges) {
                    const valid = validatePosition(ic.modifiedRange.getStartPosition(), modifiedLines) && validatePosition(ic.modifiedRange.getEndPosition(), modifiedLines) &&
                        validatePosition(ic.originalRange.getStartPosition(), originalLines) && validatePosition(ic.originalRange.getEndPosition(), originalLines);
                    if (!valid) {
                        return false;
                    }
                }
                if (!validateRange(c.modified, modifiedLines) || !validateRange(c.original, originalLines)) {
                    return false;
                }
            }
            return true;
        });
        return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_10__.LinesDiff(changes, moves, hitTimeout);
    }
    computeMoves(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout, considerWhitespaceChanges) {
        const moves = (0,_computeMovedLines_js__WEBPACK_IMPORTED_MODULE_8__.computeMovedLines)(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout);
        const movesWithDiffs = moves.map(m => {
            const moveChanges = this.refineDiff(originalLines, modifiedLines, new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_5__.SequenceDiff(m.original.toOffsetRange(), m.modified.toOffsetRange()), timeout, considerWhitespaceChanges);
            const mappings = lineRangeMappingFromRangeMappings(moveChanges.mappings, originalLines, modifiedLines, true);
            return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_10__.MovedText(m, mappings);
        });
        return movesWithDiffs;
    }
    refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges) {
        const slice1 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_12__.LinesSliceCharSequence(originalLines, diff.seq1Range, considerWhitespaceChanges);
        const slice2 = new _linesSliceCharSequence_js__WEBPACK_IMPORTED_MODULE_12__.LinesSliceCharSequence(modifiedLines, diff.seq2Range, considerWhitespaceChanges);
        const diffResult = slice1.length + slice2.length < 500
            ? this.dynamicProgrammingDiffing.compute(slice1, slice2, timeout)
            : this.myersDiffingAlgorithm.compute(slice1, slice2, timeout);
        let diffs = diffResult.diffs;
        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.optimizeSequenceDiffs)(slice1, slice2, diffs);
        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.extendDiffsToEntireWordIfAppropriate)(slice1, slice2, diffs);
        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeShortMatches)(slice1, slice2, diffs);
        diffs = (0,_heuristicSequenceOptimizations_js__WEBPACK_IMPORTED_MODULE_9__.removeVeryShortMatchingTextBetweenLongDiffs)(slice1, slice2, diffs);
        const result = diffs.map((d) => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_11__.RangeMapping(slice1.translateRange(d.seq1Range), slice2.translateRange(d.seq2Range)));
        // Assert: result applied on original should be the same as diff applied to original
        return {
            mappings: result,
            hitTimeout: diffResult.hitTimeout,
        };
    }
}
function lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines, dontAssertStartLine = false) {
    const changes = [];
    for (const g of (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.groupAdjacentBy)(alignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)), (a1, a2) => a1.original.overlapOrTouch(a2.original)
        || a1.modified.overlapOrTouch(a2.modified))) {
        const first = g[0];
        const last = g[g.length - 1];
        changes.push(new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_11__.DetailedLineRangeMapping(first.original.join(last.original), first.modified.join(last.modified), g.map(a => a.innerChanges[0])));
    }
    (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertFn)(() => {
        if (!dontAssertStartLine) {
            if (changes.length > 0 && changes[0].original.startLineNumber !== changes[0].modified.startLineNumber) {
                return false;
            }
        }
        return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&
            // There has to be an unchanged line in between (otherwise both diffs should have been joined)
            m1.original.endLineNumberExclusive < m2.original.startLineNumber &&
            m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);
    });
    return changes;
}
function getLineRangeMapping(rangeMapping, originalLines, modifiedLines) {
    let lineStartDelta = 0;
    let lineEndDelta = 0;
    // rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.
    // original: ]xxx \n <- this line is not modified
    // modified: ]xx  \n
    if (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1
        && rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber
        && rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {
        // We can only do this if the range is not empty yet
        lineEndDelta = -1;
    }
    // original: xxx[ \n <- this line is not modified
    // modified: xxx[ \n
    if (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length
        && rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length
        && rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta
        && rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {
        // We can only do this if the range is not empty yet
        lineStartDelta = 1;
    }
    const originalLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.originalRange.startLineNumber + lineStartDelta, rangeMapping.originalRange.endLineNumber + 1 + lineEndDelta);
    const modifiedLineRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_2__.LineRange(rangeMapping.modifiedRange.startLineNumber + lineStartDelta, rangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta);
    return new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_11__.DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extendDiffsToEntireWordIfAppropriate: () => (/* binding */ extendDiffsToEntireWordIfAppropriate),
/* harmony export */   optimizeSequenceDiffs: () => (/* binding */ optimizeSequenceDiffs),
/* harmony export */   removeShortMatches: () => (/* binding */ removeShortMatches),
/* harmony export */   removeVeryShortMatchingLinesBetweenDiffs: () => (/* binding */ removeVeryShortMatchingLinesBetweenDiffs),
/* harmony export */   removeVeryShortMatchingTextBetweenLongDiffs: () => (/* binding */ removeVeryShortMatchingTextBetweenLongDiffs)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js");
/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/* harmony import */ var _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./algorithms/diffAlgorithm.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function optimizeSequenceDiffs(sequence1, sequence2, sequenceDiffs) {
    let result = sequenceDiffs;
    result = joinSequenceDiffsByShifting(sequence1, sequence2, result);
    result = shiftSequenceDiffs(sequence1, sequence2, result);
    return result;
}
/**
 * This function fixes issues like this:
 * ```
 * import { Baz, Bar } from "foo";
 * ```
 * <->
 * ```
 * import { Baz, Bar, Foo } from "foo";
 * ```
 * Computed diff: [ {Add "," after Bar}, {Add "Foo " after space} }
 * Improved diff: [{Add ", Foo" after Bar}]
 */
function joinSequenceDiffsByShifting(sequence1, sequence2, sequenceDiffs) {
    if (sequenceDiffs.length === 0) {
        return sequenceDiffs;
    }
    const result = [];
    result.push(sequenceDiffs[0]);
    // First move them all to the left as much as possible and join them if possible
    for (let i = 1; i < sequenceDiffs.length; i++) {
        const prevResult = result[result.length - 1];
        let cur = sequenceDiffs[i];
        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {
            const length = cur.seq1Range.start - prevResult.seq1Range.endExclusive;
            let d;
            for (d = 1; d <= length; d++) {
                if (sequence1.getElement(cur.seq1Range.start - d) !== sequence1.getElement(cur.seq1Range.endExclusive - d) ||
                    sequence2.getElement(cur.seq2Range.start - d) !== sequence2.getElement(cur.seq2Range.endExclusive - d)) {
                    break;
                }
            }
            d--;
            if (d === length) {
                // Merge previous and current diff
                result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq1Range.start, cur.seq1Range.endExclusive - length), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevResult.seq2Range.start, cur.seq2Range.endExclusive - length));
                continue;
            }
            cur = cur.delta(-d);
        }
        result.push(cur);
    }
    const result2 = [];
    // Then move them all to the right and join them again if possible
    for (let i = 0; i < result.length - 1; i++) {
        const nextResult = result[i + 1];
        let cur = result[i];
        if (cur.seq1Range.isEmpty || cur.seq2Range.isEmpty) {
            const length = nextResult.seq1Range.start - cur.seq1Range.endExclusive;
            let d;
            for (d = 0; d < length; d++) {
                if (!sequence1.isStronglyEqual(cur.seq1Range.start + d, cur.seq1Range.endExclusive + d) ||
                    !sequence2.isStronglyEqual(cur.seq2Range.start + d, cur.seq2Range.endExclusive + d)) {
                    break;
                }
            }
            if (d === length) {
                // Merge previous and current diff, write to result!
                result[i + 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.start + length, nextResult.seq1Range.endExclusive), new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq2Range.start + length, nextResult.seq2Range.endExclusive));
                continue;
            }
            if (d > 0) {
                cur = cur.delta(d);
            }
        }
        result2.push(cur);
    }
    if (result.length > 0) {
        result2.push(result[result.length - 1]);
    }
    return result2;
}
// align character level diffs at whitespace characters
// import { IBar } from "foo";
// import { I[Arr, I]Bar } from "foo";
// ->
// import { [IArr, ]IBar } from "foo";
// import { ITransaction, observableValue, transaction } from 'vs/base/common/observable';
// import { ITransaction, observable[FromEvent, observable]Value, transaction } from 'vs/base/common/observable';
// ->
// import { ITransaction, [observableFromEvent, ]observableValue, transaction } from 'vs/base/common/observable';
// collectBrackets(level + 1, levelPerBracketType);
// collectBrackets(level + 1, levelPerBracket[ + 1, levelPerBracket]Type);
// ->
// collectBrackets(level + 1, [levelPerBracket + 1, ]levelPerBracketType);
function shiftSequenceDiffs(sequence1, sequence2, sequenceDiffs) {
    if (!sequence1.getBoundaryScore || !sequence2.getBoundaryScore) {
        return sequenceDiffs;
    }
    for (let i = 0; i < sequenceDiffs.length; i++) {
        const prevDiff = (i > 0 ? sequenceDiffs[i - 1] : undefined);
        const diff = sequenceDiffs[i];
        const nextDiff = (i + 1 < sequenceDiffs.length ? sequenceDiffs[i + 1] : undefined);
        const seq1ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq1Range.start + 1 : 0, nextDiff ? nextDiff.seq1Range.endExclusive - 1 : sequence1.length);
        const seq2ValidRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(prevDiff ? prevDiff.seq2Range.start + 1 : 0, nextDiff ? nextDiff.seq2Range.endExclusive - 1 : sequence2.length);
        if (diff.seq1Range.isEmpty) {
            sequenceDiffs[i] = shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange);
        }
        else if (diff.seq2Range.isEmpty) {
            sequenceDiffs[i] = shiftDiffToBetterPosition(diff.swap(), sequence2, sequence1, seq2ValidRange, seq1ValidRange).swap();
        }
    }
    return sequenceDiffs;
}
function shiftDiffToBetterPosition(diff, sequence1, sequence2, seq1ValidRange, seq2ValidRange) {
    const maxShiftLimit = 100; // To prevent performance issues
    // don't touch previous or next!
    let deltaBefore = 1;
    while (diff.seq1Range.start - deltaBefore >= seq1ValidRange.start &&
        diff.seq2Range.start - deltaBefore >= seq2ValidRange.start &&
        sequence2.isStronglyEqual(diff.seq2Range.start - deltaBefore, diff.seq2Range.endExclusive - deltaBefore) && deltaBefore < maxShiftLimit) {
        deltaBefore++;
    }
    deltaBefore--;
    let deltaAfter = 0;
    while (diff.seq1Range.start + deltaAfter < seq1ValidRange.endExclusive &&
        diff.seq2Range.endExclusive + deltaAfter < seq2ValidRange.endExclusive &&
        sequence2.isStronglyEqual(diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter) && deltaAfter < maxShiftLimit) {
        deltaAfter++;
    }
    if (deltaBefore === 0 && deltaAfter === 0) {
        return diff;
    }
    // Visualize `[sequence1.text, diff.seq1Range.start + deltaAfter]`
    // and `[sequence2.text, diff.seq2Range.start + deltaAfter, diff.seq2Range.endExclusive + deltaAfter]`
    let bestDelta = 0;
    let bestScore = -1;
    // find best scored delta
    for (let delta = -deltaBefore; delta <= deltaAfter; delta++) {
        const seq2OffsetStart = diff.seq2Range.start + delta;
        const seq2OffsetEndExclusive = diff.seq2Range.endExclusive + delta;
        const seq1Offset = diff.seq1Range.start + delta;
        const score = sequence1.getBoundaryScore(seq1Offset) + sequence2.getBoundaryScore(seq2OffsetStart) + sequence2.getBoundaryScore(seq2OffsetEndExclusive);
        if (score > bestScore) {
            bestScore = score;
            bestDelta = delta;
        }
    }
    return diff.delta(bestDelta);
}
function removeShortMatches(sequence1, sequence2, sequenceDiffs) {
    const result = [];
    for (const s of sequenceDiffs) {
        const last = result[result.length - 1];
        if (!last) {
            result.push(s);
            continue;
        }
        if (s.seq1Range.start - last.seq1Range.endExclusive <= 2 || s.seq2Range.start - last.seq2Range.endExclusive <= 2) {
            result[result.length - 1] = new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(last.seq1Range.join(s.seq1Range), last.seq2Range.join(s.seq2Range));
        }
        else {
            result.push(s);
        }
    }
    return result;
}
function extendDiffsToEntireWordIfAppropriate(sequence1, sequence2, sequenceDiffs) {
    const additional = [];
    let lastModifiedWord = undefined;
    function maybePushWordToAdditional() {
        if (!lastModifiedWord) {
            return;
        }
        const originalLength1 = lastModifiedWord.s1Range.length - lastModifiedWord.deleted;
        const originalLength2 = lastModifiedWord.s2Range.length - lastModifiedWord.added;
        if (originalLength1 !== originalLength2) {
            // TODO figure out why this happens
        }
        if (Math.max(lastModifiedWord.deleted, lastModifiedWord.added) + (lastModifiedWord.count - 1) > originalLength1) {
            additional.push(new _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff(lastModifiedWord.s1Range, lastModifiedWord.s2Range));
        }
        lastModifiedWord = undefined;
    }
    for (const s of sequenceDiffs) {
        function processWord(s1Range, s2Range) {
            var _a, _b, _c, _d;
            if (!lastModifiedWord || !lastModifiedWord.s1Range.containsRange(s1Range) || !lastModifiedWord.s2Range.containsRange(s2Range)) {
                if (lastModifiedWord && !(lastModifiedWord.s1Range.endExclusive < s1Range.start && lastModifiedWord.s2Range.endExclusive < s2Range.start)) {
                    const s1Added = _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange.tryCreate(lastModifiedWord.s1Range.endExclusive, s1Range.start);
                    const s2Added = _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange.tryCreate(lastModifiedWord.s2Range.endExclusive, s2Range.start);
                    lastModifiedWord.deleted += (_a = s1Added === null || s1Added === void 0 ? void 0 : s1Added.length) !== null && _a !== void 0 ? _a : 0;
                    lastModifiedWord.added += (_b = s2Added === null || s2Added === void 0 ? void 0 : s2Added.length) !== null && _b !== void 0 ? _b : 0;
                    lastModifiedWord.s1Range = lastModifiedWord.s1Range.join(s1Range);
                    lastModifiedWord.s2Range = lastModifiedWord.s2Range.join(s2Range);
                }
                else {
                    maybePushWordToAdditional();
                    lastModifiedWord = { added: 0, deleted: 0, count: 0, s1Range: s1Range, s2Range: s2Range };
                }
            }
            const changedS1 = s1Range.intersect(s.seq1Range);
            const changedS2 = s2Range.intersect(s.seq2Range);
            lastModifiedWord.count++;
            lastModifiedWord.deleted += (_c = changedS1 === null || changedS1 === void 0 ? void 0 : changedS1.length) !== null && _c !== void 0 ? _c : 0;
            lastModifiedWord.added += (_d = changedS2 === null || changedS2 === void 0 ? void 0 : changedS2.length) !== null && _d !== void 0 ? _d : 0;
        }
        const w1Before = sequence1.findWordContaining(s.seq1Range.start - 1);
        const w2Before = sequence2.findWordContaining(s.seq2Range.start - 1);
        const w1After = sequence1.findWordContaining(s.seq1Range.endExclusive);
        const w2After = sequence2.findWordContaining(s.seq2Range.endExclusive);
        if (w1Before && w1After && w2Before && w2After && w1Before.equals(w1After) && w2Before.equals(w2After)) {
            processWord(w1Before, w2Before);
        }
        else {
            if (w1Before && w2Before) {
                processWord(w1Before, w2Before);
            }
            if (w1After && w2After) {
                processWord(w1After, w2After);
            }
        }
    }
    maybePushWordToAdditional();
    const merged = mergeSequenceDiffs(sequenceDiffs, additional);
    return merged;
}
function mergeSequenceDiffs(sequenceDiffs1, sequenceDiffs2) {
    const result = [];
    while (sequenceDiffs1.length > 0 || sequenceDiffs2.length > 0) {
        const sd1 = sequenceDiffs1[0];
        const sd2 = sequenceDiffs2[0];
        let next;
        if (sd1 && (!sd2 || sd1.seq1Range.start < sd2.seq1Range.start)) {
            next = sequenceDiffs1.shift();
        }
        else {
            next = sequenceDiffs2.shift();
        }
        if (result.length > 0 && result[result.length - 1].seq1Range.endExclusive >= next.seq1Range.start) {
            result[result.length - 1] = result[result.length - 1].join(next);
        }
        else {
            result.push(next);
        }
    }
    return result;
}
function removeVeryShortMatchingLinesBetweenDiffs(sequence1, _sequence2, sequenceDiffs) {
    let diffs = sequenceDiffs;
    if (diffs.length === 0) {
        return diffs;
    }
    let counter = 0;
    let shouldRepeat;
    do {
        shouldRepeat = false;
        const result = [
            diffs[0]
        ];
        for (let i = 1; i < diffs.length; i++) {
            const cur = diffs[i];
            const lastResult = result[result.length - 1];
            function shouldJoinDiffs(before, after) {
                const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);
                const unchangedText = sequence1.getText(unchangedRange);
                const unchangedTextWithoutWs = unchangedText.replace(/\s/g, '');
                if (unchangedTextWithoutWs.length <= 4
                    && (before.seq1Range.length + before.seq2Range.length > 5 || after.seq1Range.length + after.seq2Range.length > 5)) {
                    return true;
                }
                return false;
            }
            const shouldJoin = shouldJoinDiffs(lastResult, cur);
            if (shouldJoin) {
                shouldRepeat = true;
                result[result.length - 1] = result[result.length - 1].join(cur);
            }
            else {
                result.push(cur);
            }
        }
        diffs = result;
    } while (counter++ < 10 && shouldRepeat);
    return diffs;
}
function removeVeryShortMatchingTextBetweenLongDiffs(sequence1, sequence2, sequenceDiffs) {
    let diffs = sequenceDiffs;
    if (diffs.length === 0) {
        return diffs;
    }
    let counter = 0;
    let shouldRepeat;
    do {
        shouldRepeat = false;
        const result = [
            diffs[0]
        ];
        for (let i = 1; i < diffs.length; i++) {
            const cur = diffs[i];
            const lastResult = result[result.length - 1];
            function shouldJoinDiffs(before, after) {
                const unchangedRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lastResult.seq1Range.endExclusive, cur.seq1Range.start);
                const unchangedLineCount = sequence1.countLinesIn(unchangedRange);
                if (unchangedLineCount > 5 || unchangedRange.length > 500) {
                    return false;
                }
                const unchangedText = sequence1.getText(unchangedRange).trim();
                if (unchangedText.length > 20 || unchangedText.split(/\r\n|\r|\n/).length > 1) {
                    return false;
                }
                const beforeLineCount1 = sequence1.countLinesIn(before.seq1Range);
                const beforeSeq1Length = before.seq1Range.length;
                const beforeLineCount2 = sequence2.countLinesIn(before.seq2Range);
                const beforeSeq2Length = before.seq2Range.length;
                const afterLineCount1 = sequence1.countLinesIn(after.seq1Range);
                const afterSeq1Length = after.seq1Range.length;
                const afterLineCount2 = sequence2.countLinesIn(after.seq2Range);
                const afterSeq2Length = after.seq2Range.length;
                // TODO: Maybe a neural net can be used to derive the result from these numbers
                const max = 2 * 40 + 50;
                function cap(v) {
                    return Math.min(v, max);
                }
                if (Math.pow(Math.pow(cap(beforeLineCount1 * 40 + beforeSeq1Length), 1.5) + Math.pow(cap(beforeLineCount2 * 40 + beforeSeq2Length), 1.5), 1.5)
                    + Math.pow(Math.pow(cap(afterLineCount1 * 40 + afterSeq1Length), 1.5) + Math.pow(cap(afterLineCount2 * 40 + afterSeq2Length), 1.5), 1.5) > (Math.pow((Math.pow(max, 1.5)), 1.5)) * 1.3) {
                    return true;
                }
                return false;
            }
            const shouldJoin = shouldJoinDiffs(lastResult, cur);
            if (shouldJoin) {
                shouldRepeat = true;
                result[result.length - 1] = result[result.length - 1].join(cur);
            }
            else {
                result.push(cur);
            }
        }
        diffs = result;
    } while (counter++ < 10 && shouldRepeat);
    const newDiffs = [];
    // Remove short suffixes/prefixes
    (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.forEachWithNeighbors)(diffs, (prev, cur, next) => {
        let newDiff = cur;
        function shouldMarkAsChanged(text) {
            return text.length > 0 && text.trim().length <= 3 && cur.seq1Range.length + cur.seq2Range.length > 100;
        }
        const fullRange1 = sequence1.extendToFullLines(cur.seq1Range);
        const prefix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(fullRange1.start, cur.seq1Range.start));
        if (shouldMarkAsChanged(prefix)) {
            newDiff = newDiff.deltaStart(-prefix.length);
        }
        const suffix = sequence1.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(cur.seq1Range.endExclusive, fullRange1.endExclusive));
        if (shouldMarkAsChanged(suffix)) {
            newDiff = newDiff.deltaEnd(suffix.length);
        }
        const availableSpace = _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.SequenceDiff.fromOffsetPairs(prev ? prev.getEndExclusives() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.zero, next ? next.getStarts() : _algorithms_diffAlgorithm_js__WEBPACK_IMPORTED_MODULE_2__.OffsetPair.max);
        const result = newDiff.intersect(availableSpace);
        newDiffs.push(result);
    });
    return newDiffs;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/lineSequence.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LineSequence: () => (/* binding */ LineSequence)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class LineSequence {
    constructor(trimmedHash, lines) {
        this.trimmedHash = trimmedHash;
        this.lines = lines;
    }
    getElement(offset) {
        return this.trimmedHash[offset];
    }
    get length() {
        return this.trimmedHash.length;
    }
    getBoundaryScore(length) {
        const indentationBefore = length === 0 ? 0 : getIndentation(this.lines[length - 1]);
        const indentationAfter = length === this.lines.length ? 0 : getIndentation(this.lines[length]);
        return 1000 - (indentationBefore + indentationAfter);
    }
    getText(range) {
        return this.lines.slice(range.start, range.endExclusive).join('\n');
    }
    isStronglyEqual(offset1, offset2) {
        return this.lines[offset1] === this.lines[offset2];
    }
}
function getIndentation(str) {
    let i = 0;
    while (i < str.length && (str.charCodeAt(i) === 32 /* CharCode.Space */ || str.charCodeAt(i) === 9 /* CharCode.Tab */)) {
        i++;
    }
    return i;
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinesSliceCharSequence: () => (/* binding */ LinesSliceCharSequence)
/* harmony export */ });
/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ "./node_modules/monaco-editor/esm/vs/base/common/arraysFind.js");
/* harmony import */ var _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/offsetRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js");
/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/position.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class LinesSliceCharSequence {
    constructor(lines, lineRange, considerWhitespaceChanges) {
        // This slice has to have lineRange.length many \n! (otherwise diffing against an empty slice will be problematic)
        // (Unless it covers the entire document, in that case the other slice also has to cover the entire document ands it's okay)
        this.lines = lines;
        this.considerWhitespaceChanges = considerWhitespaceChanges;
        this.elements = [];
        this.firstCharOffsetByLine = [];
        // To account for trimming
        this.additionalOffsetByLine = [];
        // If the slice covers the end, but does not start at the beginning, we include just the \n of the previous line.
        let trimFirstLineFully = false;
        if (lineRange.start > 0 && lineRange.endExclusive >= lines.length) {
            lineRange = new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(lineRange.start - 1, lineRange.endExclusive);
            trimFirstLineFully = true;
        }
        this.lineRange = lineRange;
        this.firstCharOffsetByLine[0] = 0;
        for (let i = this.lineRange.start; i < this.lineRange.endExclusive; i++) {
            let line = lines[i];
            let offset = 0;
            if (trimFirstLineFully) {
                offset = line.length;
                line = '';
                trimFirstLineFully = false;
            }
            else if (!considerWhitespaceChanges) {
                const trimmedStartLine = line.trimStart();
                offset = line.length - trimmedStartLine.length;
                line = trimmedStartLine.trimEnd();
            }
            this.additionalOffsetByLine.push(offset);
            for (let i = 0; i < line.length; i++) {
                this.elements.push(line.charCodeAt(i));
            }
            // Don't add an \n that does not exist in the document.
            if (i < lines.length - 1) {
                this.elements.push('\n'.charCodeAt(0));
                this.firstCharOffsetByLine[i - this.lineRange.start + 1] = this.elements.length;
            }
        }
        // To account for the last line
        this.additionalOffsetByLine.push(0);
    }
    toString() {
        return `Slice: "${this.text}"`;
    }
    get text() {
        return this.getText(new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(0, this.length));
    }
    getText(range) {
        return this.elements.slice(range.start, range.endExclusive).map(e => String.fromCharCode(e)).join('');
    }
    getElement(offset) {
        return this.elements[offset];
    }
    get length() {
        return this.elements.length;
    }
    getBoundaryScore(length) {
        //   a   b   c   ,           d   e   f
        // 11  0   0   12  15  6   13  0   0   11
        const prevCategory = getCategory(length > 0 ? this.elements[length - 1] : -1);
        const nextCategory = getCategory(length < this.elements.length ? this.elements[length] : -1);
        if (prevCategory === 6 /* CharBoundaryCategory.LineBreakCR */ && nextCategory === 7 /* CharBoundaryCategory.LineBreakLF */) {
            // don't break between \r and \n
            return 0;
        }
        let score = 0;
        if (prevCategory !== nextCategory) {
            score += 10;
            if (prevCategory === 0 /* CharBoundaryCategory.WordLower */ && nextCategory === 1 /* CharBoundaryCategory.WordUpper */) {
                score += 1;
            }
        }
        score += getCategoryBoundaryScore(prevCategory);
        score += getCategoryBoundaryScore(nextCategory);
        return score;
    }
    translateOffset(offset) {
        // find smallest i, so that lineBreakOffsets[i] <= offset using binary search
        if (this.lineRange.isEmpty) {
            return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + 1, 1);
        }
        const i = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastIdxMonotonous)(this.firstCharOffsetByLine, (value) => value <= offset);
        return new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(this.lineRange.start + i + 1, offset - this.firstCharOffsetByLine[i] + this.additionalOffsetByLine[i] + 1);
    }
    translateRange(range) {
        return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(this.translateOffset(range.start), this.translateOffset(range.endExclusive));
    }
    /**
     * Finds the word that contains the character at the given offset
     */
    findWordContaining(offset) {
        if (offset < 0 || offset >= this.elements.length) {
            return undefined;
        }
        if (!isWordChar(this.elements[offset])) {
            return undefined;
        }
        // find start
        let start = offset;
        while (start > 0 && isWordChar(this.elements[start - 1])) {
            start--;
        }
        // find end
        let end = offset;
        while (end < this.elements.length && isWordChar(this.elements[end])) {
            end++;
        }
        return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);
    }
    countLinesIn(range) {
        return this.translateOffset(range.endExclusive).lineNumber - this.translateOffset(range.start).lineNumber;
    }
    isStronglyEqual(offset1, offset2) {
        return this.elements[offset1] === this.elements[offset2];
    }
    extendToFullLines(range) {
        var _a, _b;
        const start = (_a = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findLastMonotonous)(this.firstCharOffsetByLine, x => x <= range.start)) !== null && _a !== void 0 ? _a : 0;
        const end = (_b = (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_0__.findFirstMonotonous)(this.firstCharOffsetByLine, x => range.endExclusive <= x)) !== null && _b !== void 0 ? _b : this.elements.length;
        return new _core_offsetRange_js__WEBPACK_IMPORTED_MODULE_1__.OffsetRange(start, end);
    }
}
function isWordChar(charCode) {
    return charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */
        || charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */
        || charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */;
}
const score = {
    [0 /* CharBoundaryCategory.WordLower */]: 0,
    [1 /* CharBoundaryCategory.WordUpper */]: 0,
    [2 /* CharBoundaryCategory.WordNumber */]: 0,
    [3 /* CharBoundaryCategory.End */]: 10,
    [4 /* CharBoundaryCategory.Other */]: 2,
    [5 /* CharBoundaryCategory.Space */]: 3,
    [6 /* CharBoundaryCategory.LineBreakCR */]: 10,
    [7 /* CharBoundaryCategory.LineBreakLF */]: 10,
};
function getCategoryBoundaryScore(category) {
    return score[category];
}
function getCategory(charCode) {
    if (charCode === 10 /* CharCode.LineFeed */) {
        return 7 /* CharBoundaryCategory.LineBreakLF */;
    }
    else if (charCode === 13 /* CharCode.CarriageReturn */) {
        return 6 /* CharBoundaryCategory.LineBreakCR */;
    }
    else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isSpace)(charCode)) {
        return 5 /* CharBoundaryCategory.Space */;
    }
    else if (charCode >= 97 /* CharCode.a */ && charCode <= 122 /* CharCode.z */) {
        return 0 /* CharBoundaryCategory.WordLower */;
    }
    else if (charCode >= 65 /* CharCode.A */ && charCode <= 90 /* CharCode.Z */) {
        return 1 /* CharBoundaryCategory.WordUpper */;
    }
    else if (charCode >= 48 /* CharCode.Digit0 */ && charCode <= 57 /* CharCode.Digit9 */) {
        return 2 /* CharBoundaryCategory.WordNumber */;
    }
    else if (charCode === -1) {
        return 3 /* CharBoundaryCategory.End */;
    }
    else {
        return 4 /* CharBoundaryCategory.Other */;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/utils.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Array2D: () => (/* binding */ Array2D),
/* harmony export */   LineRangeFragment: () => (/* binding */ LineRangeFragment),
/* harmony export */   isSpace: () => (/* binding */ isSpace)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class Array2D {
    constructor(width, height) {
        this.width = width;
        this.height = height;
        this.array = [];
        this.array = new Array(width * height);
    }
    get(x, y) {
        return this.array[x + y * this.width];
    }
    set(x, y, value) {
        this.array[x + y * this.width] = value;
    }
}
function isSpace(charCode) {
    return charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */;
}
class LineRangeFragment {
    static getKey(chr) {
        let key = this.chrKeys.get(chr);
        if (key === undefined) {
            key = this.chrKeys.size;
            this.chrKeys.set(chr, key);
        }
        return key;
    }
    constructor(range, lines, source) {
        this.range = range;
        this.lines = lines;
        this.source = source;
        this.histogram = [];
        let counter = 0;
        for (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {
            const line = lines[i];
            for (let j = 0; j < line.length; j++) {
                counter++;
                const chr = line[j];
                const key = LineRangeFragment.getKey(chr);
                this.histogram[key] = (this.histogram[key] || 0) + 1;
            }
            counter++;
            const key = LineRangeFragment.getKey('\n');
            this.histogram[key] = (this.histogram[key] || 0) + 1;
        }
        this.totalCount = counter;
    }
    computeSimilarity(other) {
        var _a, _b;
        let sumDifferences = 0;
        const maxLength = Math.max(this.histogram.length, other.histogram.length);
        for (let i = 0; i < maxLength; i++) {
            sumDifferences += Math.abs(((_a = this.histogram[i]) !== null && _a !== void 0 ? _a : 0) - ((_b = other.histogram[i]) !== null && _b !== void 0 ? _b : 0));
        }
        return 1 - (sumDifferences / (this.totalCount + other.totalCount));
    }
}
LineRangeFragment.chrKeys = new Map();


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DiffComputer: () => (/* binding */ DiffComputer),
/* harmony export */   LegacyLinesDiffComputer: () => (/* binding */ LegacyLinesDiffComputer)
/* harmony export */ });
/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ "./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js");
/* harmony import */ var _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./linesDiffComputer.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js");
/* harmony import */ var _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rangeMapping.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/monaco-editor/esm/vs/base/common/strings.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/assert.js */ "./node_modules/monaco-editor/esm/vs/base/common/assert.js");
/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/lineRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







const MINIMUM_MATCHING_CHARACTER_LENGTH = 3;
class LegacyLinesDiffComputer {
    computeDiff(originalLines, modifiedLines, options) {
        var _a;
        const diffComputer = new DiffComputer(originalLines, modifiedLines, {
            maxComputationTime: options.maxComputationTimeMs,
            shouldIgnoreTrimWhitespace: options.ignoreTrimWhitespace,
            shouldComputeCharChanges: true,
            shouldMakePrettyDiff: true,
            shouldPostProcessCharChanges: true,
        });
        const result = diffComputer.computeDiff();
        const changes = [];
        let lastChange = null;
        for (const c of result.changes) {
            let originalRange;
            if (c.originalEndLineNumber === 0) {
                // Insertion
                originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber + 1, c.originalStartLineNumber + 1);
            }
            else {
                originalRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.originalStartLineNumber, c.originalEndLineNumber + 1);
            }
            let modifiedRange;
            if (c.modifiedEndLineNumber === 0) {
                // Deletion
                modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber + 1, c.modifiedStartLineNumber + 1);
            }
            else {
                modifiedRange = new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_6__.LineRange(c.modifiedStartLineNumber, c.modifiedEndLineNumber + 1);
            }
            let change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(originalRange, modifiedRange, (_a = c.charChanges) === null || _a === void 0 ? void 0 : _a.map(c => new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.RangeMapping(new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.originalStartLineNumber, c.originalStartColumn, c.originalEndLineNumber, c.originalEndColumn), new _core_range_js__WEBPACK_IMPORTED_MODULE_4__.Range(c.modifiedStartLineNumber, c.modifiedStartColumn, c.modifiedEndLineNumber, c.modifiedEndColumn))));
            if (lastChange) {
                if (lastChange.modified.endLineNumberExclusive === change.modified.startLineNumber
                    || lastChange.original.endLineNumberExclusive === change.original.startLineNumber) {
                    // join touching diffs. Probably moving diffs up/down in the algorithm causes touching diffs.
                    change = new _rangeMapping_js__WEBPACK_IMPORTED_MODULE_2__.DetailedLineRangeMapping(lastChange.original.join(change.original), lastChange.modified.join(change.modified), lastChange.innerChanges && change.innerChanges ?
                        lastChange.innerChanges.concat(change.innerChanges) : undefined);
                    changes.pop();
                }
            }
            changes.push(change);
            lastChange = change;
        }
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.assertFn)(() => {
            return (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_5__.checkAdjacentItems)(changes, (m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&
                // There has to be an unchanged line in between (otherwise both diffs should have been joined)
                m1.original.endLineNumberExclusive < m2.original.startLineNumber &&
                m1.modified.endLineNumberExclusive < m2.modified.startLineNumber);
        });
        return new _linesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.LinesDiff(changes, [], result.quitEarly);
    }
}
function computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {
    const diffAlgo = new _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);
    return diffAlgo.ComputeDiff(pretty);
}
class LineSequence {
    constructor(lines) {
        const startColumns = [];
        const endColumns = [];
        for (let i = 0, length = lines.length; i < length; i++) {
            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);
            endColumns[i] = getLastNonBlankColumn(lines[i], 1);
        }
        this.lines = lines;
        this._startColumns = startColumns;
        this._endColumns = endColumns;
    }
    getElements() {
        const elements = [];
        for (let i = 0, len = this.lines.length; i < len; i++) {
            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);
        }
        return elements;
    }
    getStrictElement(index) {
        return this.lines[index];
    }
    getStartLineNumber(i) {
        return i + 1;
    }
    getEndLineNumber(i) {
        return i + 1;
    }
    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {
        const charCodes = [];
        const lineNumbers = [];
        const columns = [];
        let len = 0;
        for (let index = startIndex; index <= endIndex; index++) {
            const lineContent = this.lines[index];
            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);
            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);
            for (let col = startColumn; col < endColumn; col++) {
                charCodes[len] = lineContent.charCodeAt(col - 1);
                lineNumbers[len] = index + 1;
                columns[len] = col;
                len++;
            }
            if (!shouldIgnoreTrimWhitespace && index < endIndex) {
                // Add \n if trim whitespace is not ignored
                charCodes[len] = 10 /* CharCode.LineFeed */;
                lineNumbers[len] = index + 1;
                columns[len] = lineContent.length + 1;
                len++;
            }
        }
        return new CharSequence(charCodes, lineNumbers, columns);
    }
}
class CharSequence {
    constructor(charCodes, lineNumbers, columns) {
        this._charCodes = charCodes;
        this._lineNumbers = lineNumbers;
        this._columns = columns;
    }
    toString() {
        return ('[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']');
    }
    _assertIndex(index, arr) {
        if (index < 0 || index >= arr.length) {
            throw new Error(`Illegal index`);
        }
    }
    getElements() {
        return this._charCodes;
    }
    getStartLineNumber(i) {
        if (i > 0 && i === this._lineNumbers.length) {
            // the start line number of the element after the last element
            // is the end line number of the last element
            return this.getEndLineNumber(i - 1);
        }
        this._assertIndex(i, this._lineNumbers);
        return this._lineNumbers[i];
    }
    getEndLineNumber(i) {
        if (i === -1) {
            // the end line number of the element before the first element
            // is the start line number of the first element
            return this.getStartLineNumber(i + 1);
        }
        this._assertIndex(i, this._lineNumbers);
        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {
            return this._lineNumbers[i] + 1;
        }
        return this._lineNumbers[i];
    }
    getStartColumn(i) {
        if (i > 0 && i === this._columns.length) {
            // the start column of the element after the last element
            // is the end column of the last element
            return this.getEndColumn(i - 1);
        }
        this._assertIndex(i, this._columns);
        return this._columns[i];
    }
    getEndColumn(i) {
        if (i === -1) {
            // the end column of the element before the first element
            // is the start column of the first element
            return this.getStartColumn(i + 1);
        }
        this._assertIndex(i, this._columns);
        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {
            return 1;
        }
        return this._columns[i] + 1;
    }
}
class CharChange {
    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {
        this.originalStartLineNumber = originalStartLineNumber;
        this.originalStartColumn = originalStartColumn;
        this.originalEndLineNumber = originalEndLineNumber;
        this.originalEndColumn = originalEndColumn;
        this.modifiedStartLineNumber = modifiedStartLineNumber;
        this.modifiedStartColumn = modifiedStartColumn;
        this.modifiedEndLineNumber = modifiedEndLineNumber;
        this.modifiedEndColumn = modifiedEndColumn;
    }
    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {
        const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);
        const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);
        const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);
        const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);
        const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);
        const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);
        const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);
        const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);
        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);
    }
}
function postProcessCharChanges(rawChanges) {
    if (rawChanges.length <= 1) {
        return rawChanges;
    }
    const result = [rawChanges[0]];
    let prevChange = result[0];
    for (let i = 1, len = rawChanges.length; i < len; i++) {
        const currChange = rawChanges[i];
        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);
        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);
        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true
        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);
        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {
            // Merge the current change into the previous one
            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;
            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;
        }
        else {
            // Add the current change
            result.push(currChange);
            prevChange = currChange;
        }
    }
    return result;
}
class LineChange {
    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {
        this.originalStartLineNumber = originalStartLineNumber;
        this.originalEndLineNumber = originalEndLineNumber;
        this.modifiedStartLineNumber = modifiedStartLineNumber;
        this.modifiedEndLineNumber = modifiedEndLineNumber;
        this.charChanges = charChanges;
    }
    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {
        let originalStartLineNumber;
        let originalEndLineNumber;
        let modifiedStartLineNumber;
        let modifiedEndLineNumber;
        let charChanges = undefined;
        if (diffChange.originalLength === 0) {
            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;
            originalEndLineNumber = 0;
        }
        else {
            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);
            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);
        }
        if (diffChange.modifiedLength === 0) {
            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;
            modifiedEndLineNumber = 0;
        }
        else {
            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);
            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);
        }
        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {
            // Compute character changes for diff chunks of at most 20 lines...
            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);
            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);
            if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {
                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;
                if (shouldPostProcessCharChanges) {
                    rawChanges = postProcessCharChanges(rawChanges);
                }
                charChanges = [];
                for (let i = 0, length = rawChanges.length; i < length; i++) {
                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));
                }
            }
        }
        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);
    }
}
class DiffComputer {
    constructor(originalLines, modifiedLines, opts) {
        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;
        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;
        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;
        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;
        this.originalLines = originalLines;
        this.modifiedLines = modifiedLines;
        this.original = new LineSequence(originalLines);
        this.modified = new LineSequence(modifiedLines);
        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);
        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...
    }
    computeDiff() {
        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {
            // empty original => fast path
            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {
                return {
                    quitEarly: false,
                    changes: []
                };
            }
            return {
                quitEarly: false,
                changes: [{
                        originalStartLineNumber: 1,
                        originalEndLineNumber: 1,
                        modifiedStartLineNumber: 1,
                        modifiedEndLineNumber: this.modified.lines.length,
                        charChanges: undefined
                    }]
            };
        }
        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {
            // empty modified => fast path
            return {
                quitEarly: false,
                changes: [{
                        originalStartLineNumber: 1,
                        originalEndLineNumber: this.original.lines.length,
                        modifiedStartLineNumber: 1,
                        modifiedEndLineNumber: 1,
                        charChanges: undefined
                    }]
            };
        }
        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);
        const rawChanges = diffResult.changes;
        const quitEarly = diffResult.quitEarly;
        // The diff is always computed with ignoring trim whitespace
        // This ensures we get the prettiest diff
        if (this.shouldIgnoreTrimWhitespace) {
            const lineChanges = [];
            for (let i = 0, length = rawChanges.length; i < length; i++) {
                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));
            }
            return {
                quitEarly: quitEarly,
                changes: lineChanges
            };
        }
        // Need to post-process and introduce changes where the trim whitespace is different
        // Note that we are looping starting at -1 to also cover the lines before the first change
        const result = [];
        let originalLineIndex = 0;
        let modifiedLineIndex = 0;
        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {
            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);
            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);
            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);
            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {
                const originalLine = this.originalLines[originalLineIndex];
                const modifiedLine = this.modifiedLines[modifiedLineIndex];
                if (originalLine !== modifiedLine) {
                    // These lines differ only in trim whitespace
                    // Check the leading whitespace
                    {
                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);
                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);
                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {
                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);
                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);
                            if (originalChar !== modifiedChar) {
                                break;
                            }
                            originalStartColumn--;
                            modifiedStartColumn--;
                        }
                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {
                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);
                        }
                    }
                    // Check the trailing whitespace
                    {
                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);
                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);
                        const originalMaxColumn = originalLine.length + 1;
                        const modifiedMaxColumn = modifiedLine.length + 1;
                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {
                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);
                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);
                            if (originalChar !== modifiedChar) {
                                break;
                            }
                            originalEndColumn++;
                            modifiedEndColumn++;
                        }
                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {
                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);
                        }
                    }
                }
                originalLineIndex++;
                modifiedLineIndex++;
            }
            if (nextChange) {
                // Emit the actual change
                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));
                originalLineIndex += nextChange.originalLength;
                modifiedLineIndex += nextChange.modifiedLength;
            }
        }
        return {
            quitEarly: quitEarly,
            changes: result
        };
    }
    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {
        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {
            // Merged into previous
            return;
        }
        let charChanges = undefined;
        if (this.shouldComputeCharChanges) {
            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];
        }
        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));
    }
    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {
        const len = result.length;
        if (len === 0) {
            return false;
        }
        const prevChange = result[len - 1];
        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {
            // Don't merge with inserts/deletes
            return false;
        }
        if (prevChange.originalEndLineNumber === originalLineNumber && prevChange.modifiedEndLineNumber === modifiedLineNumber) {
            if (this.shouldComputeCharChanges && prevChange.charChanges) {
                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));
            }
            return true;
        }
        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {
            prevChange.originalEndLineNumber = originalLineNumber;
            prevChange.modifiedEndLineNumber = modifiedLineNumber;
            if (this.shouldComputeCharChanges && prevChange.charChanges) {
                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));
            }
            return true;
        }
        return false;
    }
}
function getFirstNonBlankColumn(txt, defaultValue) {
    const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.firstNonWhitespaceIndex(txt);
    if (r === -1) {
        return defaultValue;
    }
    return r + 1;
}
function getLastNonBlankColumn(txt, defaultValue) {
    const r = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.lastNonWhitespaceIndex(txt);
    if (r === -1) {
        return defaultValue;
    }
    return r + 2;
}
function createContinueProcessingPredicate(maximumRuntime) {
    if (maximumRuntime === 0) {
        return () => true;
    }
    const startTime = Date.now();
    return () => {
        return Date.now() - startTime < maximumRuntime;
    };
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinesDiff: () => (/* binding */ LinesDiff),
/* harmony export */   MovedText: () => (/* binding */ MovedText)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class LinesDiff {
    constructor(changes, 
    /**
     * Sorted by original line ranges.
     * The original line ranges and the modified line ranges must be disjoint (but can be touching).
     */
    moves, 
    /**
     * Indicates if the time out was reached.
     * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.
     */
    hitTimeout) {
        this.changes = changes;
        this.moves = moves;
        this.hitTimeout = hitTimeout;
    }
}
class MovedText {
    constructor(lineRangeMapping, changes) {
        this.lineRangeMapping = lineRangeMapping;
        this.changes = changes;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   linesDiffComputers: () => (/* binding */ linesDiffComputers)
/* harmony export */ });
/* harmony import */ var _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legacyLinesDiffComputer.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/legacyLinesDiffComputer.js");
/* harmony import */ var _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultLinesDiffComputer/defaultLinesDiffComputer.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const linesDiffComputers = {
    getLegacy: () => new _legacyLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_0__.LegacyLinesDiffComputer(),
    getDefault: () => new _defaultLinesDiffComputer_defaultLinesDiffComputer_js__WEBPACK_IMPORTED_MODULE_1__.DefaultLinesDiffComputer(),
};


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js":
/*!******************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/diff/rangeMapping.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DetailedLineRangeMapping: () => (/* binding */ DetailedLineRangeMapping),
/* harmony export */   LineRangeMapping: () => (/* binding */ LineRangeMapping),
/* harmony export */   RangeMapping: () => (/* binding */ RangeMapping)
/* harmony export */ });
/* harmony import */ var _core_lineRange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/lineRange.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Maps a line range in the original text model to a line range in the modified text model.
 */
class LineRangeMapping {
    static inverse(mapping, originalLineCount, modifiedLineCount) {
        const result = [];
        let lastOriginalEndLineNumber = 1;
        let lastModifiedEndLineNumber = 1;
        for (const m of mapping) {
            const r = new DetailedLineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_0__.LineRange(lastOriginalEndLineNumber, m.original.startLineNumber), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_0__.LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber), undefined);
            if (!r.modified.isEmpty) {
                result.push(r);
            }
            lastOriginalEndLineNumber = m.original.endLineNumberExclusive;
            lastModifiedEndLineNumber = m.modified.endLineNumberExclusive;
        }
        const r = new DetailedLineRangeMapping(new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_0__.LineRange(lastOriginalEndLineNumber, originalLineCount + 1), new _core_lineRange_js__WEBPACK_IMPORTED_MODULE_0__.LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1), undefined);
        if (!r.modified.isEmpty) {
            result.push(r);
        }
        return result;
    }
    constructor(originalRange, modifiedRange) {
        this.original = originalRange;
        this.modified = modifiedRange;
    }
    toString() {
        return `{${this.original.toString()}->${this.modified.toString()}}`;
    }
    flip() {
        return new LineRangeMapping(this.modified, this.original);
    }
    join(other) {
        return new LineRangeMapping(this.original.join(other.original), this.modified.join(other.modified));
    }
}
/**
 * Maps a line range in the original text model to a line range in the modified text model.
 * Also contains inner range mappings.
 */
class DetailedLineRangeMapping extends LineRangeMapping {
    constructor(originalRange, modifiedRange, innerChanges) {
        super(originalRange, modifiedRange);
        this.innerChanges = innerChanges;
    }
    flip() {
        var _a;
        return new DetailedLineRangeMapping(this.modified, this.original, (_a = this.innerChanges) === null || _a === void 0 ? void 0 : _a.map(c => c.flip()));
    }
}
/**
 * Maps a range in the original text model to a range in the modified text model.
 */
class RangeMapping {
    constructor(originalRange, modifiedRange) {
        this.originalRange = originalRange;
        this.modifiedRange = modifiedRange;
    }
    toString() {
        return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;
    }
    flip() {
        return new RangeMapping(this.modifiedRange, this.originalRange);
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Command: () => (/* binding */ Command),
/* harmony export */   CompletionItemKinds: () => (/* binding */ CompletionItemKinds),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   EncodedTokenizationResult: () => (/* binding */ EncodedTokenizationResult),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),
/* harmony export */   LazyTokenizationSupport: () => (/* binding */ LazyTokenizationSupport),
/* harmony export */   SelectedSuggestionInfo: () => (/* binding */ SelectedSuggestionInfo),
/* harmony export */   SignatureHelpTriggerKind: () => (/* binding */ SignatureHelpTriggerKind),
/* harmony export */   SymbolKinds: () => (/* binding */ SymbolKinds),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   Token: () => (/* binding */ Token),
/* harmony export */   TokenizationRegistry: () => (/* binding */ TokenizationRegistry),
/* harmony export */   TokenizationResult: () => (/* binding */ TokenizationResult),
/* harmony export */   getAriaLabelForSymbol: () => (/* binding */ getAriaLabelForSymbol),
/* harmony export */   isLocationLink: () => (/* binding */ isLocationLink),
/* harmony export */   symbolKindNames: () => (/* binding */ symbolKindNames)
/* harmony export */ });
/* harmony import */ var _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/codicons.js */ "./node_modules/monaco-editor/esm/vs/base/common/codicons.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/uri.js */ "./node_modules/monaco-editor/esm/vs/base/common/uri.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tokenizationRegistry.js */ "./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/monaco-editor/esm/vs/nls.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");





class Token {
    constructor(offset, type, language) {
        this.offset = offset;
        this.type = type;
        this.language = language;
        this._tokenBrand = undefined;
    }
    toString() {
        return '(' + this.offset + ', ' + this.type + ')';
    }
}
/**
 * @internal
 */
class TokenizationResult {
    constructor(tokens, endState) {
        this.tokens = tokens;
        this.endState = endState;
        this._tokenizationResultBrand = undefined;
    }
}
/**
 * @internal
 */
class EncodedTokenizationResult {
    constructor(
    /**
     * The tokens in binary format. Each token occupies two array indices. For token i:
     *  - at offset 2*i => startIndex
     *  - at offset 2*i + 1 => metadata
     *
     */
    tokens, endState) {
        this.tokens = tokens;
        this.endState = endState;
        this._encodedTokenizationResultBrand = undefined;
    }
}
/**
 * @internal
 */
var CompletionItemKinds;
(function (CompletionItemKinds) {
    const byKind = new Map();
    byKind.set(0 /* CompletionItemKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);
    byKind.set(1 /* CompletionItemKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);
    byKind.set(2 /* CompletionItemKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);
    byKind.set(3 /* CompletionItemKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);
    byKind.set(4 /* CompletionItemKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);
    byKind.set(5 /* CompletionItemKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);
    byKind.set(6 /* CompletionItemKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);
    byKind.set(7 /* CompletionItemKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);
    byKind.set(8 /* CompletionItemKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);
    byKind.set(9 /* CompletionItemKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);
    byKind.set(10 /* CompletionItemKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);
    byKind.set(11 /* CompletionItemKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);
    byKind.set(12 /* CompletionItemKind.Unit */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolUnit);
    byKind.set(13 /* CompletionItemKind.Value */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolValue);
    byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);
    byKind.set(14 /* CompletionItemKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);
    byKind.set(15 /* CompletionItemKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);
    byKind.set(16 /* CompletionItemKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);
    byKind.set(17 /* CompletionItemKind.Keyword */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKeyword);
    byKind.set(27 /* CompletionItemKind.Snippet */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolSnippet);
    byKind.set(18 /* CompletionItemKind.Text */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolText);
    byKind.set(19 /* CompletionItemKind.Color */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolColor);
    byKind.set(20 /* CompletionItemKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);
    byKind.set(21 /* CompletionItemKind.Reference */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolReference);
    byKind.set(22 /* CompletionItemKind.Customcolor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolCustomColor);
    byKind.set(23 /* CompletionItemKind.Folder */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFolder);
    byKind.set(24 /* CompletionItemKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);
    byKind.set(25 /* CompletionItemKind.User */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.account);
    byKind.set(26 /* CompletionItemKind.Issue */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.issues);
    /**
     * @internal
     */
    function toIcon(kind) {
        let codicon = byKind.get(kind);
        if (!codicon) {
            console.info('No codicon found for CompletionItemKind ' + kind);
            codicon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;
        }
        return codicon;
    }
    CompletionItemKinds.toIcon = toIcon;
    const data = new Map();
    data.set('method', 0 /* CompletionItemKind.Method */);
    data.set('function', 1 /* CompletionItemKind.Function */);
    data.set('constructor', 2 /* CompletionItemKind.Constructor */);
    data.set('field', 3 /* CompletionItemKind.Field */);
    data.set('variable', 4 /* CompletionItemKind.Variable */);
    data.set('class', 5 /* CompletionItemKind.Class */);
    data.set('struct', 6 /* CompletionItemKind.Struct */);
    data.set('interface', 7 /* CompletionItemKind.Interface */);
    data.set('module', 8 /* CompletionItemKind.Module */);
    data.set('property', 9 /* CompletionItemKind.Property */);
    data.set('event', 10 /* CompletionItemKind.Event */);
    data.set('operator', 11 /* CompletionItemKind.Operator */);
    data.set('unit', 12 /* CompletionItemKind.Unit */);
    data.set('value', 13 /* CompletionItemKind.Value */);
    data.set('constant', 14 /* CompletionItemKind.Constant */);
    data.set('enum', 15 /* CompletionItemKind.Enum */);
    data.set('enum-member', 16 /* CompletionItemKind.EnumMember */);
    data.set('enumMember', 16 /* CompletionItemKind.EnumMember */);
    data.set('keyword', 17 /* CompletionItemKind.Keyword */);
    data.set('snippet', 27 /* CompletionItemKind.Snippet */);
    data.set('text', 18 /* CompletionItemKind.Text */);
    data.set('color', 19 /* CompletionItemKind.Color */);
    data.set('file', 20 /* CompletionItemKind.File */);
    data.set('reference', 21 /* CompletionItemKind.Reference */);
    data.set('customcolor', 22 /* CompletionItemKind.Customcolor */);
    data.set('folder', 23 /* CompletionItemKind.Folder */);
    data.set('type-parameter', 24 /* CompletionItemKind.TypeParameter */);
    data.set('typeParameter', 24 /* CompletionItemKind.TypeParameter */);
    data.set('account', 25 /* CompletionItemKind.User */);
    data.set('issue', 26 /* CompletionItemKind.Issue */);
    /**
     * @internal
     */
    function fromString(value, strict) {
        let res = data.get(value);
        if (typeof res === 'undefined' && !strict) {
            res = 9 /* CompletionItemKind.Property */;
        }
        return res;
    }
    CompletionItemKinds.fromString = fromString;
})(CompletionItemKinds || (CompletionItemKinds = {}));
/**
 * How an {@link InlineCompletionsProvider inline completion provider} was triggered.
 */
var InlineCompletionTriggerKind;
(function (InlineCompletionTriggerKind) {
    /**
     * Completion was triggered automatically while editing.
     * It is sufficient to return a single completion item in this case.
     */
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Automatic"] = 0] = "Automatic";
    /**
     * Completion was triggered explicitly by a user gesture.
     * Return multiple completion items to enable cycling through them.
     */
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Explicit"] = 1] = "Explicit";
})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
class SelectedSuggestionInfo {
    constructor(range, text, completionKind, isSnippetText) {
        this.range = range;
        this.text = text;
        this.completionKind = completionKind;
        this.isSnippetText = isSnippetText;
    }
    equals(other) {
        return _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(this.range).equalsRange(other.range)
            && this.text === other.text
            && this.completionKind === other.completionKind
            && this.isSnippetText === other.isSnippetText;
    }
}
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoke"] = 1] = "Invoke";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"] = 2] = "TriggerCharacter";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"] = 3] = "ContentChange";
})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind[DocumentHighlightKind["Text"] = 0] = "Text";
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Read"] = 1] = "Read";
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Write"] = 2] = "Write";
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * @internal
 */
function isLocationLink(thing) {
    return thing
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(thing.uri)
        && _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.range)
        && (_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.originSelectionRange) || _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.isIRange(thing.targetSelectionRange));
}
/**
 * @internal
 */
const symbolKindNames = {
    [17 /* SymbolKind.Array */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Array', "array"),
    [16 /* SymbolKind.Boolean */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Boolean', "boolean"),
    [4 /* SymbolKind.Class */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Class', "class"),
    [13 /* SymbolKind.Constant */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constant', "constant"),
    [8 /* SymbolKind.Constructor */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Constructor', "constructor"),
    [9 /* SymbolKind.Enum */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Enum', "enumeration"),
    [21 /* SymbolKind.EnumMember */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('EnumMember', "enumeration member"),
    [23 /* SymbolKind.Event */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Event', "event"),
    [7 /* SymbolKind.Field */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Field', "field"),
    [0 /* SymbolKind.File */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('File', "file"),
    [11 /* SymbolKind.Function */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Function', "function"),
    [10 /* SymbolKind.Interface */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Interface', "interface"),
    [19 /* SymbolKind.Key */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Key', "key"),
    [5 /* SymbolKind.Method */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Method', "method"),
    [1 /* SymbolKind.Module */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Module', "module"),
    [2 /* SymbolKind.Namespace */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Namespace', "namespace"),
    [20 /* SymbolKind.Null */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Null', "null"),
    [15 /* SymbolKind.Number */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Number', "number"),
    [18 /* SymbolKind.Object */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Object', "object"),
    [24 /* SymbolKind.Operator */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Operator', "operator"),
    [3 /* SymbolKind.Package */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Package', "package"),
    [6 /* SymbolKind.Property */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Property', "property"),
    [14 /* SymbolKind.String */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('String', "string"),
    [22 /* SymbolKind.Struct */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Struct', "struct"),
    [25 /* SymbolKind.TypeParameter */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('TypeParameter', "type parameter"),
    [12 /* SymbolKind.Variable */]: (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('Variable', "variable"),
};
/**
 * @internal
 */
function getAriaLabelForSymbol(symbolName, kind) {
    return (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localize)('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);
}
/**
 * @internal
 */
var SymbolKinds;
(function (SymbolKinds) {
    const byKind = new Map();
    byKind.set(0 /* SymbolKind.File */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFile);
    byKind.set(1 /* SymbolKind.Module */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolModule);
    byKind.set(2 /* SymbolKind.Namespace */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNamespace);
    byKind.set(3 /* SymbolKind.Package */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolPackage);
    byKind.set(4 /* SymbolKind.Class */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolClass);
    byKind.set(5 /* SymbolKind.Method */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolMethod);
    byKind.set(6 /* SymbolKind.Property */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty);
    byKind.set(7 /* SymbolKind.Field */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolField);
    byKind.set(8 /* SymbolKind.Constructor */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstructor);
    byKind.set(9 /* SymbolKind.Enum */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnum);
    byKind.set(10 /* SymbolKind.Interface */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolInterface);
    byKind.set(11 /* SymbolKind.Function */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolFunction);
    byKind.set(12 /* SymbolKind.Variable */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolVariable);
    byKind.set(13 /* SymbolKind.Constant */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolConstant);
    byKind.set(14 /* SymbolKind.String */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolString);
    byKind.set(15 /* SymbolKind.Number */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNumber);
    byKind.set(16 /* SymbolKind.Boolean */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolBoolean);
    byKind.set(17 /* SymbolKind.Array */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolArray);
    byKind.set(18 /* SymbolKind.Object */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolObject);
    byKind.set(19 /* SymbolKind.Key */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolKey);
    byKind.set(20 /* SymbolKind.Null */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolNull);
    byKind.set(21 /* SymbolKind.EnumMember */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEnumMember);
    byKind.set(22 /* SymbolKind.Struct */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolStruct);
    byKind.set(23 /* SymbolKind.Event */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolEvent);
    byKind.set(24 /* SymbolKind.Operator */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolOperator);
    byKind.set(25 /* SymbolKind.TypeParameter */, _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolTypeParameter);
    /**
     * @internal
     */
    function toIcon(kind) {
        let icon = byKind.get(kind);
        if (!icon) {
            console.info('No codicon found for SymbolKind ' + kind);
            icon = _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.symbolProperty;
        }
        return icon;
    }
    SymbolKinds.toIcon = toIcon;
})(SymbolKinds || (SymbolKinds = {}));
/** @internal */
class TextEdit {
}
class FoldingRangeKind {
    /**
     * Returns a {@link FoldingRangeKind} for the given value.
     *
     * @param value of the kind.
     */
    static fromValue(value) {
        switch (value) {
            case 'comment': return FoldingRangeKind.Comment;
            case 'imports': return FoldingRangeKind.Imports;
            case 'region': return FoldingRangeKind.Region;
        }
        return new FoldingRangeKind(value);
    }
    /**
     * Creates a new {@link FoldingRangeKind}.
     *
     * @param value of the kind.
     */
    constructor(value) {
        this.value = value;
    }
}
/**
 * Kind for folding range representing a comment. The value of the kind is 'comment'.
 */
FoldingRangeKind.Comment = new FoldingRangeKind('comment');
/**
 * Kind for folding range representing a import. The value of the kind is 'imports'.
 */
FoldingRangeKind.Imports = new FoldingRangeKind('imports');
/**
 * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).
 * The value of the kind is 'region'.
 */
FoldingRangeKind.Region = new FoldingRangeKind('region');
/**
 * @internal
 */
var Command;
(function (Command) {
    /**
     * @internal
     */
    function is(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }
        return typeof obj.id === 'string' &&
            typeof obj.title === 'string';
    }
    Command.is = is;
})(Command || (Command = {}));
var InlayHintKind;
(function (InlayHintKind) {
    InlayHintKind[InlayHintKind["Type"] = 1] = "Type";
    InlayHintKind[InlayHintKind["Parameter"] = 2] = "Parameter";
})(InlayHintKind || (InlayHintKind = {}));
/**
 * @internal
 */
class LazyTokenizationSupport {
    constructor(createSupport) {
        this.createSupport = createSupport;
        this._tokenizationSupport = null;
    }
    dispose() {
        if (this._tokenizationSupport) {
            this._tokenizationSupport.then((support) => {
                if (support) {
                    support.dispose();
                }
            });
        }
    }
    get tokenizationSupport() {
        if (!this._tokenizationSupport) {
            this._tokenizationSupport = this.createSupport();
        }
        return this._tokenizationSupport;
    }
}
/**
 * @internal
 */
const TokenizationRegistry = new _tokenizationRegistry_js__WEBPACK_IMPORTED_MODULE_3__.TokenizationRegistry();


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   computeDefaultDocumentColors: () => (/* binding */ computeDefaultDocumentColors)
/* harmony export */ });
/* harmony import */ var _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/color.js */ "./node_modules/monaco-editor/esm/vs/base/common/color.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function _parseCaptureGroups(captureGroups) {
    const values = [];
    for (const captureGroup of captureGroups) {
        const parsedNumber = Number(captureGroup);
        if (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\s/g, '') !== '') {
            values.push(parsedNumber);
        }
    }
    return values;
}
function _toIColor(r, g, b, a) {
    return {
        red: r / 255,
        blue: b / 255,
        green: g / 255,
        alpha: a
    };
}
function _findRange(model, match) {
    const index = match.index;
    const length = match[0].length;
    if (!index) {
        return;
    }
    const startPosition = model.positionAt(index);
    const range = {
        startLineNumber: startPosition.lineNumber,
        startColumn: startPosition.column,
        endLineNumber: startPosition.lineNumber,
        endColumn: startPosition.column + length
    };
    return range;
}
function _findHexColorInformation(range, hexValue) {
    if (!range) {
        return;
    }
    const parsedHexColor = _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color.Format.CSS.parseHex(hexValue);
    if (!parsedHexColor) {
        return;
    }
    return {
        range: range,
        color: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)
    };
}
function _findRGBColorInformation(range, matches, isAlpha) {
    if (!range || matches.length !== 1) {
        return;
    }
    const match = matches[0];
    const captureGroups = match.values();
    const parsedRegex = _parseCaptureGroups(captureGroups);
    return {
        range: range,
        color: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)
    };
}
function _findHSLColorInformation(range, matches, isAlpha) {
    if (!range || matches.length !== 1) {
        return;
    }
    const match = matches[0];
    const captureGroups = match.values();
    const parsedRegex = _parseCaptureGroups(captureGroups);
    const colorEquivalent = new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.Color(new _base_common_color_js__WEBPACK_IMPORTED_MODULE_0__.HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));
    return {
        range: range,
        color: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)
    };
}
function _findMatches(model, regex) {
    if (typeof model === 'string') {
        return [...model.matchAll(regex)];
    }
    else {
        return model.findMatches(regex);
    }
}
function computeColors(model) {
    const result = [];
    // Early validation for RGB and HSL
    const initialValidationRegex = /\b(rgb|rgba|hsl|hsla)(\([0-9\s,.\%]*\))|(#)([A-Fa-f0-9]{3})\b|(#)([A-Fa-f0-9]{4})\b|(#)([A-Fa-f0-9]{6})\b|(#)([A-Fa-f0-9]{8})\b/gm;
    const initialValidationMatches = _findMatches(model, initialValidationRegex);
    // Potential colors have been found, validate the parameters
    if (initialValidationMatches.length > 0) {
        for (const initialMatch of initialValidationMatches) {
            const initialCaptureGroups = initialMatch.filter(captureGroup => captureGroup !== undefined);
            const colorScheme = initialCaptureGroups[1];
            const colorParameters = initialCaptureGroups[2];
            if (!colorParameters) {
                continue;
            }
            let colorInformation;
            if (colorScheme === 'rgb') {
                const regexParameters = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*\)$/gm;
                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);
            }
            else if (colorScheme === 'rgba') {
                const regexParameters = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);
            }
            else if (colorScheme === 'hsl') {
                const regexParameters = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*\)$/gm;
                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);
            }
            else if (colorScheme === 'hsla') {
                const regexParameters = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);
            }
            else if (colorScheme === '#') {
                colorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);
            }
            if (colorInformation) {
                result.push(colorInformation);
            }
        }
    }
    return result;
}
/**
 * Returns an array of all default document colors in the provided document
 */
function computeDefaultDocumentColors(model) {
    if (!model || typeof model.getValue !== 'function' || typeof model.positionAt !== 'function') {
        // Unknown caller!
        return [];
    }
    return computeColors(model);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinkComputer: () => (/* binding */ LinkComputer),
/* harmony export */   StateMachine: () => (/* binding */ StateMachine),
/* harmony export */   computeLinks: () => (/* binding */ computeLinks)
/* harmony export */ });
/* harmony import */ var _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/characterClassifier.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

class Uint8Matrix {
    constructor(rows, cols, defaultValue) {
        const data = new Uint8Array(rows * cols);
        for (let i = 0, len = rows * cols; i < len; i++) {
            data[i] = defaultValue;
        }
        this._data = data;
        this.rows = rows;
        this.cols = cols;
    }
    get(row, col) {
        return this._data[row * this.cols + col];
    }
    set(row, col, value) {
        this._data[row * this.cols + col] = value;
    }
}
class StateMachine {
    constructor(edges) {
        let maxCharCode = 0;
        let maxState = 0 /* State.Invalid */;
        for (let i = 0, len = edges.length; i < len; i++) {
            const [from, chCode, to] = edges[i];
            if (chCode > maxCharCode) {
                maxCharCode = chCode;
            }
            if (from > maxState) {
                maxState = from;
            }
            if (to > maxState) {
                maxState = to;
            }
        }
        maxCharCode++;
        maxState++;
        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);
        for (let i = 0, len = edges.length; i < len; i++) {
            const [from, chCode, to] = edges[i];
            states.set(from, chCode, to);
        }
        this._states = states;
        this._maxCharCode = maxCharCode;
    }
    nextState(currentState, chCode) {
        if (chCode < 0 || chCode >= this._maxCharCode) {
            return 0 /* State.Invalid */;
        }
        return this._states.get(currentState, chCode);
    }
}
// State machine for http:// or https:// or file://
let _stateMachine = null;
function getStateMachine() {
    if (_stateMachine === null) {
        _stateMachine = new StateMachine([
            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],
            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],
            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],
            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],
            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],
            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],
            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],
            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],
            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],
            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],
            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],
            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],
            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],
            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],
            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],
            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],
            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],
            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],
            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],
            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],
            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],
            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],
        ]);
    }
    return _stateMachine;
}
let _classifier = null;
function getClassifier() {
    if (_classifier === null) {
        _classifier = new _core_characterClassifier_js__WEBPACK_IMPORTED_MODULE_0__.CharacterClassifier(0 /* CharacterClass.None */);
        // allow-any-unicode-next-line
        const FORCE_TERMINATION_CHARACTERS = ' \t<>\'\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';
        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {
            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);
        }
        const CANNOT_END_WITH_CHARACTERS = '.,;:';
        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {
            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);
        }
    }
    return _classifier;
}
class LinkComputer {
    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {
        // Do not allow to end link in certain characters...
        let lastIncludedCharIndex = linkEndIndex - 1;
        do {
            const chCode = line.charCodeAt(lastIncludedCharIndex);
            const chClass = classifier.get(chCode);
            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {
                break;
            }
            lastIncludedCharIndex--;
        } while (lastIncludedCharIndex > linkBeginIndex);
        // Handle links enclosed in parens, square brackets and curlys.
        if (linkBeginIndex > 0) {
            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);
            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);
            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)
                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)
                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {
                // Do not end in ) if ( is before the link start
                // Do not end in ] if [ is before the link start
                // Do not end in } if { is before the link start
                lastIncludedCharIndex--;
            }
        }
        return {
            range: {
                startLineNumber: lineNumber,
                startColumn: linkBeginIndex + 1,
                endLineNumber: lineNumber,
                endColumn: lastIncludedCharIndex + 2
            },
            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)
        };
    }
    static computeLinks(model, stateMachine = getStateMachine()) {
        const classifier = getClassifier();
        const result = [];
        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {
            const line = model.getLineContent(i);
            const len = line.length;
            let j = 0;
            let linkBeginIndex = 0;
            let linkBeginChCode = 0;
            let state = 1 /* State.Start */;
            let hasOpenParens = false;
            let hasOpenSquareBracket = false;
            let inSquareBrackets = false;
            let hasOpenCurlyBracket = false;
            while (j < len) {
                let resetStateMachine = false;
                const chCode = line.charCodeAt(j);
                if (state === 13 /* State.Accept */) {
                    let chClass;
                    switch (chCode) {
                        case 40 /* CharCode.OpenParen */:
                            hasOpenParens = true;
                            chClass = 0 /* CharacterClass.None */;
                            break;
                        case 41 /* CharCode.CloseParen */:
                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);
                            break;
                        case 91 /* CharCode.OpenSquareBracket */:
                            inSquareBrackets = true;
                            hasOpenSquareBracket = true;
                            chClass = 0 /* CharacterClass.None */;
                            break;
                        case 93 /* CharCode.CloseSquareBracket */:
                            inSquareBrackets = false;
                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);
                            break;
                        case 123 /* CharCode.OpenCurlyBrace */:
                            hasOpenCurlyBracket = true;
                            chClass = 0 /* CharacterClass.None */;
                            break;
                        case 125 /* CharCode.CloseCurlyBrace */:
                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);
                            break;
                        // The following three rules make it that ' or " or ` are allowed inside links
                        // only if the link is wrapped by some other quote character
                        case 39 /* CharCode.SingleQuote */:
                        case 34 /* CharCode.DoubleQuote */:
                        case 96 /* CharCode.BackTick */:
                            if (linkBeginChCode === chCode) {
                                chClass = 1 /* CharacterClass.ForceTermination */;
                            }
                            else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {
                                chClass = 0 /* CharacterClass.None */;
                            }
                            else {
                                chClass = 1 /* CharacterClass.ForceTermination */;
                            }
                            break;
                        case 42 /* CharCode.Asterisk */:
                            // `*` terminates a link if the link began with `*`
                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;
                            break;
                        case 124 /* CharCode.Pipe */:
                            // `|` terminates a link if the link began with `|`
                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;
                            break;
                        case 32 /* CharCode.Space */:
                            // ` ` allow space in between [ and ]
                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);
                            break;
                        default:
                            chClass = classifier.get(chCode);
                    }
                    // Check if character terminates link
                    if (chClass === 1 /* CharacterClass.ForceTermination */) {
                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));
                        resetStateMachine = true;
                    }
                }
                else if (state === 12 /* State.End */) {
                    let chClass;
                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {
                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]
                        hasOpenSquareBracket = true;
                        chClass = 0 /* CharacterClass.None */;
                    }
                    else {
                        chClass = classifier.get(chCode);
                    }
                    // Check if character terminates link
                    if (chClass === 1 /* CharacterClass.ForceTermination */) {
                        resetStateMachine = true;
                    }
                    else {
                        state = 13 /* State.Accept */;
                    }
                }
                else {
                    state = stateMachine.nextState(state, chCode);
                    if (state === 0 /* State.Invalid */) {
                        resetStateMachine = true;
                    }
                }
                if (resetStateMachine) {
                    state = 1 /* State.Start */;
                    hasOpenParens = false;
                    hasOpenSquareBracket = false;
                    hasOpenCurlyBracket = false;
                    // Record where the link started
                    linkBeginIndex = j + 1;
                    linkBeginChCode = chCode;
                }
                j++;
            }
            if (state === 13 /* State.Accept */) {
                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));
            }
        }
        return result;
    }
}
/**
 * Returns an array of all links contains in the provided
 * document. *Note* that this operation is computational
 * expensive and should not run in the UI thread.
 */
function computeLinks(model) {
    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {
        // Unknown caller!
        return [];
    }
    return LinkComputer.computeLinks(model);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BasicInplaceReplace: () => (/* binding */ BasicInplaceReplace)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
class BasicInplaceReplace {
    constructor() {
        this._defaultValueSet = [
            ['true', 'false'],
            ['True', 'False'],
            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],
            ['public', 'protected', 'private'],
        ];
    }
    navigateValueSet(range1, text1, range2, text2, up) {
        if (range1 && text1) {
            const result = this.doNavigateValueSet(text1, up);
            if (result) {
                return {
                    range: range1,
                    value: result
                };
            }
        }
        if (range2 && text2) {
            const result = this.doNavigateValueSet(text2, up);
            if (result) {
                return {
                    range: range2,
                    value: result
                };
            }
        }
        return null;
    }
    doNavigateValueSet(text, up) {
        const numberResult = this.numberReplace(text, up);
        if (numberResult !== null) {
            return numberResult;
        }
        return this.textReplace(text, up);
    }
    numberReplace(value, up) {
        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));
        let n1 = Number(value);
        const n2 = parseFloat(value);
        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {
            if (n1 === 0 && !up) {
                return null; // don't do negative
                //			} else if(n1 === 9 && up) {
                //				return null; // don't insert 10 into a number
            }
            else {
                n1 = Math.floor(n1 * precision);
                n1 += up ? precision : -precision;
                return String(n1 / precision);
            }
        }
        return null;
    }
    textReplace(value, up) {
        return this.valueSetsReplace(this._defaultValueSet, value, up);
    }
    valueSetsReplace(valueSets, value, up) {
        let result = null;
        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {
            result = this.valueSetReplace(valueSets[i], value, up);
        }
        return result;
    }
    valueSetReplace(valueSet, value, up) {
        let idx = valueSet.indexOf(value);
        if (idx >= 0) {
            idx += up ? +1 : -1;
            if (idx < 0) {
                idx = valueSet.length - 1;
            }
            else {
                idx %= valueSet.length;
            }
            return valueSet[idx];
        }
        return null;
    }
}
BasicInplaceReplace.INSTANCE = new BasicInplaceReplace();


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model.js":
/*!******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApplyEditsResult: () => (/* binding */ ApplyEditsResult),
/* harmony export */   FindMatch: () => (/* binding */ FindMatch),
/* harmony export */   GlyphMarginLane: () => (/* binding */ GlyphMarginLane),
/* harmony export */   InjectedTextCursorStops: () => (/* binding */ InjectedTextCursorStops),
/* harmony export */   MinimapPosition: () => (/* binding */ MinimapPosition),
/* harmony export */   OverviewRulerLane: () => (/* binding */ OverviewRulerLane),
/* harmony export */   SearchData: () => (/* binding */ SearchData),
/* harmony export */   TextModelResolvedOptions: () => (/* binding */ TextModelResolvedOptions),
/* harmony export */   ValidAnnotatedEditOperation: () => (/* binding */ ValidAnnotatedEditOperation),
/* harmony export */   isITextSnapshot: () => (/* binding */ isITextSnapshot),
/* harmony export */   shouldSynchronizeModel: () => (/* binding */ shouldSynchronizeModel)
/* harmony export */ });
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/objects.js */ "./node_modules/monaco-editor/esm/vs/base/common/objects.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Vertical Lane in the overview ruler of the editor.
 */
var OverviewRulerLane;
(function (OverviewRulerLane) {
    OverviewRulerLane[OverviewRulerLane["Left"] = 1] = "Left";
    OverviewRulerLane[OverviewRulerLane["Center"] = 2] = "Center";
    OverviewRulerLane[OverviewRulerLane["Right"] = 4] = "Right";
    OverviewRulerLane[OverviewRulerLane["Full"] = 7] = "Full";
})(OverviewRulerLane || (OverviewRulerLane = {}));
/**
 * Vertical Lane in the glyph margin of the editor.
 */
var GlyphMarginLane;
(function (GlyphMarginLane) {
    GlyphMarginLane[GlyphMarginLane["Left"] = 1] = "Left";
    GlyphMarginLane[GlyphMarginLane["Right"] = 2] = "Right";
})(GlyphMarginLane || (GlyphMarginLane = {}));
/**
 * Position in the minimap to render the decoration.
 */
var MinimapPosition;
(function (MinimapPosition) {
    MinimapPosition[MinimapPosition["Inline"] = 1] = "Inline";
    MinimapPosition[MinimapPosition["Gutter"] = 2] = "Gutter";
})(MinimapPosition || (MinimapPosition = {}));
var InjectedTextCursorStops;
(function (InjectedTextCursorStops) {
    InjectedTextCursorStops[InjectedTextCursorStops["Both"] = 0] = "Both";
    InjectedTextCursorStops[InjectedTextCursorStops["Right"] = 1] = "Right";
    InjectedTextCursorStops[InjectedTextCursorStops["Left"] = 2] = "Left";
    InjectedTextCursorStops[InjectedTextCursorStops["None"] = 3] = "None";
})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));
class TextModelResolvedOptions {
    get originalIndentSize() {
        return this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;
    }
    /**
     * @internal
     */
    constructor(src) {
        this._textModelResolvedOptionsBrand = undefined;
        this.tabSize = Math.max(1, src.tabSize | 0);
        if (src.indentSize === 'tabSize') {
            this.indentSize = this.tabSize;
            this._indentSizeIsTabSize = true;
        }
        else {
            this.indentSize = Math.max(1, src.indentSize | 0);
            this._indentSizeIsTabSize = false;
        }
        this.insertSpaces = Boolean(src.insertSpaces);
        this.defaultEOL = src.defaultEOL | 0;
        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);
        this.bracketPairColorizationOptions = src.bracketPairColorizationOptions;
    }
    /**
     * @internal
     */
    equals(other) {
        return (this.tabSize === other.tabSize
            && this._indentSizeIsTabSize === other._indentSizeIsTabSize
            && this.indentSize === other.indentSize
            && this.insertSpaces === other.insertSpaces
            && this.defaultEOL === other.defaultEOL
            && this.trimAutoWhitespace === other.trimAutoWhitespace
            && (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__.equals)(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions));
    }
    /**
     * @internal
     */
    createChangeEvent(newOpts) {
        return {
            tabSize: this.tabSize !== newOpts.tabSize,
            indentSize: this.indentSize !== newOpts.indentSize,
            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,
            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,
        };
    }
}
class FindMatch {
    /**
     * @internal
     */
    constructor(range, matches) {
        this._findMatchBrand = undefined;
        this.range = range;
        this.matches = matches;
    }
}
/**
 * @internal
 */
function isITextSnapshot(obj) {
    return (obj && typeof obj.read === 'function');
}
/**
 * @internal
 */
class ValidAnnotatedEditOperation {
    constructor(identifier, range, text, forceMoveMarkers, isAutoWhitespaceEdit, _isTracked) {
        this.identifier = identifier;
        this.range = range;
        this.text = text;
        this.forceMoveMarkers = forceMoveMarkers;
        this.isAutoWhitespaceEdit = isAutoWhitespaceEdit;
        this._isTracked = _isTracked;
    }
}
/**
 * @internal
 */
class SearchData {
    constructor(regex, wordSeparators, simpleSearch) {
        this.regex = regex;
        this.wordSeparators = wordSeparators;
        this.simpleSearch = simpleSearch;
    }
}
/**
 * @internal
 */
class ApplyEditsResult {
    constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {
        this.reverseEdits = reverseEdits;
        this.changes = changes;
        this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;
    }
}
/**
 * @internal
 */
function shouldSynchronizeModel(model) {
    return (!model.isTooLargeForSyncing() && !model.isForSimpleWidget);
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MirrorTextModel: () => (/* binding */ MirrorTextModel)
/* harmony export */ });
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/monaco-editor/esm/vs/base/common/strings.js");
/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/position.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js");
/* harmony import */ var _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prefixSumComputer.js */ "./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



class MirrorTextModel {
    constructor(uri, lines, eol, versionId) {
        this._uri = uri;
        this._lines = lines;
        this._eol = eol;
        this._versionId = versionId;
        this._lineStarts = null;
        this._cachedTextValue = null;
    }
    dispose() {
        this._lines.length = 0;
    }
    get version() {
        return this._versionId;
    }
    getText() {
        if (this._cachedTextValue === null) {
            this._cachedTextValue = this._lines.join(this._eol);
        }
        return this._cachedTextValue;
    }
    onEvents(e) {
        if (e.eol && e.eol !== this._eol) {
            this._eol = e.eol;
            this._lineStarts = null;
        }
        // Update my lines
        const changes = e.changes;
        for (const change of changes) {
            this._acceptDeleteRange(change.range);
            this._acceptInsertText(new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(change.range.startLineNumber, change.range.startColumn), change.text);
        }
        this._versionId = e.versionId;
        this._cachedTextValue = null;
    }
    _ensureLineStarts() {
        if (!this._lineStarts) {
            const eolLength = this._eol.length;
            const linesLength = this._lines.length;
            const lineStartValues = new Uint32Array(linesLength);
            for (let i = 0; i < linesLength; i++) {
                lineStartValues[i] = this._lines[i].length + eolLength;
            }
            this._lineStarts = new _prefixSumComputer_js__WEBPACK_IMPORTED_MODULE_2__.PrefixSumComputer(lineStartValues);
        }
    }
    /**
     * All changes to a line's text go through this method
     */
    _setLineText(lineIndex, newValue) {
        this._lines[lineIndex] = newValue;
        if (this._lineStarts) {
            // update prefix sum
            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);
        }
    }
    _acceptDeleteRange(range) {
        if (range.startLineNumber === range.endLineNumber) {
            if (range.startColumn === range.endColumn) {
                // Nothing to delete
                return;
            }
            // Delete text on the affected line
            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)
                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));
            return;
        }
        // Take remaining text on last line and append it to remaining text on first line
        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)
            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));
        // Delete middle lines
        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);
        if (this._lineStarts) {
            // update prefix sum
            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);
        }
    }
    _acceptInsertText(position, insertText) {
        if (insertText.length === 0) {
            // Nothing to insert
            return;
        }
        const insertLines = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.splitLines)(insertText);
        if (insertLines.length === 1) {
            // Inserting text on one line
            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)
                + insertLines[0]
                + this._lines[position.lineNumber - 1].substring(position.column - 1));
            return;
        }
        // Append overflowing text from first line to the end of text to insert
        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);
        // Delete overflowing text from first line and insert text on first line
        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)
            + insertLines[0]);
        // Insert new lines & store lengths
        const newLengths = new Uint32Array(insertLines.length - 1);
        for (let i = 1; i < insertLines.length; i++) {
            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);
            newLengths[i - 1] = insertLines[i].length + this._eol.length;
        }
        if (this._lineStarts) {
            // update prefix sum
            this._lineStarts.insertValues(position.lineNumber, newLengths);
        }
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConstantTimePrefixSumComputer: () => (/* binding */ ConstantTimePrefixSumComputer),
/* harmony export */   PrefixSumComputer: () => (/* binding */ PrefixSumComputer),
/* harmony export */   PrefixSumIndexOfResult: () => (/* binding */ PrefixSumIndexOfResult)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/monaco-editor/esm/vs/base/common/arrays.js");
/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uint.js */ "./node_modules/monaco-editor/esm/vs/base/common/uint.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class PrefixSumComputer {
    constructor(values) {
        this.values = values;
        this.prefixSum = new Uint32Array(values.length);
        this.prefixSumValidIndex = new Int32Array(1);
        this.prefixSumValidIndex[0] = -1;
    }
    insertValues(insertIndex, insertValues) {
        insertIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(insertIndex);
        const oldValues = this.values;
        const oldPrefixSum = this.prefixSum;
        const insertValuesLen = insertValues.length;
        if (insertValuesLen === 0) {
            return false;
        }
        this.values = new Uint32Array(oldValues.length + insertValuesLen);
        this.values.set(oldValues.subarray(0, insertIndex), 0);
        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);
        this.values.set(insertValues, insertIndex);
        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {
            this.prefixSumValidIndex[0] = insertIndex - 1;
        }
        this.prefixSum = new Uint32Array(this.values.length);
        if (this.prefixSumValidIndex[0] >= 0) {
            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));
        }
        return true;
    }
    setValue(index, value) {
        index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);
        value = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(value);
        if (this.values[index] === value) {
            return false;
        }
        this.values[index] = value;
        if (index - 1 < this.prefixSumValidIndex[0]) {
            this.prefixSumValidIndex[0] = index - 1;
        }
        return true;
    }
    removeValues(startIndex, count) {
        startIndex = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(startIndex);
        count = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(count);
        const oldValues = this.values;
        const oldPrefixSum = this.prefixSum;
        if (startIndex >= oldValues.length) {
            return false;
        }
        const maxCount = oldValues.length - startIndex;
        if (count >= maxCount) {
            count = maxCount;
        }
        if (count === 0) {
            return false;
        }
        this.values = new Uint32Array(oldValues.length - count);
        this.values.set(oldValues.subarray(0, startIndex), 0);
        this.values.set(oldValues.subarray(startIndex + count), startIndex);
        this.prefixSum = new Uint32Array(this.values.length);
        if (startIndex - 1 < this.prefixSumValidIndex[0]) {
            this.prefixSumValidIndex[0] = startIndex - 1;
        }
        if (this.prefixSumValidIndex[0] >= 0) {
            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));
        }
        return true;
    }
    getTotalSum() {
        if (this.values.length === 0) {
            return 0;
        }
        return this._getPrefixSum(this.values.length - 1);
    }
    /**
     * Returns the sum of the first `index + 1` many items.
     * @returns `SUM(0 <= j <= index, values[j])`.
     */
    getPrefixSum(index) {
        if (index < 0) {
            return 0;
        }
        index = (0,_base_common_uint_js__WEBPACK_IMPORTED_MODULE_1__.toUint32)(index);
        return this._getPrefixSum(index);
    }
    _getPrefixSum(index) {
        if (index <= this.prefixSumValidIndex[0]) {
            return this.prefixSum[index];
        }
        let startIndex = this.prefixSumValidIndex[0] + 1;
        if (startIndex === 0) {
            this.prefixSum[0] = this.values[0];
            startIndex++;
        }
        if (index >= this.values.length) {
            index = this.values.length - 1;
        }
        for (let i = startIndex; i <= index; i++) {
            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];
        }
        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);
        return this.prefixSum[index];
    }
    getIndexOf(sum) {
        sum = Math.floor(sum);
        // Compute all sums (to get a fully valid prefixSum)
        this.getTotalSum();
        let low = 0;
        let high = this.values.length - 1;
        let mid = 0;
        let midStop = 0;
        let midStart = 0;
        while (low <= high) {
            mid = low + ((high - low) / 2) | 0;
            midStop = this.prefixSum[mid];
            midStart = midStop - this.values[mid];
            if (sum < midStart) {
                high = mid - 1;
            }
            else if (sum >= midStop) {
                low = mid + 1;
            }
            else {
                break;
            }
        }
        return new PrefixSumIndexOfResult(mid, sum - midStart);
    }
}
/**
 * {@link getIndexOf} has an amortized runtime complexity of O(1).
 *
 * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))
*/
class ConstantTimePrefixSumComputer {
    constructor(values) {
        this._values = values;
        this._isValid = false;
        this._validEndIndex = -1;
        this._prefixSum = [];
        this._indexBySum = [];
    }
    /**
     * @returns SUM(0 <= j < values.length, values[j])
     */
    getTotalSum() {
        this._ensureValid();
        return this._indexBySum.length;
    }
    /**
     * Returns the sum of the first `count` many items.
     * @returns `SUM(0 <= j < count, values[j])`.
     */
    getPrefixSum(count) {
        this._ensureValid();
        if (count === 0) {
            return 0;
        }
        return this._prefixSum[count - 1];
    }
    /**
     * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`
     */
    getIndexOf(sum) {
        this._ensureValid();
        const idx = this._indexBySum[sum];
        const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;
        return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);
    }
    removeValues(start, deleteCount) {
        this._values.splice(start, deleteCount);
        this._invalidate(start);
    }
    insertValues(insertIndex, insertArr) {
        this._values = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.arrayInsert)(this._values, insertIndex, insertArr);
        this._invalidate(insertIndex);
    }
    _invalidate(index) {
        this._isValid = false;
        this._validEndIndex = Math.min(this._validEndIndex, index - 1);
    }
    _ensureValid() {
        if (this._isValid) {
            return;
        }
        for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {
            const value = this._values[i];
            const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;
            this._prefixSum[i] = sumAbove + value;
            for (let j = 0; j < value; j++) {
                this._indexBySum[sumAbove + j] = i;
            }
        }
        // trim things
        this._prefixSum.length = this._values.length;
        this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];
        // mark as valid
        this._isValid = true;
        this._validEndIndex = this._values.length - 1;
    }
    setValue(index, value) {
        if (this._values[index] === value) {
            // no change
            return;
        }
        this._values[index] = value;
        this._invalidate(index);
    }
}
class PrefixSumIndexOfResult {
    constructor(index, remainder) {
        this.index = index;
        this.remainder = remainder;
        this._prefixSumIndexOfResultBrand = undefined;
        this.index = index;
        this.remainder = remainder;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SearchParams: () => (/* binding */ SearchParams),
/* harmony export */   Searcher: () => (/* binding */ Searcher),
/* harmony export */   TextModelSearch: () => (/* binding */ TextModelSearch),
/* harmony export */   createFindMatch: () => (/* binding */ createFindMatch),
/* harmony export */   isMultilineRegexSource: () => (/* binding */ isMultilineRegexSource),
/* harmony export */   isValidMatch: () => (/* binding */ isValidMatch)
/* harmony export */ });
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/monaco-editor/esm/vs/base/common/strings.js");
/* harmony import */ var _core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/wordCharacterClassifier.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js");
/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model.js */ "./node_modules/monaco-editor/esm/vs/editor/common/model.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





const LIMIT_FIND_COUNT = 999;
class SearchParams {
    constructor(searchString, isRegex, matchCase, wordSeparators) {
        this.searchString = searchString;
        this.isRegex = isRegex;
        this.matchCase = matchCase;
        this.wordSeparators = wordSeparators;
    }
    parseSearchRequest() {
        if (this.searchString === '') {
            return null;
        }
        // Try to create a RegExp out of the params
        let multiline;
        if (this.isRegex) {
            multiline = isMultilineRegexSource(this.searchString);
        }
        else {
            multiline = (this.searchString.indexOf('\n') >= 0);
        }
        let regex = null;
        try {
            regex = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.createRegExp(this.searchString, this.isRegex, {
                matchCase: this.matchCase,
                wholeWord: false,
                multiline: multiline,
                global: true,
                unicode: true
            });
        }
        catch (err) {
            return null;
        }
        if (!regex) {
            return null;
        }
        let canUseSimpleSearch = (!this.isRegex && !multiline);
        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {
            // casing might make a difference
            canUseSimpleSearch = this.matchCase;
        }
        return new _model_js__WEBPACK_IMPORTED_MODULE_4__.SearchData(regex, this.wordSeparators ? (0,_core_wordCharacterClassifier_js__WEBPACK_IMPORTED_MODULE_1__.getMapForWordSeparators)(this.wordSeparators) : null, canUseSimpleSearch ? this.searchString : null);
    }
}
function isMultilineRegexSource(searchString) {
    if (!searchString || searchString.length === 0) {
        return false;
    }
    for (let i = 0, len = searchString.length; i < len; i++) {
        const chCode = searchString.charCodeAt(i);
        if (chCode === 10 /* CharCode.LineFeed */) {
            return true;
        }
        if (chCode === 92 /* CharCode.Backslash */) {
            // move to next char
            i++;
            if (i >= len) {
                // string ends with a \
                break;
            }
            const nextChCode = searchString.charCodeAt(i);
            if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {
                return true;
            }
        }
    }
    return false;
}
function createFindMatch(range, rawMatches, captureMatches) {
    if (!captureMatches) {
        return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, null);
    }
    const matches = [];
    for (let i = 0, len = rawMatches.length; i < len; i++) {
        matches[i] = rawMatches[i];
    }
    return new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(range, matches);
}
class LineFeedCounter {
    constructor(text) {
        const lineFeedsOffsets = [];
        let lineFeedsOffsetsLen = 0;
        for (let i = 0, textLen = text.length; i < textLen; i++) {
            if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {
                lineFeedsOffsets[lineFeedsOffsetsLen++] = i;
            }
        }
        this._lineFeedsOffsets = lineFeedsOffsets;
    }
    findLineFeedCountBeforeOffset(offset) {
        const lineFeedsOffsets = this._lineFeedsOffsets;
        let min = 0;
        let max = lineFeedsOffsets.length - 1;
        if (max === -1) {
            // no line feeds
            return 0;
        }
        if (offset <= lineFeedsOffsets[0]) {
            // before first line feed
            return 0;
        }
        while (min < max) {
            const mid = min + ((max - min) / 2 >> 0);
            if (lineFeedsOffsets[mid] >= offset) {
                max = mid - 1;
            }
            else {
                if (lineFeedsOffsets[mid + 1] >= offset) {
                    // bingo!
                    min = mid;
                    max = mid;
                }
                else {
                    min = mid + 1;
                }
            }
        }
        return min + 1;
    }
}
class TextModelSearch {
    static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {
        const searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return [];
        }
        if (searchData.regex.multiline) {
            return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);
        }
        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);
    }
    /**
     * Multiline search always executes on the lines concatenated with \n.
     * We must therefore compensate for the count of \n in case the model is CRLF
     */
    static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {
        let startOffset;
        let lineFeedCountBeforeMatch = 0;
        if (lfCounter) {
            lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);
            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \r as there were \n */;
        }
        else {
            startOffset = deltaOffset + matchIndex;
        }
        let endOffset;
        if (lfCounter) {
            const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);
            const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;
            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \r as there were \n */;
        }
        else {
            endOffset = startOffset + match0.length;
        }
        const startPosition = model.getPositionAt(startOffset);
        const endPosition = model.getPositionAt(endOffset);
        return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);
    }
    static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {
        const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());
        // We always execute multiline search over the lines joined with \n
        // This makes it that \n will match the EOL for both CRLF and LF models
        // We compensate for offset errors in `_getMultilineMatchRange`
        const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);
        const lfCounter = (model.getEOL() === '\r\n' ? new LineFeedCounter(text) : null);
        const result = [];
        let counter = 0;
        let m;
        searcher.reset(0);
        while ((m = searcher.next(text))) {
            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);
            if (counter >= limitResultCount) {
                return result;
            }
        }
        return result;
    }
    static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {
        const result = [];
        let resultLen = 0;
        // Early case for a search range that starts & stops on the same line number
        if (searchRange.startLineNumber === searchRange.endLineNumber) {
            const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);
            resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);
            return result;
        }
        // Collect results from first line
        const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);
        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);
        // Collect results from middle lines
        for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {
            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);
        }
        // Collect results from last line
        if (resultLen < limitResultCount) {
            const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);
            resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);
        }
        return result;
    }
    static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {
        const wordSeparators = searchData.wordSeparators;
        if (!captureMatches && searchData.simpleSearch) {
            const searchString = searchData.simpleSearch;
            const searchStringLen = searchString.length;
            const textLength = text.length;
            let lastMatchIndex = -searchStringLen;
            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {
                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {
                    result[resultLen++] = new _model_js__WEBPACK_IMPORTED_MODULE_4__.FindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);
                    if (resultLen >= limitResultCount) {
                        return resultLen;
                    }
                }
            }
            return resultLen;
        }
        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);
        let m;
        // Reset regex to search from the beginning
        searcher.reset(0);
        do {
            m = searcher.next(text);
            if (m) {
                result[resultLen++] = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);
                if (resultLen >= limitResultCount) {
                    return resultLen;
                }
            }
        } while (m);
        return resultLen;
    }
    static findNextMatch(model, searchParams, searchStart, captureMatches) {
        const searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return null;
        }
        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);
        if (searchData.regex.multiline) {
            return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);
        }
        return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);
    }
    static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {
        const searchTextStart = new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(searchStart.lineNumber, 1);
        const deltaOffset = model.getOffsetAt(searchTextStart);
        const lineCount = model.getLineCount();
        // We always execute multiline search over the lines joined with \n
        // This makes it that \n will match the EOL for both CRLF and LF models
        // We compensate for offset errors in `_getMultilineMatchRange`
        const text = model.getValueInRange(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);
        const lfCounter = (model.getEOL() === '\r\n' ? new LineFeedCounter(text) : null);
        searcher.reset(searchStart.column - 1);
        const m = searcher.next(text);
        if (m) {
            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);
        }
        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {
            // Try again from the top
            return this._doFindNextMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(1, 1), searcher, captureMatches);
        }
        return null;
    }
    static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {
        const lineCount = model.getLineCount();
        const startLineNumber = searchStart.lineNumber;
        // Look in first line
        const text = model.getLineContent(startLineNumber);
        const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);
        if (r) {
            return r;
        }
        for (let i = 1; i <= lineCount; i++) {
            const lineIndex = (startLineNumber + i - 1) % lineCount;
            const text = model.getLineContent(lineIndex + 1);
            const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);
            if (r) {
                return r;
            }
        }
        return null;
    }
    static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {
        // Set regex to search from column
        searcher.reset(fromColumn - 1);
        const m = searcher.next(text);
        if (m) {
            return createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);
        }
        return null;
    }
    static findPreviousMatch(model, searchParams, searchStart, captureMatches) {
        const searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return null;
        }
        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);
        if (searchData.regex.multiline) {
            return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);
        }
        return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);
    }
    static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {
        const matches = this._doFindMatchesMultiline(model, new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);
        if (matches.length > 0) {
            return matches[matches.length - 1];
        }
        const lineCount = model.getLineCount();
        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {
            // Try again with all content
            return this._doFindPreviousMatchMultiline(model, new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);
        }
        return null;
    }
    static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {
        const lineCount = model.getLineCount();
        const startLineNumber = searchStart.lineNumber;
        // Look in first line
        const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);
        const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);
        if (r) {
            return r;
        }
        for (let i = 1; i <= lineCount; i++) {
            const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;
            const text = model.getLineContent(lineIndex + 1);
            const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);
            if (r) {
                return r;
            }
        }
        return null;
    }
    static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {
        let bestResult = null;
        let m;
        searcher.reset(0);
        while ((m = searcher.next(text))) {
            bestResult = createFindMatch(new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);
        }
        return bestResult;
    }
}
function leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {
    if (matchStartIndex === 0) {
        // Match starts at start of string
        return true;
    }
    const charBefore = text.charCodeAt(matchStartIndex - 1);
    if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {
        // The character before the match is a word separator
        return true;
    }
    if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {
        // The character before the match is line break or carriage return.
        return true;
    }
    if (matchLength > 0) {
        const firstCharInMatch = text.charCodeAt(matchStartIndex);
        if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {
            // The first character inside the match is a word separator
            return true;
        }
    }
    return false;
}
function rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {
    if (matchStartIndex + matchLength === textLength) {
        // Match ends at end of string
        return true;
    }
    const charAfter = text.charCodeAt(matchStartIndex + matchLength);
    if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {
        // The character after the match is a word separator
        return true;
    }
    if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {
        // The character after the match is line break or carriage return.
        return true;
    }
    if (matchLength > 0) {
        const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);
        if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {
            // The last character in the match is a word separator
            return true;
        }
    }
    return false;
}
function isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {
    return (leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)
        && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength));
}
class Searcher {
    constructor(wordSeparators, searchRegex) {
        this._wordSeparators = wordSeparators;
        this._searchRegex = searchRegex;
        this._prevMatchStartIndex = -1;
        this._prevMatchLength = 0;
    }
    reset(lastIndex) {
        this._searchRegex.lastIndex = lastIndex;
        this._prevMatchStartIndex = -1;
        this._prevMatchLength = 0;
    }
    next(text) {
        const textLength = text.length;
        let m;
        do {
            if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {
                // Reached the end of the line
                return null;
            }
            m = this._searchRegex.exec(text);
            if (!m) {
                return null;
            }
            const matchStartIndex = m.index;
            const matchLength = m[0].length;
            if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {
                if (matchLength === 0) {
                    // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here
                    // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise
                    if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {
                        this._searchRegex.lastIndex += 2;
                    }
                    else {
                        this._searchRegex.lastIndex += 1;
                    }
                    continue;
                }
                // Exit early if the regex matches the same range twice
                return null;
            }
            this._prevMatchStartIndex = matchStartIndex;
            this._prevMatchLength = matchLength;
            if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {
                return m;
            }
        } while (m);
        return null;
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeyMod: () => (/* binding */ KeyMod),
/* harmony export */   createMonacoBaseAPI: () => (/* binding */ createMonacoBaseAPI)
/* harmony export */ });
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/monaco-editor/esm/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/monaco-editor/esm/vs/base/common/event.js");
/* harmony import */ var _base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/keyCodes.js */ "./node_modules/monaco-editor/esm/vs/base/common/keyCodes.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/monaco-editor/esm/vs/base/common/uri.js");
/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/position.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _core_selection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/selection.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/selection.js");
/* harmony import */ var _languages_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages.js */ "./node_modules/monaco-editor/esm/vs/editor/common/languages.js");
/* harmony import */ var _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../standalone/standaloneEnums.js */ "./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/









class KeyMod {
    static chord(firstPart, secondPart) {
        return (0,_base_common_keyCodes_js__WEBPACK_IMPORTED_MODULE_2__.KeyChord)(firstPart, secondPart);
    }
}
KeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;
KeyMod.Shift = 1024 /* ConstKeyMod.Shift */;
KeyMod.Alt = 512 /* ConstKeyMod.Alt */;
KeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;
function createMonacoBaseAPI() {
    return {
        editor: undefined, // undefined override expected here
        languages: undefined, // undefined override expected here
        CancellationTokenSource: _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource,
        Emitter: _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter,
        KeyCode: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.KeyCode,
        KeyMod: KeyMod,
        Position: _core_position_js__WEBPACK_IMPORTED_MODULE_4__.Position,
        Range: _core_range_js__WEBPACK_IMPORTED_MODULE_5__.Range,
        Selection: _core_selection_js__WEBPACK_IMPORTED_MODULE_6__.Selection,
        SelectionDirection: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.SelectionDirection,
        MarkerSeverity: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerSeverity,
        MarkerTag: _standalone_standaloneEnums_js__WEBPACK_IMPORTED_MODULE_8__.MarkerTag,
        Uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI,
        Token: _languages_js__WEBPACK_IMPORTED_MODULE_7__.Token
    };
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditorSimpleWorker: () => (/* binding */ EditorSimpleWorker),
/* harmony export */   create: () => (/* binding */ create)
/* harmony export */ });
/* harmony import */ var _base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/diff/diff.js */ "./node_modules/monaco-editor/esm/vs/base/common/diff/diff.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/monaco-editor/esm/vs/base/common/uri.js");
/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/position.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/position.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/mirrorTextModel.js */ "./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js");
/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/wordHelper.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js");
/* harmony import */ var _languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../languages/linkComputer.js */ "./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js");
/* harmony import */ var _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../languages/supports/inplaceReplaceSupport.js */ "./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js");
/* harmony import */ var _editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./editorBaseApi.js */ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js");
/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ "./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js");
/* harmony import */ var _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./unicodeTextModelHighlighter.js */ "./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js");
/* harmony import */ var _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../diff/linesDiffComputers.js */ "./node_modules/monaco-editor/esm/vs/editor/common/diff/linesDiffComputers.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/monaco-editor/esm/vs/base/common/objects.js");
/* harmony import */ var _languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../languages/defaultDocumentColorsComputer.js */ "./node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};














/**
 * @internal
 */
class MirrorModel extends _model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_4__.MirrorTextModel {
    get uri() {
        return this._uri;
    }
    get eol() {
        return this._eol;
    }
    getValue() {
        return this.getText();
    }
    findMatches(regex) {
        const matches = [];
        for (let i = 0; i < this._lines.length; i++) {
            const line = this._lines[i];
            const offsetToAdd = this.offsetAt(new _core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position(i + 1, 1));
            const iteratorOverMatches = line.matchAll(regex);
            for (const match of iteratorOverMatches) {
                if (match.index || match.index === 0) {
                    match.index = match.index + offsetToAdd;
                }
                matches.push(match);
            }
        }
        return matches;
    }
    getLinesContent() {
        return this._lines.slice(0);
    }
    getLineCount() {
        return this._lines.length;
    }
    getLineContent(lineNumber) {
        return this._lines[lineNumber - 1];
    }
    getWordAtPosition(position, wordDefinition) {
        const wordAtText = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.getWordAtText)(position.column, (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_5__.ensureValidWordDefinition)(wordDefinition), this._lines[position.lineNumber - 1], 0);
        if (wordAtText) {
            return new _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);
        }
        return null;
    }
    words(wordDefinition) {
        const lines = this._lines;
        const wordenize = this._wordenize.bind(this);
        let lineNumber = 0;
        let lineText = '';
        let wordRangesIdx = 0;
        let wordRanges = [];
        return {
            *[Symbol.iterator]() {
                while (true) {
                    if (wordRangesIdx < wordRanges.length) {
                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);
                        wordRangesIdx += 1;
                        yield value;
                    }
                    else {
                        if (lineNumber < lines.length) {
                            lineText = lines[lineNumber];
                            wordRanges = wordenize(lineText, wordDefinition);
                            wordRangesIdx = 0;
                            lineNumber += 1;
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        };
    }
    getLineWords(lineNumber, wordDefinition) {
        const content = this._lines[lineNumber - 1];
        const ranges = this._wordenize(content, wordDefinition);
        const words = [];
        for (const range of ranges) {
            words.push({
                word: content.substring(range.start, range.end),
                startColumn: range.start + 1,
                endColumn: range.end + 1
            });
        }
        return words;
    }
    _wordenize(content, wordDefinition) {
        const result = [];
        let match;
        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure
        while (match = wordDefinition.exec(content)) {
            if (match[0].length === 0) {
                // it did match the empty string
                break;
            }
            result.push({ start: match.index, end: match.index + match[0].length });
        }
        return result;
    }
    getValueInRange(range) {
        range = this._validateRange(range);
        if (range.startLineNumber === range.endLineNumber) {
            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);
        }
        const lineEnding = this._eol;
        const startLineIndex = range.startLineNumber - 1;
        const endLineIndex = range.endLineNumber - 1;
        const resultLines = [];
        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));
        for (let i = startLineIndex + 1; i < endLineIndex; i++) {
            resultLines.push(this._lines[i]);
        }
        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));
        return resultLines.join(lineEnding);
    }
    offsetAt(position) {
        position = this._validatePosition(position);
        this._ensureLineStarts();
        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);
    }
    positionAt(offset) {
        offset = Math.floor(offset);
        offset = Math.max(0, offset);
        this._ensureLineStarts();
        const out = this._lineStarts.getIndexOf(offset);
        const lineLength = this._lines[out.index].length;
        // Ensure we return a valid position
        return {
            lineNumber: 1 + out.index,
            column: 1 + Math.min(out.remainder, lineLength)
        };
    }
    _validateRange(range) {
        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });
        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });
        if (start.lineNumber !== range.startLineNumber
            || start.column !== range.startColumn
            || end.lineNumber !== range.endLineNumber
            || end.column !== range.endColumn) {
            return {
                startLineNumber: start.lineNumber,
                startColumn: start.column,
                endLineNumber: end.lineNumber,
                endColumn: end.column
            };
        }
        return range;
    }
    _validatePosition(position) {
        if (!_core_position_js__WEBPACK_IMPORTED_MODULE_2__.Position.isIPosition(position)) {
            throw new Error('bad position');
        }
        let { lineNumber, column } = position;
        let hasChanged = false;
        if (lineNumber < 1) {
            lineNumber = 1;
            column = 1;
            hasChanged = true;
        }
        else if (lineNumber > this._lines.length) {
            lineNumber = this._lines.length;
            column = this._lines[lineNumber - 1].length + 1;
            hasChanged = true;
        }
        else {
            const maxCharacter = this._lines[lineNumber - 1].length + 1;
            if (column < 1) {
                column = 1;
                hasChanged = true;
            }
            else if (column > maxCharacter) {
                column = maxCharacter;
                hasChanged = true;
            }
        }
        if (!hasChanged) {
            return position;
        }
        else {
            return { lineNumber, column };
        }
    }
}
/**
 * @internal
 */
class EditorSimpleWorker {
    constructor(host, foreignModuleFactory) {
        this._host = host;
        this._models = Object.create(null);
        this._foreignModuleFactory = foreignModuleFactory;
        this._foreignModule = null;
    }
    dispose() {
        this._models = Object.create(null);
    }
    _getModel(uri) {
        return this._models[uri];
    }
    _getModels() {
        const all = [];
        Object.keys(this._models).forEach((key) => all.push(this._models[key]));
        return all;
    }
    acceptNewModel(data) {
        this._models[data.url] = new MirrorModel(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.parse(data.url), data.lines, data.EOL, data.versionId);
    }
    acceptModelChanged(strURL, e) {
        if (!this._models[strURL]) {
            return;
        }
        const model = this._models[strURL];
        model.onEvents(e);
    }
    acceptRemovedModel(strURL) {
        if (!this._models[strURL]) {
            return;
        }
        delete this._models[strURL];
    }
    computeUnicodeHighlights(url, options, range) {
        return __awaiter(this, void 0, void 0, function* () {
            const model = this._getModel(url);
            if (!model) {
                return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };
            }
            return _unicodeTextModelHighlighter_js__WEBPACK_IMPORTED_MODULE_10__.UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);
        });
    }
    // ---- BEGIN diff --------------------------------------------------------------------------
    computeDiff(originalUrl, modifiedUrl, options, algorithm) {
        return __awaiter(this, void 0, void 0, function* () {
            const original = this._getModel(originalUrl);
            const modified = this._getModel(modifiedUrl);
            if (!original || !modified) {
                return null;
            }
            return EditorSimpleWorker.computeDiff(original, modified, options, algorithm);
        });
    }
    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {
        const diffAlgorithm = algorithm === 'advanced' ? _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getDefault() : _diff_linesDiffComputers_js__WEBPACK_IMPORTED_MODULE_11__.linesDiffComputers.getLegacy();
        const originalLines = originalTextModel.getLinesContent();
        const modifiedLines = modifiedTextModel.getLinesContent();
        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);
        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));
        function getLineChanges(changes) {
            return changes.map(m => {
                var _a;
                return ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a = m.innerChanges) === null || _a === void 0 ? void 0 : _a.map(m => [
                        m.originalRange.startLineNumber,
                        m.originalRange.startColumn,
                        m.originalRange.endLineNumber,
                        m.originalRange.endColumn,
                        m.modifiedRange.startLineNumber,
                        m.modifiedRange.startColumn,
                        m.modifiedRange.endLineNumber,
                        m.modifiedRange.endColumn,
                    ])]);
            });
        }
        return {
            identical,
            quitEarly: result.hitTimeout,
            changes: getLineChanges(result.changes),
            moves: result.moves.map(m => ([
                m.lineRangeMapping.original.startLineNumber,
                m.lineRangeMapping.original.endLineNumberExclusive,
                m.lineRangeMapping.modified.startLineNumber,
                m.lineRangeMapping.modified.endLineNumberExclusive,
                getLineChanges(m.changes)
            ])),
        };
    }
    static _modelsAreIdentical(original, modified) {
        const originalLineCount = original.getLineCount();
        const modifiedLineCount = modified.getLineCount();
        if (originalLineCount !== modifiedLineCount) {
            return false;
        }
        for (let line = 1; line <= originalLineCount; line++) {
            const originalLine = original.getLineContent(line);
            const modifiedLine = modified.getLineContent(line);
            if (originalLine !== modifiedLine) {
                return false;
            }
        }
        return true;
    }
    computeMoreMinimalEdits(modelUrl, edits, pretty) {
        return __awaiter(this, void 0, void 0, function* () {
            const model = this._getModel(modelUrl);
            if (!model) {
                return edits;
            }
            const result = [];
            let lastEol = undefined;
            edits = edits.slice(0).sort((a, b) => {
                if (a.range && b.range) {
                    return _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.compareRangesUsingStarts(a.range, b.range);
                }
                // eol only changes should go to the end
                const aRng = a.range ? 0 : 1;
                const bRng = b.range ? 0 : 1;
                return aRng - bRng;
            });
            // merge adjacent edits
            let writeIndex = 0;
            for (let readIndex = 1; readIndex < edits.length; readIndex++) {
                if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[writeIndex].range).equals(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[readIndex].range))) {
                    edits[writeIndex].range = _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.fromPositions(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getStartPosition(edits[writeIndex].range), _core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.getEndPosition(edits[readIndex].range));
                    edits[writeIndex].text += edits[readIndex].text;
                }
                else {
                    writeIndex++;
                    edits[writeIndex] = edits[readIndex];
                }
            }
            edits.length = writeIndex + 1;
            for (let { range, text, eol } of edits) {
                if (typeof eol === 'number') {
                    lastEol = eol;
                }
                if (_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.isEmpty(range) && !text) {
                    // empty change
                    continue;
                }
                const original = model.getValueInRange(range);
                text = text.replace(/\r\n|\n|\r/g, model.eol);
                if (original === text) {
                    // noop
                    continue;
                }
                // make sure diff won't take too long
                if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {
                    result.push({ range, text });
                    continue;
                }
                // compute diff between original and edit.text
                const changes = (0,_base_common_diff_diff_js__WEBPACK_IMPORTED_MODULE_0__.stringDiff)(original, text, pretty);
                const editOffset = model.offsetAt(_core_range_js__WEBPACK_IMPORTED_MODULE_3__.Range.lift(range).getStartPosition());
                for (const change of changes) {
                    const start = model.positionAt(editOffset + change.originalStart);
                    const end = model.positionAt(editOffset + change.originalStart + change.originalLength);
                    const newEdit = {
                        text: text.substr(change.modifiedStart, change.modifiedLength),
                        range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }
                    };
                    if (model.getValueInRange(newEdit.range) !== newEdit.text) {
                        result.push(newEdit);
                    }
                }
            }
            if (typeof lastEol === 'number') {
                result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });
            }
            return result;
        });
    }
    // ---- END minimal edits ---------------------------------------------------------------
    computeLinks(modelUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const model = this._getModel(modelUrl);
            if (!model) {
                return null;
            }
            return (0,_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.computeLinks)(model);
        });
    }
    // --- BEGIN default document colors -----------------------------------------------------------
    computeDefaultDocumentColors(modelUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            const model = this._getModel(modelUrl);
            if (!model) {
                return null;
            }
            return (0,_languages_defaultDocumentColorsComputer_js__WEBPACK_IMPORTED_MODULE_13__.computeDefaultDocumentColors)(model);
        });
    }
    textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {
        return __awaiter(this, void 0, void 0, function* () {
            const sw = new _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_9__.StopWatch();
            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);
            const seen = new Set();
            outer: for (const url of modelUrls) {
                const model = this._getModel(url);
                if (!model) {
                    continue;
                }
                for (const word of model.words(wordDefRegExp)) {
                    if (word === leadingWord || !isNaN(Number(word))) {
                        continue;
                    }
                    seen.add(word);
                    if (seen.size > EditorSimpleWorker._suggestionsLimit) {
                        break outer;
                    }
                }
            }
            return { words: Array.from(seen), duration: sw.elapsed() };
        });
    }
    // ---- END suggest --------------------------------------------------------------------------
    //#region -- word ranges --
    computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {
        return __awaiter(this, void 0, void 0, function* () {
            const model = this._getModel(modelUrl);
            if (!model) {
                return Object.create(null);
            }
            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);
            const result = Object.create(null);
            for (let line = range.startLineNumber; line < range.endLineNumber; line++) {
                const words = model.getLineWords(line, wordDefRegExp);
                for (const word of words) {
                    if (!isNaN(Number(word.word))) {
                        continue;
                    }
                    let array = result[word.word];
                    if (!array) {
                        array = [];
                        result[word.word] = array;
                    }
                    array.push({
                        startLineNumber: line,
                        startColumn: word.startColumn,
                        endLineNumber: line,
                        endColumn: word.endColumn
                    });
                }
            }
            return result;
        });
    }
    //#endregion
    navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {
        return __awaiter(this, void 0, void 0, function* () {
            const model = this._getModel(modelUrl);
            if (!model) {
                return null;
            }
            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);
            if (range.startColumn === range.endColumn) {
                range = {
                    startLineNumber: range.startLineNumber,
                    startColumn: range.startColumn,
                    endLineNumber: range.endLineNumber,
                    endColumn: range.endColumn + 1
                };
            }
            const selectionText = model.getValueInRange(range);
            const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);
            if (!wordRange) {
                return null;
            }
            const word = model.getValueInRange(wordRange);
            const result = _languages_supports_inplaceReplaceSupport_js__WEBPACK_IMPORTED_MODULE_7__.BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);
            return result;
        });
    }
    // ---- BEGIN foreign module support --------------------------------------------------------------------------
    loadForeignModule(moduleId, createData, foreignHostMethods) {
        const proxyMethodRequest = (method, args) => {
            return this._host.fhr(method, args);
        };
        const foreignHost = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.createProxyObject)(foreignHostMethods, proxyMethodRequest);
        const ctx = {
            host: foreignHost,
            getMirrorModels: () => {
                return this._getModels();
            }
        };
        if (this._foreignModuleFactory) {
            this._foreignModule = this._foreignModuleFactory(ctx, createData);
            // static foreing module
            return Promise.resolve((0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.getAllMethodNames)(this._foreignModule));
        }
        // ESM-comment-begin
        // 		return new Promise<any>((resolve, reject) => {
        // 			require([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {
        // 				this._foreignModule = foreignModule.create(ctx, createData);
        // 
        // 				resolve(getAllMethodNames(this._foreignModule));
        // 
        // 			}, reject);
        // 		});
        // ESM-comment-end
        // ESM-uncomment-begin
        return Promise.reject(new Error(`Unexpected usage`));
        // ESM-uncomment-end
    }
    // foreign method request
    fmr(method, args) {
        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {
            return Promise.reject(new Error('Missing requestHandler or method: ' + method));
        }
        try {
            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
}
// ---- END diff --------------------------------------------------------------------------
// ---- BEGIN minimal edits ---------------------------------------------------------------
EditorSimpleWorker._diffLimit = 100000;
// ---- BEGIN suggest --------------------------------------------------------------------------
EditorSimpleWorker._suggestionsLimit = 10000;
/**
 * Called on the worker side
 * @internal
 */
function create(host) {
    return new EditorSimpleWorker(host, null);
}
if (typeof importScripts === 'function') {
    // Running in a web worker
    globalThis.monaco = (0,_editorBaseApi_js__WEBPACK_IMPORTED_MODULE_8__.createMonacoBaseAPI)();
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UnicodeTextModelHighlighter: () => (/* binding */ UnicodeTextModelHighlighter)
/* harmony export */ });
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/range.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/range.js");
/* harmony import */ var _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/textModelSearch.js */ "./node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/monaco-editor/esm/vs/base/common/strings.js");
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/assert.js */ "./node_modules/monaco-editor/esm/vs/base/common/assert.js");
/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/wordHelper.js */ "./node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class UnicodeTextModelHighlighter {
    static computeUnicodeHighlights(model, options, range) {
        const startLine = range ? range.startLineNumber : 1;
        const endLine = range ? range.endLineNumber : model.getLineCount();
        const codePointHighlighter = new CodePointHighlighter(options);
        const candidates = codePointHighlighter.getCandidateCodePoints();
        let regex;
        if (candidates === 'allNonBasicAscii') {
            regex = new RegExp('[^\\t\\n\\r\\x20-\\x7E]', 'g');
        }
        else {
            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');
        }
        const searcher = new _model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_1__.Searcher(null, regex);
        const ranges = [];
        let hasMore = false;
        let m;
        let ambiguousCharacterCount = 0;
        let invisibleCharacterCount = 0;
        let nonBasicAsciiCharacterCount = 0;
        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {
            const lineContent = model.getLineContent(lineNumber);
            const lineLength = lineContent.length;
            // Reset regex to search from the beginning
            searcher.reset(0);
            do {
                m = searcher.next(lineContent);
                if (m) {
                    let startIndex = m.index;
                    let endIndex = m.index + m[0].length;
                    // Extend range to entire code point
                    if (startIndex > 0) {
                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);
                        if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {
                            startIndex--;
                        }
                    }
                    if (endIndex + 1 < lineLength) {
                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);
                        if (_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isHighSurrogate(charCodeBefore)) {
                            endIndex++;
                        }
                    }
                    const str = lineContent.substring(startIndex, endIndex);
                    let word = (0,_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.getWordAtText)(startIndex + 1, _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_WORD_REGEXP, lineContent, 0);
                    if (word && word.endColumn <= startIndex + 1) {
                        // The word does not include the problematic character, ignore the word
                        word = null;
                    }
                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);
                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {
                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {
                            ambiguousCharacterCount++;
                        }
                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {
                            invisibleCharacterCount++;
                        }
                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {
                            nonBasicAsciiCharacterCount++;
                        }
                        else {
                            (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assertNever)(highlightReason);
                        }
                        const MAX_RESULT_LENGTH = 1000;
                        if (ranges.length >= MAX_RESULT_LENGTH) {
                            hasMore = true;
                            break forLoop;
                        }
                        ranges.push(new _core_range_js__WEBPACK_IMPORTED_MODULE_0__.Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));
                    }
                }
            } while (m);
        }
        return {
            ranges,
            hasMore,
            ambiguousCharacterCount,
            invisibleCharacterCount,
            nonBasicAsciiCharacterCount
        };
    }
    static computeUnicodeHighlightReason(char, options) {
        const codePointHighlighter = new CodePointHighlighter(options);
        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);
        switch (reason) {
            case 0 /* SimpleHighlightReason.None */:
                return null;
            case 2 /* SimpleHighlightReason.Invisible */:
                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };
            case 3 /* SimpleHighlightReason.Ambiguous */: {
                const codePoint = char.codePointAt(0);
                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);
                const notAmbiguousInLocales = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getLocales().filter((l) => !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));
                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };
            }
            case 1 /* SimpleHighlightReason.NonBasicASCII */:
                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };
        }
    }
}
function buildRegExpCharClassExpr(codePoints, flags) {
    const src = `[${_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;
    return src;
}
class CodePointHighlighter {
    constructor(options) {
        this.options = options;
        this.allowedCodePoints = new Set(options.allowedCodePoints);
        this.ambiguousCharacters = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));
    }
    getCandidateCodePoints() {
        if (this.options.nonBasicASCII) {
            return 'allNonBasicAscii';
        }
        const set = new Set();
        if (this.options.invisibleCharacters) {
            for (const cp of _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.codePoints) {
                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {
                    set.add(cp);
                }
            }
        }
        if (this.options.ambiguousCharacters) {
            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {
                set.add(cp);
            }
        }
        for (const cp of this.allowedCodePoints) {
            set.delete(cp);
        }
        return set;
    }
    shouldHighlightNonBasicASCII(character, wordContext) {
        const codePoint = character.codePointAt(0);
        if (this.allowedCodePoints.has(codePoint)) {
            return 0 /* SimpleHighlightReason.None */;
        }
        if (this.options.nonBasicASCII) {
            return 1 /* SimpleHighlightReason.NonBasicASCII */;
        }
        let hasBasicASCIICharacters = false;
        let hasNonConfusableNonBasicAsciiCharacter = false;
        if (wordContext) {
            for (const char of wordContext) {
                const codePoint = char.codePointAt(0);
                const isBasicASCII = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isBasicASCII(char);
                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;
                if (!isBasicASCII &&
                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&
                    !_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {
                    hasNonConfusableNonBasicAsciiCharacter = true;
                }
            }
        }
        if (
        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&
            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {
            return 0 /* SimpleHighlightReason.None */;
        }
        if (this.options.invisibleCharacters) {
            // TODO check for emojis
            if (!isAllowedInvisibleCharacter(character) && _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.InvisibleCharacters.isInvisibleCharacter(codePoint)) {
                return 2 /* SimpleHighlightReason.Invisible */;
            }
        }
        if (this.options.ambiguousCharacters) {
            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {
                return 3 /* SimpleHighlightReason.Ambiguous */;
            }
        }
        return 0 /* SimpleHighlightReason.None */;
    }
}
function isAllowedInvisibleCharacter(character) {
    return character === ' ' || character === '\n' || character === '\t';
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AccessibilitySupport: () => (/* binding */ AccessibilitySupport),
/* harmony export */   CodeActionTriggerType: () => (/* binding */ CodeActionTriggerType),
/* harmony export */   CompletionItemInsertTextRule: () => (/* binding */ CompletionItemInsertTextRule),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionTriggerKind: () => (/* binding */ CompletionTriggerKind),
/* harmony export */   ContentWidgetPositionPreference: () => (/* binding */ ContentWidgetPositionPreference),
/* harmony export */   CursorChangeReason: () => (/* binding */ CursorChangeReason),
/* harmony export */   DefaultEndOfLine: () => (/* binding */ DefaultEndOfLine),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   EditorAutoIndentStrategy: () => (/* binding */ EditorAutoIndentStrategy),
/* harmony export */   EditorOption: () => (/* binding */ EditorOption),
/* harmony export */   EndOfLinePreference: () => (/* binding */ EndOfLinePreference),
/* harmony export */   EndOfLineSequence: () => (/* binding */ EndOfLineSequence),
/* harmony export */   GlyphMarginLane: () => (/* binding */ GlyphMarginLane),
/* harmony export */   IndentAction: () => (/* binding */ IndentAction),
/* harmony export */   InjectedTextCursorStops: () => (/* binding */ InjectedTextCursorStops),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),
/* harmony export */   KeyCode: () => (/* binding */ KeyCode),
/* harmony export */   MarkerSeverity: () => (/* binding */ MarkerSeverity),
/* harmony export */   MarkerTag: () => (/* binding */ MarkerTag),
/* harmony export */   MinimapPosition: () => (/* binding */ MinimapPosition),
/* harmony export */   MouseTargetType: () => (/* binding */ MouseTargetType),
/* harmony export */   OverlayWidgetPositionPreference: () => (/* binding */ OverlayWidgetPositionPreference),
/* harmony export */   OverviewRulerLane: () => (/* binding */ OverviewRulerLane),
/* harmony export */   PositionAffinity: () => (/* binding */ PositionAffinity),
/* harmony export */   RenderLineNumbersType: () => (/* binding */ RenderLineNumbersType),
/* harmony export */   RenderMinimap: () => (/* binding */ RenderMinimap),
/* harmony export */   ScrollType: () => (/* binding */ ScrollType),
/* harmony export */   ScrollbarVisibility: () => (/* binding */ ScrollbarVisibility),
/* harmony export */   SelectionDirection: () => (/* binding */ SelectionDirection),
/* harmony export */   SignatureHelpTriggerKind: () => (/* binding */ SignatureHelpTriggerKind),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   TextEditorCursorBlinkingStyle: () => (/* binding */ TextEditorCursorBlinkingStyle),
/* harmony export */   TextEditorCursorStyle: () => (/* binding */ TextEditorCursorStyle),
/* harmony export */   TrackedRangeStickiness: () => (/* binding */ TrackedRangeStickiness),
/* harmony export */   WrappingIndent: () => (/* binding */ WrappingIndent)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.
var AccessibilitySupport;
(function (AccessibilitySupport) {
    /**
     * This should be the browser case where it is not known if a screen reader is attached or no.
     */
    AccessibilitySupport[AccessibilitySupport["Unknown"] = 0] = "Unknown";
    AccessibilitySupport[AccessibilitySupport["Disabled"] = 1] = "Disabled";
    AccessibilitySupport[AccessibilitySupport["Enabled"] = 2] = "Enabled";
})(AccessibilitySupport || (AccessibilitySupport = {}));
var CodeActionTriggerType;
(function (CodeActionTriggerType) {
    CodeActionTriggerType[CodeActionTriggerType["Invoke"] = 1] = "Invoke";
    CodeActionTriggerType[CodeActionTriggerType["Auto"] = 2] = "Auto";
})(CodeActionTriggerType || (CodeActionTriggerType = {}));
var CompletionItemInsertTextRule;
(function (CompletionItemInsertTextRule) {
    CompletionItemInsertTextRule[CompletionItemInsertTextRule["None"] = 0] = "None";
    /**
     * Adjust whitespace/indentation of multiline insert texts to
     * match the current line indentation.
     */
    CompletionItemInsertTextRule[CompletionItemInsertTextRule["KeepWhitespace"] = 1] = "KeepWhitespace";
    /**
     * `insertText` is a snippet.
     */
    CompletionItemInsertTextRule[CompletionItemInsertTextRule["InsertAsSnippet"] = 4] = "InsertAsSnippet";
})(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind[CompletionItemKind["Method"] = 0] = "Method";
    CompletionItemKind[CompletionItemKind["Function"] = 1] = "Function";
    CompletionItemKind[CompletionItemKind["Constructor"] = 2] = "Constructor";
    CompletionItemKind[CompletionItemKind["Field"] = 3] = "Field";
    CompletionItemKind[CompletionItemKind["Variable"] = 4] = "Variable";
    CompletionItemKind[CompletionItemKind["Class"] = 5] = "Class";
    CompletionItemKind[CompletionItemKind["Struct"] = 6] = "Struct";
    CompletionItemKind[CompletionItemKind["Interface"] = 7] = "Interface";
    CompletionItemKind[CompletionItemKind["Module"] = 8] = "Module";
    CompletionItemKind[CompletionItemKind["Property"] = 9] = "Property";
    CompletionItemKind[CompletionItemKind["Event"] = 10] = "Event";
    CompletionItemKind[CompletionItemKind["Operator"] = 11] = "Operator";
    CompletionItemKind[CompletionItemKind["Unit"] = 12] = "Unit";
    CompletionItemKind[CompletionItemKind["Value"] = 13] = "Value";
    CompletionItemKind[CompletionItemKind["Constant"] = 14] = "Constant";
    CompletionItemKind[CompletionItemKind["Enum"] = 15] = "Enum";
    CompletionItemKind[CompletionItemKind["EnumMember"] = 16] = "EnumMember";
    CompletionItemKind[CompletionItemKind["Keyword"] = 17] = "Keyword";
    CompletionItemKind[CompletionItemKind["Text"] = 18] = "Text";
    CompletionItemKind[CompletionItemKind["Color"] = 19] = "Color";
    CompletionItemKind[CompletionItemKind["File"] = 20] = "File";
    CompletionItemKind[CompletionItemKind["Reference"] = 21] = "Reference";
    CompletionItemKind[CompletionItemKind["Customcolor"] = 22] = "Customcolor";
    CompletionItemKind[CompletionItemKind["Folder"] = 23] = "Folder";
    CompletionItemKind[CompletionItemKind["TypeParameter"] = 24] = "TypeParameter";
    CompletionItemKind[CompletionItemKind["User"] = 25] = "User";
    CompletionItemKind[CompletionItemKind["Issue"] = 26] = "Issue";
    CompletionItemKind[CompletionItemKind["Snippet"] = 27] = "Snippet";
})(CompletionItemKind || (CompletionItemKind = {}));
var CompletionItemTag;
(function (CompletionItemTag) {
    CompletionItemTag[CompletionItemTag["Deprecated"] = 1] = "Deprecated";
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * How a suggest provider was triggered.
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    CompletionTriggerKind[CompletionTriggerKind["Invoke"] = 0] = "Invoke";
    CompletionTriggerKind[CompletionTriggerKind["TriggerCharacter"] = 1] = "TriggerCharacter";
    CompletionTriggerKind[CompletionTriggerKind["TriggerForIncompleteCompletions"] = 2] = "TriggerForIncompleteCompletions";
})(CompletionTriggerKind || (CompletionTriggerKind = {}));
/**
 * A positioning preference for rendering content widgets.
 */
var ContentWidgetPositionPreference;
(function (ContentWidgetPositionPreference) {
    /**
     * Place the content widget exactly at a position
     */
    ContentWidgetPositionPreference[ContentWidgetPositionPreference["EXACT"] = 0] = "EXACT";
    /**
     * Place the content widget above a position
     */
    ContentWidgetPositionPreference[ContentWidgetPositionPreference["ABOVE"] = 1] = "ABOVE";
    /**
     * Place the content widget below a position
     */
    ContentWidgetPositionPreference[ContentWidgetPositionPreference["BELOW"] = 2] = "BELOW";
})(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));
/**
 * Describes the reason the cursor has changed its position.
 */
var CursorChangeReason;
(function (CursorChangeReason) {
    /**
     * Unknown or not set.
     */
    CursorChangeReason[CursorChangeReason["NotSet"] = 0] = "NotSet";
    /**
     * A `model.setValue()` was called.
     */
    CursorChangeReason[CursorChangeReason["ContentFlush"] = 1] = "ContentFlush";
    /**
     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.
     */
    CursorChangeReason[CursorChangeReason["RecoverFromMarkers"] = 2] = "RecoverFromMarkers";
    /**
     * There was an explicit user gesture.
     */
    CursorChangeReason[CursorChangeReason["Explicit"] = 3] = "Explicit";
    /**
     * There was a Paste.
     */
    CursorChangeReason[CursorChangeReason["Paste"] = 4] = "Paste";
    /**
     * There was an Undo.
     */
    CursorChangeReason[CursorChangeReason["Undo"] = 5] = "Undo";
    /**
     * There was a Redo.
     */
    CursorChangeReason[CursorChangeReason["Redo"] = 6] = "Redo";
})(CursorChangeReason || (CursorChangeReason = {}));
/**
 * The default end of line to use when instantiating models.
 */
var DefaultEndOfLine;
(function (DefaultEndOfLine) {
    /**
     * Use line feed (\n) as the end of line character.
     */
    DefaultEndOfLine[DefaultEndOfLine["LF"] = 1] = "LF";
    /**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
    DefaultEndOfLine[DefaultEndOfLine["CRLF"] = 2] = "CRLF";
})(DefaultEndOfLine || (DefaultEndOfLine = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind[DocumentHighlightKind["Text"] = 0] = "Text";
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Read"] = 1] = "Read";
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind[DocumentHighlightKind["Write"] = 2] = "Write";
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * Configuration options for auto indentation in the editor
 */
var EditorAutoIndentStrategy;
(function (EditorAutoIndentStrategy) {
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["None"] = 0] = "None";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Keep"] = 1] = "Keep";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Brackets"] = 2] = "Brackets";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Advanced"] = 3] = "Advanced";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Full"] = 4] = "Full";
})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));
var EditorOption;
(function (EditorOption) {
    EditorOption[EditorOption["acceptSuggestionOnCommitCharacter"] = 0] = "acceptSuggestionOnCommitCharacter";
    EditorOption[EditorOption["acceptSuggestionOnEnter"] = 1] = "acceptSuggestionOnEnter";
    EditorOption[EditorOption["accessibilitySupport"] = 2] = "accessibilitySupport";
    EditorOption[EditorOption["accessibilityPageSize"] = 3] = "accessibilityPageSize";
    EditorOption[EditorOption["ariaLabel"] = 4] = "ariaLabel";
    EditorOption[EditorOption["ariaRequired"] = 5] = "ariaRequired";
    EditorOption[EditorOption["autoClosingBrackets"] = 6] = "autoClosingBrackets";
    EditorOption[EditorOption["autoClosingComments"] = 7] = "autoClosingComments";
    EditorOption[EditorOption["screenReaderAnnounceInlineSuggestion"] = 8] = "screenReaderAnnounceInlineSuggestion";
    EditorOption[EditorOption["autoClosingDelete"] = 9] = "autoClosingDelete";
    EditorOption[EditorOption["autoClosingOvertype"] = 10] = "autoClosingOvertype";
    EditorOption[EditorOption["autoClosingQuotes"] = 11] = "autoClosingQuotes";
    EditorOption[EditorOption["autoIndent"] = 12] = "autoIndent";
    EditorOption[EditorOption["automaticLayout"] = 13] = "automaticLayout";
    EditorOption[EditorOption["autoSurround"] = 14] = "autoSurround";
    EditorOption[EditorOption["bracketPairColorization"] = 15] = "bracketPairColorization";
    EditorOption[EditorOption["guides"] = 16] = "guides";
    EditorOption[EditorOption["codeLens"] = 17] = "codeLens";
    EditorOption[EditorOption["codeLensFontFamily"] = 18] = "codeLensFontFamily";
    EditorOption[EditorOption["codeLensFontSize"] = 19] = "codeLensFontSize";
    EditorOption[EditorOption["colorDecorators"] = 20] = "colorDecorators";
    EditorOption[EditorOption["colorDecoratorsLimit"] = 21] = "colorDecoratorsLimit";
    EditorOption[EditorOption["columnSelection"] = 22] = "columnSelection";
    EditorOption[EditorOption["comments"] = 23] = "comments";
    EditorOption[EditorOption["contextmenu"] = 24] = "contextmenu";
    EditorOption[EditorOption["copyWithSyntaxHighlighting"] = 25] = "copyWithSyntaxHighlighting";
    EditorOption[EditorOption["cursorBlinking"] = 26] = "cursorBlinking";
    EditorOption[EditorOption["cursorSmoothCaretAnimation"] = 27] = "cursorSmoothCaretAnimation";
    EditorOption[EditorOption["cursorStyle"] = 28] = "cursorStyle";
    EditorOption[EditorOption["cursorSurroundingLines"] = 29] = "cursorSurroundingLines";
    EditorOption[EditorOption["cursorSurroundingLinesStyle"] = 30] = "cursorSurroundingLinesStyle";
    EditorOption[EditorOption["cursorWidth"] = 31] = "cursorWidth";
    EditorOption[EditorOption["disableLayerHinting"] = 32] = "disableLayerHinting";
    EditorOption[EditorOption["disableMonospaceOptimizations"] = 33] = "disableMonospaceOptimizations";
    EditorOption[EditorOption["domReadOnly"] = 34] = "domReadOnly";
    EditorOption[EditorOption["dragAndDrop"] = 35] = "dragAndDrop";
    EditorOption[EditorOption["dropIntoEditor"] = 36] = "dropIntoEditor";
    EditorOption[EditorOption["emptySelectionClipboard"] = 37] = "emptySelectionClipboard";
    EditorOption[EditorOption["experimentalWhitespaceRendering"] = 38] = "experimentalWhitespaceRendering";
    EditorOption[EditorOption["extraEditorClassName"] = 39] = "extraEditorClassName";
    EditorOption[EditorOption["fastScrollSensitivity"] = 40] = "fastScrollSensitivity";
    EditorOption[EditorOption["find"] = 41] = "find";
    EditorOption[EditorOption["fixedOverflowWidgets"] = 42] = "fixedOverflowWidgets";
    EditorOption[EditorOption["folding"] = 43] = "folding";
    EditorOption[EditorOption["foldingStrategy"] = 44] = "foldingStrategy";
    EditorOption[EditorOption["foldingHighlight"] = 45] = "foldingHighlight";
    EditorOption[EditorOption["foldingImportsByDefault"] = 46] = "foldingImportsByDefault";
    EditorOption[EditorOption["foldingMaximumRegions"] = 47] = "foldingMaximumRegions";
    EditorOption[EditorOption["unfoldOnClickAfterEndOfLine"] = 48] = "unfoldOnClickAfterEndOfLine";
    EditorOption[EditorOption["fontFamily"] = 49] = "fontFamily";
    EditorOption[EditorOption["fontInfo"] = 50] = "fontInfo";
    EditorOption[EditorOption["fontLigatures"] = 51] = "fontLigatures";
    EditorOption[EditorOption["fontSize"] = 52] = "fontSize";
    EditorOption[EditorOption["fontWeight"] = 53] = "fontWeight";
    EditorOption[EditorOption["fontVariations"] = 54] = "fontVariations";
    EditorOption[EditorOption["formatOnPaste"] = 55] = "formatOnPaste";
    EditorOption[EditorOption["formatOnType"] = 56] = "formatOnType";
    EditorOption[EditorOption["glyphMargin"] = 57] = "glyphMargin";
    EditorOption[EditorOption["gotoLocation"] = 58] = "gotoLocation";
    EditorOption[EditorOption["hideCursorInOverviewRuler"] = 59] = "hideCursorInOverviewRuler";
    EditorOption[EditorOption["hover"] = 60] = "hover";
    EditorOption[EditorOption["inDiffEditor"] = 61] = "inDiffEditor";
    EditorOption[EditorOption["inlineSuggest"] = 62] = "inlineSuggest";
    EditorOption[EditorOption["letterSpacing"] = 63] = "letterSpacing";
    EditorOption[EditorOption["lightbulb"] = 64] = "lightbulb";
    EditorOption[EditorOption["lineDecorationsWidth"] = 65] = "lineDecorationsWidth";
    EditorOption[EditorOption["lineHeight"] = 66] = "lineHeight";
    EditorOption[EditorOption["lineNumbers"] = 67] = "lineNumbers";
    EditorOption[EditorOption["lineNumbersMinChars"] = 68] = "lineNumbersMinChars";
    EditorOption[EditorOption["linkedEditing"] = 69] = "linkedEditing";
    EditorOption[EditorOption["links"] = 70] = "links";
    EditorOption[EditorOption["matchBrackets"] = 71] = "matchBrackets";
    EditorOption[EditorOption["minimap"] = 72] = "minimap";
    EditorOption[EditorOption["mouseStyle"] = 73] = "mouseStyle";
    EditorOption[EditorOption["mouseWheelScrollSensitivity"] = 74] = "mouseWheelScrollSensitivity";
    EditorOption[EditorOption["mouseWheelZoom"] = 75] = "mouseWheelZoom";
    EditorOption[EditorOption["multiCursorMergeOverlapping"] = 76] = "multiCursorMergeOverlapping";
    EditorOption[EditorOption["multiCursorModifier"] = 77] = "multiCursorModifier";
    EditorOption[EditorOption["multiCursorPaste"] = 78] = "multiCursorPaste";
    EditorOption[EditorOption["multiCursorLimit"] = 79] = "multiCursorLimit";
    EditorOption[EditorOption["occurrencesHighlight"] = 80] = "occurrencesHighlight";
    EditorOption[EditorOption["overviewRulerBorder"] = 81] = "overviewRulerBorder";
    EditorOption[EditorOption["overviewRulerLanes"] = 82] = "overviewRulerLanes";
    EditorOption[EditorOption["padding"] = 83] = "padding";
    EditorOption[EditorOption["pasteAs"] = 84] = "pasteAs";
    EditorOption[EditorOption["parameterHints"] = 85] = "parameterHints";
    EditorOption[EditorOption["peekWidgetDefaultFocus"] = 86] = "peekWidgetDefaultFocus";
    EditorOption[EditorOption["definitionLinkOpensInPeek"] = 87] = "definitionLinkOpensInPeek";
    EditorOption[EditorOption["quickSuggestions"] = 88] = "quickSuggestions";
    EditorOption[EditorOption["quickSuggestionsDelay"] = 89] = "quickSuggestionsDelay";
    EditorOption[EditorOption["readOnly"] = 90] = "readOnly";
    EditorOption[EditorOption["readOnlyMessage"] = 91] = "readOnlyMessage";
    EditorOption[EditorOption["renameOnType"] = 92] = "renameOnType";
    EditorOption[EditorOption["renderControlCharacters"] = 93] = "renderControlCharacters";
    EditorOption[EditorOption["renderFinalNewline"] = 94] = "renderFinalNewline";
    EditorOption[EditorOption["renderLineHighlight"] = 95] = "renderLineHighlight";
    EditorOption[EditorOption["renderLineHighlightOnlyWhenFocus"] = 96] = "renderLineHighlightOnlyWhenFocus";
    EditorOption[EditorOption["renderValidationDecorations"] = 97] = "renderValidationDecorations";
    EditorOption[EditorOption["renderWhitespace"] = 98] = "renderWhitespace";
    EditorOption[EditorOption["revealHorizontalRightPadding"] = 99] = "revealHorizontalRightPadding";
    EditorOption[EditorOption["roundedSelection"] = 100] = "roundedSelection";
    EditorOption[EditorOption["rulers"] = 101] = "rulers";
    EditorOption[EditorOption["scrollbar"] = 102] = "scrollbar";
    EditorOption[EditorOption["scrollBeyondLastColumn"] = 103] = "scrollBeyondLastColumn";
    EditorOption[EditorOption["scrollBeyondLastLine"] = 104] = "scrollBeyondLastLine";
    EditorOption[EditorOption["scrollPredominantAxis"] = 105] = "scrollPredominantAxis";
    EditorOption[EditorOption["selectionClipboard"] = 106] = "selectionClipboard";
    EditorOption[EditorOption["selectionHighlight"] = 107] = "selectionHighlight";
    EditorOption[EditorOption["selectOnLineNumbers"] = 108] = "selectOnLineNumbers";
    EditorOption[EditorOption["showFoldingControls"] = 109] = "showFoldingControls";
    EditorOption[EditorOption["showUnused"] = 110] = "showUnused";
    EditorOption[EditorOption["snippetSuggestions"] = 111] = "snippetSuggestions";
    EditorOption[EditorOption["smartSelect"] = 112] = "smartSelect";
    EditorOption[EditorOption["smoothScrolling"] = 113] = "smoothScrolling";
    EditorOption[EditorOption["stickyScroll"] = 114] = "stickyScroll";
    EditorOption[EditorOption["stickyTabStops"] = 115] = "stickyTabStops";
    EditorOption[EditorOption["stopRenderingLineAfter"] = 116] = "stopRenderingLineAfter";
    EditorOption[EditorOption["suggest"] = 117] = "suggest";
    EditorOption[EditorOption["suggestFontSize"] = 118] = "suggestFontSize";
    EditorOption[EditorOption["suggestLineHeight"] = 119] = "suggestLineHeight";
    EditorOption[EditorOption["suggestOnTriggerCharacters"] = 120] = "suggestOnTriggerCharacters";
    EditorOption[EditorOption["suggestSelection"] = 121] = "suggestSelection";
    EditorOption[EditorOption["tabCompletion"] = 122] = "tabCompletion";
    EditorOption[EditorOption["tabIndex"] = 123] = "tabIndex";
    EditorOption[EditorOption["unicodeHighlighting"] = 124] = "unicodeHighlighting";
    EditorOption[EditorOption["unusualLineTerminators"] = 125] = "unusualLineTerminators";
    EditorOption[EditorOption["useShadowDOM"] = 126] = "useShadowDOM";
    EditorOption[EditorOption["useTabStops"] = 127] = "useTabStops";
    EditorOption[EditorOption["wordBreak"] = 128] = "wordBreak";
    EditorOption[EditorOption["wordSeparators"] = 129] = "wordSeparators";
    EditorOption[EditorOption["wordWrap"] = 130] = "wordWrap";
    EditorOption[EditorOption["wordWrapBreakAfterCharacters"] = 131] = "wordWrapBreakAfterCharacters";
    EditorOption[EditorOption["wordWrapBreakBeforeCharacters"] = 132] = "wordWrapBreakBeforeCharacters";
    EditorOption[EditorOption["wordWrapColumn"] = 133] = "wordWrapColumn";
    EditorOption[EditorOption["wordWrapOverride1"] = 134] = "wordWrapOverride1";
    EditorOption[EditorOption["wordWrapOverride2"] = 135] = "wordWrapOverride2";
    EditorOption[EditorOption["wrappingIndent"] = 136] = "wrappingIndent";
    EditorOption[EditorOption["wrappingStrategy"] = 137] = "wrappingStrategy";
    EditorOption[EditorOption["showDeprecated"] = 138] = "showDeprecated";
    EditorOption[EditorOption["inlayHints"] = 139] = "inlayHints";
    EditorOption[EditorOption["editorClassName"] = 140] = "editorClassName";
    EditorOption[EditorOption["pixelRatio"] = 141] = "pixelRatio";
    EditorOption[EditorOption["tabFocusMode"] = 142] = "tabFocusMode";
    EditorOption[EditorOption["layoutInfo"] = 143] = "layoutInfo";
    EditorOption[EditorOption["wrappingInfo"] = 144] = "wrappingInfo";
    EditorOption[EditorOption["defaultColorDecorators"] = 145] = "defaultColorDecorators";
    EditorOption[EditorOption["colorDecoratorsActivatedOn"] = 146] = "colorDecoratorsActivatedOn";
    EditorOption[EditorOption["inlineCompletionsAccessibilityVerbose"] = 147] = "inlineCompletionsAccessibilityVerbose";
})(EditorOption || (EditorOption = {}));
/**
 * End of line character preference.
 */
var EndOfLinePreference;
(function (EndOfLinePreference) {
    /**
     * Use the end of line character identified in the text buffer.
     */
    EndOfLinePreference[EndOfLinePreference["TextDefined"] = 0] = "TextDefined";
    /**
     * Use line feed (\n) as the end of line character.
     */
    EndOfLinePreference[EndOfLinePreference["LF"] = 1] = "LF";
    /**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
    EndOfLinePreference[EndOfLinePreference["CRLF"] = 2] = "CRLF";
})(EndOfLinePreference || (EndOfLinePreference = {}));
/**
 * End of line character preference.
 */
var EndOfLineSequence;
(function (EndOfLineSequence) {
    /**
     * Use line feed (\n) as the end of line character.
     */
    EndOfLineSequence[EndOfLineSequence["LF"] = 0] = "LF";
    /**
     * Use carriage return and line feed (\r\n) as the end of line character.
     */
    EndOfLineSequence[EndOfLineSequence["CRLF"] = 1] = "CRLF";
})(EndOfLineSequence || (EndOfLineSequence = {}));
/**
 * Vertical Lane in the glyph margin of the editor.
 */
var GlyphMarginLane;
(function (GlyphMarginLane) {
    GlyphMarginLane[GlyphMarginLane["Left"] = 1] = "Left";
    GlyphMarginLane[GlyphMarginLane["Right"] = 2] = "Right";
})(GlyphMarginLane || (GlyphMarginLane = {}));
/**
 * Describes what to do with the indentation when pressing Enter.
 */
var IndentAction;
(function (IndentAction) {
    /**
     * Insert new line and copy the previous line's indentation.
     */
    IndentAction[IndentAction["None"] = 0] = "None";
    /**
     * Insert new line and indent once (relative to the previous line's indentation).
     */
    IndentAction[IndentAction["Indent"] = 1] = "Indent";
    /**
     * Insert two new lines:
     *  - the first one indented which will hold the cursor
     *  - the second one at the same indentation level
     */
    IndentAction[IndentAction["IndentOutdent"] = 2] = "IndentOutdent";
    /**
     * Insert new line and outdent once (relative to the previous line's indentation).
     */
    IndentAction[IndentAction["Outdent"] = 3] = "Outdent";
})(IndentAction || (IndentAction = {}));
var InjectedTextCursorStops;
(function (InjectedTextCursorStops) {
    InjectedTextCursorStops[InjectedTextCursorStops["Both"] = 0] = "Both";
    InjectedTextCursorStops[InjectedTextCursorStops["Right"] = 1] = "Right";
    InjectedTextCursorStops[InjectedTextCursorStops["Left"] = 2] = "Left";
    InjectedTextCursorStops[InjectedTextCursorStops["None"] = 3] = "None";
})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));
var InlayHintKind;
(function (InlayHintKind) {
    InlayHintKind[InlayHintKind["Type"] = 1] = "Type";
    InlayHintKind[InlayHintKind["Parameter"] = 2] = "Parameter";
})(InlayHintKind || (InlayHintKind = {}));
/**
 * How an {@link InlineCompletionsProvider inline completion provider} was triggered.
 */
var InlineCompletionTriggerKind;
(function (InlineCompletionTriggerKind) {
    /**
     * Completion was triggered automatically while editing.
     * It is sufficient to return a single completion item in this case.
     */
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Automatic"] = 0] = "Automatic";
    /**
     * Completion was triggered explicitly by a user gesture.
     * Return multiple completion items to enable cycling through them.
     */
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Explicit"] = 1] = "Explicit";
})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
/**
 * Virtual Key Codes, the value does not hold any inherent meaning.
 * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
 * But these are "more general", as they should work across browsers & OS`s.
 */
var KeyCode;
(function (KeyCode) {
    KeyCode[KeyCode["DependsOnKbLayout"] = -1] = "DependsOnKbLayout";
    /**
     * Placed first to cover the 0 value of the enum.
     */
    KeyCode[KeyCode["Unknown"] = 0] = "Unknown";
    KeyCode[KeyCode["Backspace"] = 1] = "Backspace";
    KeyCode[KeyCode["Tab"] = 2] = "Tab";
    KeyCode[KeyCode["Enter"] = 3] = "Enter";
    KeyCode[KeyCode["Shift"] = 4] = "Shift";
    KeyCode[KeyCode["Ctrl"] = 5] = "Ctrl";
    KeyCode[KeyCode["Alt"] = 6] = "Alt";
    KeyCode[KeyCode["PauseBreak"] = 7] = "PauseBreak";
    KeyCode[KeyCode["CapsLock"] = 8] = "CapsLock";
    KeyCode[KeyCode["Escape"] = 9] = "Escape";
    KeyCode[KeyCode["Space"] = 10] = "Space";
    KeyCode[KeyCode["PageUp"] = 11] = "PageUp";
    KeyCode[KeyCode["PageDown"] = 12] = "PageDown";
    KeyCode[KeyCode["End"] = 13] = "End";
    KeyCode[KeyCode["Home"] = 14] = "Home";
    KeyCode[KeyCode["LeftArrow"] = 15] = "LeftArrow";
    KeyCode[KeyCode["UpArrow"] = 16] = "UpArrow";
    KeyCode[KeyCode["RightArrow"] = 17] = "RightArrow";
    KeyCode[KeyCode["DownArrow"] = 18] = "DownArrow";
    KeyCode[KeyCode["Insert"] = 19] = "Insert";
    KeyCode[KeyCode["Delete"] = 20] = "Delete";
    KeyCode[KeyCode["Digit0"] = 21] = "Digit0";
    KeyCode[KeyCode["Digit1"] = 22] = "Digit1";
    KeyCode[KeyCode["Digit2"] = 23] = "Digit2";
    KeyCode[KeyCode["Digit3"] = 24] = "Digit3";
    KeyCode[KeyCode["Digit4"] = 25] = "Digit4";
    KeyCode[KeyCode["Digit5"] = 26] = "Digit5";
    KeyCode[KeyCode["Digit6"] = 27] = "Digit6";
    KeyCode[KeyCode["Digit7"] = 28] = "Digit7";
    KeyCode[KeyCode["Digit8"] = 29] = "Digit8";
    KeyCode[KeyCode["Digit9"] = 30] = "Digit9";
    KeyCode[KeyCode["KeyA"] = 31] = "KeyA";
    KeyCode[KeyCode["KeyB"] = 32] = "KeyB";
    KeyCode[KeyCode["KeyC"] = 33] = "KeyC";
    KeyCode[KeyCode["KeyD"] = 34] = "KeyD";
    KeyCode[KeyCode["KeyE"] = 35] = "KeyE";
    KeyCode[KeyCode["KeyF"] = 36] = "KeyF";
    KeyCode[KeyCode["KeyG"] = 37] = "KeyG";
    KeyCode[KeyCode["KeyH"] = 38] = "KeyH";
    KeyCode[KeyCode["KeyI"] = 39] = "KeyI";
    KeyCode[KeyCode["KeyJ"] = 40] = "KeyJ";
    KeyCode[KeyCode["KeyK"] = 41] = "KeyK";
    KeyCode[KeyCode["KeyL"] = 42] = "KeyL";
    KeyCode[KeyCode["KeyM"] = 43] = "KeyM";
    KeyCode[KeyCode["KeyN"] = 44] = "KeyN";
    KeyCode[KeyCode["KeyO"] = 45] = "KeyO";
    KeyCode[KeyCode["KeyP"] = 46] = "KeyP";
    KeyCode[KeyCode["KeyQ"] = 47] = "KeyQ";
    KeyCode[KeyCode["KeyR"] = 48] = "KeyR";
    KeyCode[KeyCode["KeyS"] = 49] = "KeyS";
    KeyCode[KeyCode["KeyT"] = 50] = "KeyT";
    KeyCode[KeyCode["KeyU"] = 51] = "KeyU";
    KeyCode[KeyCode["KeyV"] = 52] = "KeyV";
    KeyCode[KeyCode["KeyW"] = 53] = "KeyW";
    KeyCode[KeyCode["KeyX"] = 54] = "KeyX";
    KeyCode[KeyCode["KeyY"] = 55] = "KeyY";
    KeyCode[KeyCode["KeyZ"] = 56] = "KeyZ";
    KeyCode[KeyCode["Meta"] = 57] = "Meta";
    KeyCode[KeyCode["ContextMenu"] = 58] = "ContextMenu";
    KeyCode[KeyCode["F1"] = 59] = "F1";
    KeyCode[KeyCode["F2"] = 60] = "F2";
    KeyCode[KeyCode["F3"] = 61] = "F3";
    KeyCode[KeyCode["F4"] = 62] = "F4";
    KeyCode[KeyCode["F5"] = 63] = "F5";
    KeyCode[KeyCode["F6"] = 64] = "F6";
    KeyCode[KeyCode["F7"] = 65] = "F7";
    KeyCode[KeyCode["F8"] = 66] = "F8";
    KeyCode[KeyCode["F9"] = 67] = "F9";
    KeyCode[KeyCode["F10"] = 68] = "F10";
    KeyCode[KeyCode["F11"] = 69] = "F11";
    KeyCode[KeyCode["F12"] = 70] = "F12";
    KeyCode[KeyCode["F13"] = 71] = "F13";
    KeyCode[KeyCode["F14"] = 72] = "F14";
    KeyCode[KeyCode["F15"] = 73] = "F15";
    KeyCode[KeyCode["F16"] = 74] = "F16";
    KeyCode[KeyCode["F17"] = 75] = "F17";
    KeyCode[KeyCode["F18"] = 76] = "F18";
    KeyCode[KeyCode["F19"] = 77] = "F19";
    KeyCode[KeyCode["F20"] = 78] = "F20";
    KeyCode[KeyCode["F21"] = 79] = "F21";
    KeyCode[KeyCode["F22"] = 80] = "F22";
    KeyCode[KeyCode["F23"] = 81] = "F23";
    KeyCode[KeyCode["F24"] = 82] = "F24";
    KeyCode[KeyCode["NumLock"] = 83] = "NumLock";
    KeyCode[KeyCode["ScrollLock"] = 84] = "ScrollLock";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ';:' key
     */
    KeyCode[KeyCode["Semicolon"] = 85] = "Semicolon";
    /**
     * For any country/region, the '+' key
     * For the US standard keyboard, the '=+' key
     */
    KeyCode[KeyCode["Equal"] = 86] = "Equal";
    /**
     * For any country/region, the ',' key
     * For the US standard keyboard, the ',<' key
     */
    KeyCode[KeyCode["Comma"] = 87] = "Comma";
    /**
     * For any country/region, the '-' key
     * For the US standard keyboard, the '-_' key
     */
    KeyCode[KeyCode["Minus"] = 88] = "Minus";
    /**
     * For any country/region, the '.' key
     * For the US standard keyboard, the '.>' key
     */
    KeyCode[KeyCode["Period"] = 89] = "Period";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '/?' key
     */
    KeyCode[KeyCode["Slash"] = 90] = "Slash";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '`~' key
     */
    KeyCode[KeyCode["Backquote"] = 91] = "Backquote";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '[{' key
     */
    KeyCode[KeyCode["BracketLeft"] = 92] = "BracketLeft";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the '\|' key
     */
    KeyCode[KeyCode["Backslash"] = 93] = "Backslash";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ']}' key
     */
    KeyCode[KeyCode["BracketRight"] = 94] = "BracketRight";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     * For the US standard keyboard, the ''"' key
     */
    KeyCode[KeyCode["Quote"] = 95] = "Quote";
    /**
     * Used for miscellaneous characters; it can vary by keyboard.
     */
    KeyCode[KeyCode["OEM_8"] = 96] = "OEM_8";
    /**
     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.
     */
    KeyCode[KeyCode["IntlBackslash"] = 97] = "IntlBackslash";
    KeyCode[KeyCode["Numpad0"] = 98] = "Numpad0";
    KeyCode[KeyCode["Numpad1"] = 99] = "Numpad1";
    KeyCode[KeyCode["Numpad2"] = 100] = "Numpad2";
    KeyCode[KeyCode["Numpad3"] = 101] = "Numpad3";
    KeyCode[KeyCode["Numpad4"] = 102] = "Numpad4";
    KeyCode[KeyCode["Numpad5"] = 103] = "Numpad5";
    KeyCode[KeyCode["Numpad6"] = 104] = "Numpad6";
    KeyCode[KeyCode["Numpad7"] = 105] = "Numpad7";
    KeyCode[KeyCode["Numpad8"] = 106] = "Numpad8";
    KeyCode[KeyCode["Numpad9"] = 107] = "Numpad9";
    KeyCode[KeyCode["NumpadMultiply"] = 108] = "NumpadMultiply";
    KeyCode[KeyCode["NumpadAdd"] = 109] = "NumpadAdd";
    KeyCode[KeyCode["NUMPAD_SEPARATOR"] = 110] = "NUMPAD_SEPARATOR";
    KeyCode[KeyCode["NumpadSubtract"] = 111] = "NumpadSubtract";
    KeyCode[KeyCode["NumpadDecimal"] = 112] = "NumpadDecimal";
    KeyCode[KeyCode["NumpadDivide"] = 113] = "NumpadDivide";
    /**
     * Cover all key codes when IME is processing input.
     */
    KeyCode[KeyCode["KEY_IN_COMPOSITION"] = 114] = "KEY_IN_COMPOSITION";
    KeyCode[KeyCode["ABNT_C1"] = 115] = "ABNT_C1";
    KeyCode[KeyCode["ABNT_C2"] = 116] = "ABNT_C2";
    KeyCode[KeyCode["AudioVolumeMute"] = 117] = "AudioVolumeMute";
    KeyCode[KeyCode["AudioVolumeUp"] = 118] = "AudioVolumeUp";
    KeyCode[KeyCode["AudioVolumeDown"] = 119] = "AudioVolumeDown";
    KeyCode[KeyCode["BrowserSearch"] = 120] = "BrowserSearch";
    KeyCode[KeyCode["BrowserHome"] = 121] = "BrowserHome";
    KeyCode[KeyCode["BrowserBack"] = 122] = "BrowserBack";
    KeyCode[KeyCode["BrowserForward"] = 123] = "BrowserForward";
    KeyCode[KeyCode["MediaTrackNext"] = 124] = "MediaTrackNext";
    KeyCode[KeyCode["MediaTrackPrevious"] = 125] = "MediaTrackPrevious";
    KeyCode[KeyCode["MediaStop"] = 126] = "MediaStop";
    KeyCode[KeyCode["MediaPlayPause"] = 127] = "MediaPlayPause";
    KeyCode[KeyCode["LaunchMediaPlayer"] = 128] = "LaunchMediaPlayer";
    KeyCode[KeyCode["LaunchMail"] = 129] = "LaunchMail";
    KeyCode[KeyCode["LaunchApp2"] = 130] = "LaunchApp2";
    /**
     * VK_CLEAR, 0x0C, CLEAR key
     */
    KeyCode[KeyCode["Clear"] = 131] = "Clear";
    /**
     * Placed last to cover the length of the enum.
     * Please do not depend on this value!
     */
    KeyCode[KeyCode["MAX_VALUE"] = 132] = "MAX_VALUE";
})(KeyCode || (KeyCode = {}));
var MarkerSeverity;
(function (MarkerSeverity) {
    MarkerSeverity[MarkerSeverity["Hint"] = 1] = "Hint";
    MarkerSeverity[MarkerSeverity["Info"] = 2] = "Info";
    MarkerSeverity[MarkerSeverity["Warning"] = 4] = "Warning";
    MarkerSeverity[MarkerSeverity["Error"] = 8] = "Error";
})(MarkerSeverity || (MarkerSeverity = {}));
var MarkerTag;
(function (MarkerTag) {
    MarkerTag[MarkerTag["Unnecessary"] = 1] = "Unnecessary";
    MarkerTag[MarkerTag["Deprecated"] = 2] = "Deprecated";
})(MarkerTag || (MarkerTag = {}));
/**
 * Position in the minimap to render the decoration.
 */
var MinimapPosition;
(function (MinimapPosition) {
    MinimapPosition[MinimapPosition["Inline"] = 1] = "Inline";
    MinimapPosition[MinimapPosition["Gutter"] = 2] = "Gutter";
})(MinimapPosition || (MinimapPosition = {}));
/**
 * Type of hit element with the mouse in the editor.
 */
var MouseTargetType;
(function (MouseTargetType) {
    /**
     * Mouse is on top of an unknown element.
     */
    MouseTargetType[MouseTargetType["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * Mouse is on top of the textarea used for input.
     */
    MouseTargetType[MouseTargetType["TEXTAREA"] = 1] = "TEXTAREA";
    /**
     * Mouse is on top of the glyph margin
     */
    MouseTargetType[MouseTargetType["GUTTER_GLYPH_MARGIN"] = 2] = "GUTTER_GLYPH_MARGIN";
    /**
     * Mouse is on top of the line numbers
     */
    MouseTargetType[MouseTargetType["GUTTER_LINE_NUMBERS"] = 3] = "GUTTER_LINE_NUMBERS";
    /**
     * Mouse is on top of the line decorations
     */
    MouseTargetType[MouseTargetType["GUTTER_LINE_DECORATIONS"] = 4] = "GUTTER_LINE_DECORATIONS";
    /**
     * Mouse is on top of the whitespace left in the gutter by a view zone.
     */
    MouseTargetType[MouseTargetType["GUTTER_VIEW_ZONE"] = 5] = "GUTTER_VIEW_ZONE";
    /**
     * Mouse is on top of text in the content.
     */
    MouseTargetType[MouseTargetType["CONTENT_TEXT"] = 6] = "CONTENT_TEXT";
    /**
     * Mouse is on top of empty space in the content (e.g. after line text or below last line)
     */
    MouseTargetType[MouseTargetType["CONTENT_EMPTY"] = 7] = "CONTENT_EMPTY";
    /**
     * Mouse is on top of a view zone in the content.
     */
    MouseTargetType[MouseTargetType["CONTENT_VIEW_ZONE"] = 8] = "CONTENT_VIEW_ZONE";
    /**
     * Mouse is on top of a content widget.
     */
    MouseTargetType[MouseTargetType["CONTENT_WIDGET"] = 9] = "CONTENT_WIDGET";
    /**
     * Mouse is on top of the decorations overview ruler.
     */
    MouseTargetType[MouseTargetType["OVERVIEW_RULER"] = 10] = "OVERVIEW_RULER";
    /**
     * Mouse is on top of a scrollbar.
     */
    MouseTargetType[MouseTargetType["SCROLLBAR"] = 11] = "SCROLLBAR";
    /**
     * Mouse is on top of an overlay widget.
     */
    MouseTargetType[MouseTargetType["OVERLAY_WIDGET"] = 12] = "OVERLAY_WIDGET";
    /**
     * Mouse is outside of the editor.
     */
    MouseTargetType[MouseTargetType["OUTSIDE_EDITOR"] = 13] = "OUTSIDE_EDITOR";
})(MouseTargetType || (MouseTargetType = {}));
/**
 * A positioning preference for rendering overlay widgets.
 */
var OverlayWidgetPositionPreference;
(function (OverlayWidgetPositionPreference) {
    /**
     * Position the overlay widget in the top right corner
     */
    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["TOP_RIGHT_CORNER"] = 0] = "TOP_RIGHT_CORNER";
    /**
     * Position the overlay widget in the bottom right corner
     */
    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["BOTTOM_RIGHT_CORNER"] = 1] = "BOTTOM_RIGHT_CORNER";
    /**
     * Position the overlay widget in the top center
     */
    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference["TOP_CENTER"] = 2] = "TOP_CENTER";
})(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));
/**
 * Vertical Lane in the overview ruler of the editor.
 */
var OverviewRulerLane;
(function (OverviewRulerLane) {
    OverviewRulerLane[OverviewRulerLane["Left"] = 1] = "Left";
    OverviewRulerLane[OverviewRulerLane["Center"] = 2] = "Center";
    OverviewRulerLane[OverviewRulerLane["Right"] = 4] = "Right";
    OverviewRulerLane[OverviewRulerLane["Full"] = 7] = "Full";
})(OverviewRulerLane || (OverviewRulerLane = {}));
var PositionAffinity;
(function (PositionAffinity) {
    /**
     * Prefers the left most position.
    */
    PositionAffinity[PositionAffinity["Left"] = 0] = "Left";
    /**
     * Prefers the right most position.
    */
    PositionAffinity[PositionAffinity["Right"] = 1] = "Right";
    /**
     * No preference.
    */
    PositionAffinity[PositionAffinity["None"] = 2] = "None";
    /**
     * If the given position is on injected text, prefers the position left of it.
    */
    PositionAffinity[PositionAffinity["LeftOfInjectedText"] = 3] = "LeftOfInjectedText";
    /**
     * If the given position is on injected text, prefers the position right of it.
    */
    PositionAffinity[PositionAffinity["RightOfInjectedText"] = 4] = "RightOfInjectedText";
})(PositionAffinity || (PositionAffinity = {}));
var RenderLineNumbersType;
(function (RenderLineNumbersType) {
    RenderLineNumbersType[RenderLineNumbersType["Off"] = 0] = "Off";
    RenderLineNumbersType[RenderLineNumbersType["On"] = 1] = "On";
    RenderLineNumbersType[RenderLineNumbersType["Relative"] = 2] = "Relative";
    RenderLineNumbersType[RenderLineNumbersType["Interval"] = 3] = "Interval";
    RenderLineNumbersType[RenderLineNumbersType["Custom"] = 4] = "Custom";
})(RenderLineNumbersType || (RenderLineNumbersType = {}));
var RenderMinimap;
(function (RenderMinimap) {
    RenderMinimap[RenderMinimap["None"] = 0] = "None";
    RenderMinimap[RenderMinimap["Text"] = 1] = "Text";
    RenderMinimap[RenderMinimap["Blocks"] = 2] = "Blocks";
})(RenderMinimap || (RenderMinimap = {}));
var ScrollType;
(function (ScrollType) {
    ScrollType[ScrollType["Smooth"] = 0] = "Smooth";
    ScrollType[ScrollType["Immediate"] = 1] = "Immediate";
})(ScrollType || (ScrollType = {}));
var ScrollbarVisibility;
(function (ScrollbarVisibility) {
    ScrollbarVisibility[ScrollbarVisibility["Auto"] = 1] = "Auto";
    ScrollbarVisibility[ScrollbarVisibility["Hidden"] = 2] = "Hidden";
    ScrollbarVisibility[ScrollbarVisibility["Visible"] = 3] = "Visible";
})(ScrollbarVisibility || (ScrollbarVisibility = {}));
/**
 * The direction of a selection.
 */
var SelectionDirection;
(function (SelectionDirection) {
    /**
     * The selection starts above where it ends.
     */
    SelectionDirection[SelectionDirection["LTR"] = 0] = "LTR";
    /**
     * The selection starts below where it ends.
     */
    SelectionDirection[SelectionDirection["RTL"] = 1] = "RTL";
})(SelectionDirection || (SelectionDirection = {}));
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoke"] = 1] = "Invoke";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"] = 2] = "TriggerCharacter";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"] = 3] = "ContentChange";
})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind[SymbolKind["File"] = 0] = "File";
    SymbolKind[SymbolKind["Module"] = 1] = "Module";
    SymbolKind[SymbolKind["Namespace"] = 2] = "Namespace";
    SymbolKind[SymbolKind["Package"] = 3] = "Package";
    SymbolKind[SymbolKind["Class"] = 4] = "Class";
    SymbolKind[SymbolKind["Method"] = 5] = "Method";
    SymbolKind[SymbolKind["Property"] = 6] = "Property";
    SymbolKind[SymbolKind["Field"] = 7] = "Field";
    SymbolKind[SymbolKind["Constructor"] = 8] = "Constructor";
    SymbolKind[SymbolKind["Enum"] = 9] = "Enum";
    SymbolKind[SymbolKind["Interface"] = 10] = "Interface";
    SymbolKind[SymbolKind["Function"] = 11] = "Function";
    SymbolKind[SymbolKind["Variable"] = 12] = "Variable";
    SymbolKind[SymbolKind["Constant"] = 13] = "Constant";
    SymbolKind[SymbolKind["String"] = 14] = "String";
    SymbolKind[SymbolKind["Number"] = 15] = "Number";
    SymbolKind[SymbolKind["Boolean"] = 16] = "Boolean";
    SymbolKind[SymbolKind["Array"] = 17] = "Array";
    SymbolKind[SymbolKind["Object"] = 18] = "Object";
    SymbolKind[SymbolKind["Key"] = 19] = "Key";
    SymbolKind[SymbolKind["Null"] = 20] = "Null";
    SymbolKind[SymbolKind["EnumMember"] = 21] = "EnumMember";
    SymbolKind[SymbolKind["Struct"] = 22] = "Struct";
    SymbolKind[SymbolKind["Event"] = 23] = "Event";
    SymbolKind[SymbolKind["Operator"] = 24] = "Operator";
    SymbolKind[SymbolKind["TypeParameter"] = 25] = "TypeParameter";
})(SymbolKind || (SymbolKind = {}));
var SymbolTag;
(function (SymbolTag) {
    SymbolTag[SymbolTag["Deprecated"] = 1] = "Deprecated";
})(SymbolTag || (SymbolTag = {}));
/**
 * The kind of animation in which the editor's cursor should be rendered.
 */
var TextEditorCursorBlinkingStyle;
(function (TextEditorCursorBlinkingStyle) {
    /**
     * Hidden
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Hidden"] = 0] = "Hidden";
    /**
     * Blinking
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Blink"] = 1] = "Blink";
    /**
     * Blinking with smooth fading
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Smooth"] = 2] = "Smooth";
    /**
     * Blinking with prolonged filled state and smooth fading
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Phase"] = 3] = "Phase";
    /**
     * Expand collapse animation on the y axis
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Expand"] = 4] = "Expand";
    /**
     * No-Blinking
     */
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Solid"] = 5] = "Solid";
})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));
/**
 * The style in which the editor's cursor should be rendered.
 */
var TextEditorCursorStyle;
(function (TextEditorCursorStyle) {
    /**
     * As a vertical line (sitting between two characters).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["Line"] = 1] = "Line";
    /**
     * As a block (sitting on top of a character).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["Block"] = 2] = "Block";
    /**
     * As a horizontal line (sitting under a character).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["Underline"] = 3] = "Underline";
    /**
     * As a thin vertical line (sitting between two characters).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["LineThin"] = 4] = "LineThin";
    /**
     * As an outlined block (sitting on top of a character).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["BlockOutline"] = 5] = "BlockOutline";
    /**
     * As a thin horizontal line (sitting under a character).
     */
    TextEditorCursorStyle[TextEditorCursorStyle["UnderlineThin"] = 6] = "UnderlineThin";
})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));
/**
 * Describes the behavior of decorations when typing/editing near their edges.
 * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`
 */
var TrackedRangeStickiness;
(function (TrackedRangeStickiness) {
    TrackedRangeStickiness[TrackedRangeStickiness["AlwaysGrowsWhenTypingAtEdges"] = 0] = "AlwaysGrowsWhenTypingAtEdges";
    TrackedRangeStickiness[TrackedRangeStickiness["NeverGrowsWhenTypingAtEdges"] = 1] = "NeverGrowsWhenTypingAtEdges";
    TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingBefore"] = 2] = "GrowsOnlyWhenTypingBefore";
    TrackedRangeStickiness[TrackedRangeStickiness["GrowsOnlyWhenTypingAfter"] = 3] = "GrowsOnlyWhenTypingAfter";
})(TrackedRangeStickiness || (TrackedRangeStickiness = {}));
/**
 * Describes how to indent wrapped lines.
 */
var WrappingIndent;
(function (WrappingIndent) {
    /**
     * No indentation => wrapped lines begin at column 1.
     */
    WrappingIndent[WrappingIndent["None"] = 0] = "None";
    /**
     * Same => wrapped lines get the same indentation as the parent.
     */
    WrappingIndent[WrappingIndent["Same"] = 1] = "Same";
    /**
     * Indent => wrapped lines get +1 indentation toward the parent.
     */
    WrappingIndent[WrappingIndent["Indent"] = 2] = "Indent";
    /**
     * DeepIndent => wrapped lines get +2 indentation toward the parent.
     */
    WrappingIndent[WrappingIndent["DeepIndent"] = 3] = "DeepIndent";
})(WrappingIndent || (WrappingIndent = {}));


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TokenizationRegistry: () => (/* binding */ TokenizationRegistry)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/event.js */ "./node_modules/monaco-editor/esm/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/lifecycle.js */ "./node_modules/monaco-editor/esm/vs/base/common/lifecycle.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class TokenizationRegistry {
    constructor() {
        this._tokenizationSupports = new Map();
        this._factories = new Map();
        this._onDidChange = new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter();
        this.onDidChange = this._onDidChange.event;
        this._colorMap = null;
    }
    handleChange(languageIds) {
        this._onDidChange.fire({
            changedLanguages: languageIds,
            changedColorMap: false
        });
    }
    register(languageId, support) {
        this._tokenizationSupports.set(languageId, support);
        this.handleChange([languageId]);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            if (this._tokenizationSupports.get(languageId) !== support) {
                return;
            }
            this._tokenizationSupports.delete(languageId);
            this.handleChange([languageId]);
        });
    }
    get(languageId) {
        return this._tokenizationSupports.get(languageId) || null;
    }
    registerFactory(languageId, factory) {
        var _a;
        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();
        const myData = new TokenizationSupportFactoryData(this, languageId, factory);
        this._factories.set(languageId, myData);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            const v = this._factories.get(languageId);
            if (!v || v !== myData) {
                return;
            }
            this._factories.delete(languageId);
            v.dispose();
        });
    }
    getOrCreate(languageId) {
        return __awaiter(this, void 0, void 0, function* () {
            // check first if the support is already set
            const tokenizationSupport = this.get(languageId);
            if (tokenizationSupport) {
                return tokenizationSupport;
            }
            const factory = this._factories.get(languageId);
            if (!factory || factory.isResolved) {
                // no factory or factory.resolve already finished
                return null;
            }
            yield factory.resolve();
            return this.get(languageId);
        });
    }
    isResolved(languageId) {
        const tokenizationSupport = this.get(languageId);
        if (tokenizationSupport) {
            return true;
        }
        const factory = this._factories.get(languageId);
        if (!factory || factory.isResolved) {
            return true;
        }
        return false;
    }
    setColorMap(colorMap) {
        this._colorMap = colorMap;
        this._onDidChange.fire({
            changedLanguages: Array.from(this._tokenizationSupports.keys()),
            changedColorMap: true
        });
    }
    getColorMap() {
        return this._colorMap;
    }
    getDefaultBackground() {
        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {
            return this._colorMap[2 /* ColorId.DefaultBackground */];
        }
        return null;
    }
}
class TokenizationSupportFactoryData extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    get isResolved() {
        return this._isResolved;
    }
    constructor(_registry, _languageId, _factory) {
        super();
        this._registry = _registry;
        this._languageId = _languageId;
        this._factory = _factory;
        this._isDisposed = false;
        this._resolvePromise = null;
        this._isResolved = false;
    }
    dispose() {
        this._isDisposed = true;
        super.dispose();
    }
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._resolvePromise) {
                this._resolvePromise = this._create();
            }
            return this._resolvePromise;
        });
    }
    _create() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this._factory.tokenizationSupport;
            this._isResolved = true;
            if (value && !this._isDisposed) {
                this._register(this._registry.register(this._languageId, value));
            }
        });
    }
}


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/editor/editor.worker.js":
/*!*******************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/editor/editor.worker.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base/common/worker/simpleWorker.js */ "./node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js");
/* harmony import */ var _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/services/editorSimpleWorker.js */ "./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


let initialized = false;
function initialize(foreignModule) {
    if (initialized) {
        return;
    }
    initialized = true;
    const simpleWorker = new _base_common_worker_simpleWorker_js__WEBPACK_IMPORTED_MODULE_0__.SimpleWorkerServer((msg) => {
        globalThis.postMessage(msg);
    }, (host) => new _common_services_editorSimpleWorker_js__WEBPACK_IMPORTED_MODULE_1__.EditorSimpleWorker(host, foreignModule));
    globalThis.onmessage = (e) => {
        simpleWorker.onmessage(e.data);
    };
}
globalThis.onmessage = (e) => {
    // Ignore first message in this case and initialize if not yet initialized
    if (!initialized) {
        initialize(null);
    }
};


/***/ }),

/***/ "./node_modules/monaco-editor/esm/vs/nls.js":
/*!**************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/nls.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   getConfiguredDefaultLocale: () => (/* binding */ getConfiguredDefaultLocale),
/* harmony export */   load: () => (/* binding */ load),
/* harmony export */   localize: () => (/* binding */ localize),
/* harmony export */   setPseudoTranslation: () => (/* binding */ setPseudoTranslation)
/* harmony export */ });
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
let isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);
const DEFAULT_TAG = 'i-default';
function _format(message, args) {
    let result;
    if (args.length === 0) {
        result = message;
    }
    else {
        result = message.replace(/\{(\d+)\}/g, (match, rest) => {
            const index = rest[0];
            const arg = args[index];
            let result = match;
            if (typeof arg === 'string') {
                result = arg;
            }
            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {
                result = String(arg);
            }
            return result;
        });
    }
    if (isPseudo) {
        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]
        result = '\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\uFF3D';
    }
    return result;
}
function findLanguageForModule(config, name) {
    let result = config[name];
    if (result) {
        return result;
    }
    result = config['*'];
    if (result) {
        return result;
    }
    return null;
}
function endWithSlash(path) {
    if (path.charAt(path.length - 1) === '/') {
        return path;
    }
    return path + '/';
}
function getMessagesFromTranslationsService(translationServiceUrl, language, name) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = endWithSlash(translationServiceUrl) + endWithSlash(language) + 'vscode/' + endWithSlash(name);
        const res = yield fetch(url);
        if (res.ok) {
            const messages = yield res.json();
            return messages;
        }
        throw new Error(`${res.status} - ${res.statusText}`);
    });
}
function createScopedLocalize(scope) {
    return function (idx, defaultValue) {
        const restArgs = Array.prototype.slice.call(arguments, 2);
        return _format(scope[idx], restArgs);
    };
}
/**
 * @skipMangle
 */
function localize(data, message, ...args) {
    return _format(message, args);
}
/**
 * @skipMangle
 */
function getConfiguredDefaultLocale(_) {
    // This returns undefined because this implementation isn't used and is overwritten by the loader
    // when loaded.
    return undefined;
}
/**
 * @skipMangle
 */
function setPseudoTranslation(value) {
    isPseudo = value;
}
/**
 * Invoked in a built product at run-time
 * @skipMangle
 */
function create(key, data) {
    var _a;
    return {
        localize: createScopedLocalize(data[key]),
        getConfiguredDefaultLocale: (_a = data.getConfiguredDefaultLocale) !== null && _a !== void 0 ? _a : ((_) => undefined)
    };
}
/**
 * Invoked by the loader at run-time
 * @skipMangle
 */
function load(name, req, load, config) {
    var _a;
    const pluginConfig = (_a = config['vs/nls']) !== null && _a !== void 0 ? _a : {};
    if (!name || name.length === 0) {
        // TODO: We need to give back the mangled names here
        return load({
            localize: localize,
            getConfiguredDefaultLocale: () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; }
        });
    }
    const language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;
    const useDefaultLanguage = language === null || language === DEFAULT_TAG;
    let suffix = '.nls';
    if (!useDefaultLanguage) {
        suffix = suffix + '.' + language;
    }
    const messagesLoaded = (messages) => {
        if (Array.isArray(messages)) {
            messages.localize = createScopedLocalize(messages);
        }
        else {
            messages.localize = createScopedLocalize(messages[name]);
        }
        messages.getConfiguredDefaultLocale = () => { var _a; return (_a = pluginConfig.availableLanguages) === null || _a === void 0 ? void 0 : _a['*']; };
        load(messages);
    };
    if (typeof pluginConfig.loadBundle === 'function') {
        pluginConfig.loadBundle(name, language, (err, messages) => {
            // We have an error. Load the English default strings to not fail
            if (err) {
                req([name + '.nls'], messagesLoaded);
            }
            else {
                messagesLoaded(messages);
            }
        });
    }
    else if (pluginConfig.translationServiceUrl && !useDefaultLanguage) {
        (() => __awaiter(this, void 0, void 0, function* () {
            var _b;
            try {
                const messages = yield getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, language, name);
                return messagesLoaded(messages);
            }
            catch (err) {
                // Language is already as generic as it gets, so require default messages
                if (!language.includes('-')) {
                    console.error(err);
                    return req([name + '.nls'], messagesLoaded);
                }
                try {
                    // Since there is a dash, the language configured is a specific sub-language of the same generic language.
                    // Since we were unable to load the specific language, try to load the generic language. Ex. we failed to find a
                    // Swiss German (de-CH), so try to load the generic German (de) messages instead.
                    const genericLanguage = language.split('-')[0];
                    const messages = yield getMessagesFromTranslationsService(pluginConfig.translationServiceUrl, genericLanguage, name);
                    // We got some messages, so we configure the configuration to use the generic language for this session.
                    (_b = pluginConfig.availableLanguages) !== null && _b !== void 0 ? _b : (pluginConfig.availableLanguages = {});
                    pluginConfig.availableLanguages['*'] = genericLanguage;
                    return messagesLoaded(messages);
                }
                catch (err) {
                    console.error(err);
                    return req([name + '.nls'], messagesLoaded);
                }
            }
        }))();
    }
    else {
        req([name + suffix], messagesLoaded, (err) => {
            if (suffix === '.nls') {
                console.error('Failed trying to load default language strings', err);
                return;
            }
            console.error(`Failed to load message bundle for language ${language}. Falling back to the default language:`, err);
            req([name + '.nls'], messagesLoaded);
        });
    }
}


/***/ }),

/***/ "./node_modules/object-keys/implementation.js":
/*!****************************************************!*\
  !*** ./node_modules/object-keys/implementation.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js"); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/index.js":
/*!*******************************************!*\
  !*** ./node_modules/object-keys/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js");

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(/*! ./implementation */ "./node_modules/object-keys/implementation.js");

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/isArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/object-keys/isArguments.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ "./node_modules/object.assign/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/object.assign/implementation.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// modified from https://github.com/es-shims/es6-shim
var objectKeys = __webpack_require__(/*! object-keys */ "./node_modules/object-keys/index.js");
var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "./node_modules/has-symbols/shams.js")();
var callBound = __webpack_require__(/*! call-bound */ "./node_modules/call-bound/index.js");
var $Object = __webpack_require__(/*! es-object-atoms */ "./node_modules/es-object-atoms/index.js");
var $push = callBound('Array.prototype.push');
var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
var originalGetSymbols = hasSymbols ? $Object.getOwnPropertySymbols : null;

// eslint-disable-next-line no-unused-vars
module.exports = function assign(target, source1) {
	if (target == null) { throw new TypeError('target must be an object'); }
	var to = $Object(target); // step 1
	if (arguments.length === 1) {
		return to; // step 2
	}
	for (var s = 1; s < arguments.length; ++s) {
		var from = $Object(arguments[s]); // step 3.a.i

		// step 3.a.ii:
		var keys = objectKeys(from);
		var getSymbols = hasSymbols && ($Object.getOwnPropertySymbols || originalGetSymbols);
		if (getSymbols) {
			var syms = getSymbols(from);
			for (var j = 0; j < syms.length; ++j) {
				var key = syms[j];
				if ($propIsEnumerable(from, key)) {
					$push(keys, key);
				}
			}
		}

		// step 3.a.iii:
		for (var i = 0; i < keys.length; ++i) {
			var nextKey = keys[i];
			if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
				var propValue = from[nextKey]; // step 3.a.iii.2.a
				to[nextKey] = propValue; // step 3.a.iii.2.b
			}
		}
	}

	return to; // step 4
};


/***/ }),

/***/ "./node_modules/object.assign/polyfill.js":
/*!************************************************!*\
  !*** ./node_modules/object.assign/polyfill.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object.assign/implementation.js");

var lacksProperEnumerationOrder = function () {
	if (!Object.assign) {
		return false;
	}
	/*
	 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
	 * note: this does not detect the bug unless there's 20 characters
	 */
	var str = 'abcdefghijklmnopqrst';
	var letters = str.split('');
	var map = {};
	for (var i = 0; i < letters.length; ++i) {
		map[letters[i]] = letters[i];
	}
	var obj = Object.assign({}, map);
	var actual = '';
	for (var k in obj) {
		actual += k;
	}
	return str !== actual;
};

var assignHasPendingExceptions = function () {
	if (!Object.assign || !Object.preventExtensions) {
		return false;
	}
	/*
	 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
	 * which is 72% slower than our shim, and Firefox 40's native implementation.
	 */
	var thrower = Object.preventExtensions({ 1: 2 });
	try {
		Object.assign(thrower, 'xy');
	} catch (e) {
		return thrower[1] === 'y';
	}
	return false;
};

module.exports = function getPolyfill() {
	if (!Object.assign) {
		return implementation;
	}
	if (lacksProperEnumerationOrder()) {
		return implementation;
	}
	if (assignHasPendingExceptions()) {
		return implementation;
	}
	return Object.assign;
};


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __rewriteRelativeImportExtension: () => (/* binding */ __rewriteRelativeImportExtension),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});


/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/util/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ "./src/platform/packages/shared/kbn-i18n/src/browser.ts":
/*!**************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-i18n/src/browser.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i18n: () => (/* binding */ i18n)
/* harmony export */ });
/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ "./src/platform/packages/shared/kbn-i18n/src/core/index.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */


const i18n = _core__WEBPACK_IMPORTED_MODULE_0__;

/***/ }),

/***/ "./src/platform/packages/shared/kbn-i18n/src/core/error_handler.ts":
/*!*************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-i18n/src/core/error_handler.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   handleIntlError: () => (/* binding */ handleIntlError)
/* harmony export */ });
/* harmony import */ var _formatjs_intl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/intl */ "./node_modules/@formatjs/intl/lib/src/error.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */


const handleIntlError = error => {
  /**
   * log any intl error except missing translations
   * we do not log on missing translations because our process
   * of translations happens after developers have commited their
   * strings in english.
   *
   * Previously we used to throw an error on malformed strings but
   * restricting to logging is less risky in cases of errors
   * for better UX (ie seeing `InvalidDate` is better than an empty screen)
   */
  if (error.code !== _formatjs_intl__WEBPACK_IMPORTED_MODULE_0__.IntlErrorCode.MISSING_TRANSLATION) {
    // eslint-disable-next-line no-console
    console.error(error);
  }
};

/***/ }),

/***/ "./src/platform/packages/shared/kbn-i18n/src/core/formats.ts":
/*!*******************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-i18n/src/core/formats.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultEnFormats: () => (/* binding */ defaultEnFormats)
/* harmony export */ });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

/**
 * Default format options used for "en" locale.
 * These are used when constructing the internal Intl.NumberFormat
 * (`number` formatter) and Intl.DateTimeFormat (`date` and `time` formatters) instances.
 * The value of each parameter of `number` formatter is options object which is
 * described in `options` section of [NumberFormat constructor].
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat}
 * The value of each parameter of `date` and `time` formatters is options object which is
 * described in `options` section of [DateTimeFormat constructor].
 * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat}
 */
const defaultEnFormats = {
  number: {
    currency: {
      style: 'currency'
    },
    percent: {
      style: 'percent'
    }
  },
  date: {
    short: {
      month: 'numeric',
      day: 'numeric',
      year: '2-digit'
    },
    medium: {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    },
    long: {
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    },
    full: {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    }
  },
  time: {
    short: {
      hour: 'numeric',
      minute: 'numeric'
    },
    medium: {
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric'
    },
    long: {
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      timeZoneName: 'short'
    },
    full: {
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      timeZoneName: 'short'
    }
  },
  relative: {
    years: {
      style: 'long'
    },
    months: {
      style: 'long'
    },
    days: {
      style: 'long'
    },
    hours: {
      style: 'long'
    },
    minutes: {
      style: 'long'
    },
    seconds: {
      style: 'long'
    }
  }
};

/***/ }),

/***/ "./src/platform/packages/shared/kbn-i18n/src/core/i18n.ts":
/*!****************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-i18n/src/core/i18n.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   activateTranslation: () => (/* binding */ activateTranslation),
/* harmony export */   getIsInitialized: () => (/* binding */ getIsInitialized),
/* harmony export */   getLocale: () => (/* binding */ getLocale),
/* harmony export */   getTranslation: () => (/* binding */ getTranslation),
/* harmony export */   init: () => (/* binding */ init),
/* harmony export */   load: () => (/* binding */ load),
/* harmony export */   translate: () => (/* binding */ translate)
/* harmony export */ });
/* harmony import */ var _formatjs_intl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @formatjs/intl */ "./node_modules/@formatjs/intl/lib/src/create-intl.js");
/* harmony import */ var _formatjs_intl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @formatjs/intl */ "./node_modules/@formatjs/intl/lib/src/utils.js");
/* harmony import */ var _error_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error_handler */ "./src/platform/packages/shared/kbn-i18n/src/core/error_handler.ts");
/* harmony import */ var _formats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formats */ "./src/platform/packages/shared/kbn-i18n/src/core/formats.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */




const EN_LOCALE = 'en';
const defaultLocale = EN_LOCALE;

/**
 * Currently we are depending on this singleton pattern to
 * update the locale. This is mainly to make it easier on developers
 * to use i18n by importing it anywhere in their code and using it directly
 * without having to pass it around.
 * This pattern has several limitations and can cause unexpected bugs. The main limitation
 * is that we cannot server multiple locales on the server side based on the user requested
 * locale.
 */
let intl;
let isInitialized = false;
/**
 * ideally here we would be using a `throw new Error()` if i18n.translate is called before init();
 * to make sure i18n is initialized before any message is attempting to be translated.
 *
 * Especially since these messages will go unnoticed since the translations might be provided in the translation files
 * but Kibana will use the default message since the locales are not loaded yet.
 *
 * we need to get there at some point but this means removing all static i18n imports from the server side.
 */
intl = (0,_formatjs_intl__WEBPACK_IMPORTED_MODULE_2__.createIntl)({
  locale: defaultLocale,
  defaultFormats: _formats__WEBPACK_IMPORTED_MODULE_1__.defaultEnFormats,
  defaultLocale,
  onError: () => void 0
});
const getIsInitialized = () => {
  return isInitialized;
};
/**
 * Normalizes locale to make it consistent with IntlMessageFormat locales
 * @param locale
 */
function normalizeLocale(locale) {
  return locale.toLowerCase();
}

/**
 * Provides a way to register translations with the engine
 */
function activateTranslation(newTranslation) {
  if (!newTranslation.locale || typeof newTranslation.locale !== 'string') {
    throw new Error('[I18n] A `locale` must be a non-empty string to add messages.');
  }
  const config = {
    locale: normalizeLocale(newTranslation.locale),
    messages: newTranslation.messages,
    defaultFormats: _formats__WEBPACK_IMPORTED_MODULE_1__.defaultEnFormats,
    defaultLocale,
    onError: _error_handler__WEBPACK_IMPORTED_MODULE_0__.handleIntlError
  };

  // formatJS differentiates between `formats: undefined` and unset `formats`.
  if (newTranslation.formats) {
    config.formats = newTranslation.formats;
  }
  const cache = (0,_formatjs_intl__WEBPACK_IMPORTED_MODULE_3__.createIntlCache)();
  intl = (0,_formatjs_intl__WEBPACK_IMPORTED_MODULE_2__.createIntl)(config, cache);
}

/**
 * Returns messages for the current language
 */
function getTranslation() {
  return {
    messages: intl.messages,
    locale: intl.locale,
    defaultLocale: intl.defaultLocale,
    defaultFormats: intl.defaultFormats,
    formats: intl.formats
  };
}

/**
 * Returns the current locale
 * Shortcut to getTranslation().locale
 */
function getLocale() {
  return intl.locale;
}
/**
 * Translate message by id
 * @param id - translation id to be translated
 * @param [options]
 * @param [options.values] - values to pass into translation
 * @param [options.defaultMessage] - will be used unless translation was successful
 * @param [options.description] - message description, used by translators and other devs to understand the message context.
 * @param [options.ignoreTag] - Whether to treat HTML/XML tags as string literal instead of parsing them as tag token. When this is false we only allow simple tags without any attributes
 */
function translate(id, {
  values = {},
  description,
  defaultMessage,
  ignoreTag
}) {
  if (!id || typeof id !== 'string') {
    throw new Error('[I18n] An `id` must be a non-empty string to translate a message.');
  }
  try {
    if (!defaultMessage) {
      throw new Error('Missing `defaultMessage`.');
    }
    return intl.formatMessage({
      id,
      defaultMessage,
      description
    }, values, {
      ignoreTag,
      shouldParseSkeletons: true
    });
  } catch (e) {
    throw new Error(`[I18n] Error formatting the default message for: "${id}".\n${e}`);
  }
}

/**
 * Initializes the engine
 * @param newTranslation
 */
function init(newTranslation) {
  if (typeof (newTranslation === null || newTranslation === void 0 ? void 0 : newTranslation.locale) !== 'string') {
    return;
  }
  activateTranslation(newTranslation);
  isInitialized = true;
}

/**
 * Loads JSON with translations from the specified URL and initializes i18n engine with them.
 * @param translationsUrl URL pointing to the JSON bundle with translations.
 */
async function load(translationsUrl) {
  // Once this package is integrated into core Kibana we should switch to an abstraction
  // around `fetch` provided by the platform, e.g. `kfetch`.
  const response = await fetch(translationsUrl, {
    credentials: 'same-origin'
  });
  if (response.status >= 400) {
    throw new Error(`Translations request failed with status code: ${response.status}`);
  }
  const newTranslation = await response.json();
  if (!newTranslation || !newTranslation.locale || typeof newTranslation.locale !== 'string') {
    return;
  }
  init(newTranslation);
  isInitialized = true;
}

/***/ }),

/***/ "./src/platform/packages/shared/kbn-i18n/src/core/index.ts":
/*!*****************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-i18n/src/core/index.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultEnFormats: () => (/* reexport safe */ _formats__WEBPACK_IMPORTED_MODULE_0__.defaultEnFormats),
/* harmony export */   getIsInitialized: () => (/* reexport safe */ _i18n__WEBPACK_IMPORTED_MODULE_1__.getIsInitialized),
/* harmony export */   getLocale: () => (/* reexport safe */ _i18n__WEBPACK_IMPORTED_MODULE_1__.getLocale),
/* harmony export */   getTranslation: () => (/* reexport safe */ _i18n__WEBPACK_IMPORTED_MODULE_1__.getTranslation),
/* harmony export */   handleIntlError: () => (/* reexport safe */ _error_handler__WEBPACK_IMPORTED_MODULE_2__.handleIntlError),
/* harmony export */   init: () => (/* reexport safe */ _i18n__WEBPACK_IMPORTED_MODULE_1__.init),
/* harmony export */   load: () => (/* reexport safe */ _i18n__WEBPACK_IMPORTED_MODULE_1__.load),
/* harmony export */   translate: () => (/* reexport safe */ _i18n__WEBPACK_IMPORTED_MODULE_1__.translate)
/* harmony export */ });
/* harmony import */ var _formats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formats */ "./src/platform/packages/shared/kbn-i18n/src/core/formats.ts");
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./i18n */ "./src/platform/packages/shared/kbn-i18n/src/core/i18n.ts");
/* harmony import */ var _error_handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error_handler */ "./src/platform/packages/shared/kbn-i18n/src/core/error_handler.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */





/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/common/error_listener.ts":
/*!******************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/common/error_listener.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ANTLRErrorListener: () => (/* binding */ ANTLRErrorListener)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.mjs");

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */


class ANTLRErrorListener extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ErrorListener {
  constructor(...args) {
    super(...args);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "errors", []);
  }
  syntaxError(recognizer, offendingSymbol, line, column, message, error) {
    let endColumn = column + 1;
    if (offendingSymbol !== null && offendingSymbol !== void 0 && offendingSymbol._text) {
      endColumn = column + offendingSymbol._text.length;
    }
    this.errors.push({
      startLineNumber: line,
      endLineNumber: line,
      startColumn: column,
      endColumn,
      message,
      severity: 8
    });
  }
  getErrors() {
    return this.errors;
  }
}

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/antlr/painless_lexer.ts":
/*!**************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/antlr/painless_lexer.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ painless_lexer)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.mjs");

var _painless_lexer;
// @ts-nocheck
// Generated from ./src/painless/antlr/painless_lexer.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols

class painless_lexer extends antlr4__WEBPACK_IMPORTED_MODULE_1__.Lexer {
  constructor(input) {
    super(input);
    this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_1__.LexerATNSimulator(this, painless_lexer._ATN, painless_lexer.DecisionsToDFA, new antlr4__WEBPACK_IMPORTED_MODULE_1__.PredictionContextCache());
  }
  get grammarFileName() {
    return "painless_lexer.g4";
  }
  get literalNames() {
    return painless_lexer.literalNames;
  }
  get symbolicNames() {
    return painless_lexer.symbolicNames;
  }
  get ruleNames() {
    return painless_lexer.ruleNames;
  }
  get serializedATN() {
    return painless_lexer._serializedATN;
  }
  get channelNames() {
    return painless_lexer.channelNames;
  }
  get modeNames() {
    return painless_lexer.modeNames;
  }

  // @Override
  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 31:
        return this.DIV_sempred(localctx, predIndex);
      case 77:
        return this.REGEX_sempred(localctx, predIndex);
    }
    return true;
  }
  DIV_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.isSlashRegex() == false;
    }
    return true;
  }
  REGEX_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.isSlashRegex();
    }
    return true;
  }
  static get _ATN() {
    if (!painless_lexer.__ATN) {
      painless_lexer.__ATN = new antlr4__WEBPACK_IMPORTED_MODULE_1__.ATNDeserializer().deserialize(painless_lexer._serializedATN);
    }
    return painless_lexer.__ATN;
  }
}
_painless_lexer = painless_lexer;
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "WS", 1);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "COMMENT", 2);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "LBRACK", 3);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "RBRACK", 4);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "LBRACE", 5);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "RBRACE", 6);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "LP", 7);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "RP", 8);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DOLLAR", 9);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DOT", 10);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "NSDOT", 11);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "COMMA", 12);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "SEMICOLON", 13);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "IF", 14);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "IN", 15);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ELSE", 16);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "WHILE", 17);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DO", 18);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "FOR", 19);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "CONTINUE", 20);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "BREAK", 21);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "RETURN", 22);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "NEW", 23);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "TRY", 24);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "CATCH", 25);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "THROW", 26);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "THIS", 27);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "INSTANCEOF", 28);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "BOOLNOT", 29);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "BWNOT", 30);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "MUL", 31);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DIV", 32);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "REM", 33);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ADD", 34);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "SUB", 35);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "LSH", 36);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "RSH", 37);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "USH", 38);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "LT", 39);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "LTE", 40);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "GT", 41);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "GTE", 42);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "EQ", 43);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "EQR", 44);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "NE", 45);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "NER", 46);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "BWAND", 47);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "XOR", 48);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "BWOR", 49);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "BOOLAND", 50);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "BOOLOR", 51);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "COND", 52);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "COLON", 53);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ELVIS", 54);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "REF", 55);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ARROW", 56);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "FIND", 57);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "MATCH", 58);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "INCR", 59);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DECR", 60);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ASSIGN", 61);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AADD", 62);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ASUB", 63);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AMUL", 64);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ADIV", 65);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AREM", 66);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AAND", 67);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AXOR", 68);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AOR", 69);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ALSH", 70);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ARSH", 71);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AUSH", 72);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "OCTAL", 73);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "HEX", 74);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "INTEGER", 75);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DECIMAL", 76);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "STRING", 77);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "REGEX", 78);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "TRUE", 79);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "FALSE", 80);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "NULL", 81);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "PRIMITIVE", 82);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DEF", 83);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ID", 84);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DOTINTEGER", 85);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DOTID", 86);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "EOF", antlr4__WEBPACK_IMPORTED_MODULE_1__.Token.EOF);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "AFTER_DOT", 1);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "channelNames", ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "literalNames", [null, null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'$'", "'.'", "'?.'", "','", "';'", "'if'", "'in'", "'else'", "'while'", "'do'", "'for'", "'continue'", "'break'", "'return'", "'new'", "'try'", "'catch'", "'throw'", "'this'", "'instanceof'", "'!'", "'~'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", "'>>'", "'>>>'", "'<'", "'<='", "'>'", "'>='", "'=='", "'==='", "'!='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'?'", "':'", "'?:'", "'::'", "'->'", "'=~'", "'==~'", "'++'", "'--'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'<<='", "'>>='", "'>>>='", null, null, null, null, null, null, "'true'", "'false'", "'null'", null, "'def'"]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "symbolicNames", [null, "WS", "COMMENT", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "LP", "RP", "DOLLAR", "DOT", "NSDOT", "COMMA", "SEMICOLON", "IF", "IN", "ELSE", "WHILE", "DO", "FOR", "CONTINUE", "BREAK", "RETURN", "NEW", "TRY", "CATCH", "THROW", "THIS", "INSTANCEOF", "BOOLNOT", "BWNOT", "MUL", "DIV", "REM", "ADD", "SUB", "LSH", "RSH", "USH", "LT", "LTE", "GT", "GTE", "EQ", "EQR", "NE", "NER", "BWAND", "XOR", "BWOR", "BOOLAND", "BOOLOR", "COND", "COLON", "ELVIS", "REF", "ARROW", "FIND", "MATCH", "INCR", "DECR", "ASSIGN", "AADD", "ASUB", "AMUL", "ADIV", "AREM", "AAND", "AXOR", "AOR", "ALSH", "ARSH", "AUSH", "OCTAL", "HEX", "INTEGER", "DECIMAL", "STRING", "REGEX", "TRUE", "FALSE", "NULL", "PRIMITIVE", "DEF", "ID", "DOTINTEGER", "DOTID"]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "modeNames", ["DEFAULT_MODE", "AFTER_DOT"]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "ruleNames", ["WS", "COMMENT", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "LP", "RP", "DOLLAR", "DOT", "NSDOT", "COMMA", "SEMICOLON", "IF", "IN", "ELSE", "WHILE", "DO", "FOR", "CONTINUE", "BREAK", "RETURN", "NEW", "TRY", "CATCH", "THROW", "THIS", "INSTANCEOF", "BOOLNOT", "BWNOT", "MUL", "DIV", "REM", "ADD", "SUB", "LSH", "RSH", "USH", "LT", "LTE", "GT", "GTE", "EQ", "EQR", "NE", "NER", "BWAND", "XOR", "BWOR", "BOOLAND", "BOOLOR", "COND", "COLON", "ELVIS", "REF", "ARROW", "FIND", "MATCH", "INCR", "DECR", "ASSIGN", "AADD", "ASUB", "AMUL", "ADIV", "AREM", "AAND", "AXOR", "AOR", "ALSH", "ARSH", "AUSH", "OCTAL", "HEX", "INTEGER", "DECIMAL", "STRING", "REGEX", "TRUE", "FALSE", "NULL", "PRIMITIVE", "DEF", "ID", "DOTINTEGER", "DOTID"]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "_serializedATN", [4, 0, 86, 636, 6, -1, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 1, 0, 4, 0, 176, 8, 0, 11, 0, 12, 0, 177, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 186, 8, 1, 10, 1, 12, 1, 189, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 196, 8, 1, 10, 1, 12, 1, 199, 9, 1, 1, 1, 1, 1, 3, 1, 203, 8, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 4, 72, 444, 8, 72, 11, 72, 12, 72, 445, 1, 72, 3, 72, 449, 8, 72, 1, 73, 1, 73, 1, 73, 4, 73, 454, 8, 73, 11, 73, 12, 73, 455, 1, 73, 3, 73, 459, 8, 73, 1, 74, 1, 74, 1, 74, 5, 74, 464, 8, 74, 10, 74, 12, 74, 467, 9, 74, 3, 74, 469, 8, 74, 1, 74, 3, 74, 472, 8, 74, 1, 75, 1, 75, 1, 75, 5, 75, 477, 8, 75, 10, 75, 12, 75, 480, 9, 75, 3, 75, 482, 8, 75, 1, 75, 1, 75, 4, 75, 486, 8, 75, 11, 75, 12, 75, 487, 3, 75, 490, 8, 75, 1, 75, 1, 75, 3, 75, 494, 8, 75, 1, 75, 4, 75, 497, 8, 75, 11, 75, 12, 75, 498, 3, 75, 501, 8, 75, 1, 75, 3, 75, 504, 8, 75, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 5, 76, 512, 8, 76, 10, 76, 12, 76, 515, 9, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 1, 76, 5, 76, 524, 8, 76, 10, 76, 12, 76, 527, 9, 76, 1, 76, 3, 76, 530, 8, 76, 1, 77, 1, 77, 1, 77, 1, 77, 4, 77, 536, 8, 77, 11, 77, 12, 77, 537, 1, 77, 1, 77, 5, 77, 542, 8, 77, 10, 77, 12, 77, 545, 9, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 603, 8, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 5, 83, 611, 8, 83, 10, 83, 12, 83, 614, 9, 83, 1, 84, 1, 84, 1, 84, 5, 84, 619, 8, 84, 10, 84, 12, 84, 622, 9, 84, 3, 84, 624, 8, 84, 1, 84, 1, 84, 1, 85, 1, 85, 5, 85, 630, 8, 85, 10, 85, 12, 85, 633, 9, 85, 1, 85, 1, 85, 5, 187, 197, 513, 525, 537, 0, 86, 2, 1, 4, 2, 6, 3, 8, 4, 10, 5, 12, 6, 14, 7, 16, 8, 18, 9, 20, 10, 22, 11, 24, 12, 26, 13, 28, 14, 30, 15, 32, 16, 34, 17, 36, 18, 38, 19, 40, 20, 42, 21, 44, 22, 46, 23, 48, 24, 50, 25, 52, 26, 54, 27, 56, 28, 58, 29, 60, 30, 62, 31, 64, 32, 66, 33, 68, 34, 70, 35, 72, 36, 74, 37, 76, 38, 78, 39, 80, 40, 82, 41, 84, 42, 86, 43, 88, 44, 90, 45, 92, 46, 94, 47, 96, 48, 98, 49, 100, 50, 102, 51, 104, 52, 106, 53, 108, 54, 110, 55, 112, 56, 114, 57, 116, 58, 118, 59, 120, 60, 122, 61, 124, 62, 126, 63, 128, 64, 130, 65, 132, 66, 134, 67, 136, 68, 138, 69, 140, 70, 142, 71, 144, 72, 146, 73, 148, 74, 150, 75, 152, 76, 154, 77, 156, 78, 158, 79, 160, 80, 162, 81, 164, 82, 166, 83, 168, 84, 170, 85, 172, 86, 2, 0, 1, 19, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 10, 10, 13, 13, 1, 0, 48, 55, 2, 0, 76, 76, 108, 108, 2, 0, 88, 88, 120, 120, 3, 0, 48, 57, 65, 70, 97, 102, 1, 0, 49, 57, 1, 0, 48, 57, 6, 0, 68, 68, 70, 70, 76, 76, 100, 100, 102, 102, 108, 108, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 4, 0, 68, 68, 70, 70, 100, 100, 102, 102, 2, 0, 34, 34, 92, 92, 2, 0, 39, 39, 92, 92, 1, 0, 10, 10, 2, 0, 10, 10, 47, 47, 7, 0, 85, 85, 99, 99, 105, 105, 108, 109, 115, 115, 117, 117, 120, 120, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 674, 0, 2, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 10, 1, 0, 0, 0, 0, 12, 1, 0, 0, 0, 0, 14, 1, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 18, 1, 0, 0, 0, 0, 20, 1, 0, 0, 0, 0, 22, 1, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 26, 1, 0, 0, 0, 0, 28, 1, 0, 0, 0, 0, 30, 1, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 34, 1, 0, 0, 0, 0, 36, 1, 0, 0, 0, 0, 38, 1, 0, 0, 0, 0, 40, 1, 0, 0, 0, 0, 42, 1, 0, 0, 0, 0, 44, 1, 0, 0, 0, 0, 46, 1, 0, 0, 0, 0, 48, 1, 0, 0, 0, 0, 50, 1, 0, 0, 0, 0, 52, 1, 0, 0, 0, 0, 54, 1, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 58, 1, 0, 0, 0, 0, 60, 1, 0, 0, 0, 0, 62, 1, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 66, 1, 0, 0, 0, 0, 68, 1, 0, 0, 0, 0, 70, 1, 0, 0, 0, 0, 72, 1, 0, 0, 0, 0, 74, 1, 0, 0, 0, 0, 76, 1, 0, 0, 0, 0, 78, 1, 0, 0, 0, 0, 80, 1, 0, 0, 0, 0, 82, 1, 0, 0, 0, 0, 84, 1, 0, 0, 0, 0, 86, 1, 0, 0, 0, 0, 88, 1, 0, 0, 0, 0, 90, 1, 0, 0, 0, 0, 92, 1, 0, 0, 0, 0, 94, 1, 0, 0, 0, 0, 96, 1, 0, 0, 0, 0, 98, 1, 0, 0, 0, 0, 100, 1, 0, 0, 0, 0, 102, 1, 0, 0, 0, 0, 104, 1, 0, 0, 0, 0, 106, 1, 0, 0, 0, 0, 108, 1, 0, 0, 0, 0, 110, 1, 0, 0, 0, 0, 112, 1, 0, 0, 0, 0, 114, 1, 0, 0, 0, 0, 116, 1, 0, 0, 0, 0, 118, 1, 0, 0, 0, 0, 120, 1, 0, 0, 0, 0, 122, 1, 0, 0, 0, 0, 124, 1, 0, 0, 0, 0, 126, 1, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 130, 1, 0, 0, 0, 0, 132, 1, 0, 0, 0, 0, 134, 1, 0, 0, 0, 0, 136, 1, 0, 0, 0, 0, 138, 1, 0, 0, 0, 0, 140, 1, 0, 0, 0, 0, 142, 1, 0, 0, 0, 0, 144, 1, 0, 0, 0, 0, 146, 1, 0, 0, 0, 0, 148, 1, 0, 0, 0, 0, 150, 1, 0, 0, 0, 0, 152, 1, 0, 0, 0, 0, 154, 1, 0, 0, 0, 0, 156, 1, 0, 0, 0, 0, 158, 1, 0, 0, 0, 0, 160, 1, 0, 0, 0, 0, 162, 1, 0, 0, 0, 0, 164, 1, 0, 0, 0, 0, 166, 1, 0, 0, 0, 0, 168, 1, 0, 0, 0, 1, 170, 1, 0, 0, 0, 1, 172, 1, 0, 0, 0, 2, 175, 1, 0, 0, 0, 4, 202, 1, 0, 0, 0, 6, 206, 1, 0, 0, 0, 8, 208, 1, 0, 0, 0, 10, 210, 1, 0, 0, 0, 12, 212, 1, 0, 0, 0, 14, 214, 1, 0, 0, 0, 16, 216, 1, 0, 0, 0, 18, 218, 1, 0, 0, 0, 20, 220, 1, 0, 0, 0, 22, 224, 1, 0, 0, 0, 24, 229, 1, 0, 0, 0, 26, 231, 1, 0, 0, 0, 28, 233, 1, 0, 0, 0, 30, 236, 1, 0, 0, 0, 32, 239, 1, 0, 0, 0, 34, 244, 1, 0, 0, 0, 36, 250, 1, 0, 0, 0, 38, 253, 1, 0, 0, 0, 40, 257, 1, 0, 0, 0, 42, 266, 1, 0, 0, 0, 44, 272, 1, 0, 0, 0, 46, 279, 1, 0, 0, 0, 48, 283, 1, 0, 0, 0, 50, 287, 1, 0, 0, 0, 52, 293, 1, 0, 0, 0, 54, 299, 1, 0, 0, 0, 56, 304, 1, 0, 0, 0, 58, 315, 1, 0, 0, 0, 60, 317, 1, 0, 0, 0, 62, 319, 1, 0, 0, 0, 64, 321, 1, 0, 0, 0, 66, 324, 1, 0, 0, 0, 68, 326, 1, 0, 0, 0, 70, 328, 1, 0, 0, 0, 72, 330, 1, 0, 0, 0, 74, 333, 1, 0, 0, 0, 76, 336, 1, 0, 0, 0, 78, 340, 1, 0, 0, 0, 80, 342, 1, 0, 0, 0, 82, 345, 1, 0, 0, 0, 84, 347, 1, 0, 0, 0, 86, 350, 1, 0, 0, 0, 88, 353, 1, 0, 0, 0, 90, 357, 1, 0, 0, 0, 92, 360, 1, 0, 0, 0, 94, 364, 1, 0, 0, 0, 96, 366, 1, 0, 0, 0, 98, 368, 1, 0, 0, 0, 100, 370, 1, 0, 0, 0, 102, 373, 1, 0, 0, 0, 104, 376, 1, 0, 0, 0, 106, 378, 1, 0, 0, 0, 108, 380, 1, 0, 0, 0, 110, 383, 1, 0, 0, 0, 112, 386, 1, 0, 0, 0, 114, 389, 1, 0, 0, 0, 116, 392, 1, 0, 0, 0, 118, 396, 1, 0, 0, 0, 120, 399, 1, 0, 0, 0, 122, 402, 1, 0, 0, 0, 124, 404, 1, 0, 0, 0, 126, 407, 1, 0, 0, 0, 128, 410, 1, 0, 0, 0, 130, 413, 1, 0, 0, 0, 132, 416, 1, 0, 0, 0, 134, 419, 1, 0, 0, 0, 136, 422, 1, 0, 0, 0, 138, 425, 1, 0, 0, 0, 140, 428, 1, 0, 0, 0, 142, 432, 1, 0, 0, 0, 144, 436, 1, 0, 0, 0, 146, 441, 1, 0, 0, 0, 148, 450, 1, 0, 0, 0, 150, 468, 1, 0, 0, 0, 152, 481, 1, 0, 0, 0, 154, 529, 1, 0, 0, 0, 156, 531, 1, 0, 0, 0, 158, 548, 1, 0, 0, 0, 160, 553, 1, 0, 0, 0, 162, 559, 1, 0, 0, 0, 164, 602, 1, 0, 0, 0, 166, 604, 1, 0, 0, 0, 168, 608, 1, 0, 0, 0, 170, 623, 1, 0, 0, 0, 172, 627, 1, 0, 0, 0, 174, 176, 7, 0, 0, 0, 175, 174, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 179, 1, 0, 0, 0, 179, 180, 6, 0, 0, 0, 180, 3, 1, 0, 0, 0, 181, 182, 5, 47, 0, 0, 182, 183, 5, 47, 0, 0, 183, 187, 1, 0, 0, 0, 184, 186, 9, 0, 0, 0, 185, 184, 1, 0, 0, 0, 186, 189, 1, 0, 0, 0, 187, 188, 1, 0, 0, 0, 187, 185, 1, 0, 0, 0, 188, 190, 1, 0, 0, 0, 189, 187, 1, 0, 0, 0, 190, 203, 7, 1, 0, 0, 191, 192, 5, 47, 0, 0, 192, 193, 5, 42, 0, 0, 193, 197, 1, 0, 0, 0, 194, 196, 9, 0, 0, 0, 195, 194, 1, 0, 0, 0, 196, 199, 1, 0, 0, 0, 197, 198, 1, 0, 0, 0, 197, 195, 1, 0, 0, 0, 198, 200, 1, 0, 0, 0, 199, 197, 1, 0, 0, 0, 200, 201, 5, 42, 0, 0, 201, 203, 5, 47, 0, 0, 202, 181, 1, 0, 0, 0, 202, 191, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 205, 6, 1, 0, 0, 205, 5, 1, 0, 0, 0, 206, 207, 5, 123, 0, 0, 207, 7, 1, 0, 0, 0, 208, 209, 5, 125, 0, 0, 209, 9, 1, 0, 0, 0, 210, 211, 5, 91, 0, 0, 211, 11, 1, 0, 0, 0, 212, 213, 5, 93, 0, 0, 213, 13, 1, 0, 0, 0, 214, 215, 5, 40, 0, 0, 215, 15, 1, 0, 0, 0, 216, 217, 5, 41, 0, 0, 217, 17, 1, 0, 0, 0, 218, 219, 5, 36, 0, 0, 219, 19, 1, 0, 0, 0, 220, 221, 5, 46, 0, 0, 221, 222, 1, 0, 0, 0, 222, 223, 6, 9, 1, 0, 223, 21, 1, 0, 0, 0, 224, 225, 5, 63, 0, 0, 225, 226, 5, 46, 0, 0, 226, 227, 1, 0, 0, 0, 227, 228, 6, 10, 1, 0, 228, 23, 1, 0, 0, 0, 229, 230, 5, 44, 0, 0, 230, 25, 1, 0, 0, 0, 231, 232, 5, 59, 0, 0, 232, 27, 1, 0, 0, 0, 233, 234, 5, 105, 0, 0, 234, 235, 5, 102, 0, 0, 235, 29, 1, 0, 0, 0, 236, 237, 5, 105, 0, 0, 237, 238, 5, 110, 0, 0, 238, 31, 1, 0, 0, 0, 239, 240, 5, 101, 0, 0, 240, 241, 5, 108, 0, 0, 241, 242, 5, 115, 0, 0, 242, 243, 5, 101, 0, 0, 243, 33, 1, 0, 0, 0, 244, 245, 5, 119, 0, 0, 245, 246, 5, 104, 0, 0, 246, 247, 5, 105, 0, 0, 247, 248, 5, 108, 0, 0, 248, 249, 5, 101, 0, 0, 249, 35, 1, 0, 0, 0, 250, 251, 5, 100, 0, 0, 251, 252, 5, 111, 0, 0, 252, 37, 1, 0, 0, 0, 253, 254, 5, 102, 0, 0, 254, 255, 5, 111, 0, 0, 255, 256, 5, 114, 0, 0, 256, 39, 1, 0, 0, 0, 257, 258, 5, 99, 0, 0, 258, 259, 5, 111, 0, 0, 259, 260, 5, 110, 0, 0, 260, 261, 5, 116, 0, 0, 261, 262, 5, 105, 0, 0, 262, 263, 5, 110, 0, 0, 263, 264, 5, 117, 0, 0, 264, 265, 5, 101, 0, 0, 265, 41, 1, 0, 0, 0, 266, 267, 5, 98, 0, 0, 267, 268, 5, 114, 0, 0, 268, 269, 5, 101, 0, 0, 269, 270, 5, 97, 0, 0, 270, 271, 5, 107, 0, 0, 271, 43, 1, 0, 0, 0, 272, 273, 5, 114, 0, 0, 273, 274, 5, 101, 0, 0, 274, 275, 5, 116, 0, 0, 275, 276, 5, 117, 0, 0, 276, 277, 5, 114, 0, 0, 277, 278, 5, 110, 0, 0, 278, 45, 1, 0, 0, 0, 279, 280, 5, 110, 0, 0, 280, 281, 5, 101, 0, 0, 281, 282, 5, 119, 0, 0, 282, 47, 1, 0, 0, 0, 283, 284, 5, 116, 0, 0, 284, 285, 5, 114, 0, 0, 285, 286, 5, 121, 0, 0, 286, 49, 1, 0, 0, 0, 287, 288, 5, 99, 0, 0, 288, 289, 5, 97, 0, 0, 289, 290, 5, 116, 0, 0, 290, 291, 5, 99, 0, 0, 291, 292, 5, 104, 0, 0, 292, 51, 1, 0, 0, 0, 293, 294, 5, 116, 0, 0, 294, 295, 5, 104, 0, 0, 295, 296, 5, 114, 0, 0, 296, 297, 5, 111, 0, 0, 297, 298, 5, 119, 0, 0, 298, 53, 1, 0, 0, 0, 299, 300, 5, 116, 0, 0, 300, 301, 5, 104, 0, 0, 301, 302, 5, 105, 0, 0, 302, 303, 5, 115, 0, 0, 303, 55, 1, 0, 0, 0, 304, 305, 5, 105, 0, 0, 305, 306, 5, 110, 0, 0, 306, 307, 5, 115, 0, 0, 307, 308, 5, 116, 0, 0, 308, 309, 5, 97, 0, 0, 309, 310, 5, 110, 0, 0, 310, 311, 5, 99, 0, 0, 311, 312, 5, 101, 0, 0, 312, 313, 5, 111, 0, 0, 313, 314, 5, 102, 0, 0, 314, 57, 1, 0, 0, 0, 315, 316, 5, 33, 0, 0, 316, 59, 1, 0, 0, 0, 317, 318, 5, 126, 0, 0, 318, 61, 1, 0, 0, 0, 319, 320, 5, 42, 0, 0, 320, 63, 1, 0, 0, 0, 321, 322, 5, 47, 0, 0, 322, 323, 4, 31, 0, 0, 323, 65, 1, 0, 0, 0, 324, 325, 5, 37, 0, 0, 325, 67, 1, 0, 0, 0, 326, 327, 5, 43, 0, 0, 327, 69, 1, 0, 0, 0, 328, 329, 5, 45, 0, 0, 329, 71, 1, 0, 0, 0, 330, 331, 5, 60, 0, 0, 331, 332, 5, 60, 0, 0, 332, 73, 1, 0, 0, 0, 333, 334, 5, 62, 0, 0, 334, 335, 5, 62, 0, 0, 335, 75, 1, 0, 0, 0, 336, 337, 5, 62, 0, 0, 337, 338, 5, 62, 0, 0, 338, 339, 5, 62, 0, 0, 339, 77, 1, 0, 0, 0, 340, 341, 5, 60, 0, 0, 341, 79, 1, 0, 0, 0, 342, 343, 5, 60, 0, 0, 343, 344, 5, 61, 0, 0, 344, 81, 1, 0, 0, 0, 345, 346, 5, 62, 0, 0, 346, 83, 1, 0, 0, 0, 347, 348, 5, 62, 0, 0, 348, 349, 5, 61, 0, 0, 349, 85, 1, 0, 0, 0, 350, 351, 5, 61, 0, 0, 351, 352, 5, 61, 0, 0, 352, 87, 1, 0, 0, 0, 353, 354, 5, 61, 0, 0, 354, 355, 5, 61, 0, 0, 355, 356, 5, 61, 0, 0, 356, 89, 1, 0, 0, 0, 357, 358, 5, 33, 0, 0, 358, 359, 5, 61, 0, 0, 359, 91, 1, 0, 0, 0, 360, 361, 5, 33, 0, 0, 361, 362, 5, 61, 0, 0, 362, 363, 5, 61, 0, 0, 363, 93, 1, 0, 0, 0, 364, 365, 5, 38, 0, 0, 365, 95, 1, 0, 0, 0, 366, 367, 5, 94, 0, 0, 367, 97, 1, 0, 0, 0, 368, 369, 5, 124, 0, 0, 369, 99, 1, 0, 0, 0, 370, 371, 5, 38, 0, 0, 371, 372, 5, 38, 0, 0, 372, 101, 1, 0, 0, 0, 373, 374, 5, 124, 0, 0, 374, 375, 5, 124, 0, 0, 375, 103, 1, 0, 0, 0, 376, 377, 5, 63, 0, 0, 377, 105, 1, 0, 0, 0, 378, 379, 5, 58, 0, 0, 379, 107, 1, 0, 0, 0, 380, 381, 5, 63, 0, 0, 381, 382, 5, 58, 0, 0, 382, 109, 1, 0, 0, 0, 383, 384, 5, 58, 0, 0, 384, 385, 5, 58, 0, 0, 385, 111, 1, 0, 0, 0, 386, 387, 5, 45, 0, 0, 387, 388, 5, 62, 0, 0, 388, 113, 1, 0, 0, 0, 389, 390, 5, 61, 0, 0, 390, 391, 5, 126, 0, 0, 391, 115, 1, 0, 0, 0, 392, 393, 5, 61, 0, 0, 393, 394, 5, 61, 0, 0, 394, 395, 5, 126, 0, 0, 395, 117, 1, 0, 0, 0, 396, 397, 5, 43, 0, 0, 397, 398, 5, 43, 0, 0, 398, 119, 1, 0, 0, 0, 399, 400, 5, 45, 0, 0, 400, 401, 5, 45, 0, 0, 401, 121, 1, 0, 0, 0, 402, 403, 5, 61, 0, 0, 403, 123, 1, 0, 0, 0, 404, 405, 5, 43, 0, 0, 405, 406, 5, 61, 0, 0, 406, 125, 1, 0, 0, 0, 407, 408, 5, 45, 0, 0, 408, 409, 5, 61, 0, 0, 409, 127, 1, 0, 0, 0, 410, 411, 5, 42, 0, 0, 411, 412, 5, 61, 0, 0, 412, 129, 1, 0, 0, 0, 413, 414, 5, 47, 0, 0, 414, 415, 5, 61, 0, 0, 415, 131, 1, 0, 0, 0, 416, 417, 5, 37, 0, 0, 417, 418, 5, 61, 0, 0, 418, 133, 1, 0, 0, 0, 419, 420, 5, 38, 0, 0, 420, 421, 5, 61, 0, 0, 421, 135, 1, 0, 0, 0, 422, 423, 5, 94, 0, 0, 423, 424, 5, 61, 0, 0, 424, 137, 1, 0, 0, 0, 425, 426, 5, 124, 0, 0, 426, 427, 5, 61, 0, 0, 427, 139, 1, 0, 0, 0, 428, 429, 5, 60, 0, 0, 429, 430, 5, 60, 0, 0, 430, 431, 5, 61, 0, 0, 431, 141, 1, 0, 0, 0, 432, 433, 5, 62, 0, 0, 433, 434, 5, 62, 0, 0, 434, 435, 5, 61, 0, 0, 435, 143, 1, 0, 0, 0, 436, 437, 5, 62, 0, 0, 437, 438, 5, 62, 0, 0, 438, 439, 5, 62, 0, 0, 439, 440, 5, 61, 0, 0, 440, 145, 1, 0, 0, 0, 441, 443, 5, 48, 0, 0, 442, 444, 7, 2, 0, 0, 443, 442, 1, 0, 0, 0, 444, 445, 1, 0, 0, 0, 445, 443, 1, 0, 0, 0, 445, 446, 1, 0, 0, 0, 446, 448, 1, 0, 0, 0, 447, 449, 7, 3, 0, 0, 448, 447, 1, 0, 0, 0, 448, 449, 1, 0, 0, 0, 449, 147, 1, 0, 0, 0, 450, 451, 5, 48, 0, 0, 451, 453, 7, 4, 0, 0, 452, 454, 7, 5, 0, 0, 453, 452, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 453, 1, 0, 0, 0, 455, 456, 1, 0, 0, 0, 456, 458, 1, 0, 0, 0, 457, 459, 7, 3, 0, 0, 458, 457, 1, 0, 0, 0, 458, 459, 1, 0, 0, 0, 459, 149, 1, 0, 0, 0, 460, 469, 5, 48, 0, 0, 461, 465, 7, 6, 0, 0, 462, 464, 7, 7, 0, 0, 463, 462, 1, 0, 0, 0, 464, 467, 1, 0, 0, 0, 465, 463, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 469, 1, 0, 0, 0, 467, 465, 1, 0, 0, 0, 468, 460, 1, 0, 0, 0, 468, 461, 1, 0, 0, 0, 469, 471, 1, 0, 0, 0, 470, 472, 7, 8, 0, 0, 471, 470, 1, 0, 0, 0, 471, 472, 1, 0, 0, 0, 472, 151, 1, 0, 0, 0, 473, 482, 5, 48, 0, 0, 474, 478, 7, 6, 0, 0, 475, 477, 7, 7, 0, 0, 476, 475, 1, 0, 0, 0, 477, 480, 1, 0, 0, 0, 478, 476, 1, 0, 0, 0, 478, 479, 1, 0, 0, 0, 479, 482, 1, 0, 0, 0, 480, 478, 1, 0, 0, 0, 481, 473, 1, 0, 0, 0, 481, 474, 1, 0, 0, 0, 482, 489, 1, 0, 0, 0, 483, 485, 3, 20, 9, 0, 484, 486, 7, 7, 0, 0, 485, 484, 1, 0, 0, 0, 486, 487, 1, 0, 0, 0, 487, 485, 1, 0, 0, 0, 487, 488, 1, 0, 0, 0, 488, 490, 1, 0, 0, 0, 489, 483, 1, 0, 0, 0, 489, 490, 1, 0, 0, 0, 490, 500, 1, 0, 0, 0, 491, 493, 7, 9, 0, 0, 492, 494, 7, 10, 0, 0, 493, 492, 1, 0, 0, 0, 493, 494, 1, 0, 0, 0, 494, 496, 1, 0, 0, 0, 495, 497, 7, 7, 0, 0, 496, 495, 1, 0, 0, 0, 497, 498, 1, 0, 0, 0, 498, 496, 1, 0, 0, 0, 498, 499, 1, 0, 0, 0, 499, 501, 1, 0, 0, 0, 500, 491, 1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 503, 1, 0, 0, 0, 502, 504, 7, 11, 0, 0, 503, 502, 1, 0, 0, 0, 503, 504, 1, 0, 0, 0, 504, 153, 1, 0, 0, 0, 505, 513, 5, 34, 0, 0, 506, 507, 5, 92, 0, 0, 507, 512, 5, 34, 0, 0, 508, 509, 5, 92, 0, 0, 509, 512, 5, 92, 0, 0, 510, 512, 8, 12, 0, 0, 511, 506, 1, 0, 0, 0, 511, 508, 1, 0, 0, 0, 511, 510, 1, 0, 0, 0, 512, 515, 1, 0, 0, 0, 513, 514, 1, 0, 0, 0, 513, 511, 1, 0, 0, 0, 514, 516, 1, 0, 0, 0, 515, 513, 1, 0, 0, 0, 516, 530, 5, 34, 0, 0, 517, 525, 5, 39, 0, 0, 518, 519, 5, 92, 0, 0, 519, 524, 5, 39, 0, 0, 520, 521, 5, 92, 0, 0, 521, 524, 5, 92, 0, 0, 522, 524, 8, 13, 0, 0, 523, 518, 1, 0, 0, 0, 523, 520, 1, 0, 0, 0, 523, 522, 1, 0, 0, 0, 524, 527, 1, 0, 0, 0, 525, 526, 1, 0, 0, 0, 525, 523, 1, 0, 0, 0, 526, 528, 1, 0, 0, 0, 527, 525, 1, 0, 0, 0, 528, 530, 5, 39, 0, 0, 529, 505, 1, 0, 0, 0, 529, 517, 1, 0, 0, 0, 530, 155, 1, 0, 0, 0, 531, 535, 5, 47, 0, 0, 532, 533, 5, 92, 0, 0, 533, 536, 8, 14, 0, 0, 534, 536, 8, 15, 0, 0, 535, 532, 1, 0, 0, 0, 535, 534, 1, 0, 0, 0, 536, 537, 1, 0, 0, 0, 537, 538, 1, 0, 0, 0, 537, 535, 1, 0, 0, 0, 538, 539, 1, 0, 0, 0, 539, 543, 5, 47, 0, 0, 540, 542, 7, 16, 0, 0, 541, 540, 1, 0, 0, 0, 542, 545, 1, 0, 0, 0, 543, 541, 1, 0, 0, 0, 543, 544, 1, 0, 0, 0, 544, 546, 1, 0, 0, 0, 545, 543, 1, 0, 0, 0, 546, 547, 4, 77, 1, 0, 547, 157, 1, 0, 0, 0, 548, 549, 5, 116, 0, 0, 549, 550, 5, 114, 0, 0, 550, 551, 5, 117, 0, 0, 551, 552, 5, 101, 0, 0, 552, 159, 1, 0, 0, 0, 553, 554, 5, 102, 0, 0, 554, 555, 5, 97, 0, 0, 555, 556, 5, 108, 0, 0, 556, 557, 5, 115, 0, 0, 557, 558, 5, 101, 0, 0, 558, 161, 1, 0, 0, 0, 559, 560, 5, 110, 0, 0, 560, 561, 5, 117, 0, 0, 561, 562, 5, 108, 0, 0, 562, 563, 5, 108, 0, 0, 563, 163, 1, 0, 0, 0, 564, 565, 5, 98, 0, 0, 565, 566, 5, 111, 0, 0, 566, 567, 5, 111, 0, 0, 567, 568, 5, 108, 0, 0, 568, 569, 5, 101, 0, 0, 569, 570, 5, 97, 0, 0, 570, 603, 5, 110, 0, 0, 571, 572, 5, 98, 0, 0, 572, 573, 5, 121, 0, 0, 573, 574, 5, 116, 0, 0, 574, 603, 5, 101, 0, 0, 575, 576, 5, 115, 0, 0, 576, 577, 5, 104, 0, 0, 577, 578, 5, 111, 0, 0, 578, 579, 5, 114, 0, 0, 579, 603, 5, 116, 0, 0, 580, 581, 5, 99, 0, 0, 581, 582, 5, 104, 0, 0, 582, 583, 5, 97, 0, 0, 583, 603, 5, 114, 0, 0, 584, 585, 5, 105, 0, 0, 585, 586, 5, 110, 0, 0, 586, 603, 5, 116, 0, 0, 587, 588, 5, 108, 0, 0, 588, 589, 5, 111, 0, 0, 589, 590, 5, 110, 0, 0, 590, 603, 5, 103, 0, 0, 591, 592, 5, 102, 0, 0, 592, 593, 5, 108, 0, 0, 593, 594, 5, 111, 0, 0, 594, 595, 5, 97, 0, 0, 595, 603, 5, 116, 0, 0, 596, 597, 5, 100, 0, 0, 597, 598, 5, 111, 0, 0, 598, 599, 5, 117, 0, 0, 599, 600, 5, 98, 0, 0, 600, 601, 5, 108, 0, 0, 601, 603, 5, 101, 0, 0, 602, 564, 1, 0, 0, 0, 602, 571, 1, 0, 0, 0, 602, 575, 1, 0, 0, 0, 602, 580, 1, 0, 0, 0, 602, 584, 1, 0, 0, 0, 602, 587, 1, 0, 0, 0, 602, 591, 1, 0, 0, 0, 602, 596, 1, 0, 0, 0, 603, 165, 1, 0, 0, 0, 604, 605, 5, 100, 0, 0, 605, 606, 5, 101, 0, 0, 606, 607, 5, 102, 0, 0, 607, 167, 1, 0, 0, 0, 608, 612, 7, 17, 0, 0, 609, 611, 7, 18, 0, 0, 610, 609, 1, 0, 0, 0, 611, 614, 1, 0, 0, 0, 612, 610, 1, 0, 0, 0, 612, 613, 1, 0, 0, 0, 613, 169, 1, 0, 0, 0, 614, 612, 1, 0, 0, 0, 615, 624, 5, 48, 0, 0, 616, 620, 7, 6, 0, 0, 617, 619, 7, 7, 0, 0, 618, 617, 1, 0, 0, 0, 619, 622, 1, 0, 0, 0, 620, 618, 1, 0, 0, 0, 620, 621, 1, 0, 0, 0, 621, 624, 1, 0, 0, 0, 622, 620, 1, 0, 0, 0, 623, 615, 1, 0, 0, 0, 623, 616, 1, 0, 0, 0, 624, 625, 1, 0, 0, 0, 625, 626, 6, 84, 2, 0, 626, 171, 1, 0, 0, 0, 627, 631, 7, 17, 0, 0, 628, 630, 7, 18, 0, 0, 629, 628, 1, 0, 0, 0, 630, 633, 1, 0, 0, 0, 631, 629, 1, 0, 0, 0, 631, 632, 1, 0, 0, 0, 632, 634, 1, 0, 0, 0, 633, 631, 1, 0, 0, 0, 634, 635, 6, 85, 2, 0, 635, 173, 1, 0, 0, 0, 34, 0, 1, 177, 187, 197, 202, 445, 448, 455, 458, 465, 468, 471, 478, 481, 487, 489, 493, 498, 500, 503, 511, 513, 523, 525, 529, 535, 537, 543, 602, 612, 620, 623, 631, 3, 6, 0, 0, 2, 1, 0, 2, 0, 0]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "__ATN", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_lexer, "DecisionsToDFA", _painless_lexer._ATN.decisionToState.map((ds, index) => new antlr4__WEBPACK_IMPORTED_MODULE_1__.DFA(ds, index)));

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/antlr/painless_parser.ts":
/*!***************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/antlr/painless_parser.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AddsubContext: () => (/* binding */ AddsubContext),
/* harmony export */   AfterthoughtContext: () => (/* binding */ AfterthoughtContext),
/* harmony export */   ArgumentContext: () => (/* binding */ ArgumentContext),
/* harmony export */   ArgumentsContext: () => (/* binding */ ArgumentsContext),
/* harmony export */   ArrayinitializerContext: () => (/* binding */ ArrayinitializerContext),
/* harmony export */   AssignmentContext: () => (/* binding */ AssignmentContext),
/* harmony export */   BinaryContext: () => (/* binding */ BinaryContext),
/* harmony export */   BlockContext: () => (/* binding */ BlockContext),
/* harmony export */   BoolContext: () => (/* binding */ BoolContext),
/* harmony export */   BraceaccessContext: () => (/* binding */ BraceaccessContext),
/* harmony export */   BreakContext: () => (/* binding */ BreakContext),
/* harmony export */   CallinvokeContext: () => (/* binding */ CallinvokeContext),
/* harmony export */   CalllocalContext: () => (/* binding */ CalllocalContext),
/* harmony export */   CastContext: () => (/* binding */ CastContext),
/* harmony export */   CastexpressionContext: () => (/* binding */ CastexpressionContext),
/* harmony export */   ChainContext: () => (/* binding */ ChainContext),
/* harmony export */   ClassfuncrefContext: () => (/* binding */ ClassfuncrefContext),
/* harmony export */   CompContext: () => (/* binding */ CompContext),
/* harmony export */   ConditionalContext: () => (/* binding */ ConditionalContext),
/* harmony export */   ConstructorfuncrefContext: () => (/* binding */ ConstructorfuncrefContext),
/* harmony export */   ContinueContext: () => (/* binding */ ContinueContext),
/* harmony export */   DeclContext: () => (/* binding */ DeclContext),
/* harmony export */   DeclarationContext: () => (/* binding */ DeclarationContext),
/* harmony export */   DecltypeContext: () => (/* binding */ DecltypeContext),
/* harmony export */   DeclvarContext: () => (/* binding */ DeclvarContext),
/* harmony export */   DoContext: () => (/* binding */ DoContext),
/* harmony export */   DstatementContext: () => (/* binding */ DstatementContext),
/* harmony export */   DynamicContext: () => (/* binding */ DynamicContext),
/* harmony export */   EachContext: () => (/* binding */ EachContext),
/* harmony export */   ElvisContext: () => (/* binding */ ElvisContext),
/* harmony export */   EmptyContext: () => (/* binding */ EmptyContext),
/* harmony export */   ExprContext: () => (/* binding */ ExprContext),
/* harmony export */   ExpressionContext: () => (/* binding */ ExpressionContext),
/* harmony export */   FalseContext: () => (/* binding */ FalseContext),
/* harmony export */   FieldaccessContext: () => (/* binding */ FieldaccessContext),
/* harmony export */   ForContext: () => (/* binding */ ForContext),
/* harmony export */   FuncrefContext: () => (/* binding */ FuncrefContext),
/* harmony export */   FunctionContext: () => (/* binding */ FunctionContext),
/* harmony export */   IfContext: () => (/* binding */ IfContext),
/* harmony export */   IneachContext: () => (/* binding */ IneachContext),
/* harmony export */   InitializerContext: () => (/* binding */ InitializerContext),
/* harmony export */   InstanceofContext: () => (/* binding */ InstanceofContext),
/* harmony export */   LambdaContext: () => (/* binding */ LambdaContext),
/* harmony export */   LamtypeContext: () => (/* binding */ LamtypeContext),
/* harmony export */   ListinitContext: () => (/* binding */ ListinitContext),
/* harmony export */   ListinitializerContext: () => (/* binding */ ListinitializerContext),
/* harmony export */   LocalfuncrefContext: () => (/* binding */ LocalfuncrefContext),
/* harmony export */   MapinitContext: () => (/* binding */ MapinitContext),
/* harmony export */   MapinitializerContext: () => (/* binding */ MapinitializerContext),
/* harmony export */   MaptokenContext: () => (/* binding */ MaptokenContext),
/* harmony export */   NewarrayContext: () => (/* binding */ NewarrayContext),
/* harmony export */   NewinitializedarrayContext: () => (/* binding */ NewinitializedarrayContext),
/* harmony export */   NewobjectContext: () => (/* binding */ NewobjectContext),
/* harmony export */   NewstandardarrayContext: () => (/* binding */ NewstandardarrayContext),
/* harmony export */   NoncondexpressionContext: () => (/* binding */ NoncondexpressionContext),
/* harmony export */   NonconditionalContext: () => (/* binding */ NonconditionalContext),
/* harmony export */   NotContext: () => (/* binding */ NotContext),
/* harmony export */   NotaddsubContext: () => (/* binding */ NotaddsubContext),
/* harmony export */   NullContext: () => (/* binding */ NullContext),
/* harmony export */   NumericContext: () => (/* binding */ NumericContext),
/* harmony export */   ParametersContext: () => (/* binding */ ParametersContext),
/* harmony export */   PostContext: () => (/* binding */ PostContext),
/* harmony export */   PostdotContext: () => (/* binding */ PostdotContext),
/* harmony export */   PostfixContext: () => (/* binding */ PostfixContext),
/* harmony export */   PreContext: () => (/* binding */ PreContext),
/* harmony export */   PrecedenceContext: () => (/* binding */ PrecedenceContext),
/* harmony export */   PrimaryContext: () => (/* binding */ PrimaryContext),
/* harmony export */   PrimordefcastContext: () => (/* binding */ PrimordefcastContext),
/* harmony export */   PrimordefcasttypeContext: () => (/* binding */ PrimordefcasttypeContext),
/* harmony export */   ReadContext: () => (/* binding */ ReadContext),
/* harmony export */   RefcastContext: () => (/* binding */ RefcastContext),
/* harmony export */   RefcasttypeContext: () => (/* binding */ RefcasttypeContext),
/* harmony export */   RegexContext: () => (/* binding */ RegexContext),
/* harmony export */   ReturnContext: () => (/* binding */ ReturnContext),
/* harmony export */   RstatementContext: () => (/* binding */ RstatementContext),
/* harmony export */   SingleContext: () => (/* binding */ SingleContext),
/* harmony export */   SourceContext: () => (/* binding */ SourceContext),
/* harmony export */   StatementContext: () => (/* binding */ StatementContext),
/* harmony export */   StringContext: () => (/* binding */ StringContext),
/* harmony export */   ThrowContext: () => (/* binding */ ThrowContext),
/* harmony export */   TrailerContext: () => (/* binding */ TrailerContext),
/* harmony export */   TrapContext: () => (/* binding */ TrapContext),
/* harmony export */   TrueContext: () => (/* binding */ TrueContext),
/* harmony export */   TryContext: () => (/* binding */ TryContext),
/* harmony export */   TypeContext: () => (/* binding */ TypeContext),
/* harmony export */   UnaryContext: () => (/* binding */ UnaryContext),
/* harmony export */   UnarynotaddsubContext: () => (/* binding */ UnarynotaddsubContext),
/* harmony export */   VariableContext: () => (/* binding */ VariableContext),
/* harmony export */   WhileContext: () => (/* binding */ WhileContext),
/* harmony export */   "default": () => (/* binding */ painless_parser)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.mjs");

var _painless_parser;
// @ts-nocheck
// Generated from ./src/painless/antlr/painless_parser.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols



// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars

class painless_parser extends antlr4__WEBPACK_IMPORTED_MODULE_1__.Parser {
  get grammarFileName() {
    return "painless_parser.g4";
  }
  get literalNames() {
    return painless_parser.literalNames;
  }
  get symbolicNames() {
    return painless_parser.symbolicNames;
  }
  get ruleNames() {
    return painless_parser.ruleNames;
  }
  get serializedATN() {
    return painless_parser._serializedATN;
  }
  createFailedPredicateException(predicate, message) {
    return new antlr4__WEBPACK_IMPORTED_MODULE_1__.FailedPredicateException(this, predicate, message);
  }
  constructor(input) {
    super(input);
    this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserATNSimulator(this, painless_parser._ATN, painless_parser.DecisionsToDFA, new antlr4__WEBPACK_IMPORTED_MODULE_1__.PredictionContextCache());
  }
  // @RuleVersion(0)
  source() {
    let localctx = new SourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, painless_parser.RULE_source);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 81;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 0, this._ctx);
        while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 78;
                this.function_();
              }
            }
          }
          this.state = 83;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 0, this._ctx);
        }
        this.state = 87;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1664086549) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 67092483) !== 0) {
          {
            {
              this.state = 84;
              this.statement();
            }
          }
          this.state = 89;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 90;
        this.match(painless_parser.EOF);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  function_() {
    let localctx = new FunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, painless_parser.RULE_function);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 92;
        this.decltype();
        this.state = 93;
        this.match(painless_parser.ID);
        this.state = 94;
        this.parameters();
        this.state = 95;
        this.block();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  parameters() {
    let localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, painless_parser.RULE_parameters);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 97;
        this.match(painless_parser.LP);
        this.state = 109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 82 & ~0x1F) === 0 && (1 << _la - 82 & 7) !== 0) {
          {
            this.state = 98;
            this.decltype();
            this.state = 99;
            this.match(painless_parser.ID);
            this.state = 106;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 12) {
              {
                {
                  this.state = 100;
                  this.match(painless_parser.COMMA);
                  this.state = 101;
                  this.decltype();
                  this.state = 102;
                  this.match(painless_parser.ID);
                }
              }
              this.state = 108;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
        }
        this.state = 111;
        this.match(painless_parser.RP);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  statement() {
    let localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, painless_parser.RULE_statement);
    let _la;
    try {
      this.state = 117;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 14:
        case 17:
        case 19:
        case 24:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 113;
            this.rstatement();
          }
          break;
        case 5:
        case 7:
        case 9:
        case 18:
        case 20:
        case 21:
        case 22:
        case 23:
        case 26:
        case 29:
        case 30:
        case 34:
        case 35:
        case 59:
        case 60:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 114;
            this.dstatement();
            this.state = 115;
            _la = this._input.LA(1);
            if (!(_la === -1 || _la === 13)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;
        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  rstatement() {
    let localctx = new RstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, painless_parser.RULE_rstatement);
    let _la;
    try {
      let _alt;
      this.state = 179;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 12, this._ctx)) {
        case 1:
          localctx = new IfContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 119;
            this.match(painless_parser.IF);
            this.state = 120;
            this.match(painless_parser.LP);
            this.state = 121;
            this.expression();
            this.state = 122;
            this.match(painless_parser.RP);
            this.state = 123;
            this.trailer();
            this.state = 127;
            this._errHandler.sync(this);
            switch (this._interp.adaptivePredict(this._input, 5, this._ctx)) {
              case 1:
                {
                  this.state = 124;
                  this.match(painless_parser.ELSE);
                  this.state = 125;
                  this.trailer();
                }
                break;
              case 2:
                {
                  this.state = 126;
                  if (!(this._input.LA(1) != painless_parser.ELSE)) {
                    throw this.createFailedPredicateException(" this._input.LA(1) != painless_parser.ELSE ");
                  }
                }
                break;
            }
          }
          break;
        case 2:
          localctx = new WhileContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 129;
            this.match(painless_parser.WHILE);
            this.state = 130;
            this.match(painless_parser.LP);
            this.state = 131;
            this.expression();
            this.state = 132;
            this.match(painless_parser.RP);
            this.state = 135;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case 3:
              case 5:
              case 7:
              case 9:
              case 14:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 26:
              case 29:
              case 30:
              case 34:
              case 35:
              case 59:
              case 60:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
                {
                  this.state = 133;
                  this.trailer();
                }
                break;
              case 13:
                {
                  this.state = 134;
                  this.empty();
                }
                break;
              default:
                throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
            }
          }
          break;
        case 3:
          localctx = new ForContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 137;
            this.match(painless_parser.FOR);
            this.state = 138;
            this.match(painless_parser.LP);
            this.state = 140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1661206549) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 67092483) !== 0) {
              {
                this.state = 139;
                this.initializer();
              }
            }
            this.state = 142;
            this.match(painless_parser.SEMICOLON);
            this.state = 144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1661206549) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 41926659) !== 0) {
              {
                this.state = 143;
                this.expression();
              }
            }
            this.state = 146;
            this.match(painless_parser.SEMICOLON);
            this.state = 148;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1661206549) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 41926659) !== 0) {
              {
                this.state = 147;
                this.afterthought();
              }
            }
            this.state = 150;
            this.match(painless_parser.RP);
            this.state = 153;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
              case 3:
              case 5:
              case 7:
              case 9:
              case 14:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 26:
              case 29:
              case 30:
              case 34:
              case 35:
              case 59:
              case 60:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
                {
                  this.state = 151;
                  this.trailer();
                }
                break;
              case 13:
                {
                  this.state = 152;
                  this.empty();
                }
                break;
              default:
                throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
            }
          }
          break;
        case 4:
          localctx = new EachContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          {
            this.state = 155;
            this.match(painless_parser.FOR);
            this.state = 156;
            this.match(painless_parser.LP);
            this.state = 157;
            this.decltype();
            this.state = 158;
            this.match(painless_parser.ID);
            this.state = 159;
            this.match(painless_parser.COLON);
            this.state = 160;
            this.expression();
            this.state = 161;
            this.match(painless_parser.RP);
            this.state = 162;
            this.trailer();
          }
          break;
        case 5:
          localctx = new IneachContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          {
            this.state = 164;
            this.match(painless_parser.FOR);
            this.state = 165;
            this.match(painless_parser.LP);
            this.state = 166;
            this.match(painless_parser.ID);
            this.state = 167;
            this.match(painless_parser.IN);
            this.state = 168;
            this.expression();
            this.state = 169;
            this.match(painless_parser.RP);
            this.state = 170;
            this.trailer();
          }
          break;
        case 6:
          localctx = new TryContext(this, localctx);
          this.enterOuterAlt(localctx, 6);
          {
            this.state = 172;
            this.match(painless_parser.TRY);
            this.state = 173;
            this.block();
            this.state = 175;
            this._errHandler.sync(this);
            _alt = 1;
            do {
              switch (_alt) {
                case 1:
                  {
                    {
                      this.state = 174;
                      this.trap();
                    }
                  }
                  break;
                default:
                  throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
              }
              this.state = 177;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 11, this._ctx);
            } while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  dstatement() {
    let localctx = new DstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, painless_parser.RULE_dstatement);
    let _la;
    try {
      this.state = 198;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 14, this._ctx)) {
        case 1:
          localctx = new DoContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 181;
            this.match(painless_parser.DO);
            this.state = 182;
            this.block();
            this.state = 183;
            this.match(painless_parser.WHILE);
            this.state = 184;
            this.match(painless_parser.LP);
            this.state = 185;
            this.expression();
            this.state = 186;
            this.match(painless_parser.RP);
          }
          break;
        case 2:
          localctx = new DeclContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 188;
            this.declaration();
          }
          break;
        case 3:
          localctx = new ContinueContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 189;
            this.match(painless_parser.CONTINUE);
          }
          break;
        case 4:
          localctx = new BreakContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          {
            this.state = 190;
            this.match(painless_parser.BREAK);
          }
          break;
        case 5:
          localctx = new ReturnContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          {
            this.state = 191;
            this.match(painless_parser.RETURN);
            this.state = 193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1661206549) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 41926659) !== 0) {
              {
                this.state = 192;
                this.expression();
              }
            }
          }
          break;
        case 6:
          localctx = new ThrowContext(this, localctx);
          this.enterOuterAlt(localctx, 6);
          {
            this.state = 195;
            this.match(painless_parser.THROW);
            this.state = 196;
            this.expression();
          }
          break;
        case 7:
          localctx = new ExprContext(this, localctx);
          this.enterOuterAlt(localctx, 7);
          {
            this.state = 197;
            this.expression();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  trailer() {
    let localctx = new TrailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, painless_parser.RULE_trailer);
    try {
      this.state = 202;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 3:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 200;
            this.block();
          }
          break;
        case 5:
        case 7:
        case 9:
        case 14:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 29:
        case 30:
        case 34:
        case 35:
        case 59:
        case 60:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 201;
            this.statement();
          }
          break;
        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  block() {
    let localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, painless_parser.RULE_block);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 204;
        this.match(painless_parser.LBRACK);
        this.state = 208;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
        while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 205;
                this.statement();
              }
            }
          }
          this.state = 210;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
        }
        this.state = 212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1663541269) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 67092483) !== 0) {
          {
            this.state = 211;
            this.dstatement();
          }
        }
        this.state = 214;
        this.match(painless_parser.RBRACK);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  empty() {
    let localctx = new EmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, painless_parser.RULE_empty);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 216;
        this.match(painless_parser.SEMICOLON);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  initializer() {
    let localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, painless_parser.RULE_initializer);
    try {
      this.state = 220;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 18, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 218;
            this.declaration();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 219;
            this.expression();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  afterthought() {
    let localctx = new AfterthoughtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, painless_parser.RULE_afterthought);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 222;
        this.expression();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  declaration() {
    let localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, painless_parser.RULE_declaration);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 224;
        this.decltype();
        this.state = 225;
        this.declvar();
        this.state = 230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === 12) {
          {
            {
              this.state = 226;
              this.match(painless_parser.COMMA);
              this.state = 227;
              this.declvar();
            }
          }
          this.state = 232;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  decltype() {
    let localctx = new DecltypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, painless_parser.RULE_decltype);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 233;
        this.type_();
        this.state = 238;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 20, this._ctx);
        while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 234;
                this.match(painless_parser.LBRACE);
                this.state = 235;
                this.match(painless_parser.RBRACE);
              }
            }
          }
          this.state = 240;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 20, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  type_() {
    let localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, painless_parser.RULE_type);
    try {
      let _alt;
      this.state = 251;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 83:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 241;
            this.match(painless_parser.DEF);
          }
          break;
        case 82:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 242;
            this.match(painless_parser.PRIMITIVE);
          }
          break;
        case 84:
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 243;
            this.match(painless_parser.ID);
            this.state = 248;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 21, this._ctx);
            while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 244;
                    this.match(painless_parser.DOT);
                    this.state = 245;
                    this.match(painless_parser.DOTID);
                  }
                }
              }
              this.state = 250;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 21, this._ctx);
            }
          }
          break;
        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  declvar() {
    let localctx = new DeclvarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, painless_parser.RULE_declvar);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 253;
        this.match(painless_parser.ID);
        this.state = 256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 61) {
          {
            this.state = 254;
            this.match(painless_parser.ASSIGN);
            this.state = 255;
            this.expression();
          }
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  trap() {
    let localctx = new TrapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, painless_parser.RULE_trap);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 258;
        this.match(painless_parser.CATCH);
        this.state = 259;
        this.match(painless_parser.LP);
        this.state = 260;
        this.type_();
        this.state = 261;
        this.match(painless_parser.ID);
        this.state = 262;
        this.match(painless_parser.RP);
        this.state = 263;
        this.block();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  noncondexpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let localctx = new NoncondexpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    let _startState = 32;
    this.enterRecursionRule(localctx, 32, painless_parser.RULE_noncondexpression, _p);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        {
          localctx = new SingleContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 266;
          this.unary();
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 309;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 25, this._ctx);
        while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = localctx;
            {
              this.state = 307;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 24, this._ctx)) {
                case 1:
                  {
                    localctx = new BinaryContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 268;
                    if (!this.precpred(this._ctx, 13)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
                    }
                    this.state = 269;
                    _la = this._input.LA(1);
                    if (!((_la - 31 & ~0x1F) === 0 && (1 << _la - 31 & 7) !== 0)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 270;
                    this.noncondexpression(14);
                  }
                  break;
                case 2:
                  {
                    localctx = new BinaryContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 271;
                    if (!this.precpred(this._ctx, 12)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
                    }
                    this.state = 272;
                    _la = this._input.LA(1);
                    if (!(_la === 34 || _la === 35)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 273;
                    this.noncondexpression(13);
                  }
                  break;
                case 3:
                  {
                    localctx = new BinaryContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 274;
                    if (!this.precpred(this._ctx, 11)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
                    }
                    this.state = 275;
                    _la = this._input.LA(1);
                    if (!(_la === 57 || _la === 58)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 276;
                    this.noncondexpression(12);
                  }
                  break;
                case 4:
                  {
                    localctx = new BinaryContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 277;
                    if (!this.precpred(this._ctx, 10)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
                    }
                    this.state = 278;
                    _la = this._input.LA(1);
                    if (!((_la - 36 & ~0x1F) === 0 && (1 << _la - 36 & 7) !== 0)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 279;
                    this.noncondexpression(11);
                  }
                  break;
                case 5:
                  {
                    localctx = new CompContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 280;
                    if (!this.precpred(this._ctx, 9)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");
                    }
                    this.state = 281;
                    _la = this._input.LA(1);
                    if (!((_la - 39 & ~0x1F) === 0 && (1 << _la - 39 & 15) !== 0)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 282;
                    this.noncondexpression(10);
                  }
                  break;
                case 6:
                  {
                    localctx = new CompContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 283;
                    if (!this.precpred(this._ctx, 7)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
                    }
                    this.state = 284;
                    _la = this._input.LA(1);
                    if (!((_la - 43 & ~0x1F) === 0 && (1 << _la - 43 & 15) !== 0)) {
                      this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 285;
                    this.noncondexpression(8);
                  }
                  break;
                case 7:
                  {
                    localctx = new BinaryContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 286;
                    if (!this.precpred(this._ctx, 6)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
                    }
                    this.state = 287;
                    this.match(painless_parser.BWAND);
                    this.state = 288;
                    this.noncondexpression(7);
                  }
                  break;
                case 8:
                  {
                    localctx = new BinaryContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 289;
                    if (!this.precpred(this._ctx, 5)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
                    }
                    this.state = 290;
                    this.match(painless_parser.XOR);
                    this.state = 291;
                    this.noncondexpression(6);
                  }
                  break;
                case 9:
                  {
                    localctx = new BinaryContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 292;
                    if (!this.precpred(this._ctx, 4)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                    }
                    this.state = 293;
                    this.match(painless_parser.BWOR);
                    this.state = 294;
                    this.noncondexpression(5);
                  }
                  break;
                case 10:
                  {
                    localctx = new BoolContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 295;
                    if (!this.precpred(this._ctx, 3)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                    }
                    this.state = 296;
                    this.match(painless_parser.BOOLAND);
                    this.state = 297;
                    this.noncondexpression(4);
                  }
                  break;
                case 11:
                  {
                    localctx = new BoolContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 298;
                    if (!this.precpred(this._ctx, 2)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                    }
                    this.state = 299;
                    this.match(painless_parser.BOOLOR);
                    this.state = 300;
                    this.noncondexpression(3);
                  }
                  break;
                case 12:
                  {
                    localctx = new ElvisContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 301;
                    if (!this.precpred(this._ctx, 1)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                    }
                    this.state = 302;
                    this.match(painless_parser.ELVIS);
                    this.state = 303;
                    this.noncondexpression(1);
                  }
                  break;
                case 13:
                  {
                    localctx = new InstanceofContext(this, new NoncondexpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, painless_parser.RULE_noncondexpression);
                    this.state = 304;
                    if (!this.precpred(this._ctx, 8)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
                    }
                    this.state = 305;
                    this.match(painless_parser.INSTANCEOF);
                    this.state = 306;
                    this.decltype();
                  }
                  break;
              }
            }
          }
          this.state = 311;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 25, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  // @RuleVersion(0)
  expression() {
    let localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, painless_parser.RULE_expression);
    let _la;
    try {
      this.state = 323;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 26, this._ctx)) {
        case 1:
          localctx = new NonconditionalContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 312;
            this.noncondexpression(0);
          }
          break;
        case 2:
          localctx = new ConditionalContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 313;
            this.noncondexpression(0);
            this.state = 314;
            this.match(painless_parser.COND);
            this.state = 315;
            this.expression();
            this.state = 316;
            this.match(painless_parser.COLON);
            this.state = 317;
            this.expression();
          }
          break;
        case 3:
          localctx = new AssignmentContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 319;
            this.noncondexpression(0);
            this.state = 320;
            _la = this._input.LA(1);
            if (!((_la - 61 & ~0x1F) === 0 && (1 << _la - 61 & 4095) !== 0)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 321;
            this.expression();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  unary() {
    let localctx = new UnaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, painless_parser.RULE_unary);
    let _la;
    try {
      this.state = 330;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 59:
        case 60:
          localctx = new PreContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 325;
            _la = this._input.LA(1);
            if (!(_la === 59 || _la === 60)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 326;
            this.chain();
          }
          break;
        case 34:
        case 35:
          localctx = new AddsubContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 327;
            _la = this._input.LA(1);
            if (!(_la === 34 || _la === 35)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 328;
            this.unary();
          }
          break;
        case 5:
        case 7:
        case 9:
        case 23:
        case 29:
        case 30:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 84:
          localctx = new NotaddsubContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 329;
            this.unarynotaddsub();
          }
          break;
        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  unarynotaddsub() {
    let localctx = new UnarynotaddsubContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, painless_parser.RULE_unarynotaddsub);
    let _la;
    try {
      this.state = 339;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 28, this._ctx)) {
        case 1:
          localctx = new ReadContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 332;
            this.chain();
          }
          break;
        case 2:
          localctx = new PostContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 333;
            this.chain();
            this.state = 334;
            _la = this._input.LA(1);
            if (!(_la === 59 || _la === 60)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;
        case 3:
          localctx = new NotContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 336;
            _la = this._input.LA(1);
            if (!(_la === 29 || _la === 30)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 337;
            this.unary();
          }
          break;
        case 4:
          localctx = new CastContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          {
            this.state = 338;
            this.castexpression();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  castexpression() {
    let localctx = new CastexpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, painless_parser.RULE_castexpression);
    try {
      this.state = 351;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 29, this._ctx)) {
        case 1:
          localctx = new PrimordefcastContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 341;
            this.match(painless_parser.LP);
            this.state = 342;
            this.primordefcasttype();
            this.state = 343;
            this.match(painless_parser.RP);
            this.state = 344;
            this.unary();
          }
          break;
        case 2:
          localctx = new RefcastContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 346;
            this.match(painless_parser.LP);
            this.state = 347;
            this.refcasttype();
            this.state = 348;
            this.match(painless_parser.RP);
            this.state = 349;
            this.unarynotaddsub();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  primordefcasttype() {
    let localctx = new PrimordefcasttypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, painless_parser.RULE_primordefcasttype);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 353;
        _la = this._input.LA(1);
        if (!(_la === 82 || _la === 83)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  refcasttype() {
    let localctx = new RefcasttypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, painless_parser.RULE_refcasttype);
    let _la;
    try {
      this.state = 384;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 83:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 355;
            this.match(painless_parser.DEF);
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
              {
                {
                  this.state = 356;
                  this.match(painless_parser.LBRACE);
                  this.state = 357;
                  this.match(painless_parser.RBRACE);
                }
              }
              this.state = 360;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            } while (_la === 5);
          }
          break;
        case 82:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 362;
            this.match(painless_parser.PRIMITIVE);
            this.state = 365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
              {
                {
                  this.state = 363;
                  this.match(painless_parser.LBRACE);
                  this.state = 364;
                  this.match(painless_parser.RBRACE);
                }
              }
              this.state = 367;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            } while (_la === 5);
          }
          break;
        case 84:
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 369;
            this.match(painless_parser.ID);
            this.state = 374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 10) {
              {
                {
                  this.state = 370;
                  this.match(painless_parser.DOT);
                  this.state = 371;
                  this.match(painless_parser.DOTID);
                }
              }
              this.state = 376;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 5) {
              {
                {
                  this.state = 377;
                  this.match(painless_parser.LBRACE);
                  this.state = 378;
                  this.match(painless_parser.RBRACE);
                }
              }
              this.state = 383;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
          }
          break;
        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  chain() {
    let localctx = new ChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, painless_parser.RULE_chain);
    try {
      let _alt;
      this.state = 394;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 36, this._ctx)) {
        case 1:
          localctx = new DynamicContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 386;
            this.primary();
            this.state = 390;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 35, this._ctx);
            while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 387;
                    this.postfix();
                  }
                }
              }
              this.state = 392;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 35, this._ctx);
            }
          }
          break;
        case 2:
          localctx = new NewarrayContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 393;
            this.arrayinitializer();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  primary() {
    let localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, painless_parser.RULE_primary);
    let _la;
    try {
      this.state = 415;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 37, this._ctx)) {
        case 1:
          localctx = new PrecedenceContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 396;
            this.match(painless_parser.LP);
            this.state = 397;
            this.expression();
            this.state = 398;
            this.match(painless_parser.RP);
          }
          break;
        case 2:
          localctx = new NumericContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 400;
            _la = this._input.LA(1);
            if (!((_la - 73 & ~0x1F) === 0 && (1 << _la - 73 & 15) !== 0)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
          break;
        case 3:
          localctx = new TrueContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 401;
            this.match(painless_parser.TRUE);
          }
          break;
        case 4:
          localctx = new FalseContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          {
            this.state = 402;
            this.match(painless_parser.FALSE);
          }
          break;
        case 5:
          localctx = new NullContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          {
            this.state = 403;
            this.match(painless_parser.NULL);
          }
          break;
        case 6:
          localctx = new StringContext(this, localctx);
          this.enterOuterAlt(localctx, 6);
          {
            this.state = 404;
            this.match(painless_parser.STRING);
          }
          break;
        case 7:
          localctx = new RegexContext(this, localctx);
          this.enterOuterAlt(localctx, 7);
          {
            this.state = 405;
            this.match(painless_parser.REGEX);
          }
          break;
        case 8:
          localctx = new ListinitContext(this, localctx);
          this.enterOuterAlt(localctx, 8);
          {
            this.state = 406;
            this.listinitializer();
          }
          break;
        case 9:
          localctx = new MapinitContext(this, localctx);
          this.enterOuterAlt(localctx, 9);
          {
            this.state = 407;
            this.mapinitializer();
          }
          break;
        case 10:
          localctx = new VariableContext(this, localctx);
          this.enterOuterAlt(localctx, 10);
          {
            this.state = 408;
            this.match(painless_parser.ID);
          }
          break;
        case 11:
          localctx = new CalllocalContext(this, localctx);
          this.enterOuterAlt(localctx, 11);
          {
            this.state = 409;
            _la = this._input.LA(1);
            if (!(_la === 9 || _la === 84)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
            this.state = 410;
            this.arguments();
          }
          break;
        case 12:
          localctx = new NewobjectContext(this, localctx);
          this.enterOuterAlt(localctx, 12);
          {
            this.state = 411;
            this.match(painless_parser.NEW);
            this.state = 412;
            this.type_();
            this.state = 413;
            this.arguments();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  postfix() {
    let localctx = new PostfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, painless_parser.RULE_postfix);
    try {
      this.state = 420;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 38, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 417;
            this.callinvoke();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 418;
            this.fieldaccess();
          }
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 419;
            this.braceaccess();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  postdot() {
    let localctx = new PostdotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, painless_parser.RULE_postdot);
    try {
      this.state = 424;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 39, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 422;
            this.callinvoke();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 423;
            this.fieldaccess();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  callinvoke() {
    let localctx = new CallinvokeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, painless_parser.RULE_callinvoke);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 426;
        _la = this._input.LA(1);
        if (!(_la === 10 || _la === 11)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 427;
        this.match(painless_parser.DOTID);
        this.state = 428;
        this.arguments();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  fieldaccess() {
    let localctx = new FieldaccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, painless_parser.RULE_fieldaccess);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 430;
        _la = this._input.LA(1);
        if (!(_la === 10 || _la === 11)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 431;
        _la = this._input.LA(1);
        if (!(_la === 85 || _la === 86)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  braceaccess() {
    let localctx = new BraceaccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, painless_parser.RULE_braceaccess);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 433;
        this.match(painless_parser.LBRACE);
        this.state = 434;
        this.expression();
        this.state = 435;
        this.match(painless_parser.RBRACE);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  arrayinitializer() {
    let localctx = new ArrayinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, painless_parser.RULE_arrayinitializer);
    let _la;
    try {
      let _alt;
      this.state = 478;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 46, this._ctx)) {
        case 1:
          localctx = new NewstandardarrayContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 437;
            this.match(painless_parser.NEW);
            this.state = 438;
            this.type_();
            this.state = 443;
            this._errHandler.sync(this);
            _alt = 1;
            do {
              switch (_alt) {
                case 1:
                  {
                    {
                      this.state = 439;
                      this.match(painless_parser.LBRACE);
                      this.state = 440;
                      this.expression();
                      this.state = 441;
                      this.match(painless_parser.RBRACE);
                    }
                  }
                  break;
                default:
                  throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
              }
              this.state = 445;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 40, this._ctx);
            } while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER);
            this.state = 454;
            this._errHandler.sync(this);
            switch (this._interp.adaptivePredict(this._input, 42, this._ctx)) {
              case 1:
                {
                  this.state = 447;
                  this.postdot();
                  this.state = 451;
                  this._errHandler.sync(this);
                  _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
                  while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                      {
                        {
                          this.state = 448;
                          this.postfix();
                        }
                      }
                    }
                    this.state = 453;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
                  }
                }
                break;
            }
          }
          break;
        case 2:
          localctx = new NewinitializedarrayContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 456;
            this.match(painless_parser.NEW);
            this.state = 457;
            this.type_();
            this.state = 458;
            this.match(painless_parser.LBRACE);
            this.state = 459;
            this.match(painless_parser.RBRACE);
            this.state = 460;
            this.match(painless_parser.LBRACK);
            this.state = 469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1661206549) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 41926659) !== 0) {
              {
                this.state = 461;
                this.expression();
                this.state = 466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === 12) {
                  {
                    {
                      this.state = 462;
                      this.match(painless_parser.COMMA);
                      this.state = 463;
                      this.expression();
                    }
                  }
                  this.state = 468;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                }
              }
            }
            this.state = 471;
            this.match(painless_parser.RBRACK);
            this.state = 475;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 45, this._ctx);
            while (_alt !== 2 && _alt !== antlr4__WEBPACK_IMPORTED_MODULE_1__.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                {
                  {
                    this.state = 472;
                    this.postfix();
                  }
                }
              }
              this.state = 477;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 45, this._ctx);
            }
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  listinitializer() {
    let localctx = new ListinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, painless_parser.RULE_listinitializer);
    let _la;
    try {
      this.state = 493;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 48, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 480;
            this.match(painless_parser.LBRACE);
            this.state = 481;
            this.expression();
            this.state = 486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 12) {
              {
                {
                  this.state = 482;
                  this.match(painless_parser.COMMA);
                  this.state = 483;
                  this.expression();
                }
              }
              this.state = 488;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 489;
            this.match(painless_parser.RBRACE);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 491;
            this.match(painless_parser.LBRACE);
            this.state = 492;
            this.match(painless_parser.RBRACE);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  mapinitializer() {
    let localctx = new MapinitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, painless_parser.RULE_mapinitializer);
    let _la;
    try {
      this.state = 509;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 50, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 495;
            this.match(painless_parser.LBRACE);
            this.state = 496;
            this.maptoken();
            this.state = 501;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 12) {
              {
                {
                  this.state = 497;
                  this.match(painless_parser.COMMA);
                  this.state = 498;
                  this.maptoken();
                }
              }
              this.state = 503;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 504;
            this.match(painless_parser.RBRACE);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 506;
            this.match(painless_parser.LBRACE);
            this.state = 507;
            this.match(painless_parser.COLON);
            this.state = 508;
            this.match(painless_parser.RBRACE);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  maptoken() {
    let localctx = new MaptokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, painless_parser.RULE_maptoken);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 511;
        this.expression();
        this.state = 512;
        this.match(painless_parser.COLON);
        this.state = 513;
        this.expression();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  arguments() {
    let localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, painless_parser.RULE_arguments);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        {
          this.state = 515;
          this.match(painless_parser.LP);
          this.state = 524;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if ((_la - 5 & ~0x1F) === 0 && (1 << _la - 5 & 1665400853) !== 0 || (_la - 59 & ~0x1F) === 0 && (1 << _la - 59 & 67092483) !== 0) {
            {
              this.state = 516;
              this.argument();
              this.state = 521;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 12) {
                {
                  {
                    this.state = 517;
                    this.match(painless_parser.COMMA);
                    this.state = 518;
                    this.argument();
                  }
                }
                this.state = 523;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
            }
          }
          this.state = 526;
          this.match(painless_parser.RP);
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  argument() {
    let localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, painless_parser.RULE_argument);
    try {
      this.state = 531;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 53, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 528;
            this.expression();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 529;
            this.lambda();
          }
          break;
        case 3:
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 530;
            this.funcref();
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  lambda() {
    let localctx = new LambdaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, painless_parser.RULE_lambda);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 546;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 82:
          case 83:
          case 84:
            {
              this.state = 533;
              this.lamtype();
            }
            break;
          case 7:
            {
              this.state = 534;
              this.match(painless_parser.LP);
              this.state = 543;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if ((_la - 82 & ~0x1F) === 0 && (1 << _la - 82 & 7) !== 0) {
                {
                  this.state = 535;
                  this.lamtype();
                  this.state = 540;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  while (_la === 12) {
                    {
                      {
                        this.state = 536;
                        this.match(painless_parser.COMMA);
                        this.state = 537;
                        this.lamtype();
                      }
                    }
                    this.state = 542;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                  }
                }
              }
              this.state = 545;
              this.match(painless_parser.RP);
            }
            break;
          default:
            throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
        }
        this.state = 548;
        this.match(painless_parser.ARROW);
        this.state = 551;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 3:
            {
              this.state = 549;
              this.block();
            }
            break;
          case 5:
          case 7:
          case 9:
          case 23:
          case 29:
          case 30:
          case 34:
          case 35:
          case 59:
          case 60:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 84:
            {
              this.state = 550;
              this.expression();
            }
            break;
          default:
            throw new antlr4__WEBPACK_IMPORTED_MODULE_1__.NoViableAltException(this);
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  lamtype() {
    let localctx = new LamtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, painless_parser.RULE_lamtype);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 554;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 58, this._ctx)) {
          case 1:
            {
              this.state = 553;
              this.decltype();
            }
            break;
        }
        this.state = 556;
        this.match(painless_parser.ID);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  funcref() {
    let localctx = new FuncrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, painless_parser.RULE_funcref);
    try {
      this.state = 569;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 59, this._ctx)) {
        case 1:
          localctx = new ClassfuncrefContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 558;
            this.decltype();
            this.state = 559;
            this.match(painless_parser.REF);
            this.state = 560;
            this.match(painless_parser.ID);
          }
          break;
        case 2:
          localctx = new ConstructorfuncrefContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 562;
            this.decltype();
            this.state = 563;
            this.match(painless_parser.REF);
            this.state = 564;
            this.match(painless_parser.NEW);
          }
          break;
        case 3:
          localctx = new LocalfuncrefContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 566;
            this.match(painless_parser.THIS);
            this.state = 567;
            this.match(painless_parser.REF);
            this.state = 568;
            this.match(painless_parser.ID);
          }
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_1__.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 4:
        return this.rstatement_sempred(localctx, predIndex);
      case 16:
        return this.noncondexpression_sempred(localctx, predIndex);
    }
    return true;
  }
  rstatement_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this._input.LA(1) != painless_parser.ELSE;
    }
    return true;
  }
  noncondexpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.precpred(this._ctx, 13);
      case 2:
        return this.precpred(this._ctx, 12);
      case 3:
        return this.precpred(this._ctx, 11);
      case 4:
        return this.precpred(this._ctx, 10);
      case 5:
        return this.precpred(this._ctx, 9);
      case 6:
        return this.precpred(this._ctx, 7);
      case 7:
        return this.precpred(this._ctx, 6);
      case 8:
        return this.precpred(this._ctx, 5);
      case 9:
        return this.precpred(this._ctx, 4);
      case 10:
        return this.precpred(this._ctx, 3);
      case 11:
        return this.precpred(this._ctx, 2);
      case 12:
        return this.precpred(this._ctx, 1);
      case 13:
        return this.precpred(this._ctx, 8);
    }
    return true;
  }
  static get _ATN() {
    if (!painless_parser.__ATN) {
      painless_parser.__ATN = new antlr4__WEBPACK_IMPORTED_MODULE_1__.ATNDeserializer().deserialize(painless_parser._serializedATN);
    }
    return painless_parser.__ATN;
  }
}
_painless_parser = painless_parser;
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "WS", 1);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "COMMENT", 2);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "LBRACK", 3);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RBRACK", 4);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "LBRACE", 5);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RBRACE", 6);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "LP", 7);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RP", 8);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DOLLAR", 9);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DOT", 10);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "NSDOT", 11);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "COMMA", 12);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "SEMICOLON", 13);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "IF", 14);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "IN", 15);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ELSE", 16);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "WHILE", 17);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DO", 18);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "FOR", 19);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "CONTINUE", 20);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "BREAK", 21);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RETURN", 22);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "NEW", 23);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "TRY", 24);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "CATCH", 25);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "THROW", 26);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "THIS", 27);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "INSTANCEOF", 28);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "BOOLNOT", 29);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "BWNOT", 30);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "MUL", 31);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DIV", 32);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "REM", 33);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ADD", 34);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "SUB", 35);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "LSH", 36);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RSH", 37);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "USH", 38);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "LT", 39);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "LTE", 40);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "GT", 41);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "GTE", 42);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "EQ", 43);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "EQR", 44);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "NE", 45);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "NER", 46);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "BWAND", 47);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "XOR", 48);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "BWOR", 49);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "BOOLAND", 50);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "BOOLOR", 51);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "COND", 52);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "COLON", 53);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ELVIS", 54);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "REF", 55);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ARROW", 56);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "FIND", 57);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "MATCH", 58);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "INCR", 59);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DECR", 60);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ASSIGN", 61);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "AADD", 62);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ASUB", 63);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "AMUL", 64);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ADIV", 65);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "AREM", 66);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "AAND", 67);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "AXOR", 68);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "AOR", 69);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ALSH", 70);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ARSH", 71);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "AUSH", 72);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "OCTAL", 73);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "HEX", 74);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "INTEGER", 75);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DECIMAL", 76);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "STRING", 77);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "REGEX", 78);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "TRUE", 79);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "FALSE", 80);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "NULL", 81);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "PRIMITIVE", 82);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DEF", 83);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ID", 84);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DOTINTEGER", 85);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DOTID", 86);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "EOF", antlr4__WEBPACK_IMPORTED_MODULE_1__.Token.EOF);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_source", 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_function", 1);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_parameters", 2);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_statement", 3);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_rstatement", 4);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_dstatement", 5);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_trailer", 6);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_block", 7);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_empty", 8);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_initializer", 9);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_afterthought", 10);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_declaration", 11);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_decltype", 12);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_type", 13);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_declvar", 14);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_trap", 15);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_noncondexpression", 16);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_expression", 17);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_unary", 18);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_unarynotaddsub", 19);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_castexpression", 20);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_primordefcasttype", 21);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_refcasttype", 22);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_chain", 23);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_primary", 24);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_postfix", 25);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_postdot", 26);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_callinvoke", 27);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_fieldaccess", 28);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_braceaccess", 29);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_arrayinitializer", 30);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_listinitializer", 31);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_mapinitializer", 32);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_maptoken", 33);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_arguments", 34);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_argument", 35);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_lambda", 36);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_lamtype", 37);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "RULE_funcref", 38);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "literalNames", [null, null, null, "'{'", "'}'", "'['", "']'", "'('", "')'", "'$'", "'.'", "'?.'", "','", "';'", "'if'", "'in'", "'else'", "'while'", "'do'", "'for'", "'continue'", "'break'", "'return'", "'new'", "'try'", "'catch'", "'throw'", "'this'", "'instanceof'", "'!'", "'~'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", "'>>'", "'>>>'", "'<'", "'<='", "'>'", "'>='", "'=='", "'==='", "'!='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'?'", "':'", "'?:'", "'::'", "'->'", "'=~'", "'==~'", "'++'", "'--'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'<<='", "'>>='", "'>>>='", null, null, null, null, null, null, "'true'", "'false'", "'null'", null, "'def'"]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "symbolicNames", [null, "WS", "COMMENT", "LBRACK", "RBRACK", "LBRACE", "RBRACE", "LP", "RP", "DOLLAR", "DOT", "NSDOT", "COMMA", "SEMICOLON", "IF", "IN", "ELSE", "WHILE", "DO", "FOR", "CONTINUE", "BREAK", "RETURN", "NEW", "TRY", "CATCH", "THROW", "THIS", "INSTANCEOF", "BOOLNOT", "BWNOT", "MUL", "DIV", "REM", "ADD", "SUB", "LSH", "RSH", "USH", "LT", "LTE", "GT", "GTE", "EQ", "EQR", "NE", "NER", "BWAND", "XOR", "BWOR", "BOOLAND", "BOOLOR", "COND", "COLON", "ELVIS", "REF", "ARROW", "FIND", "MATCH", "INCR", "DECR", "ASSIGN", "AADD", "ASUB", "AMUL", "ADIV", "AREM", "AAND", "AXOR", "AOR", "ALSH", "ARSH", "AUSH", "OCTAL", "HEX", "INTEGER", "DECIMAL", "STRING", "REGEX", "TRUE", "FALSE", "NULL", "PRIMITIVE", "DEF", "ID", "DOTINTEGER", "DOTID"]);
// tslint:disable:no-trailing-whitespace
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "ruleNames", ["source", "function", "parameters", "statement", "rstatement", "dstatement", "trailer", "block", "empty", "initializer", "afterthought", "declaration", "decltype", "type", "declvar", "trap", "noncondexpression", "expression", "unary", "unarynotaddsub", "castexpression", "primordefcasttype", "refcasttype", "chain", "primary", "postfix", "postdot", "callinvoke", "fieldaccess", "braceaccess", "arrayinitializer", "listinitializer", "mapinitializer", "maptoken", "arguments", "argument", "lambda", "lamtype", "funcref"]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "_serializedATN", [4, 1, 86, 572, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 1, 0, 5, 0, 80, 8, 0, 10, 0, 12, 0, 83, 9, 0, 1, 0, 5, 0, 86, 8, 0, 10, 0, 12, 0, 89, 9, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 105, 8, 2, 10, 2, 12, 2, 108, 9, 2, 3, 2, 110, 8, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 118, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 128, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 136, 8, 4, 1, 4, 1, 4, 1, 4, 3, 4, 141, 8, 4, 1, 4, 1, 4, 3, 4, 145, 8, 4, 1, 4, 1, 4, 3, 4, 149, 8, 4, 1, 4, 1, 4, 1, 4, 3, 4, 154, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 4, 4, 176, 8, 4, 11, 4, 12, 4, 177, 3, 4, 180, 8, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 194, 8, 5, 1, 5, 1, 5, 1, 5, 3, 5, 199, 8, 5, 1, 6, 1, 6, 3, 6, 203, 8, 6, 1, 7, 1, 7, 5, 7, 207, 8, 7, 10, 7, 12, 7, 210, 9, 7, 1, 7, 3, 7, 213, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 3, 9, 221, 8, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 5, 11, 229, 8, 11, 10, 11, 12, 11, 232, 9, 11, 1, 12, 1, 12, 1, 12, 5, 12, 237, 8, 12, 10, 12, 12, 12, 240, 9, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 5, 13, 247, 8, 13, 10, 13, 12, 13, 250, 9, 13, 3, 13, 252, 8, 13, 1, 14, 1, 14, 1, 14, 3, 14, 257, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 308, 8, 16, 10, 16, 12, 16, 311, 9, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 324, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 331, 8, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 340, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 3, 20, 352, 8, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 4, 22, 359, 8, 22, 11, 22, 12, 22, 360, 1, 22, 1, 22, 1, 22, 4, 22, 366, 8, 22, 11, 22, 12, 22, 367, 1, 22, 1, 22, 1, 22, 5, 22, 373, 8, 22, 10, 22, 12, 22, 376, 9, 22, 1, 22, 1, 22, 5, 22, 380, 8, 22, 10, 22, 12, 22, 383, 9, 22, 3, 22, 385, 8, 22, 1, 23, 1, 23, 5, 23, 389, 8, 23, 10, 23, 12, 23, 392, 9, 23, 1, 23, 3, 23, 395, 8, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 416, 8, 24, 1, 25, 1, 25, 1, 25, 3, 25, 421, 8, 25, 1, 26, 1, 26, 3, 26, 425, 8, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 4, 30, 444, 8, 30, 11, 30, 12, 30, 445, 1, 30, 1, 30, 5, 30, 450, 8, 30, 10, 30, 12, 30, 453, 9, 30, 3, 30, 455, 8, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 5, 30, 465, 8, 30, 10, 30, 12, 30, 468, 9, 30, 3, 30, 470, 8, 30, 1, 30, 1, 30, 5, 30, 474, 8, 30, 10, 30, 12, 30, 477, 9, 30, 3, 30, 479, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 485, 8, 31, 10, 31, 12, 31, 488, 9, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 494, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 5, 32, 500, 8, 32, 10, 32, 12, 32, 503, 9, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 510, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 5, 34, 520, 8, 34, 10, 34, 12, 34, 523, 9, 34, 3, 34, 525, 8, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 3, 35, 532, 8, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 5, 36, 539, 8, 36, 10, 36, 12, 36, 542, 9, 36, 3, 36, 544, 8, 36, 1, 36, 3, 36, 547, 8, 36, 1, 36, 1, 36, 1, 36, 3, 36, 552, 8, 36, 1, 37, 3, 37, 555, 8, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3, 38, 570, 8, 38, 1, 38, 0, 1, 32, 39, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 0, 15, 1, 1, 13, 13, 1, 0, 31, 33, 1, 0, 34, 35, 1, 0, 57, 58, 1, 0, 36, 38, 1, 0, 39, 42, 1, 0, 43, 46, 1, 0, 61, 72, 1, 0, 59, 60, 1, 0, 29, 30, 1, 0, 82, 83, 1, 0, 73, 76, 2, 0, 9, 9, 84, 84, 1, 0, 10, 11, 1, 0, 85, 86, 631, 0, 81, 1, 0, 0, 0, 2, 92, 1, 0, 0, 0, 4, 97, 1, 0, 0, 0, 6, 117, 1, 0, 0, 0, 8, 179, 1, 0, 0, 0, 10, 198, 1, 0, 0, 0, 12, 202, 1, 0, 0, 0, 14, 204, 1, 0, 0, 0, 16, 216, 1, 0, 0, 0, 18, 220, 1, 0, 0, 0, 20, 222, 1, 0, 0, 0, 22, 224, 1, 0, 0, 0, 24, 233, 1, 0, 0, 0, 26, 251, 1, 0, 0, 0, 28, 253, 1, 0, 0, 0, 30, 258, 1, 0, 0, 0, 32, 265, 1, 0, 0, 0, 34, 323, 1, 0, 0, 0, 36, 330, 1, 0, 0, 0, 38, 339, 1, 0, 0, 0, 40, 351, 1, 0, 0, 0, 42, 353, 1, 0, 0, 0, 44, 384, 1, 0, 0, 0, 46, 394, 1, 0, 0, 0, 48, 415, 1, 0, 0, 0, 50, 420, 1, 0, 0, 0, 52, 424, 1, 0, 0, 0, 54, 426, 1, 0, 0, 0, 56, 430, 1, 0, 0, 0, 58, 433, 1, 0, 0, 0, 60, 478, 1, 0, 0, 0, 62, 493, 1, 0, 0, 0, 64, 509, 1, 0, 0, 0, 66, 511, 1, 0, 0, 0, 68, 515, 1, 0, 0, 0, 70, 531, 1, 0, 0, 0, 72, 546, 1, 0, 0, 0, 74, 554, 1, 0, 0, 0, 76, 569, 1, 0, 0, 0, 78, 80, 3, 2, 1, 0, 79, 78, 1, 0, 0, 0, 80, 83, 1, 0, 0, 0, 81, 79, 1, 0, 0, 0, 81, 82, 1, 0, 0, 0, 82, 87, 1, 0, 0, 0, 83, 81, 1, 0, 0, 0, 84, 86, 3, 6, 3, 0, 85, 84, 1, 0, 0, 0, 86, 89, 1, 0, 0, 0, 87, 85, 1, 0, 0, 0, 87, 88, 1, 0, 0, 0, 88, 90, 1, 0, 0, 0, 89, 87, 1, 0, 0, 0, 90, 91, 5, 0, 0, 1, 91, 1, 1, 0, 0, 0, 92, 93, 3, 24, 12, 0, 93, 94, 5, 84, 0, 0, 94, 95, 3, 4, 2, 0, 95, 96, 3, 14, 7, 0, 96, 3, 1, 0, 0, 0, 97, 109, 5, 7, 0, 0, 98, 99, 3, 24, 12, 0, 99, 106, 5, 84, 0, 0, 100, 101, 5, 12, 0, 0, 101, 102, 3, 24, 12, 0, 102, 103, 5, 84, 0, 0, 103, 105, 1, 0, 0, 0, 104, 100, 1, 0, 0, 0, 105, 108, 1, 0, 0, 0, 106, 104, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 110, 1, 0, 0, 0, 108, 106, 1, 0, 0, 0, 109, 98, 1, 0, 0, 0, 109, 110, 1, 0, 0, 0, 110, 111, 1, 0, 0, 0, 111, 112, 5, 8, 0, 0, 112, 5, 1, 0, 0, 0, 113, 118, 3, 8, 4, 0, 114, 115, 3, 10, 5, 0, 115, 116, 7, 0, 0, 0, 116, 118, 1, 0, 0, 0, 117, 113, 1, 0, 0, 0, 117, 114, 1, 0, 0, 0, 118, 7, 1, 0, 0, 0, 119, 120, 5, 14, 0, 0, 120, 121, 5, 7, 0, 0, 121, 122, 3, 34, 17, 0, 122, 123, 5, 8, 0, 0, 123, 127, 3, 12, 6, 0, 124, 125, 5, 16, 0, 0, 125, 128, 3, 12, 6, 0, 126, 128, 4, 4, 0, 0, 127, 124, 1, 0, 0, 0, 127, 126, 1, 0, 0, 0, 128, 180, 1, 0, 0, 0, 129, 130, 5, 17, 0, 0, 130, 131, 5, 7, 0, 0, 131, 132, 3, 34, 17, 0, 132, 135, 5, 8, 0, 0, 133, 136, 3, 12, 6, 0, 134, 136, 3, 16, 8, 0, 135, 133, 1, 0, 0, 0, 135, 134, 1, 0, 0, 0, 136, 180, 1, 0, 0, 0, 137, 138, 5, 19, 0, 0, 138, 140, 5, 7, 0, 0, 139, 141, 3, 18, 9, 0, 140, 139, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 142, 1, 0, 0, 0, 142, 144, 5, 13, 0, 0, 143, 145, 3, 34, 17, 0, 144, 143, 1, 0, 0, 0, 144, 145, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 148, 5, 13, 0, 0, 147, 149, 3, 20, 10, 0, 148, 147, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149, 150, 1, 0, 0, 0, 150, 153, 5, 8, 0, 0, 151, 154, 3, 12, 6, 0, 152, 154, 3, 16, 8, 0, 153, 151, 1, 0, 0, 0, 153, 152, 1, 0, 0, 0, 154, 180, 1, 0, 0, 0, 155, 156, 5, 19, 0, 0, 156, 157, 5, 7, 0, 0, 157, 158, 3, 24, 12, 0, 158, 159, 5, 84, 0, 0, 159, 160, 5, 53, 0, 0, 160, 161, 3, 34, 17, 0, 161, 162, 5, 8, 0, 0, 162, 163, 3, 12, 6, 0, 163, 180, 1, 0, 0, 0, 164, 165, 5, 19, 0, 0, 165, 166, 5, 7, 0, 0, 166, 167, 5, 84, 0, 0, 167, 168, 5, 15, 0, 0, 168, 169, 3, 34, 17, 0, 169, 170, 5, 8, 0, 0, 170, 171, 3, 12, 6, 0, 171, 180, 1, 0, 0, 0, 172, 173, 5, 24, 0, 0, 173, 175, 3, 14, 7, 0, 174, 176, 3, 30, 15, 0, 175, 174, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 180, 1, 0, 0, 0, 179, 119, 1, 0, 0, 0, 179, 129, 1, 0, 0, 0, 179, 137, 1, 0, 0, 0, 179, 155, 1, 0, 0, 0, 179, 164, 1, 0, 0, 0, 179, 172, 1, 0, 0, 0, 180, 9, 1, 0, 0, 0, 181, 182, 5, 18, 0, 0, 182, 183, 3, 14, 7, 0, 183, 184, 5, 17, 0, 0, 184, 185, 5, 7, 0, 0, 185, 186, 3, 34, 17, 0, 186, 187, 5, 8, 0, 0, 187, 199, 1, 0, 0, 0, 188, 199, 3, 22, 11, 0, 189, 199, 5, 20, 0, 0, 190, 199, 5, 21, 0, 0, 191, 193, 5, 22, 0, 0, 192, 194, 3, 34, 17, 0, 193, 192, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 199, 1, 0, 0, 0, 195, 196, 5, 26, 0, 0, 196, 199, 3, 34, 17, 0, 197, 199, 3, 34, 17, 0, 198, 181, 1, 0, 0, 0, 198, 188, 1, 0, 0, 0, 198, 189, 1, 0, 0, 0, 198, 190, 1, 0, 0, 0, 198, 191, 1, 0, 0, 0, 198, 195, 1, 0, 0, 0, 198, 197, 1, 0, 0, 0, 199, 11, 1, 0, 0, 0, 200, 203, 3, 14, 7, 0, 201, 203, 3, 6, 3, 0, 202, 200, 1, 0, 0, 0, 202, 201, 1, 0, 0, 0, 203, 13, 1, 0, 0, 0, 204, 208, 5, 3, 0, 0, 205, 207, 3, 6, 3, 0, 206, 205, 1, 0, 0, 0, 207, 210, 1, 0, 0, 0, 208, 206, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209, 212, 1, 0, 0, 0, 210, 208, 1, 0, 0, 0, 211, 213, 3, 10, 5, 0, 212, 211, 1, 0, 0, 0, 212, 213, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 215, 5, 4, 0, 0, 215, 15, 1, 0, 0, 0, 216, 217, 5, 13, 0, 0, 217, 17, 1, 0, 0, 0, 218, 221, 3, 22, 11, 0, 219, 221, 3, 34, 17, 0, 220, 218, 1, 0, 0, 0, 220, 219, 1, 0, 0, 0, 221, 19, 1, 0, 0, 0, 222, 223, 3, 34, 17, 0, 223, 21, 1, 0, 0, 0, 224, 225, 3, 24, 12, 0, 225, 230, 3, 28, 14, 0, 226, 227, 5, 12, 0, 0, 227, 229, 3, 28, 14, 0, 228, 226, 1, 0, 0, 0, 229, 232, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 230, 231, 1, 0, 0, 0, 231, 23, 1, 0, 0, 0, 232, 230, 1, 0, 0, 0, 233, 238, 3, 26, 13, 0, 234, 235, 5, 5, 0, 0, 235, 237, 5, 6, 0, 0, 236, 234, 1, 0, 0, 0, 237, 240, 1, 0, 0, 0, 238, 236, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 25, 1, 0, 0, 0, 240, 238, 1, 0, 0, 0, 241, 252, 5, 83, 0, 0, 242, 252, 5, 82, 0, 0, 243, 248, 5, 84, 0, 0, 244, 245, 5, 10, 0, 0, 245, 247, 5, 86, 0, 0, 246, 244, 1, 0, 0, 0, 247, 250, 1, 0, 0, 0, 248, 246, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 252, 1, 0, 0, 0, 250, 248, 1, 0, 0, 0, 251, 241, 1, 0, 0, 0, 251, 242, 1, 0, 0, 0, 251, 243, 1, 0, 0, 0, 252, 27, 1, 0, 0, 0, 253, 256, 5, 84, 0, 0, 254, 255, 5, 61, 0, 0, 255, 257, 3, 34, 17, 0, 256, 254, 1, 0, 0, 0, 256, 257, 1, 0, 0, 0, 257, 29, 1, 0, 0, 0, 258, 259, 5, 25, 0, 0, 259, 260, 5, 7, 0, 0, 260, 261, 3, 26, 13, 0, 261, 262, 5, 84, 0, 0, 262, 263, 5, 8, 0, 0, 263, 264, 3, 14, 7, 0, 264, 31, 1, 0, 0, 0, 265, 266, 6, 16, -1, 0, 266, 267, 3, 36, 18, 0, 267, 309, 1, 0, 0, 0, 268, 269, 10, 13, 0, 0, 269, 270, 7, 1, 0, 0, 270, 308, 3, 32, 16, 14, 271, 272, 10, 12, 0, 0, 272, 273, 7, 2, 0, 0, 273, 308, 3, 32, 16, 13, 274, 275, 10, 11, 0, 0, 275, 276, 7, 3, 0, 0, 276, 308, 3, 32, 16, 12, 277, 278, 10, 10, 0, 0, 278, 279, 7, 4, 0, 0, 279, 308, 3, 32, 16, 11, 280, 281, 10, 9, 0, 0, 281, 282, 7, 5, 0, 0, 282, 308, 3, 32, 16, 10, 283, 284, 10, 7, 0, 0, 284, 285, 7, 6, 0, 0, 285, 308, 3, 32, 16, 8, 286, 287, 10, 6, 0, 0, 287, 288, 5, 47, 0, 0, 288, 308, 3, 32, 16, 7, 289, 290, 10, 5, 0, 0, 290, 291, 5, 48, 0, 0, 291, 308, 3, 32, 16, 6, 292, 293, 10, 4, 0, 0, 293, 294, 5, 49, 0, 0, 294, 308, 3, 32, 16, 5, 295, 296, 10, 3, 0, 0, 296, 297, 5, 50, 0, 0, 297, 308, 3, 32, 16, 4, 298, 299, 10, 2, 0, 0, 299, 300, 5, 51, 0, 0, 300, 308, 3, 32, 16, 3, 301, 302, 10, 1, 0, 0, 302, 303, 5, 54, 0, 0, 303, 308, 3, 32, 16, 1, 304, 305, 10, 8, 0, 0, 305, 306, 5, 28, 0, 0, 306, 308, 3, 24, 12, 0, 307, 268, 1, 0, 0, 0, 307, 271, 1, 0, 0, 0, 307, 274, 1, 0, 0, 0, 307, 277, 1, 0, 0, 0, 307, 280, 1, 0, 0, 0, 307, 283, 1, 0, 0, 0, 307, 286, 1, 0, 0, 0, 307, 289, 1, 0, 0, 0, 307, 292, 1, 0, 0, 0, 307, 295, 1, 0, 0, 0, 307, 298, 1, 0, 0, 0, 307, 301, 1, 0, 0, 0, 307, 304, 1, 0, 0, 0, 308, 311, 1, 0, 0, 0, 309, 307, 1, 0, 0, 0, 309, 310, 1, 0, 0, 0, 310, 33, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0, 312, 324, 3, 32, 16, 0, 313, 314, 3, 32, 16, 0, 314, 315, 5, 52, 0, 0, 315, 316, 3, 34, 17, 0, 316, 317, 5, 53, 0, 0, 317, 318, 3, 34, 17, 0, 318, 324, 1, 0, 0, 0, 319, 320, 3, 32, 16, 0, 320, 321, 7, 7, 0, 0, 321, 322, 3, 34, 17, 0, 322, 324, 1, 0, 0, 0, 323, 312, 1, 0, 0, 0, 323, 313, 1, 0, 0, 0, 323, 319, 1, 0, 0, 0, 324, 35, 1, 0, 0, 0, 325, 326, 7, 8, 0, 0, 326, 331, 3, 46, 23, 0, 327, 328, 7, 2, 0, 0, 328, 331, 3, 36, 18, 0, 329, 331, 3, 38, 19, 0, 330, 325, 1, 0, 0, 0, 330, 327, 1, 0, 0, 0, 330, 329, 1, 0, 0, 0, 331, 37, 1, 0, 0, 0, 332, 340, 3, 46, 23, 0, 333, 334, 3, 46, 23, 0, 334, 335, 7, 8, 0, 0, 335, 340, 1, 0, 0, 0, 336, 337, 7, 9, 0, 0, 337, 340, 3, 36, 18, 0, 338, 340, 3, 40, 20, 0, 339, 332, 1, 0, 0, 0, 339, 333, 1, 0, 0, 0, 339, 336, 1, 0, 0, 0, 339, 338, 1, 0, 0, 0, 340, 39, 1, 0, 0, 0, 341, 342, 5, 7, 0, 0, 342, 343, 3, 42, 21, 0, 343, 344, 5, 8, 0, 0, 344, 345, 3, 36, 18, 0, 345, 352, 1, 0, 0, 0, 346, 347, 5, 7, 0, 0, 347, 348, 3, 44, 22, 0, 348, 349, 5, 8, 0, 0, 349, 350, 3, 38, 19, 0, 350, 352, 1, 0, 0, 0, 351, 341, 1, 0, 0, 0, 351, 346, 1, 0, 0, 0, 352, 41, 1, 0, 0, 0, 353, 354, 7, 10, 0, 0, 354, 43, 1, 0, 0, 0, 355, 358, 5, 83, 0, 0, 356, 357, 5, 5, 0, 0, 357, 359, 5, 6, 0, 0, 358, 356, 1, 0, 0, 0, 359, 360, 1, 0, 0, 0, 360, 358, 1, 0, 0, 0, 360, 361, 1, 0, 0, 0, 361, 385, 1, 0, 0, 0, 362, 365, 5, 82, 0, 0, 363, 364, 5, 5, 0, 0, 364, 366, 5, 6, 0, 0, 365, 363, 1, 0, 0, 0, 366, 367, 1, 0, 0, 0, 367, 365, 1, 0, 0, 0, 367, 368, 1, 0, 0, 0, 368, 385, 1, 0, 0, 0, 369, 374, 5, 84, 0, 0, 370, 371, 5, 10, 0, 0, 371, 373, 5, 86, 0, 0, 372, 370, 1, 0, 0, 0, 373, 376, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375, 381, 1, 0, 0, 0, 376, 374, 1, 0, 0, 0, 377, 378, 5, 5, 0, 0, 378, 380, 5, 6, 0, 0, 379, 377, 1, 0, 0, 0, 380, 383, 1, 0, 0, 0, 381, 379, 1, 0, 0, 0, 381, 382, 1, 0, 0, 0, 382, 385, 1, 0, 0, 0, 383, 381, 1, 0, 0, 0, 384, 355, 1, 0, 0, 0, 384, 362, 1, 0, 0, 0, 384, 369, 1, 0, 0, 0, 385, 45, 1, 0, 0, 0, 386, 390, 3, 48, 24, 0, 387, 389, 3, 50, 25, 0, 388, 387, 1, 0, 0, 0, 389, 392, 1, 0, 0, 0, 390, 388, 1, 0, 0, 0, 390, 391, 1, 0, 0, 0, 391, 395, 1, 0, 0, 0, 392, 390, 1, 0, 0, 0, 393, 395, 3, 60, 30, 0, 394, 386, 1, 0, 0, 0, 394, 393, 1, 0, 0, 0, 395, 47, 1, 0, 0, 0, 396, 397, 5, 7, 0, 0, 397, 398, 3, 34, 17, 0, 398, 399, 5, 8, 0, 0, 399, 416, 1, 0, 0, 0, 400, 416, 7, 11, 0, 0, 401, 416, 5, 79, 0, 0, 402, 416, 5, 80, 0, 0, 403, 416, 5, 81, 0, 0, 404, 416, 5, 77, 0, 0, 405, 416, 5, 78, 0, 0, 406, 416, 3, 62, 31, 0, 407, 416, 3, 64, 32, 0, 408, 416, 5, 84, 0, 0, 409, 410, 7, 12, 0, 0, 410, 416, 3, 68, 34, 0, 411, 412, 5, 23, 0, 0, 412, 413, 3, 26, 13, 0, 413, 414, 3, 68, 34, 0, 414, 416, 1, 0, 0, 0, 415, 396, 1, 0, 0, 0, 415, 400, 1, 0, 0, 0, 415, 401, 1, 0, 0, 0, 415, 402, 1, 0, 0, 0, 415, 403, 1, 0, 0, 0, 415, 404, 1, 0, 0, 0, 415, 405, 1, 0, 0, 0, 415, 406, 1, 0, 0, 0, 415, 407, 1, 0, 0, 0, 415, 408, 1, 0, 0, 0, 415, 409, 1, 0, 0, 0, 415, 411, 1, 0, 0, 0, 416, 49, 1, 0, 0, 0, 417, 421, 3, 54, 27, 0, 418, 421, 3, 56, 28, 0, 419, 421, 3, 58, 29, 0, 420, 417, 1, 0, 0, 0, 420, 418, 1, 0, 0, 0, 420, 419, 1, 0, 0, 0, 421, 51, 1, 0, 0, 0, 422, 425, 3, 54, 27, 0, 423, 425, 3, 56, 28, 0, 424, 422, 1, 0, 0, 0, 424, 423, 1, 0, 0, 0, 425, 53, 1, 0, 0, 0, 426, 427, 7, 13, 0, 0, 427, 428, 5, 86, 0, 0, 428, 429, 3, 68, 34, 0, 429, 55, 1, 0, 0, 0, 430, 431, 7, 13, 0, 0, 431, 432, 7, 14, 0, 0, 432, 57, 1, 0, 0, 0, 433, 434, 5, 5, 0, 0, 434, 435, 3, 34, 17, 0, 435, 436, 5, 6, 0, 0, 436, 59, 1, 0, 0, 0, 437, 438, 5, 23, 0, 0, 438, 443, 3, 26, 13, 0, 439, 440, 5, 5, 0, 0, 440, 441, 3, 34, 17, 0, 441, 442, 5, 6, 0, 0, 442, 444, 1, 0, 0, 0, 443, 439, 1, 0, 0, 0, 444, 445, 1, 0, 0, 0, 445, 443, 1, 0, 0, 0, 445, 446, 1, 0, 0, 0, 446, 454, 1, 0, 0, 0, 447, 451, 3, 52, 26, 0, 448, 450, 3, 50, 25, 0, 449, 448, 1, 0, 0, 0, 450, 453, 1, 0, 0, 0, 451, 449, 1, 0, 0, 0, 451, 452, 1, 0, 0, 0, 452, 455, 1, 0, 0, 0, 453, 451, 1, 0, 0, 0, 454, 447, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 479, 1, 0, 0, 0, 456, 457, 5, 23, 0, 0, 457, 458, 3, 26, 13, 0, 458, 459, 5, 5, 0, 0, 459, 460, 5, 6, 0, 0, 460, 469, 5, 3, 0, 0, 461, 466, 3, 34, 17, 0, 462, 463, 5, 12, 0, 0, 463, 465, 3, 34, 17, 0, 464, 462, 1, 0, 0, 0, 465, 468, 1, 0, 0, 0, 466, 464, 1, 0, 0, 0, 466, 467, 1, 0, 0, 0, 467, 470, 1, 0, 0, 0, 468, 466, 1, 0, 0, 0, 469, 461, 1, 0, 0, 0, 469, 470, 1, 0, 0, 0, 470, 471, 1, 0, 0, 0, 471, 475, 5, 4, 0, 0, 472, 474, 3, 50, 25, 0, 473, 472, 1, 0, 0, 0, 474, 477, 1, 0, 0, 0, 475, 473, 1, 0, 0, 0, 475, 476, 1, 0, 0, 0, 476, 479, 1, 0, 0, 0, 477, 475, 1, 0, 0, 0, 478, 437, 1, 0, 0, 0, 478, 456, 1, 0, 0, 0, 479, 61, 1, 0, 0, 0, 480, 481, 5, 5, 0, 0, 481, 486, 3, 34, 17, 0, 482, 483, 5, 12, 0, 0, 483, 485, 3, 34, 17, 0, 484, 482, 1, 0, 0, 0, 485, 488, 1, 0, 0, 0, 486, 484, 1, 0, 0, 0, 486, 487, 1, 0, 0, 0, 487, 489, 1, 0, 0, 0, 488, 486, 1, 0, 0, 0, 489, 490, 5, 6, 0, 0, 490, 494, 1, 0, 0, 0, 491, 492, 5, 5, 0, 0, 492, 494, 5, 6, 0, 0, 493, 480, 1, 0, 0, 0, 493, 491, 1, 0, 0, 0, 494, 63, 1, 0, 0, 0, 495, 496, 5, 5, 0, 0, 496, 501, 3, 66, 33, 0, 497, 498, 5, 12, 0, 0, 498, 500, 3, 66, 33, 0, 499, 497, 1, 0, 0, 0, 500, 503, 1, 0, 0, 0, 501, 499, 1, 0, 0, 0, 501, 502, 1, 0, 0, 0, 502, 504, 1, 0, 0, 0, 503, 501, 1, 0, 0, 0, 504, 505, 5, 6, 0, 0, 505, 510, 1, 0, 0, 0, 506, 507, 5, 5, 0, 0, 507, 508, 5, 53, 0, 0, 508, 510, 5, 6, 0, 0, 509, 495, 1, 0, 0, 0, 509, 506, 1, 0, 0, 0, 510, 65, 1, 0, 0, 0, 511, 512, 3, 34, 17, 0, 512, 513, 5, 53, 0, 0, 513, 514, 3, 34, 17, 0, 514, 67, 1, 0, 0, 0, 515, 524, 5, 7, 0, 0, 516, 521, 3, 70, 35, 0, 517, 518, 5, 12, 0, 0, 518, 520, 3, 70, 35, 0, 519, 517, 1, 0, 0, 0, 520, 523, 1, 0, 0, 0, 521, 519, 1, 0, 0, 0, 521, 522, 1, 0, 0, 0, 522, 525, 1, 0, 0, 0, 523, 521, 1, 0, 0, 0, 524, 516, 1, 0, 0, 0, 524, 525, 1, 0, 0, 0, 525, 526, 1, 0, 0, 0, 526, 527, 5, 8, 0, 0, 527, 69, 1, 0, 0, 0, 528, 532, 3, 34, 17, 0, 529, 532, 3, 72, 36, 0, 530, 532, 3, 76, 38, 0, 531, 528, 1, 0, 0, 0, 531, 529, 1, 0, 0, 0, 531, 530, 1, 0, 0, 0, 532, 71, 1, 0, 0, 0, 533, 547, 3, 74, 37, 0, 534, 543, 5, 7, 0, 0, 535, 540, 3, 74, 37, 0, 536, 537, 5, 12, 0, 0, 537, 539, 3, 74, 37, 0, 538, 536, 1, 0, 0, 0, 539, 542, 1, 0, 0, 0, 540, 538, 1, 0, 0, 0, 540, 541, 1, 0, 0, 0, 541, 544, 1, 0, 0, 0, 542, 540, 1, 0, 0, 0, 543, 535, 1, 0, 0, 0, 543, 544, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 547, 5, 8, 0, 0, 546, 533, 1, 0, 0, 0, 546, 534, 1, 0, 0, 0, 547, 548, 1, 0, 0, 0, 548, 551, 5, 56, 0, 0, 549, 552, 3, 14, 7, 0, 550, 552, 3, 34, 17, 0, 551, 549, 1, 0, 0, 0, 551, 550, 1, 0, 0, 0, 552, 73, 1, 0, 0, 0, 553, 555, 3, 24, 12, 0, 554, 553, 1, 0, 0, 0, 554, 555, 1, 0, 0, 0, 555, 556, 1, 0, 0, 0, 556, 557, 5, 84, 0, 0, 557, 75, 1, 0, 0, 0, 558, 559, 3, 24, 12, 0, 559, 560, 5, 55, 0, 0, 560, 561, 5, 84, 0, 0, 561, 570, 1, 0, 0, 0, 562, 563, 3, 24, 12, 0, 563, 564, 5, 55, 0, 0, 564, 565, 5, 23, 0, 0, 565, 570, 1, 0, 0, 0, 566, 567, 5, 27, 0, 0, 567, 568, 5, 55, 0, 0, 568, 570, 5, 84, 0, 0, 569, 558, 1, 0, 0, 0, 569, 562, 1, 0, 0, 0, 569, 566, 1, 0, 0, 0, 570, 77, 1, 0, 0, 0, 60, 81, 87, 106, 109, 117, 127, 135, 140, 144, 148, 153, 177, 179, 193, 198, 202, 208, 212, 220, 230, 238, 248, 251, 256, 307, 309, 323, 330, 339, 351, 360, 367, 374, 381, 384, 390, 394, 415, 420, 424, 445, 451, 454, 466, 469, 475, 478, 486, 493, 501, 509, 521, 524, 531, 540, 543, 546, 551, 554, 569]);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "__ATN", void 0);
(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(painless_parser, "DecisionsToDFA", _painless_parser._ATN.decisionToState.map((ds, index) => new antlr4__WEBPACK_IMPORTED_MODULE_1__.DFA(ds, index)));
class SourceContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  EOF() {
    return this.getToken(painless_parser.EOF, 0);
  }
  function__list() {
    return this.getTypedRuleContexts(FunctionContext);
  }
  function_(i) {
    return this.getTypedRuleContext(FunctionContext, i);
  }
  statement_list() {
    return this.getTypedRuleContexts(StatementContext);
  }
  statement(i) {
    return this.getTypedRuleContext(StatementContext, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_source;
  }
  enterRule(listener) {
    if (listener.enterSource) {
      listener.enterSource(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSource) {
      listener.exitSource(this);
    }
  }
}
class FunctionContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  decltype() {
    return this.getTypedRuleContext(DecltypeContext, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  parameters() {
    return this.getTypedRuleContext(ParametersContext, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_function;
  }
  enterRule(listener) {
    if (listener.enterFunction) {
      listener.enterFunction(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunction) {
      listener.exitFunction(this);
    }
  }
}
class ParametersContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  decltype_list() {
    return this.getTypedRuleContexts(DecltypeContext);
  }
  decltype(i) {
    return this.getTypedRuleContext(DecltypeContext, i);
  }
  ID_list() {
    return this.getTokens(painless_parser.ID);
  }
  ID(i) {
    return this.getToken(painless_parser.ID, i);
  }
  COMMA_list() {
    return this.getTokens(painless_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(painless_parser.COMMA, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_parameters;
  }
  enterRule(listener) {
    if (listener.enterParameters) {
      listener.enterParameters(this);
    }
  }
  exitRule(listener) {
    if (listener.exitParameters) {
      listener.exitParameters(this);
    }
  }
}
class StatementContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  rstatement() {
    return this.getTypedRuleContext(RstatementContext, 0);
  }
  dstatement() {
    return this.getTypedRuleContext(DstatementContext, 0);
  }
  SEMICOLON() {
    return this.getToken(painless_parser.SEMICOLON, 0);
  }
  EOF() {
    return this.getToken(painless_parser.EOF, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_statement;
  }
  enterRule(listener) {
    if (listener.enterStatement) {
      listener.enterStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStatement) {
      listener.exitStatement(this);
    }
  }
}
class RstatementContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_rstatement;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class ForContext extends RstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  FOR() {
    return this.getToken(painless_parser.FOR, 0);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  SEMICOLON_list() {
    return this.getTokens(painless_parser.SEMICOLON);
  }
  SEMICOLON(i) {
    return this.getToken(painless_parser.SEMICOLON, i);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  trailer() {
    return this.getTypedRuleContext(TrailerContext, 0);
  }
  empty() {
    return this.getTypedRuleContext(EmptyContext, 0);
  }
  initializer() {
    return this.getTypedRuleContext(InitializerContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  afterthought() {
    return this.getTypedRuleContext(AfterthoughtContext, 0);
  }
  enterRule(listener) {
    if (listener.enterFor) {
      listener.enterFor(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFor) {
      listener.exitFor(this);
    }
  }
}
class TryContext extends RstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  TRY() {
    return this.getToken(painless_parser.TRY, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  trap_list() {
    return this.getTypedRuleContexts(TrapContext);
  }
  trap(i) {
    return this.getTypedRuleContext(TrapContext, i);
  }
  enterRule(listener) {
    if (listener.enterTry) {
      listener.enterTry(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTry) {
      listener.exitTry(this);
    }
  }
}
class WhileContext extends RstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  WHILE() {
    return this.getToken(painless_parser.WHILE, 0);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  trailer() {
    return this.getTypedRuleContext(TrailerContext, 0);
  }
  empty() {
    return this.getTypedRuleContext(EmptyContext, 0);
  }
  enterRule(listener) {
    if (listener.enterWhile) {
      listener.enterWhile(this);
    }
  }
  exitRule(listener) {
    if (listener.exitWhile) {
      listener.exitWhile(this);
    }
  }
}
class IneachContext extends RstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  FOR() {
    return this.getToken(painless_parser.FOR, 0);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  IN() {
    return this.getToken(painless_parser.IN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  trailer() {
    return this.getTypedRuleContext(TrailerContext, 0);
  }
  enterRule(listener) {
    if (listener.enterIneach) {
      listener.enterIneach(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIneach) {
      listener.exitIneach(this);
    }
  }
}
class IfContext extends RstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  IF() {
    return this.getToken(painless_parser.IF, 0);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  trailer_list() {
    return this.getTypedRuleContexts(TrailerContext);
  }
  trailer(i) {
    return this.getTypedRuleContext(TrailerContext, i);
  }
  ELSE() {
    return this.getToken(painless_parser.ELSE, 0);
  }
  enterRule(listener) {
    if (listener.enterIf) {
      listener.enterIf(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIf) {
      listener.exitIf(this);
    }
  }
}
class EachContext extends RstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  FOR() {
    return this.getToken(painless_parser.FOR, 0);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  decltype() {
    return this.getTypedRuleContext(DecltypeContext, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  COLON() {
    return this.getToken(painless_parser.COLON, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  trailer() {
    return this.getTypedRuleContext(TrailerContext, 0);
  }
  enterRule(listener) {
    if (listener.enterEach) {
      listener.enterEach(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEach) {
      listener.exitEach(this);
    }
  }
}
class DstatementContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_dstatement;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class DeclContext extends DstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  enterRule(listener) {
    if (listener.enterDecl) {
      listener.enterDecl(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDecl) {
      listener.exitDecl(this);
    }
  }
}
class BreakContext extends DstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  BREAK() {
    return this.getToken(painless_parser.BREAK, 0);
  }
  enterRule(listener) {
    if (listener.enterBreak) {
      listener.enterBreak(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBreak) {
      listener.exitBreak(this);
    }
  }
}
class ThrowContext extends DstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  THROW() {
    return this.getToken(painless_parser.THROW, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterThrow) {
      listener.enterThrow(this);
    }
  }
  exitRule(listener) {
    if (listener.exitThrow) {
      listener.exitThrow(this);
    }
  }
}
class ContinueContext extends DstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  CONTINUE() {
    return this.getToken(painless_parser.CONTINUE, 0);
  }
  enterRule(listener) {
    if (listener.enterContinue) {
      listener.enterContinue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitContinue) {
      listener.exitContinue(this);
    }
  }
}
class ExprContext extends DstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterExpr) {
      listener.enterExpr(this);
    }
  }
  exitRule(listener) {
    if (listener.exitExpr) {
      listener.exitExpr(this);
    }
  }
}
class DoContext extends DstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  DO() {
    return this.getToken(painless_parser.DO, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  WHILE() {
    return this.getToken(painless_parser.WHILE, 0);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  enterRule(listener) {
    if (listener.enterDo) {
      listener.enterDo(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDo) {
      listener.exitDo(this);
    }
  }
}
class ReturnContext extends DstatementContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  RETURN() {
    return this.getToken(painless_parser.RETURN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterReturn) {
      listener.enterReturn(this);
    }
  }
  exitRule(listener) {
    if (listener.exitReturn) {
      listener.exitReturn(this);
    }
  }
}
class TrailerContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  statement() {
    return this.getTypedRuleContext(StatementContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_trailer;
  }
  enterRule(listener) {
    if (listener.enterTrailer) {
      listener.enterTrailer(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTrailer) {
      listener.exitTrailer(this);
    }
  }
}
class BlockContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  LBRACK() {
    return this.getToken(painless_parser.LBRACK, 0);
  }
  RBRACK() {
    return this.getToken(painless_parser.RBRACK, 0);
  }
  statement_list() {
    return this.getTypedRuleContexts(StatementContext);
  }
  statement(i) {
    return this.getTypedRuleContext(StatementContext, i);
  }
  dstatement() {
    return this.getTypedRuleContext(DstatementContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_block;
  }
  enterRule(listener) {
    if (listener.enterBlock) {
      listener.enterBlock(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBlock) {
      listener.exitBlock(this);
    }
  }
}
class EmptyContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  SEMICOLON() {
    return this.getToken(painless_parser.SEMICOLON, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_empty;
  }
  enterRule(listener) {
    if (listener.enterEmpty) {
      listener.enterEmpty(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEmpty) {
      listener.exitEmpty(this);
    }
  }
}
class InitializerContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  declaration() {
    return this.getTypedRuleContext(DeclarationContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_initializer;
  }
  enterRule(listener) {
    if (listener.enterInitializer) {
      listener.enterInitializer(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInitializer) {
      listener.exitInitializer(this);
    }
  }
}
class AfterthoughtContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_afterthought;
  }
  enterRule(listener) {
    if (listener.enterAfterthought) {
      listener.enterAfterthought(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAfterthought) {
      listener.exitAfterthought(this);
    }
  }
}
class DeclarationContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  decltype() {
    return this.getTypedRuleContext(DecltypeContext, 0);
  }
  declvar_list() {
    return this.getTypedRuleContexts(DeclvarContext);
  }
  declvar(i) {
    return this.getTypedRuleContext(DeclvarContext, i);
  }
  COMMA_list() {
    return this.getTokens(painless_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(painless_parser.COMMA, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_declaration;
  }
  enterRule(listener) {
    if (listener.enterDeclaration) {
      listener.enterDeclaration(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDeclaration) {
      listener.exitDeclaration(this);
    }
  }
}
class DecltypeContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  type_() {
    return this.getTypedRuleContext(TypeContext, 0);
  }
  LBRACE_list() {
    return this.getTokens(painless_parser.LBRACE);
  }
  LBRACE(i) {
    return this.getToken(painless_parser.LBRACE, i);
  }
  RBRACE_list() {
    return this.getTokens(painless_parser.RBRACE);
  }
  RBRACE(i) {
    return this.getToken(painless_parser.RBRACE, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_decltype;
  }
  enterRule(listener) {
    if (listener.enterDecltype) {
      listener.enterDecltype(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDecltype) {
      listener.exitDecltype(this);
    }
  }
}
class TypeContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DEF() {
    return this.getToken(painless_parser.DEF, 0);
  }
  PRIMITIVE() {
    return this.getToken(painless_parser.PRIMITIVE, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  DOT_list() {
    return this.getTokens(painless_parser.DOT);
  }
  DOT(i) {
    return this.getToken(painless_parser.DOT, i);
  }
  DOTID_list() {
    return this.getTokens(painless_parser.DOTID);
  }
  DOTID(i) {
    return this.getToken(painless_parser.DOTID, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_type;
  }
  enterRule(listener) {
    if (listener.enterType) {
      listener.enterType(this);
    }
  }
  exitRule(listener) {
    if (listener.exitType) {
      listener.exitType(this);
    }
  }
}
class DeclvarContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  ASSIGN() {
    return this.getToken(painless_parser.ASSIGN, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_declvar;
  }
  enterRule(listener) {
    if (listener.enterDeclvar) {
      listener.enterDeclvar(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDeclvar) {
      listener.exitDeclvar(this);
    }
  }
}
class TrapContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  CATCH() {
    return this.getToken(painless_parser.CATCH, 0);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  type_() {
    return this.getTypedRuleContext(TypeContext, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_trap;
  }
  enterRule(listener) {
    if (listener.enterTrap) {
      listener.enterTrap(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTrap) {
      listener.exitTrap(this);
    }
  }
}
class NoncondexpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_noncondexpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class SingleContext extends NoncondexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  unary() {
    return this.getTypedRuleContext(UnaryContext, 0);
  }
  enterRule(listener) {
    if (listener.enterSingle) {
      listener.enterSingle(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSingle) {
      listener.exitSingle(this);
    }
  }
}
class CompContext extends NoncondexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression_list() {
    return this.getTypedRuleContexts(NoncondexpressionContext);
  }
  noncondexpression(i) {
    return this.getTypedRuleContext(NoncondexpressionContext, i);
  }
  LT() {
    return this.getToken(painless_parser.LT, 0);
  }
  LTE() {
    return this.getToken(painless_parser.LTE, 0);
  }
  GT() {
    return this.getToken(painless_parser.GT, 0);
  }
  GTE() {
    return this.getToken(painless_parser.GTE, 0);
  }
  EQ() {
    return this.getToken(painless_parser.EQ, 0);
  }
  EQR() {
    return this.getToken(painless_parser.EQR, 0);
  }
  NE() {
    return this.getToken(painless_parser.NE, 0);
  }
  NER() {
    return this.getToken(painless_parser.NER, 0);
  }
  enterRule(listener) {
    if (listener.enterComp) {
      listener.enterComp(this);
    }
  }
  exitRule(listener) {
    if (listener.exitComp) {
      listener.exitComp(this);
    }
  }
}
class BoolContext extends NoncondexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression_list() {
    return this.getTypedRuleContexts(NoncondexpressionContext);
  }
  noncondexpression(i) {
    return this.getTypedRuleContext(NoncondexpressionContext, i);
  }
  BOOLAND() {
    return this.getToken(painless_parser.BOOLAND, 0);
  }
  BOOLOR() {
    return this.getToken(painless_parser.BOOLOR, 0);
  }
  enterRule(listener) {
    if (listener.enterBool) {
      listener.enterBool(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBool) {
      listener.exitBool(this);
    }
  }
}
class BinaryContext extends NoncondexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression_list() {
    return this.getTypedRuleContexts(NoncondexpressionContext);
  }
  noncondexpression(i) {
    return this.getTypedRuleContext(NoncondexpressionContext, i);
  }
  MUL() {
    return this.getToken(painless_parser.MUL, 0);
  }
  DIV() {
    return this.getToken(painless_parser.DIV, 0);
  }
  REM() {
    return this.getToken(painless_parser.REM, 0);
  }
  ADD() {
    return this.getToken(painless_parser.ADD, 0);
  }
  SUB() {
    return this.getToken(painless_parser.SUB, 0);
  }
  FIND() {
    return this.getToken(painless_parser.FIND, 0);
  }
  MATCH() {
    return this.getToken(painless_parser.MATCH, 0);
  }
  LSH() {
    return this.getToken(painless_parser.LSH, 0);
  }
  RSH() {
    return this.getToken(painless_parser.RSH, 0);
  }
  USH() {
    return this.getToken(painless_parser.USH, 0);
  }
  BWAND() {
    return this.getToken(painless_parser.BWAND, 0);
  }
  XOR() {
    return this.getToken(painless_parser.XOR, 0);
  }
  BWOR() {
    return this.getToken(painless_parser.BWOR, 0);
  }
  enterRule(listener) {
    if (listener.enterBinary) {
      listener.enterBinary(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBinary) {
      listener.exitBinary(this);
    }
  }
}
class ElvisContext extends NoncondexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression_list() {
    return this.getTypedRuleContexts(NoncondexpressionContext);
  }
  noncondexpression(i) {
    return this.getTypedRuleContext(NoncondexpressionContext, i);
  }
  ELVIS() {
    return this.getToken(painless_parser.ELVIS, 0);
  }
  enterRule(listener) {
    if (listener.enterElvis) {
      listener.enterElvis(this);
    }
  }
  exitRule(listener) {
    if (listener.exitElvis) {
      listener.exitElvis(this);
    }
  }
}
class InstanceofContext extends NoncondexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression() {
    return this.getTypedRuleContext(NoncondexpressionContext, 0);
  }
  INSTANCEOF() {
    return this.getToken(painless_parser.INSTANCEOF, 0);
  }
  decltype() {
    return this.getTypedRuleContext(DecltypeContext, 0);
  }
  enterRule(listener) {
    if (listener.enterInstanceof) {
      listener.enterInstanceof(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInstanceof) {
      listener.exitInstanceof(this);
    }
  }
}
class ExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_expression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class ConditionalContext extends ExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression() {
    return this.getTypedRuleContext(NoncondexpressionContext, 0);
  }
  COND() {
    return this.getToken(painless_parser.COND, 0);
  }
  expression_list() {
    return this.getTypedRuleContexts(ExpressionContext);
  }
  expression(i) {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
  COLON() {
    return this.getToken(painless_parser.COLON, 0);
  }
  enterRule(listener) {
    if (listener.enterConditional) {
      listener.enterConditional(this);
    }
  }
  exitRule(listener) {
    if (listener.exitConditional) {
      listener.exitConditional(this);
    }
  }
}
class AssignmentContext extends ExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression() {
    return this.getTypedRuleContext(NoncondexpressionContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  ASSIGN() {
    return this.getToken(painless_parser.ASSIGN, 0);
  }
  AADD() {
    return this.getToken(painless_parser.AADD, 0);
  }
  ASUB() {
    return this.getToken(painless_parser.ASUB, 0);
  }
  AMUL() {
    return this.getToken(painless_parser.AMUL, 0);
  }
  ADIV() {
    return this.getToken(painless_parser.ADIV, 0);
  }
  AREM() {
    return this.getToken(painless_parser.AREM, 0);
  }
  AAND() {
    return this.getToken(painless_parser.AAND, 0);
  }
  AXOR() {
    return this.getToken(painless_parser.AXOR, 0);
  }
  AOR() {
    return this.getToken(painless_parser.AOR, 0);
  }
  ALSH() {
    return this.getToken(painless_parser.ALSH, 0);
  }
  ARSH() {
    return this.getToken(painless_parser.ARSH, 0);
  }
  AUSH() {
    return this.getToken(painless_parser.AUSH, 0);
  }
  enterRule(listener) {
    if (listener.enterAssignment) {
      listener.enterAssignment(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAssignment) {
      listener.exitAssignment(this);
    }
  }
}
class NonconditionalContext extends ExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  noncondexpression() {
    return this.getTypedRuleContext(NoncondexpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterNonconditional) {
      listener.enterNonconditional(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNonconditional) {
      listener.exitNonconditional(this);
    }
  }
}
class UnaryContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_unary;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class NotaddsubContext extends UnaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  unarynotaddsub() {
    return this.getTypedRuleContext(UnarynotaddsubContext, 0);
  }
  enterRule(listener) {
    if (listener.enterNotaddsub) {
      listener.enterNotaddsub(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNotaddsub) {
      listener.exitNotaddsub(this);
    }
  }
}
class PreContext extends UnaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  chain() {
    return this.getTypedRuleContext(ChainContext, 0);
  }
  INCR() {
    return this.getToken(painless_parser.INCR, 0);
  }
  DECR() {
    return this.getToken(painless_parser.DECR, 0);
  }
  enterRule(listener) {
    if (listener.enterPre) {
      listener.enterPre(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPre) {
      listener.exitPre(this);
    }
  }
}
class AddsubContext extends UnaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  unary() {
    return this.getTypedRuleContext(UnaryContext, 0);
  }
  ADD() {
    return this.getToken(painless_parser.ADD, 0);
  }
  SUB() {
    return this.getToken(painless_parser.SUB, 0);
  }
  enterRule(listener) {
    if (listener.enterAddsub) {
      listener.enterAddsub(this);
    }
  }
  exitRule(listener) {
    if (listener.exitAddsub) {
      listener.exitAddsub(this);
    }
  }
}
class UnarynotaddsubContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_unarynotaddsub;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class CastContext extends UnarynotaddsubContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  castexpression() {
    return this.getTypedRuleContext(CastexpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterCast) {
      listener.enterCast(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCast) {
      listener.exitCast(this);
    }
  }
}
class NotContext extends UnarynotaddsubContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  unary() {
    return this.getTypedRuleContext(UnaryContext, 0);
  }
  BOOLNOT() {
    return this.getToken(painless_parser.BOOLNOT, 0);
  }
  BWNOT() {
    return this.getToken(painless_parser.BWNOT, 0);
  }
  enterRule(listener) {
    if (listener.enterNot) {
      listener.enterNot(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNot) {
      listener.exitNot(this);
    }
  }
}
class ReadContext extends UnarynotaddsubContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  chain() {
    return this.getTypedRuleContext(ChainContext, 0);
  }
  enterRule(listener) {
    if (listener.enterRead) {
      listener.enterRead(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRead) {
      listener.exitRead(this);
    }
  }
}
class PostContext extends UnarynotaddsubContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  chain() {
    return this.getTypedRuleContext(ChainContext, 0);
  }
  INCR() {
    return this.getToken(painless_parser.INCR, 0);
  }
  DECR() {
    return this.getToken(painless_parser.DECR, 0);
  }
  enterRule(listener) {
    if (listener.enterPost) {
      listener.enterPost(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPost) {
      listener.exitPost(this);
    }
  }
}
class CastexpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_castexpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class RefcastContext extends CastexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  refcasttype() {
    return this.getTypedRuleContext(RefcasttypeContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  unarynotaddsub() {
    return this.getTypedRuleContext(UnarynotaddsubContext, 0);
  }
  enterRule(listener) {
    if (listener.enterRefcast) {
      listener.enterRefcast(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRefcast) {
      listener.exitRefcast(this);
    }
  }
}
class PrimordefcastContext extends CastexpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  primordefcasttype() {
    return this.getTypedRuleContext(PrimordefcasttypeContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  unary() {
    return this.getTypedRuleContext(UnaryContext, 0);
  }
  enterRule(listener) {
    if (listener.enterPrimordefcast) {
      listener.enterPrimordefcast(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPrimordefcast) {
      listener.exitPrimordefcast(this);
    }
  }
}
class PrimordefcasttypeContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DEF() {
    return this.getToken(painless_parser.DEF, 0);
  }
  PRIMITIVE() {
    return this.getToken(painless_parser.PRIMITIVE, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_primordefcasttype;
  }
  enterRule(listener) {
    if (listener.enterPrimordefcasttype) {
      listener.enterPrimordefcasttype(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPrimordefcasttype) {
      listener.exitPrimordefcasttype(this);
    }
  }
}
class RefcasttypeContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DEF() {
    return this.getToken(painless_parser.DEF, 0);
  }
  LBRACE_list() {
    return this.getTokens(painless_parser.LBRACE);
  }
  LBRACE(i) {
    return this.getToken(painless_parser.LBRACE, i);
  }
  RBRACE_list() {
    return this.getTokens(painless_parser.RBRACE);
  }
  RBRACE(i) {
    return this.getToken(painless_parser.RBRACE, i);
  }
  PRIMITIVE() {
    return this.getToken(painless_parser.PRIMITIVE, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  DOT_list() {
    return this.getTokens(painless_parser.DOT);
  }
  DOT(i) {
    return this.getToken(painless_parser.DOT, i);
  }
  DOTID_list() {
    return this.getTokens(painless_parser.DOTID);
  }
  DOTID(i) {
    return this.getToken(painless_parser.DOTID, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_refcasttype;
  }
  enterRule(listener) {
    if (listener.enterRefcasttype) {
      listener.enterRefcasttype(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRefcasttype) {
      listener.exitRefcasttype(this);
    }
  }
}
class ChainContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_chain;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class DynamicContext extends ChainContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  primary() {
    return this.getTypedRuleContext(PrimaryContext, 0);
  }
  postfix_list() {
    return this.getTypedRuleContexts(PostfixContext);
  }
  postfix(i) {
    return this.getTypedRuleContext(PostfixContext, i);
  }
  enterRule(listener) {
    if (listener.enterDynamic) {
      listener.enterDynamic(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDynamic) {
      listener.exitDynamic(this);
    }
  }
}
class NewarrayContext extends ChainContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  arrayinitializer() {
    return this.getTypedRuleContext(ArrayinitializerContext, 0);
  }
  enterRule(listener) {
    if (listener.enterNewarray) {
      listener.enterNewarray(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNewarray) {
      listener.exitNewarray(this);
    }
  }
}
class PrimaryContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_primary;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class ListinitContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  listinitializer() {
    return this.getTypedRuleContext(ListinitializerContext, 0);
  }
  enterRule(listener) {
    if (listener.enterListinit) {
      listener.enterListinit(this);
    }
  }
  exitRule(listener) {
    if (listener.exitListinit) {
      listener.exitListinit(this);
    }
  }
}
class RegexContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  REGEX() {
    return this.getToken(painless_parser.REGEX, 0);
  }
  enterRule(listener) {
    if (listener.enterRegex) {
      listener.enterRegex(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRegex) {
      listener.exitRegex(this);
    }
  }
}
class NullContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  NULL() {
    return this.getToken(painless_parser.NULL, 0);
  }
  enterRule(listener) {
    if (listener.enterNull) {
      listener.enterNull(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNull) {
      listener.exitNull(this);
    }
  }
}
class StringContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  STRING() {
    return this.getToken(painless_parser.STRING, 0);
  }
  enterRule(listener) {
    if (listener.enterString) {
      listener.enterString(this);
    }
  }
  exitRule(listener) {
    if (listener.exitString) {
      listener.exitString(this);
    }
  }
}
class MapinitContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  mapinitializer() {
    return this.getTypedRuleContext(MapinitializerContext, 0);
  }
  enterRule(listener) {
    if (listener.enterMapinit) {
      listener.enterMapinit(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMapinit) {
      listener.exitMapinit(this);
    }
  }
}
class CalllocalContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  DOLLAR() {
    return this.getToken(painless_parser.DOLLAR, 0);
  }
  enterRule(listener) {
    if (listener.enterCalllocal) {
      listener.enterCalllocal(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCalllocal) {
      listener.exitCalllocal(this);
    }
  }
}
class TrueContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  TRUE() {
    return this.getToken(painless_parser.TRUE, 0);
  }
  enterRule(listener) {
    if (listener.enterTrue) {
      listener.enterTrue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitTrue) {
      listener.exitTrue(this);
    }
  }
}
class FalseContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  FALSE() {
    return this.getToken(painless_parser.FALSE, 0);
  }
  enterRule(listener) {
    if (listener.enterFalse) {
      listener.enterFalse(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFalse) {
      listener.exitFalse(this);
    }
  }
}
class VariableContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  enterRule(listener) {
    if (listener.enterVariable) {
      listener.enterVariable(this);
    }
  }
  exitRule(listener) {
    if (listener.exitVariable) {
      listener.exitVariable(this);
    }
  }
}
class NumericContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  OCTAL() {
    return this.getToken(painless_parser.OCTAL, 0);
  }
  HEX() {
    return this.getToken(painless_parser.HEX, 0);
  }
  INTEGER() {
    return this.getToken(painless_parser.INTEGER, 0);
  }
  DECIMAL() {
    return this.getToken(painless_parser.DECIMAL, 0);
  }
  enterRule(listener) {
    if (listener.enterNumeric) {
      listener.enterNumeric(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNumeric) {
      listener.exitNumeric(this);
    }
  }
}
class NewobjectContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  NEW() {
    return this.getToken(painless_parser.NEW, 0);
  }
  type_() {
    return this.getTypedRuleContext(TypeContext, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  enterRule(listener) {
    if (listener.enterNewobject) {
      listener.enterNewobject(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNewobject) {
      listener.exitNewobject(this);
    }
  }
}
class PrecedenceContext extends PrimaryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  enterRule(listener) {
    if (listener.enterPrecedence) {
      listener.enterPrecedence(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPrecedence) {
      listener.exitPrecedence(this);
    }
  }
}
class PostfixContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  callinvoke() {
    return this.getTypedRuleContext(CallinvokeContext, 0);
  }
  fieldaccess() {
    return this.getTypedRuleContext(FieldaccessContext, 0);
  }
  braceaccess() {
    return this.getTypedRuleContext(BraceaccessContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_postfix;
  }
  enterRule(listener) {
    if (listener.enterPostfix) {
      listener.enterPostfix(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPostfix) {
      listener.exitPostfix(this);
    }
  }
}
class PostdotContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  callinvoke() {
    return this.getTypedRuleContext(CallinvokeContext, 0);
  }
  fieldaccess() {
    return this.getTypedRuleContext(FieldaccessContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_postdot;
  }
  enterRule(listener) {
    if (listener.enterPostdot) {
      listener.enterPostdot(this);
    }
  }
  exitRule(listener) {
    if (listener.exitPostdot) {
      listener.exitPostdot(this);
    }
  }
}
class CallinvokeContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DOTID() {
    return this.getToken(painless_parser.DOTID, 0);
  }
  arguments() {
    return this.getTypedRuleContext(ArgumentsContext, 0);
  }
  DOT() {
    return this.getToken(painless_parser.DOT, 0);
  }
  NSDOT() {
    return this.getToken(painless_parser.NSDOT, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_callinvoke;
  }
  enterRule(listener) {
    if (listener.enterCallinvoke) {
      listener.enterCallinvoke(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCallinvoke) {
      listener.exitCallinvoke(this);
    }
  }
}
class FieldaccessContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DOT() {
    return this.getToken(painless_parser.DOT, 0);
  }
  NSDOT() {
    return this.getToken(painless_parser.NSDOT, 0);
  }
  DOTID() {
    return this.getToken(painless_parser.DOTID, 0);
  }
  DOTINTEGER() {
    return this.getToken(painless_parser.DOTINTEGER, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_fieldaccess;
  }
  enterRule(listener) {
    if (listener.enterFieldaccess) {
      listener.enterFieldaccess(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFieldaccess) {
      listener.exitFieldaccess(this);
    }
  }
}
class BraceaccessContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  LBRACE() {
    return this.getToken(painless_parser.LBRACE, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  RBRACE() {
    return this.getToken(painless_parser.RBRACE, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_braceaccess;
  }
  enterRule(listener) {
    if (listener.enterBraceaccess) {
      listener.enterBraceaccess(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBraceaccess) {
      listener.exitBraceaccess(this);
    }
  }
}
class ArrayinitializerContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_arrayinitializer;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class NewstandardarrayContext extends ArrayinitializerContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  NEW() {
    return this.getToken(painless_parser.NEW, 0);
  }
  type_() {
    return this.getTypedRuleContext(TypeContext, 0);
  }
  LBRACE_list() {
    return this.getTokens(painless_parser.LBRACE);
  }
  LBRACE(i) {
    return this.getToken(painless_parser.LBRACE, i);
  }
  expression_list() {
    return this.getTypedRuleContexts(ExpressionContext);
  }
  expression(i) {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
  RBRACE_list() {
    return this.getTokens(painless_parser.RBRACE);
  }
  RBRACE(i) {
    return this.getToken(painless_parser.RBRACE, i);
  }
  postdot() {
    return this.getTypedRuleContext(PostdotContext, 0);
  }
  postfix_list() {
    return this.getTypedRuleContexts(PostfixContext);
  }
  postfix(i) {
    return this.getTypedRuleContext(PostfixContext, i);
  }
  enterRule(listener) {
    if (listener.enterNewstandardarray) {
      listener.enterNewstandardarray(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNewstandardarray) {
      listener.exitNewstandardarray(this);
    }
  }
}
class NewinitializedarrayContext extends ArrayinitializerContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  NEW() {
    return this.getToken(painless_parser.NEW, 0);
  }
  type_() {
    return this.getTypedRuleContext(TypeContext, 0);
  }
  LBRACE() {
    return this.getToken(painless_parser.LBRACE, 0);
  }
  RBRACE() {
    return this.getToken(painless_parser.RBRACE, 0);
  }
  LBRACK() {
    return this.getToken(painless_parser.LBRACK, 0);
  }
  RBRACK() {
    return this.getToken(painless_parser.RBRACK, 0);
  }
  expression_list() {
    return this.getTypedRuleContexts(ExpressionContext);
  }
  expression(i) {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
  postfix_list() {
    return this.getTypedRuleContexts(PostfixContext);
  }
  postfix(i) {
    return this.getTypedRuleContext(PostfixContext, i);
  }
  COMMA_list() {
    return this.getTokens(painless_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(painless_parser.COMMA, i);
  }
  enterRule(listener) {
    if (listener.enterNewinitializedarray) {
      listener.enterNewinitializedarray(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNewinitializedarray) {
      listener.exitNewinitializedarray(this);
    }
  }
}
class ListinitializerContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  LBRACE() {
    return this.getToken(painless_parser.LBRACE, 0);
  }
  expression_list() {
    return this.getTypedRuleContexts(ExpressionContext);
  }
  expression(i) {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
  RBRACE() {
    return this.getToken(painless_parser.RBRACE, 0);
  }
  COMMA_list() {
    return this.getTokens(painless_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(painless_parser.COMMA, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_listinitializer;
  }
  enterRule(listener) {
    if (listener.enterListinitializer) {
      listener.enterListinitializer(this);
    }
  }
  exitRule(listener) {
    if (listener.exitListinitializer) {
      listener.exitListinitializer(this);
    }
  }
}
class MapinitializerContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  LBRACE() {
    return this.getToken(painless_parser.LBRACE, 0);
  }
  maptoken_list() {
    return this.getTypedRuleContexts(MaptokenContext);
  }
  maptoken(i) {
    return this.getTypedRuleContext(MaptokenContext, i);
  }
  RBRACE() {
    return this.getToken(painless_parser.RBRACE, 0);
  }
  COMMA_list() {
    return this.getTokens(painless_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(painless_parser.COMMA, i);
  }
  COLON() {
    return this.getToken(painless_parser.COLON, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_mapinitializer;
  }
  enterRule(listener) {
    if (listener.enterMapinitializer) {
      listener.enterMapinitializer(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMapinitializer) {
      listener.exitMapinitializer(this);
    }
  }
}
class MaptokenContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  expression_list() {
    return this.getTypedRuleContexts(ExpressionContext);
  }
  expression(i) {
    return this.getTypedRuleContext(ExpressionContext, i);
  }
  COLON() {
    return this.getToken(painless_parser.COLON, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_maptoken;
  }
  enterRule(listener) {
    if (listener.enterMaptoken) {
      listener.enterMaptoken(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMaptoken) {
      listener.exitMaptoken(this);
    }
  }
}
class ArgumentsContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  argument_list() {
    return this.getTypedRuleContexts(ArgumentContext);
  }
  argument(i) {
    return this.getTypedRuleContext(ArgumentContext, i);
  }
  COMMA_list() {
    return this.getTokens(painless_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(painless_parser.COMMA, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_arguments;
  }
  enterRule(listener) {
    if (listener.enterArguments) {
      listener.enterArguments(this);
    }
  }
  exitRule(listener) {
    if (listener.exitArguments) {
      listener.exitArguments(this);
    }
  }
}
class ArgumentContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  lambda() {
    return this.getTypedRuleContext(LambdaContext, 0);
  }
  funcref() {
    return this.getTypedRuleContext(FuncrefContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_argument;
  }
  enterRule(listener) {
    if (listener.enterArgument) {
      listener.enterArgument(this);
    }
  }
  exitRule(listener) {
    if (listener.exitArgument) {
      listener.exitArgument(this);
    }
  }
}
class LambdaContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  ARROW() {
    return this.getToken(painless_parser.ARROW, 0);
  }
  lamtype_list() {
    return this.getTypedRuleContexts(LamtypeContext);
  }
  lamtype(i) {
    return this.getTypedRuleContext(LamtypeContext, i);
  }
  LP() {
    return this.getToken(painless_parser.LP, 0);
  }
  RP() {
    return this.getToken(painless_parser.RP, 0);
  }
  block() {
    return this.getTypedRuleContext(BlockContext, 0);
  }
  expression() {
    return this.getTypedRuleContext(ExpressionContext, 0);
  }
  COMMA_list() {
    return this.getTokens(painless_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(painless_parser.COMMA, i);
  }
  get ruleIndex() {
    return painless_parser.RULE_lambda;
  }
  enterRule(listener) {
    if (listener.enterLambda) {
      listener.enterLambda(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLambda) {
      listener.exitLambda(this);
    }
  }
}
class LamtypeContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  decltype() {
    return this.getTypedRuleContext(DecltypeContext, 0);
  }
  get ruleIndex() {
    return painless_parser.RULE_lamtype;
  }
  enterRule(listener) {
    if (listener.enterLamtype) {
      listener.enterLamtype(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLamtype) {
      listener.exitLamtype(this);
    }
  }
}
class FuncrefContext extends antlr4__WEBPACK_IMPORTED_MODULE_1__.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return painless_parser.RULE_funcref;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
class ClassfuncrefContext extends FuncrefContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  decltype() {
    return this.getTypedRuleContext(DecltypeContext, 0);
  }
  REF() {
    return this.getToken(painless_parser.REF, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  enterRule(listener) {
    if (listener.enterClassfuncref) {
      listener.enterClassfuncref(this);
    }
  }
  exitRule(listener) {
    if (listener.exitClassfuncref) {
      listener.exitClassfuncref(this);
    }
  }
}
class ConstructorfuncrefContext extends FuncrefContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  decltype() {
    return this.getTypedRuleContext(DecltypeContext, 0);
  }
  REF() {
    return this.getToken(painless_parser.REF, 0);
  }
  NEW() {
    return this.getToken(painless_parser.NEW, 0);
  }
  enterRule(listener) {
    if (listener.enterConstructorfuncref) {
      listener.enterConstructorfuncref(this);
    }
  }
  exitRule(listener) {
    if (listener.exitConstructorfuncref) {
      listener.exitConstructorfuncref(this);
    }
  }
}
class LocalfuncrefContext extends FuncrefContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  THIS() {
    return this.getToken(painless_parser.THIS, 0);
  }
  REF() {
    return this.getToken(painless_parser.REF, 0);
  }
  ID() {
    return this.getToken(painless_parser.ID, 0);
  }
  enterRule(listener) {
    if (listener.enterLocalfuncref) {
      listener.enterLocalfuncref(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLocalfuncref) {
      listener.exitLocalfuncref(this);
    }
  }
}

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/boolean_script_field_script_field.json":
/*!******************************************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/boolean_script_field_script_field.json ***!
  \******************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/common.json":
/*!***************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/common.json ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"Appendable","kind":"class","documentation":"Class: Appendable","insertText":"Appendable","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c): Appendable","insertText":"append"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ArithmeticException","kind":"class","documentation":"Class: ArithmeticException","insertText":"ArithmeticException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArithmeticException","kind":"constructor","documentation":"Constructor: ArithmeticException","insertText":"ArithmeticException"}},{"label":"ArrayIndexOutOfBoundsException","kind":"class","documentation":"Class: ArrayIndexOutOfBoundsException","insertText":"ArrayIndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayIndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: ArrayIndexOutOfBoundsException","insertText":"ArrayIndexOutOfBoundsException"}},{"label":"ArrayStoreException","kind":"class","documentation":"Class: ArrayStoreException","insertText":"ArrayStoreException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayStoreException","kind":"constructor","documentation":"Constructor: ArrayStoreException","insertText":"ArrayStoreException"}},{"label":"Boolean","kind":"class","documentation":"Class: Boolean","insertText":"Boolean","properties":[{"label":"FALSE","kind":"property","documentation":"FALSE: Boolean","insertText":"FALSE"},{"label":"TRUE","kind":"property","documentation":"TRUE: Boolean","insertText":"TRUE"},{"label":"compare","kind":"method","documentation":"compare(boolean a, boolean b): int","insertText":"compare"},{"label":"hashCode","kind":"method","documentation":"hashCode(boolean a): int","insertText":"hashCode"},{"label":"logicalAnd","kind":"method","documentation":"logicalAnd(boolean a, boolean b): boolean","insertText":"logicalAnd"},{"label":"logicalOr","kind":"method","documentation":"logicalOr(boolean a, boolean b): boolean","insertText":"logicalOr"},{"label":"logicalXor","kind":"method","documentation":"logicalXor(boolean a, boolean b): boolean","insertText":"logicalXor"},{"label":"parseBoolean","kind":"method","documentation":"parseBoolean(String a): boolean","insertText":"parseBoolean"},{"label":"toString","kind":"method","documentation":"toString(boolean a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(boolean a): Boolean","insertText":"valueOf"},{"label":"booleanValue","kind":"method","documentation":"booleanValue(): boolean","insertText":"booleanValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Boolean a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Byte","kind":"class","documentation":"Class: Byte","insertText":"Byte","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: byte","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: byte","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(byte a, byte b): int","insertText":"compare"},{"label":"decode","kind":"method","documentation":"decode(String a): Byte","insertText":"decode"},{"label":"hashCode","kind":"method","documentation":"hashCode(byte a): int","insertText":"hashCode"},{"label":"parseByte","kind":"method","documentation":"parseByte(String a, int b | String a): byte","insertText":"parseByte"},{"label":"toString","kind":"method","documentation":"toString(byte a): String","insertText":"toString"},{"label":"toUnsignedInt","kind":"method","documentation":"toUnsignedInt(byte a): int","insertText":"toUnsignedInt"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(byte a): long","insertText":"toUnsignedLong"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | byte a): Byte","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Byte a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CharSequence","kind":"class","documentation":"Class: CharSequence","insertText":"CharSequence","properties":[{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Character","kind":"class","documentation":"Class: Character","insertText":"Character","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"COMBINING_SPACING_MARK","kind":"property","documentation":"COMBINING_SPACING_MARK: byte","insertText":"COMBINING_SPACING_MARK"},{"label":"CONNECTOR_PUNCTUATION","kind":"property","documentation":"CONNECTOR_PUNCTUATION: byte","insertText":"CONNECTOR_PUNCTUATION"},{"label":"CONTROL","kind":"property","documentation":"CONTROL: byte","insertText":"CONTROL"},{"label":"CURRENCY_SYMBOL","kind":"property","documentation":"CURRENCY_SYMBOL: byte","insertText":"CURRENCY_SYMBOL"},{"label":"DASH_PUNCTUATION","kind":"property","documentation":"DASH_PUNCTUATION: byte","insertText":"DASH_PUNCTUATION"},{"label":"DECIMAL_DIGIT_NUMBER","kind":"property","documentation":"DECIMAL_DIGIT_NUMBER: byte","insertText":"DECIMAL_DIGIT_NUMBER"},{"label":"DIRECTIONALITY_ARABIC_NUMBER","kind":"property","documentation":"DIRECTIONALITY_ARABIC_NUMBER: byte","insertText":"DIRECTIONALITY_ARABIC_NUMBER"},{"label":"DIRECTIONALITY_BOUNDARY_NEUTRAL","kind":"property","documentation":"DIRECTIONALITY_BOUNDARY_NEUTRAL: byte","insertText":"DIRECTIONALITY_BOUNDARY_NEUTRAL"},{"label":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: byte","insertText":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"},{"label":"DIRECTIONALITY_NONSPACING_MARK","kind":"property","documentation":"DIRECTIONALITY_NONSPACING_MARK: byte","insertText":"DIRECTIONALITY_NONSPACING_MARK"},{"label":"DIRECTIONALITY_OTHER_NEUTRALS","kind":"property","documentation":"DIRECTIONALITY_OTHER_NEUTRALS: byte","insertText":"DIRECTIONALITY_OTHER_NEUTRALS"},{"label":"DIRECTIONALITY_PARAGRAPH_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_PARAGRAPH_SEPARATOR: byte","insertText":"DIRECTIONALITY_PARAGRAPH_SEPARATOR"},{"label":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT","kind":"property","documentation":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: byte","insertText":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"},{"label":"DIRECTIONALITY_SEGMENT_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_SEGMENT_SEPARATOR: byte","insertText":"DIRECTIONALITY_SEGMENT_SEPARATOR"},{"label":"DIRECTIONALITY_UNDEFINED","kind":"property","documentation":"DIRECTIONALITY_UNDEFINED: byte","insertText":"DIRECTIONALITY_UNDEFINED"},{"label":"DIRECTIONALITY_WHITESPACE","kind":"property","documentation":"DIRECTIONALITY_WHITESPACE: byte","insertText":"DIRECTIONALITY_WHITESPACE"},{"label":"ENCLOSING_MARK","kind":"property","documentation":"ENCLOSING_MARK: byte","insertText":"ENCLOSING_MARK"},{"label":"END_PUNCTUATION","kind":"property","documentation":"END_PUNCTUATION: byte","insertText":"END_PUNCTUATION"},{"label":"FINAL_QUOTE_PUNCTUATION","kind":"property","documentation":"FINAL_QUOTE_PUNCTUATION: byte","insertText":"FINAL_QUOTE_PUNCTUATION"},{"label":"FORMAT","kind":"property","documentation":"FORMAT: byte","insertText":"FORMAT"},{"label":"INITIAL_QUOTE_PUNCTUATION","kind":"property","documentation":"INITIAL_QUOTE_PUNCTUATION: byte","insertText":"INITIAL_QUOTE_PUNCTUATION"},{"label":"LETTER_NUMBER","kind":"property","documentation":"LETTER_NUMBER: byte","insertText":"LETTER_NUMBER"},{"label":"LINE_SEPARATOR","kind":"property","documentation":"LINE_SEPARATOR: byte","insertText":"LINE_SEPARATOR"},{"label":"LOWERCASE_LETTER","kind":"property","documentation":"LOWERCASE_LETTER: byte","insertText":"LOWERCASE_LETTER"},{"label":"MATH_SYMBOL","kind":"property","documentation":"MATH_SYMBOL: byte","insertText":"MATH_SYMBOL"},{"label":"MAX_CODE_POINT","kind":"property","documentation":"MAX_CODE_POINT: int","insertText":"MAX_CODE_POINT"},{"label":"MAX_HIGH_SURROGATE","kind":"property","documentation":"MAX_HIGH_SURROGATE: char","insertText":"MAX_HIGH_SURROGATE"},{"label":"MAX_LOW_SURROGATE","kind":"property","documentation":"MAX_LOW_SURROGATE: char","insertText":"MAX_LOW_SURROGATE"},{"label":"MAX_RADIX","kind":"property","documentation":"MAX_RADIX: int","insertText":"MAX_RADIX"},{"label":"MAX_SURROGATE","kind":"property","documentation":"MAX_SURROGATE: char","insertText":"MAX_SURROGATE"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: char","insertText":"MAX_VALUE"},{"label":"MIN_CODE_POINT","kind":"property","documentation":"MIN_CODE_POINT: int","insertText":"MIN_CODE_POINT"},{"label":"MIN_HIGH_SURROGATE","kind":"property","documentation":"MIN_HIGH_SURROGATE: char","insertText":"MIN_HIGH_SURROGATE"},{"label":"MIN_LOW_SURROGATE","kind":"property","documentation":"MIN_LOW_SURROGATE: char","insertText":"MIN_LOW_SURROGATE"},{"label":"MIN_RADIX","kind":"property","documentation":"MIN_RADIX: int","insertText":"MIN_RADIX"},{"label":"MIN_SUPPLEMENTARY_CODE_POINT","kind":"property","documentation":"MIN_SUPPLEMENTARY_CODE_POINT: int","insertText":"MIN_SUPPLEMENTARY_CODE_POINT"},{"label":"MIN_SURROGATE","kind":"property","documentation":"MIN_SURROGATE: char","insertText":"MIN_SURROGATE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: char","insertText":"MIN_VALUE"},{"label":"MODIFIER_LETTER","kind":"property","documentation":"MODIFIER_LETTER: byte","insertText":"MODIFIER_LETTER"},{"label":"MODIFIER_SYMBOL","kind":"property","documentation":"MODIFIER_SYMBOL: byte","insertText":"MODIFIER_SYMBOL"},{"label":"NON_SPACING_MARK","kind":"property","documentation":"NON_SPACING_MARK: byte","insertText":"NON_SPACING_MARK"},{"label":"OTHER_LETTER","kind":"property","documentation":"OTHER_LETTER: byte","insertText":"OTHER_LETTER"},{"label":"OTHER_NUMBER","kind":"property","documentation":"OTHER_NUMBER: byte","insertText":"OTHER_NUMBER"},{"label":"OTHER_PUNCTUATION","kind":"property","documentation":"OTHER_PUNCTUATION: byte","insertText":"OTHER_PUNCTUATION"},{"label":"OTHER_SYMBOL","kind":"property","documentation":"OTHER_SYMBOL: byte","insertText":"OTHER_SYMBOL"},{"label":"PARAGRAPH_SEPARATOR","kind":"property","documentation":"PARAGRAPH_SEPARATOR: byte","insertText":"PARAGRAPH_SEPARATOR"},{"label":"PRIVATE_USE","kind":"property","documentation":"PRIVATE_USE: byte","insertText":"PRIVATE_USE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"SPACE_SEPARATOR","kind":"property","documentation":"SPACE_SEPARATOR: byte","insertText":"SPACE_SEPARATOR"},{"label":"START_PUNCTUATION","kind":"property","documentation":"START_PUNCTUATION: byte","insertText":"START_PUNCTUATION"},{"label":"SURROGATE","kind":"property","documentation":"SURROGATE: byte","insertText":"SURROGATE"},{"label":"TITLECASE_LETTER","kind":"property","documentation":"TITLECASE_LETTER: byte","insertText":"TITLECASE_LETTER"},{"label":"UNASSIGNED","kind":"property","documentation":"UNASSIGNED: byte","insertText":"UNASSIGNED"},{"label":"UPPERCASE_LETTER","kind":"property","documentation":"UPPERCASE_LETTER: byte","insertText":"UPPERCASE_LETTER"},{"label":"charCount","kind":"method","documentation":"charCount(int a): int","insertText":"charCount"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(char[] a, int b, int c | CharSequence a, int b): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(char[] a, int b, int c | CharSequence a, int b): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(CharSequence a, int b, int c): int","insertText":"codePointCount"},{"label":"compare","kind":"method","documentation":"compare(char a, char b): int","insertText":"compare"},{"label":"digit","kind":"method","documentation":"digit(int a, int b): int","insertText":"digit"},{"label":"forDigit","kind":"method","documentation":"forDigit(int a, int b): char","insertText":"forDigit"},{"label":"getDirectionality","kind":"method","documentation":"getDirectionality(int a): byte","insertText":"getDirectionality"},{"label":"getName","kind":"method","documentation":"getName(int a): String","insertText":"getName"},{"label":"getNumericValue","kind":"method","documentation":"getNumericValue(int a): int","insertText":"getNumericValue"},{"label":"getType","kind":"method","documentation":"getType(int a): int","insertText":"getType"},{"label":"hashCode","kind":"method","documentation":"hashCode(char a): int","insertText":"hashCode"},{"label":"highSurrogate","kind":"method","documentation":"highSurrogate(int a): char","insertText":"highSurrogate"},{"label":"isAlphabetic","kind":"method","documentation":"isAlphabetic(int a): boolean","insertText":"isAlphabetic"},{"label":"isBmpCodePoint","kind":"method","documentation":"isBmpCodePoint(int a): boolean","insertText":"isBmpCodePoint"},{"label":"isDefined","kind":"method","documentation":"isDefined(int a): boolean","insertText":"isDefined"},{"label":"isDigit","kind":"method","documentation":"isDigit(int a): boolean","insertText":"isDigit"},{"label":"isHighSurrogate","kind":"method","documentation":"isHighSurrogate(char a): boolean","insertText":"isHighSurrogate"},{"label":"isISOControl","kind":"method","documentation":"isISOControl(int a): boolean","insertText":"isISOControl"},{"label":"isIdentifierIgnorable","kind":"method","documentation":"isIdentifierIgnorable(int a): boolean","insertText":"isIdentifierIgnorable"},{"label":"isIdeographic","kind":"method","documentation":"isIdeographic(int a): boolean","insertText":"isIdeographic"},{"label":"isJavaIdentifierPart","kind":"method","documentation":"isJavaIdentifierPart(int a): boolean","insertText":"isJavaIdentifierPart"},{"label":"isJavaIdentifierStart","kind":"method","documentation":"isJavaIdentifierStart(int a): boolean","insertText":"isJavaIdentifierStart"},{"label":"isLetter","kind":"method","documentation":"isLetter(int a): boolean","insertText":"isLetter"},{"label":"isLetterOrDigit","kind":"method","documentation":"isLetterOrDigit(int a): boolean","insertText":"isLetterOrDigit"},{"label":"isLowerCase","kind":"method","documentation":"isLowerCase(int a): boolean","insertText":"isLowerCase"},{"label":"isMirrored","kind":"method","documentation":"isMirrored(int a): boolean","insertText":"isMirrored"},{"label":"isSpaceChar","kind":"method","documentation":"isSpaceChar(int a): boolean","insertText":"isSpaceChar"},{"label":"isSupplementaryCodePoint","kind":"method","documentation":"isSupplementaryCodePoint(int a): boolean","insertText":"isSupplementaryCodePoint"},{"label":"isSurrogate","kind":"method","documentation":"isSurrogate(char a): boolean","insertText":"isSurrogate"},{"label":"isSurrogatePair","kind":"method","documentation":"isSurrogatePair(char a, char b): boolean","insertText":"isSurrogatePair"},{"label":"isTitleCase","kind":"method","documentation":"isTitleCase(int a): boolean","insertText":"isTitleCase"},{"label":"isUnicodeIdentifierPart","kind":"method","documentation":"isUnicodeIdentifierPart(int a): boolean","insertText":"isUnicodeIdentifierPart"},{"label":"isUnicodeIdentifierStart","kind":"method","documentation":"isUnicodeIdentifierStart(int a): boolean","insertText":"isUnicodeIdentifierStart"},{"label":"isUpperCase","kind":"method","documentation":"isUpperCase(int a): boolean","insertText":"isUpperCase"},{"label":"isValidCodePoint","kind":"method","documentation":"isValidCodePoint(int a): boolean","insertText":"isValidCodePoint"},{"label":"isWhitespace","kind":"method","documentation":"isWhitespace(int a): boolean","insertText":"isWhitespace"},{"label":"lowSurrogate","kind":"method","documentation":"lowSurrogate(int a): char","insertText":"lowSurrogate"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(char[] a, int b, int c, int d, int e | CharSequence a, int b, int c): int","insertText":"offsetByCodePoints"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(char a): char","insertText":"reverseBytes"},{"label":"toChars","kind":"method","documentation":"toChars(int a, char[] b, int c | int a): int | char[]","insertText":"toChars"},{"label":"toCodePoint","kind":"method","documentation":"toCodePoint(char a, char b): int","insertText":"toCodePoint"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(char a): char","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(char a): String","insertText":"toString"},{"label":"toTitleCase","kind":"method","documentation":"toTitleCase(char a): char","insertText":"toTitleCase"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(char a): char","insertText":"toUpperCase"},{"label":"valueOf","kind":"method","documentation":"valueOf(char a): Character","insertText":"valueOf"},{"label":"charValue","kind":"method","documentation":"charValue(): char","insertText":"charValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Character a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Subset","kind":"class","documentation":"Class: Subset","insertText":"Subset","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnicodeBlock","kind":"class","documentation":"Class: UnicodeBlock","insertText":"UnicodeBlock","properties":[{"label":"AEGEAN_NUMBERS","kind":"property","documentation":"AEGEAN_NUMBERS: Character.UnicodeBlock","insertText":"AEGEAN_NUMBERS"},{"label":"ALCHEMICAL_SYMBOLS","kind":"property","documentation":"ALCHEMICAL_SYMBOLS: Character.UnicodeBlock","insertText":"ALCHEMICAL_SYMBOLS"},{"label":"ALPHABETIC_PRESENTATION_FORMS","kind":"property","documentation":"ALPHABETIC_PRESENTATION_FORMS: Character.UnicodeBlock","insertText":"ALPHABETIC_PRESENTATION_FORMS"},{"label":"ANCIENT_GREEK_MUSICAL_NOTATION","kind":"property","documentation":"ANCIENT_GREEK_MUSICAL_NOTATION: Character.UnicodeBlock","insertText":"ANCIENT_GREEK_MUSICAL_NOTATION"},{"label":"ANCIENT_GREEK_NUMBERS","kind":"property","documentation":"ANCIENT_GREEK_NUMBERS: Character.UnicodeBlock","insertText":"ANCIENT_GREEK_NUMBERS"},{"label":"ANCIENT_SYMBOLS","kind":"property","documentation":"ANCIENT_SYMBOLS: Character.UnicodeBlock","insertText":"ANCIENT_SYMBOLS"},{"label":"ARABIC","kind":"property","documentation":"ARABIC: Character.UnicodeBlock","insertText":"ARABIC"},{"label":"ARABIC_EXTENDED_A","kind":"property","documentation":"ARABIC_EXTENDED_A: Character.UnicodeBlock","insertText":"ARABIC_EXTENDED_A"},{"label":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS","kind":"property","documentation":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS: Character.UnicodeBlock","insertText":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"},{"label":"ARABIC_PRESENTATION_FORMS_A","kind":"property","documentation":"ARABIC_PRESENTATION_FORMS_A: Character.UnicodeBlock","insertText":"ARABIC_PRESENTATION_FORMS_A"},{"label":"ARABIC_PRESENTATION_FORMS_B","kind":"property","documentation":"ARABIC_PRESENTATION_FORMS_B: Character.UnicodeBlock","insertText":"ARABIC_PRESENTATION_FORMS_B"},{"label":"ARABIC_SUPPLEMENT","kind":"property","documentation":"ARABIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ARABIC_SUPPLEMENT"},{"label":"ARMENIAN","kind":"property","documentation":"ARMENIAN: Character.UnicodeBlock","insertText":"ARMENIAN"},{"label":"ARROWS","kind":"property","documentation":"ARROWS: Character.UnicodeBlock","insertText":"ARROWS"},{"label":"AVESTAN","kind":"property","documentation":"AVESTAN: Character.UnicodeBlock","insertText":"AVESTAN"},{"label":"BALINESE","kind":"property","documentation":"BALINESE: Character.UnicodeBlock","insertText":"BALINESE"},{"label":"BAMUM","kind":"property","documentation":"BAMUM: Character.UnicodeBlock","insertText":"BAMUM"},{"label":"BAMUM_SUPPLEMENT","kind":"property","documentation":"BAMUM_SUPPLEMENT: Character.UnicodeBlock","insertText":"BAMUM_SUPPLEMENT"},{"label":"BASIC_LATIN","kind":"property","documentation":"BASIC_LATIN: Character.UnicodeBlock","insertText":"BASIC_LATIN"},{"label":"BATAK","kind":"property","documentation":"BATAK: Character.UnicodeBlock","insertText":"BATAK"},{"label":"BENGALI","kind":"property","documentation":"BENGALI: Character.UnicodeBlock","insertText":"BENGALI"},{"label":"BLOCK_ELEMENTS","kind":"property","documentation":"BLOCK_ELEMENTS: Character.UnicodeBlock","insertText":"BLOCK_ELEMENTS"},{"label":"BOPOMOFO","kind":"property","documentation":"BOPOMOFO: Character.UnicodeBlock","insertText":"BOPOMOFO"},{"label":"BOPOMOFO_EXTENDED","kind":"property","documentation":"BOPOMOFO_EXTENDED: Character.UnicodeBlock","insertText":"BOPOMOFO_EXTENDED"},{"label":"BOX_DRAWING","kind":"property","documentation":"BOX_DRAWING: Character.UnicodeBlock","insertText":"BOX_DRAWING"},{"label":"BRAHMI","kind":"property","documentation":"BRAHMI: Character.UnicodeBlock","insertText":"BRAHMI"},{"label":"BRAILLE_PATTERNS","kind":"property","documentation":"BRAILLE_PATTERNS: Character.UnicodeBlock","insertText":"BRAILLE_PATTERNS"},{"label":"BUGINESE","kind":"property","documentation":"BUGINESE: Character.UnicodeBlock","insertText":"BUGINESE"},{"label":"BUHID","kind":"property","documentation":"BUHID: Character.UnicodeBlock","insertText":"BUHID"},{"label":"BYZANTINE_MUSICAL_SYMBOLS","kind":"property","documentation":"BYZANTINE_MUSICAL_SYMBOLS: Character.UnicodeBlock","insertText":"BYZANTINE_MUSICAL_SYMBOLS"},{"label":"CARIAN","kind":"property","documentation":"CARIAN: Character.UnicodeBlock","insertText":"CARIAN"},{"label":"CHAKMA","kind":"property","documentation":"CHAKMA: Character.UnicodeBlock","insertText":"CHAKMA"},{"label":"CHAM","kind":"property","documentation":"CHAM: Character.UnicodeBlock","insertText":"CHAM"},{"label":"CHEROKEE","kind":"property","documentation":"CHEROKEE: Character.UnicodeBlock","insertText":"CHEROKEE"},{"label":"CJK_COMPATIBILITY","kind":"property","documentation":"CJK_COMPATIBILITY: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY"},{"label":"CJK_COMPATIBILITY_FORMS","kind":"property","documentation":"CJK_COMPATIBILITY_FORMS: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_FORMS"},{"label":"CJK_COMPATIBILITY_IDEOGRAPHS","kind":"property","documentation":"CJK_COMPATIBILITY_IDEOGRAPHS: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_IDEOGRAPHS"},{"label":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT","kind":"property","documentation":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"},{"label":"CJK_RADICALS_SUPPLEMENT","kind":"property","documentation":"CJK_RADICALS_SUPPLEMENT: Character.UnicodeBlock","insertText":"CJK_RADICALS_SUPPLEMENT"},{"label":"CJK_STROKES","kind":"property","documentation":"CJK_STROKES: Character.UnicodeBlock","insertText":"CJK_STROKES"},{"label":"CJK_SYMBOLS_AND_PUNCTUATION","kind":"property","documentation":"CJK_SYMBOLS_AND_PUNCTUATION: Character.UnicodeBlock","insertText":"CJK_SYMBOLS_AND_PUNCTUATION"},{"label":"CJK_UNIFIED_IDEOGRAPHS","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"},{"label":"COMBINING_DIACRITICAL_MARKS","kind":"property","documentation":"COMBINING_DIACRITICAL_MARKS: Character.UnicodeBlock","insertText":"COMBINING_DIACRITICAL_MARKS"},{"label":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT","kind":"property","documentation":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: Character.UnicodeBlock","insertText":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT"},{"label":"COMBINING_HALF_MARKS","kind":"property","documentation":"COMBINING_HALF_MARKS: Character.UnicodeBlock","insertText":"COMBINING_HALF_MARKS"},{"label":"COMBINING_MARKS_FOR_SYMBOLS","kind":"property","documentation":"COMBINING_MARKS_FOR_SYMBOLS: Character.UnicodeBlock","insertText":"COMBINING_MARKS_FOR_SYMBOLS"},{"label":"COMMON_INDIC_NUMBER_FORMS","kind":"property","documentation":"COMMON_INDIC_NUMBER_FORMS: Character.UnicodeBlock","insertText":"COMMON_INDIC_NUMBER_FORMS"},{"label":"CONTROL_PICTURES","kind":"property","documentation":"CONTROL_PICTURES: Character.UnicodeBlock","insertText":"CONTROL_PICTURES"},{"label":"COPTIC","kind":"property","documentation":"COPTIC: Character.UnicodeBlock","insertText":"COPTIC"},{"label":"COUNTING_ROD_NUMERALS","kind":"property","documentation":"COUNTING_ROD_NUMERALS: Character.UnicodeBlock","insertText":"COUNTING_ROD_NUMERALS"},{"label":"CUNEIFORM","kind":"property","documentation":"CUNEIFORM: Character.UnicodeBlock","insertText":"CUNEIFORM"},{"label":"CUNEIFORM_NUMBERS_AND_PUNCTUATION","kind":"property","documentation":"CUNEIFORM_NUMBERS_AND_PUNCTUATION: Character.UnicodeBlock","insertText":"CUNEIFORM_NUMBERS_AND_PUNCTUATION"},{"label":"CURRENCY_SYMBOLS","kind":"property","documentation":"CURRENCY_SYMBOLS: Character.UnicodeBlock","insertText":"CURRENCY_SYMBOLS"},{"label":"CYPRIOT_SYLLABARY","kind":"property","documentation":"CYPRIOT_SYLLABARY: Character.UnicodeBlock","insertText":"CYPRIOT_SYLLABARY"},{"label":"CYRILLIC","kind":"property","documentation":"CYRILLIC: Character.UnicodeBlock","insertText":"CYRILLIC"},{"label":"CYRILLIC_EXTENDED_A","kind":"property","documentation":"CYRILLIC_EXTENDED_A: Character.UnicodeBlock","insertText":"CYRILLIC_EXTENDED_A"},{"label":"CYRILLIC_EXTENDED_B","kind":"property","documentation":"CYRILLIC_EXTENDED_B: Character.UnicodeBlock","insertText":"CYRILLIC_EXTENDED_B"},{"label":"CYRILLIC_SUPPLEMENTARY","kind":"property","documentation":"CYRILLIC_SUPPLEMENTARY: Character.UnicodeBlock","insertText":"CYRILLIC_SUPPLEMENTARY"},{"label":"DESERET","kind":"property","documentation":"DESERET: Character.UnicodeBlock","insertText":"DESERET"},{"label":"DEVANAGARI","kind":"property","documentation":"DEVANAGARI: Character.UnicodeBlock","insertText":"DEVANAGARI"},{"label":"DEVANAGARI_EXTENDED","kind":"property","documentation":"DEVANAGARI_EXTENDED: Character.UnicodeBlock","insertText":"DEVANAGARI_EXTENDED"},{"label":"DINGBATS","kind":"property","documentation":"DINGBATS: Character.UnicodeBlock","insertText":"DINGBATS"},{"label":"DOMINO_TILES","kind":"property","documentation":"DOMINO_TILES: Character.UnicodeBlock","insertText":"DOMINO_TILES"},{"label":"EGYPTIAN_HIEROGLYPHS","kind":"property","documentation":"EGYPTIAN_HIEROGLYPHS: Character.UnicodeBlock","insertText":"EGYPTIAN_HIEROGLYPHS"},{"label":"EMOTICONS","kind":"property","documentation":"EMOTICONS: Character.UnicodeBlock","insertText":"EMOTICONS"},{"label":"ENCLOSED_ALPHANUMERICS","kind":"property","documentation":"ENCLOSED_ALPHANUMERICS: Character.UnicodeBlock","insertText":"ENCLOSED_ALPHANUMERICS"},{"label":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT","kind":"property","documentation":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT"},{"label":"ENCLOSED_CJK_LETTERS_AND_MONTHS","kind":"property","documentation":"ENCLOSED_CJK_LETTERS_AND_MONTHS: Character.UnicodeBlock","insertText":"ENCLOSED_CJK_LETTERS_AND_MONTHS"},{"label":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT","kind":"property","documentation":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"},{"label":"ETHIOPIC","kind":"property","documentation":"ETHIOPIC: Character.UnicodeBlock","insertText":"ETHIOPIC"},{"label":"ETHIOPIC_EXTENDED","kind":"property","documentation":"ETHIOPIC_EXTENDED: Character.UnicodeBlock","insertText":"ETHIOPIC_EXTENDED"},{"label":"ETHIOPIC_EXTENDED_A","kind":"property","documentation":"ETHIOPIC_EXTENDED_A: Character.UnicodeBlock","insertText":"ETHIOPIC_EXTENDED_A"},{"label":"ETHIOPIC_SUPPLEMENT","kind":"property","documentation":"ETHIOPIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ETHIOPIC_SUPPLEMENT"},{"label":"GENERAL_PUNCTUATION","kind":"property","documentation":"GENERAL_PUNCTUATION: Character.UnicodeBlock","insertText":"GENERAL_PUNCTUATION"},{"label":"GEOMETRIC_SHAPES","kind":"property","documentation":"GEOMETRIC_SHAPES: Character.UnicodeBlock","insertText":"GEOMETRIC_SHAPES"},{"label":"GEORGIAN","kind":"property","documentation":"GEORGIAN: Character.UnicodeBlock","insertText":"GEORGIAN"},{"label":"GEORGIAN_SUPPLEMENT","kind":"property","documentation":"GEORGIAN_SUPPLEMENT: Character.UnicodeBlock","insertText":"GEORGIAN_SUPPLEMENT"},{"label":"GLAGOLITIC","kind":"property","documentation":"GLAGOLITIC: Character.UnicodeBlock","insertText":"GLAGOLITIC"},{"label":"GOTHIC","kind":"property","documentation":"GOTHIC: Character.UnicodeBlock","insertText":"GOTHIC"},{"label":"GREEK","kind":"property","documentation":"GREEK: Character.UnicodeBlock","insertText":"GREEK"},{"label":"GREEK_EXTENDED","kind":"property","documentation":"GREEK_EXTENDED: Character.UnicodeBlock","insertText":"GREEK_EXTENDED"},{"label":"GUJARATI","kind":"property","documentation":"GUJARATI: Character.UnicodeBlock","insertText":"GUJARATI"},{"label":"GURMUKHI","kind":"property","documentation":"GURMUKHI: Character.UnicodeBlock","insertText":"GURMUKHI"},{"label":"HALFWIDTH_AND_FULLWIDTH_FORMS","kind":"property","documentation":"HALFWIDTH_AND_FULLWIDTH_FORMS: Character.UnicodeBlock","insertText":"HALFWIDTH_AND_FULLWIDTH_FORMS"},{"label":"HANGUL_COMPATIBILITY_JAMO","kind":"property","documentation":"HANGUL_COMPATIBILITY_JAMO: Character.UnicodeBlock","insertText":"HANGUL_COMPATIBILITY_JAMO"},{"label":"HANGUL_JAMO","kind":"property","documentation":"HANGUL_JAMO: Character.UnicodeBlock","insertText":"HANGUL_JAMO"},{"label":"HANGUL_JAMO_EXTENDED_A","kind":"property","documentation":"HANGUL_JAMO_EXTENDED_A: Character.UnicodeBlock","insertText":"HANGUL_JAMO_EXTENDED_A"},{"label":"HANGUL_JAMO_EXTENDED_B","kind":"property","documentation":"HANGUL_JAMO_EXTENDED_B: Character.UnicodeBlock","insertText":"HANGUL_JAMO_EXTENDED_B"},{"label":"HANGUL_SYLLABLES","kind":"property","documentation":"HANGUL_SYLLABLES: Character.UnicodeBlock","insertText":"HANGUL_SYLLABLES"},{"label":"HANUNOO","kind":"property","documentation":"HANUNOO: Character.UnicodeBlock","insertText":"HANUNOO"},{"label":"HEBREW","kind":"property","documentation":"HEBREW: Character.UnicodeBlock","insertText":"HEBREW"},{"label":"HIGH_PRIVATE_USE_SURROGATES","kind":"property","documentation":"HIGH_PRIVATE_USE_SURROGATES: Character.UnicodeBlock","insertText":"HIGH_PRIVATE_USE_SURROGATES"},{"label":"HIGH_SURROGATES","kind":"property","documentation":"HIGH_SURROGATES: Character.UnicodeBlock","insertText":"HIGH_SURROGATES"},{"label":"HIRAGANA","kind":"property","documentation":"HIRAGANA: Character.UnicodeBlock","insertText":"HIRAGANA"},{"label":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS","kind":"property","documentation":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS: Character.UnicodeBlock","insertText":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS"},{"label":"IMPERIAL_ARAMAIC","kind":"property","documentation":"IMPERIAL_ARAMAIC: Character.UnicodeBlock","insertText":"IMPERIAL_ARAMAIC"},{"label":"INSCRIPTIONAL_PAHLAVI","kind":"property","documentation":"INSCRIPTIONAL_PAHLAVI: Character.UnicodeBlock","insertText":"INSCRIPTIONAL_PAHLAVI"},{"label":"INSCRIPTIONAL_PARTHIAN","kind":"property","documentation":"INSCRIPTIONAL_PARTHIAN: Character.UnicodeBlock","insertText":"INSCRIPTIONAL_PARTHIAN"},{"label":"IPA_EXTENSIONS","kind":"property","documentation":"IPA_EXTENSIONS: Character.UnicodeBlock","insertText":"IPA_EXTENSIONS"},{"label":"JAVANESE","kind":"property","documentation":"JAVANESE: Character.UnicodeBlock","insertText":"JAVANESE"},{"label":"KAITHI","kind":"property","documentation":"KAITHI: Character.UnicodeBlock","insertText":"KAITHI"},{"label":"KANA_SUPPLEMENT","kind":"property","documentation":"KANA_SUPPLEMENT: Character.UnicodeBlock","insertText":"KANA_SUPPLEMENT"},{"label":"KANBUN","kind":"property","documentation":"KANBUN: Character.UnicodeBlock","insertText":"KANBUN"},{"label":"KANGXI_RADICALS","kind":"property","documentation":"KANGXI_RADICALS: Character.UnicodeBlock","insertText":"KANGXI_RADICALS"},{"label":"KANNADA","kind":"property","documentation":"KANNADA: Character.UnicodeBlock","insertText":"KANNADA"},{"label":"KATAKANA","kind":"property","documentation":"KATAKANA: Character.UnicodeBlock","insertText":"KATAKANA"},{"label":"KATAKANA_PHONETIC_EXTENSIONS","kind":"property","documentation":"KATAKANA_PHONETIC_EXTENSIONS: Character.UnicodeBlock","insertText":"KATAKANA_PHONETIC_EXTENSIONS"},{"label":"KAYAH_LI","kind":"property","documentation":"KAYAH_LI: Character.UnicodeBlock","insertText":"KAYAH_LI"},{"label":"KHAROSHTHI","kind":"property","documentation":"KHAROSHTHI: Character.UnicodeBlock","insertText":"KHAROSHTHI"},{"label":"KHMER","kind":"property","documentation":"KHMER: Character.UnicodeBlock","insertText":"KHMER"},{"label":"KHMER_SYMBOLS","kind":"property","documentation":"KHMER_SYMBOLS: Character.UnicodeBlock","insertText":"KHMER_SYMBOLS"},{"label":"LAO","kind":"property","documentation":"LAO: Character.UnicodeBlock","insertText":"LAO"},{"label":"LATIN_1_SUPPLEMENT","kind":"property","documentation":"LATIN_1_SUPPLEMENT: Character.UnicodeBlock","insertText":"LATIN_1_SUPPLEMENT"},{"label":"LATIN_EXTENDED_A","kind":"property","documentation":"LATIN_EXTENDED_A: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_A"},{"label":"LATIN_EXTENDED_ADDITIONAL","kind":"property","documentation":"LATIN_EXTENDED_ADDITIONAL: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_ADDITIONAL"},{"label":"LATIN_EXTENDED_B","kind":"property","documentation":"LATIN_EXTENDED_B: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_B"},{"label":"LATIN_EXTENDED_C","kind":"property","documentation":"LATIN_EXTENDED_C: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_C"},{"label":"LATIN_EXTENDED_D","kind":"property","documentation":"LATIN_EXTENDED_D: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_D"},{"label":"LEPCHA","kind":"property","documentation":"LEPCHA: Character.UnicodeBlock","insertText":"LEPCHA"},{"label":"LETTERLIKE_SYMBOLS","kind":"property","documentation":"LETTERLIKE_SYMBOLS: Character.UnicodeBlock","insertText":"LETTERLIKE_SYMBOLS"},{"label":"LIMBU","kind":"property","documentation":"LIMBU: Character.UnicodeBlock","insertText":"LIMBU"},{"label":"LINEAR_B_IDEOGRAMS","kind":"property","documentation":"LINEAR_B_IDEOGRAMS: Character.UnicodeBlock","insertText":"LINEAR_B_IDEOGRAMS"},{"label":"LINEAR_B_SYLLABARY","kind":"property","documentation":"LINEAR_B_SYLLABARY: Character.UnicodeBlock","insertText":"LINEAR_B_SYLLABARY"},{"label":"LISU","kind":"property","documentation":"LISU: Character.UnicodeBlock","insertText":"LISU"},{"label":"LOW_SURROGATES","kind":"property","documentation":"LOW_SURROGATES: Character.UnicodeBlock","insertText":"LOW_SURROGATES"},{"label":"LYCIAN","kind":"property","documentation":"LYCIAN: Character.UnicodeBlock","insertText":"LYCIAN"},{"label":"LYDIAN","kind":"property","documentation":"LYDIAN: Character.UnicodeBlock","insertText":"LYDIAN"},{"label":"MAHJONG_TILES","kind":"property","documentation":"MAHJONG_TILES: Character.UnicodeBlock","insertText":"MAHJONG_TILES"},{"label":"MALAYALAM","kind":"property","documentation":"MALAYALAM: Character.UnicodeBlock","insertText":"MALAYALAM"},{"label":"MANDAIC","kind":"property","documentation":"MANDAIC: Character.UnicodeBlock","insertText":"MANDAIC"},{"label":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS","kind":"property","documentation":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS: Character.UnicodeBlock","insertText":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS"},{"label":"MATHEMATICAL_OPERATORS","kind":"property","documentation":"MATHEMATICAL_OPERATORS: Character.UnicodeBlock","insertText":"MATHEMATICAL_OPERATORS"},{"label":"MEETEI_MAYEK","kind":"property","documentation":"MEETEI_MAYEK: Character.UnicodeBlock","insertText":"MEETEI_MAYEK"},{"label":"MEETEI_MAYEK_EXTENSIONS","kind":"property","documentation":"MEETEI_MAYEK_EXTENSIONS: Character.UnicodeBlock","insertText":"MEETEI_MAYEK_EXTENSIONS"},{"label":"MEROITIC_CURSIVE","kind":"property","documentation":"MEROITIC_CURSIVE: Character.UnicodeBlock","insertText":"MEROITIC_CURSIVE"},{"label":"MEROITIC_HIEROGLYPHS","kind":"property","documentation":"MEROITIC_HIEROGLYPHS: Character.UnicodeBlock","insertText":"MEROITIC_HIEROGLYPHS"},{"label":"MIAO","kind":"property","documentation":"MIAO: Character.UnicodeBlock","insertText":"MIAO"},{"label":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A","kind":"property","documentation":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: Character.UnicodeBlock","insertText":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"},{"label":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B","kind":"property","documentation":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: Character.UnicodeBlock","insertText":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"},{"label":"MISCELLANEOUS_SYMBOLS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS"},{"label":"MISCELLANEOUS_SYMBOLS_AND_ARROWS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS_AND_ARROWS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS_AND_ARROWS"},{"label":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"},{"label":"MISCELLANEOUS_TECHNICAL","kind":"property","documentation":"MISCELLANEOUS_TECHNICAL: Character.UnicodeBlock","insertText":"MISCELLANEOUS_TECHNICAL"},{"label":"MODIFIER_TONE_LETTERS","kind":"property","documentation":"MODIFIER_TONE_LETTERS: Character.UnicodeBlock","insertText":"MODIFIER_TONE_LETTERS"},{"label":"MONGOLIAN","kind":"property","documentation":"MONGOLIAN: Character.UnicodeBlock","insertText":"MONGOLIAN"},{"label":"MUSICAL_SYMBOLS","kind":"property","documentation":"MUSICAL_SYMBOLS: Character.UnicodeBlock","insertText":"MUSICAL_SYMBOLS"},{"label":"MYANMAR","kind":"property","documentation":"MYANMAR: Character.UnicodeBlock","insertText":"MYANMAR"},{"label":"MYANMAR_EXTENDED_A","kind":"property","documentation":"MYANMAR_EXTENDED_A: Character.UnicodeBlock","insertText":"MYANMAR_EXTENDED_A"},{"label":"NEW_TAI_LUE","kind":"property","documentation":"NEW_TAI_LUE: Character.UnicodeBlock","insertText":"NEW_TAI_LUE"},{"label":"NKO","kind":"property","documentation":"NKO: Character.UnicodeBlock","insertText":"NKO"},{"label":"NUMBER_FORMS","kind":"property","documentation":"NUMBER_FORMS: Character.UnicodeBlock","insertText":"NUMBER_FORMS"},{"label":"OGHAM","kind":"property","documentation":"OGHAM: Character.UnicodeBlock","insertText":"OGHAM"},{"label":"OLD_ITALIC","kind":"property","documentation":"OLD_ITALIC: Character.UnicodeBlock","insertText":"OLD_ITALIC"},{"label":"OLD_PERSIAN","kind":"property","documentation":"OLD_PERSIAN: Character.UnicodeBlock","insertText":"OLD_PERSIAN"},{"label":"OLD_SOUTH_ARABIAN","kind":"property","documentation":"OLD_SOUTH_ARABIAN: Character.UnicodeBlock","insertText":"OLD_SOUTH_ARABIAN"},{"label":"OLD_TURKIC","kind":"property","documentation":"OLD_TURKIC: Character.UnicodeBlock","insertText":"OLD_TURKIC"},{"label":"OL_CHIKI","kind":"property","documentation":"OL_CHIKI: Character.UnicodeBlock","insertText":"OL_CHIKI"},{"label":"OPTICAL_CHARACTER_RECOGNITION","kind":"property","documentation":"OPTICAL_CHARACTER_RECOGNITION: Character.UnicodeBlock","insertText":"OPTICAL_CHARACTER_RECOGNITION"},{"label":"ORIYA","kind":"property","documentation":"ORIYA: Character.UnicodeBlock","insertText":"ORIYA"},{"label":"OSMANYA","kind":"property","documentation":"OSMANYA: Character.UnicodeBlock","insertText":"OSMANYA"},{"label":"PHAGS_PA","kind":"property","documentation":"PHAGS_PA: Character.UnicodeBlock","insertText":"PHAGS_PA"},{"label":"PHAISTOS_DISC","kind":"property","documentation":"PHAISTOS_DISC: Character.UnicodeBlock","insertText":"PHAISTOS_DISC"},{"label":"PHOENICIAN","kind":"property","documentation":"PHOENICIAN: Character.UnicodeBlock","insertText":"PHOENICIAN"},{"label":"PHONETIC_EXTENSIONS","kind":"property","documentation":"PHONETIC_EXTENSIONS: Character.UnicodeBlock","insertText":"PHONETIC_EXTENSIONS"},{"label":"PHONETIC_EXTENSIONS_SUPPLEMENT","kind":"property","documentation":"PHONETIC_EXTENSIONS_SUPPLEMENT: Character.UnicodeBlock","insertText":"PHONETIC_EXTENSIONS_SUPPLEMENT"},{"label":"PLAYING_CARDS","kind":"property","documentation":"PLAYING_CARDS: Character.UnicodeBlock","insertText":"PLAYING_CARDS"},{"label":"PRIVATE_USE_AREA","kind":"property","documentation":"PRIVATE_USE_AREA: Character.UnicodeBlock","insertText":"PRIVATE_USE_AREA"},{"label":"REJANG","kind":"property","documentation":"REJANG: Character.UnicodeBlock","insertText":"REJANG"},{"label":"RUMI_NUMERAL_SYMBOLS","kind":"property","documentation":"RUMI_NUMERAL_SYMBOLS: Character.UnicodeBlock","insertText":"RUMI_NUMERAL_SYMBOLS"},{"label":"RUNIC","kind":"property","documentation":"RUNIC: Character.UnicodeBlock","insertText":"RUNIC"},{"label":"SAMARITAN","kind":"property","documentation":"SAMARITAN: Character.UnicodeBlock","insertText":"SAMARITAN"},{"label":"SAURASHTRA","kind":"property","documentation":"SAURASHTRA: Character.UnicodeBlock","insertText":"SAURASHTRA"},{"label":"SHARADA","kind":"property","documentation":"SHARADA: Character.UnicodeBlock","insertText":"SHARADA"},{"label":"SHAVIAN","kind":"property","documentation":"SHAVIAN: Character.UnicodeBlock","insertText":"SHAVIAN"},{"label":"SINHALA","kind":"property","documentation":"SINHALA: Character.UnicodeBlock","insertText":"SINHALA"},{"label":"SMALL_FORM_VARIANTS","kind":"property","documentation":"SMALL_FORM_VARIANTS: Character.UnicodeBlock","insertText":"SMALL_FORM_VARIANTS"},{"label":"SORA_SOMPENG","kind":"property","documentation":"SORA_SOMPENG: Character.UnicodeBlock","insertText":"SORA_SOMPENG"},{"label":"SPACING_MODIFIER_LETTERS","kind":"property","documentation":"SPACING_MODIFIER_LETTERS: Character.UnicodeBlock","insertText":"SPACING_MODIFIER_LETTERS"},{"label":"SPECIALS","kind":"property","documentation":"SPECIALS: Character.UnicodeBlock","insertText":"SPECIALS"},{"label":"SUNDANESE","kind":"property","documentation":"SUNDANESE: Character.UnicodeBlock","insertText":"SUNDANESE"},{"label":"SUNDANESE_SUPPLEMENT","kind":"property","documentation":"SUNDANESE_SUPPLEMENT: Character.UnicodeBlock","insertText":"SUNDANESE_SUPPLEMENT"},{"label":"SUPERSCRIPTS_AND_SUBSCRIPTS","kind":"property","documentation":"SUPERSCRIPTS_AND_SUBSCRIPTS: Character.UnicodeBlock","insertText":"SUPERSCRIPTS_AND_SUBSCRIPTS"},{"label":"SUPPLEMENTAL_ARROWS_A","kind":"property","documentation":"SUPPLEMENTAL_ARROWS_A: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_ARROWS_A"},{"label":"SUPPLEMENTAL_ARROWS_B","kind":"property","documentation":"SUPPLEMENTAL_ARROWS_B: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_ARROWS_B"},{"label":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS","kind":"property","documentation":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS"},{"label":"SUPPLEMENTAL_PUNCTUATION","kind":"property","documentation":"SUPPLEMENTAL_PUNCTUATION: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_PUNCTUATION"},{"label":"SUPPLEMENTARY_PRIVATE_USE_AREA_A","kind":"property","documentation":"SUPPLEMENTARY_PRIVATE_USE_AREA_A: Character.UnicodeBlock","insertText":"SUPPLEMENTARY_PRIVATE_USE_AREA_A"},{"label":"SUPPLEMENTARY_PRIVATE_USE_AREA_B","kind":"property","documentation":"SUPPLEMENTARY_PRIVATE_USE_AREA_B: Character.UnicodeBlock","insertText":"SUPPLEMENTARY_PRIVATE_USE_AREA_B"},{"label":"SYLOTI_NAGRI","kind":"property","documentation":"SYLOTI_NAGRI: Character.UnicodeBlock","insertText":"SYLOTI_NAGRI"},{"label":"SYRIAC","kind":"property","documentation":"SYRIAC: Character.UnicodeBlock","insertText":"SYRIAC"},{"label":"TAGALOG","kind":"property","documentation":"TAGALOG: Character.UnicodeBlock","insertText":"TAGALOG"},{"label":"TAGBANWA","kind":"property","documentation":"TAGBANWA: Character.UnicodeBlock","insertText":"TAGBANWA"},{"label":"TAGS","kind":"property","documentation":"TAGS: Character.UnicodeBlock","insertText":"TAGS"},{"label":"TAI_LE","kind":"property","documentation":"TAI_LE: Character.UnicodeBlock","insertText":"TAI_LE"},{"label":"TAI_THAM","kind":"property","documentation":"TAI_THAM: Character.UnicodeBlock","insertText":"TAI_THAM"},{"label":"TAI_VIET","kind":"property","documentation":"TAI_VIET: Character.UnicodeBlock","insertText":"TAI_VIET"},{"label":"TAI_XUAN_JING_SYMBOLS","kind":"property","documentation":"TAI_XUAN_JING_SYMBOLS: Character.UnicodeBlock","insertText":"TAI_XUAN_JING_SYMBOLS"},{"label":"TAKRI","kind":"property","documentation":"TAKRI: Character.UnicodeBlock","insertText":"TAKRI"},{"label":"TAMIL","kind":"property","documentation":"TAMIL: Character.UnicodeBlock","insertText":"TAMIL"},{"label":"TELUGU","kind":"property","documentation":"TELUGU: Character.UnicodeBlock","insertText":"TELUGU"},{"label":"THAANA","kind":"property","documentation":"THAANA: Character.UnicodeBlock","insertText":"THAANA"},{"label":"THAI","kind":"property","documentation":"THAI: Character.UnicodeBlock","insertText":"THAI"},{"label":"TIBETAN","kind":"property","documentation":"TIBETAN: Character.UnicodeBlock","insertText":"TIBETAN"},{"label":"TIFINAGH","kind":"property","documentation":"TIFINAGH: Character.UnicodeBlock","insertText":"TIFINAGH"},{"label":"TRANSPORT_AND_MAP_SYMBOLS","kind":"property","documentation":"TRANSPORT_AND_MAP_SYMBOLS: Character.UnicodeBlock","insertText":"TRANSPORT_AND_MAP_SYMBOLS"},{"label":"UGARITIC","kind":"property","documentation":"UGARITIC: Character.UnicodeBlock","insertText":"UGARITIC"},{"label":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS","kind":"property","documentation":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: Character.UnicodeBlock","insertText":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"},{"label":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED","kind":"property","documentation":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: Character.UnicodeBlock","insertText":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"},{"label":"VAI","kind":"property","documentation":"VAI: Character.UnicodeBlock","insertText":"VAI"},{"label":"VARIATION_SELECTORS","kind":"property","documentation":"VARIATION_SELECTORS: Character.UnicodeBlock","insertText":"VARIATION_SELECTORS"},{"label":"VARIATION_SELECTORS_SUPPLEMENT","kind":"property","documentation":"VARIATION_SELECTORS_SUPPLEMENT: Character.UnicodeBlock","insertText":"VARIATION_SELECTORS_SUPPLEMENT"},{"label":"VEDIC_EXTENSIONS","kind":"property","documentation":"VEDIC_EXTENSIONS: Character.UnicodeBlock","insertText":"VEDIC_EXTENSIONS"},{"label":"VERTICAL_FORMS","kind":"property","documentation":"VERTICAL_FORMS: Character.UnicodeBlock","insertText":"VERTICAL_FORMS"},{"label":"YIJING_HEXAGRAM_SYMBOLS","kind":"property","documentation":"YIJING_HEXAGRAM_SYMBOLS: Character.UnicodeBlock","insertText":"YIJING_HEXAGRAM_SYMBOLS"},{"label":"YI_RADICALS","kind":"property","documentation":"YI_RADICALS: Character.UnicodeBlock","insertText":"YI_RADICALS"},{"label":"YI_SYLLABLES","kind":"property","documentation":"YI_SYLLABLES: Character.UnicodeBlock","insertText":"YI_SYLLABLES"},{"label":"forName","kind":"method","documentation":"forName(String a): Character.UnicodeBlock","insertText":"forName"},{"label":"of","kind":"method","documentation":"of(int a): Character.UnicodeBlock","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnicodeScript","kind":"class","documentation":"Class: UnicodeScript","insertText":"UnicodeScript","properties":[{"label":"ARABIC","kind":"property","documentation":"ARABIC: Character.UnicodeScript","insertText":"ARABIC"},{"label":"ARMENIAN","kind":"property","documentation":"ARMENIAN: Character.UnicodeScript","insertText":"ARMENIAN"},{"label":"AVESTAN","kind":"property","documentation":"AVESTAN: Character.UnicodeScript","insertText":"AVESTAN"},{"label":"BALINESE","kind":"property","documentation":"BALINESE: Character.UnicodeScript","insertText":"BALINESE"},{"label":"BAMUM","kind":"property","documentation":"BAMUM: Character.UnicodeScript","insertText":"BAMUM"},{"label":"BATAK","kind":"property","documentation":"BATAK: Character.UnicodeScript","insertText":"BATAK"},{"label":"BENGALI","kind":"property","documentation":"BENGALI: Character.UnicodeScript","insertText":"BENGALI"},{"label":"BOPOMOFO","kind":"property","documentation":"BOPOMOFO: Character.UnicodeScript","insertText":"BOPOMOFO"},{"label":"BRAHMI","kind":"property","documentation":"BRAHMI: Character.UnicodeScript","insertText":"BRAHMI"},{"label":"BRAILLE","kind":"property","documentation":"BRAILLE: Character.UnicodeScript","insertText":"BRAILLE"},{"label":"BUGINESE","kind":"property","documentation":"BUGINESE: Character.UnicodeScript","insertText":"BUGINESE"},{"label":"BUHID","kind":"property","documentation":"BUHID: Character.UnicodeScript","insertText":"BUHID"},{"label":"CANADIAN_ABORIGINAL","kind":"property","documentation":"CANADIAN_ABORIGINAL: Character.UnicodeScript","insertText":"CANADIAN_ABORIGINAL"},{"label":"CARIAN","kind":"property","documentation":"CARIAN: Character.UnicodeScript","insertText":"CARIAN"},{"label":"CHAKMA","kind":"property","documentation":"CHAKMA: Character.UnicodeScript","insertText":"CHAKMA"},{"label":"CHAM","kind":"property","documentation":"CHAM: Character.UnicodeScript","insertText":"CHAM"},{"label":"CHEROKEE","kind":"property","documentation":"CHEROKEE: Character.UnicodeScript","insertText":"CHEROKEE"},{"label":"COMMON","kind":"property","documentation":"COMMON: Character.UnicodeScript","insertText":"COMMON"},{"label":"COPTIC","kind":"property","documentation":"COPTIC: Character.UnicodeScript","insertText":"COPTIC"},{"label":"CUNEIFORM","kind":"property","documentation":"CUNEIFORM: Character.UnicodeScript","insertText":"CUNEIFORM"},{"label":"CYPRIOT","kind":"property","documentation":"CYPRIOT: Character.UnicodeScript","insertText":"CYPRIOT"},{"label":"CYRILLIC","kind":"property","documentation":"CYRILLIC: Character.UnicodeScript","insertText":"CYRILLIC"},{"label":"DESERET","kind":"property","documentation":"DESERET: Character.UnicodeScript","insertText":"DESERET"},{"label":"DEVANAGARI","kind":"property","documentation":"DEVANAGARI: Character.UnicodeScript","insertText":"DEVANAGARI"},{"label":"EGYPTIAN_HIEROGLYPHS","kind":"property","documentation":"EGYPTIAN_HIEROGLYPHS: Character.UnicodeScript","insertText":"EGYPTIAN_HIEROGLYPHS"},{"label":"ETHIOPIC","kind":"property","documentation":"ETHIOPIC: Character.UnicodeScript","insertText":"ETHIOPIC"},{"label":"GEORGIAN","kind":"property","documentation":"GEORGIAN: Character.UnicodeScript","insertText":"GEORGIAN"},{"label":"GLAGOLITIC","kind":"property","documentation":"GLAGOLITIC: Character.UnicodeScript","insertText":"GLAGOLITIC"},{"label":"GOTHIC","kind":"property","documentation":"GOTHIC: Character.UnicodeScript","insertText":"GOTHIC"},{"label":"GREEK","kind":"property","documentation":"GREEK: Character.UnicodeScript","insertText":"GREEK"},{"label":"GUJARATI","kind":"property","documentation":"GUJARATI: Character.UnicodeScript","insertText":"GUJARATI"},{"label":"GURMUKHI","kind":"property","documentation":"GURMUKHI: Character.UnicodeScript","insertText":"GURMUKHI"},{"label":"HAN","kind":"property","documentation":"HAN: Character.UnicodeScript","insertText":"HAN"},{"label":"HANGUL","kind":"property","documentation":"HANGUL: Character.UnicodeScript","insertText":"HANGUL"},{"label":"HANUNOO","kind":"property","documentation":"HANUNOO: Character.UnicodeScript","insertText":"HANUNOO"},{"label":"HEBREW","kind":"property","documentation":"HEBREW: Character.UnicodeScript","insertText":"HEBREW"},{"label":"HIRAGANA","kind":"property","documentation":"HIRAGANA: Character.UnicodeScript","insertText":"HIRAGANA"},{"label":"IMPERIAL_ARAMAIC","kind":"property","documentation":"IMPERIAL_ARAMAIC: Character.UnicodeScript","insertText":"IMPERIAL_ARAMAIC"},{"label":"INHERITED","kind":"property","documentation":"INHERITED: Character.UnicodeScript","insertText":"INHERITED"},{"label":"INSCRIPTIONAL_PAHLAVI","kind":"property","documentation":"INSCRIPTIONAL_PAHLAVI: Character.UnicodeScript","insertText":"INSCRIPTIONAL_PAHLAVI"},{"label":"INSCRIPTIONAL_PARTHIAN","kind":"property","documentation":"INSCRIPTIONAL_PARTHIAN: Character.UnicodeScript","insertText":"INSCRIPTIONAL_PARTHIAN"},{"label":"JAVANESE","kind":"property","documentation":"JAVANESE: Character.UnicodeScript","insertText":"JAVANESE"},{"label":"KAITHI","kind":"property","documentation":"KAITHI: Character.UnicodeScript","insertText":"KAITHI"},{"label":"KANNADA","kind":"property","documentation":"KANNADA: Character.UnicodeScript","insertText":"KANNADA"},{"label":"KATAKANA","kind":"property","documentation":"KATAKANA: Character.UnicodeScript","insertText":"KATAKANA"},{"label":"KAYAH_LI","kind":"property","documentation":"KAYAH_LI: Character.UnicodeScript","insertText":"KAYAH_LI"},{"label":"KHAROSHTHI","kind":"property","documentation":"KHAROSHTHI: Character.UnicodeScript","insertText":"KHAROSHTHI"},{"label":"KHMER","kind":"property","documentation":"KHMER: Character.UnicodeScript","insertText":"KHMER"},{"label":"LAO","kind":"property","documentation":"LAO: Character.UnicodeScript","insertText":"LAO"},{"label":"LATIN","kind":"property","documentation":"LATIN: Character.UnicodeScript","insertText":"LATIN"},{"label":"LEPCHA","kind":"property","documentation":"LEPCHA: Character.UnicodeScript","insertText":"LEPCHA"},{"label":"LIMBU","kind":"property","documentation":"LIMBU: Character.UnicodeScript","insertText":"LIMBU"},{"label":"LINEAR_B","kind":"property","documentation":"LINEAR_B: Character.UnicodeScript","insertText":"LINEAR_B"},{"label":"LISU","kind":"property","documentation":"LISU: Character.UnicodeScript","insertText":"LISU"},{"label":"LYCIAN","kind":"property","documentation":"LYCIAN: Character.UnicodeScript","insertText":"LYCIAN"},{"label":"LYDIAN","kind":"property","documentation":"LYDIAN: Character.UnicodeScript","insertText":"LYDIAN"},{"label":"MALAYALAM","kind":"property","documentation":"MALAYALAM: Character.UnicodeScript","insertText":"MALAYALAM"},{"label":"MANDAIC","kind":"property","documentation":"MANDAIC: Character.UnicodeScript","insertText":"MANDAIC"},{"label":"MEETEI_MAYEK","kind":"property","documentation":"MEETEI_MAYEK: Character.UnicodeScript","insertText":"MEETEI_MAYEK"},{"label":"MEROITIC_CURSIVE","kind":"property","documentation":"MEROITIC_CURSIVE: Character.UnicodeScript","insertText":"MEROITIC_CURSIVE"},{"label":"MEROITIC_HIEROGLYPHS","kind":"property","documentation":"MEROITIC_HIEROGLYPHS: Character.UnicodeScript","insertText":"MEROITIC_HIEROGLYPHS"},{"label":"MIAO","kind":"property","documentation":"MIAO: Character.UnicodeScript","insertText":"MIAO"},{"label":"MONGOLIAN","kind":"property","documentation":"MONGOLIAN: Character.UnicodeScript","insertText":"MONGOLIAN"},{"label":"MYANMAR","kind":"property","documentation":"MYANMAR: Character.UnicodeScript","insertText":"MYANMAR"},{"label":"NEW_TAI_LUE","kind":"property","documentation":"NEW_TAI_LUE: Character.UnicodeScript","insertText":"NEW_TAI_LUE"},{"label":"NKO","kind":"property","documentation":"NKO: Character.UnicodeScript","insertText":"NKO"},{"label":"OGHAM","kind":"property","documentation":"OGHAM: Character.UnicodeScript","insertText":"OGHAM"},{"label":"OLD_ITALIC","kind":"property","documentation":"OLD_ITALIC: Character.UnicodeScript","insertText":"OLD_ITALIC"},{"label":"OLD_PERSIAN","kind":"property","documentation":"OLD_PERSIAN: Character.UnicodeScript","insertText":"OLD_PERSIAN"},{"label":"OLD_SOUTH_ARABIAN","kind":"property","documentation":"OLD_SOUTH_ARABIAN: Character.UnicodeScript","insertText":"OLD_SOUTH_ARABIAN"},{"label":"OLD_TURKIC","kind":"property","documentation":"OLD_TURKIC: Character.UnicodeScript","insertText":"OLD_TURKIC"},{"label":"OL_CHIKI","kind":"property","documentation":"OL_CHIKI: Character.UnicodeScript","insertText":"OL_CHIKI"},{"label":"ORIYA","kind":"property","documentation":"ORIYA: Character.UnicodeScript","insertText":"ORIYA"},{"label":"OSMANYA","kind":"property","documentation":"OSMANYA: Character.UnicodeScript","insertText":"OSMANYA"},{"label":"PHAGS_PA","kind":"property","documentation":"PHAGS_PA: Character.UnicodeScript","insertText":"PHAGS_PA"},{"label":"PHOENICIAN","kind":"property","documentation":"PHOENICIAN: Character.UnicodeScript","insertText":"PHOENICIAN"},{"label":"REJANG","kind":"property","documentation":"REJANG: Character.UnicodeScript","insertText":"REJANG"},{"label":"RUNIC","kind":"property","documentation":"RUNIC: Character.UnicodeScript","insertText":"RUNIC"},{"label":"SAMARITAN","kind":"property","documentation":"SAMARITAN: Character.UnicodeScript","insertText":"SAMARITAN"},{"label":"SAURASHTRA","kind":"property","documentation":"SAURASHTRA: Character.UnicodeScript","insertText":"SAURASHTRA"},{"label":"SHARADA","kind":"property","documentation":"SHARADA: Character.UnicodeScript","insertText":"SHARADA"},{"label":"SHAVIAN","kind":"property","documentation":"SHAVIAN: Character.UnicodeScript","insertText":"SHAVIAN"},{"label":"SINHALA","kind":"property","documentation":"SINHALA: Character.UnicodeScript","insertText":"SINHALA"},{"label":"SORA_SOMPENG","kind":"property","documentation":"SORA_SOMPENG: Character.UnicodeScript","insertText":"SORA_SOMPENG"},{"label":"SUNDANESE","kind":"property","documentation":"SUNDANESE: Character.UnicodeScript","insertText":"SUNDANESE"},{"label":"SYLOTI_NAGRI","kind":"property","documentation":"SYLOTI_NAGRI: Character.UnicodeScript","insertText":"SYLOTI_NAGRI"},{"label":"SYRIAC","kind":"property","documentation":"SYRIAC: Character.UnicodeScript","insertText":"SYRIAC"},{"label":"TAGALOG","kind":"property","documentation":"TAGALOG: Character.UnicodeScript","insertText":"TAGALOG"},{"label":"TAGBANWA","kind":"property","documentation":"TAGBANWA: Character.UnicodeScript","insertText":"TAGBANWA"},{"label":"TAI_LE","kind":"property","documentation":"TAI_LE: Character.UnicodeScript","insertText":"TAI_LE"},{"label":"TAI_THAM","kind":"property","documentation":"TAI_THAM: Character.UnicodeScript","insertText":"TAI_THAM"},{"label":"TAI_VIET","kind":"property","documentation":"TAI_VIET: Character.UnicodeScript","insertText":"TAI_VIET"},{"label":"TAKRI","kind":"property","documentation":"TAKRI: Character.UnicodeScript","insertText":"TAKRI"},{"label":"TAMIL","kind":"property","documentation":"TAMIL: Character.UnicodeScript","insertText":"TAMIL"},{"label":"TELUGU","kind":"property","documentation":"TELUGU: Character.UnicodeScript","insertText":"TELUGU"},{"label":"THAANA","kind":"property","documentation":"THAANA: Character.UnicodeScript","insertText":"THAANA"},{"label":"THAI","kind":"property","documentation":"THAI: Character.UnicodeScript","insertText":"THAI"},{"label":"TIBETAN","kind":"property","documentation":"TIBETAN: Character.UnicodeScript","insertText":"TIBETAN"},{"label":"TIFINAGH","kind":"property","documentation":"TIFINAGH: Character.UnicodeScript","insertText":"TIFINAGH"},{"label":"UGARITIC","kind":"property","documentation":"UGARITIC: Character.UnicodeScript","insertText":"UGARITIC"},{"label":"UNKNOWN","kind":"property","documentation":"UNKNOWN: Character.UnicodeScript","insertText":"UNKNOWN"},{"label":"VAI","kind":"property","documentation":"VAI: Character.UnicodeScript","insertText":"VAI"},{"label":"YI","kind":"property","documentation":"YI: Character.UnicodeScript","insertText":"YI"},{"label":"forName","kind":"method","documentation":"forName(String a): Character.UnicodeScript","insertText":"forName"},{"label":"of","kind":"method","documentation":"of(int a): Character.UnicodeScript","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Character.UnicodeScript","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Character.UnicodeScript[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ClassCastException","kind":"class","documentation":"Class: ClassCastException","insertText":"ClassCastException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ClassCastException","kind":"constructor","documentation":"Constructor: ClassCastException","insertText":"ClassCastException"}},{"label":"ClassNotFoundException","kind":"class","documentation":"Class: ClassNotFoundException","insertText":"ClassNotFoundException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ClassNotFoundException","kind":"constructor","documentation":"Constructor: ClassNotFoundException","insertText":"ClassNotFoundException"}},{"label":"CloneNotSupportedException","kind":"class","documentation":"Class: CloneNotSupportedException","insertText":"CloneNotSupportedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"CloneNotSupportedException","kind":"constructor","documentation":"Constructor: CloneNotSupportedException","insertText":"CloneNotSupportedException"}},{"label":"Comparable","kind":"class","documentation":"Class: Comparable","insertText":"Comparable","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Double","kind":"class","documentation":"Class: Double","insertText":"Double","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_EXPONENT","kind":"property","documentation":"MAX_EXPONENT: int","insertText":"MAX_EXPONENT"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: double","insertText":"MAX_VALUE"},{"label":"MIN_EXPONENT","kind":"property","documentation":"MIN_EXPONENT: int","insertText":"MIN_EXPONENT"},{"label":"MIN_NORMAL","kind":"property","documentation":"MIN_NORMAL: double","insertText":"MIN_NORMAL"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: double","insertText":"MIN_VALUE"},{"label":"NEGATIVE_INFINITY","kind":"property","documentation":"NEGATIVE_INFINITY: double","insertText":"NEGATIVE_INFINITY"},{"label":"NaN","kind":"property","documentation":"NaN: double","insertText":"NaN"},{"label":"POSITIVE_INFINITY","kind":"property","documentation":"POSITIVE_INFINITY: double","insertText":"POSITIVE_INFINITY"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(double a, double b): int","insertText":"compare"},{"label":"doubleToLongBits","kind":"method","documentation":"doubleToLongBits(double a): long","insertText":"doubleToLongBits"},{"label":"doubleToRawLongBits","kind":"method","documentation":"doubleToRawLongBits(double a): long","insertText":"doubleToRawLongBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(double a): int","insertText":"hashCode"},{"label":"isFinite","kind":"method","documentation":"isFinite(double a): boolean","insertText":"isFinite"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(double a): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(double a): boolean","insertText":"isNaN"},{"label":"longBitsToDouble","kind":"method","documentation":"longBitsToDouble(long a): double","insertText":"longBitsToDouble"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"parseDouble","kind":"method","documentation":"parseDouble(String a): double","insertText":"parseDouble"},{"label":"sum","kind":"method","documentation":"sum(double a, double b): double","insertText":"sum"},{"label":"toHexString","kind":"method","documentation":"toHexString(double a): String","insertText":"toHexString"},{"label":"toString","kind":"method","documentation":"toString(double a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(double a): Double","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Double a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(): boolean","insertText":"isNaN"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Enum","kind":"class","documentation":"Class: Enum","insertText":"Enum","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EnumConstantNotPresentException","kind":"class","documentation":"Class: EnumConstantNotPresentException","insertText":"EnumConstantNotPresentException","properties":[{"label":"constantName","kind":"method","documentation":"constantName(): String","insertText":"constantName"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Exception","kind":"class","documentation":"Class: Exception","insertText":"Exception","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Exception","kind":"constructor","documentation":"Constructor: Exception","insertText":"Exception"}},{"label":"Float","kind":"class","documentation":"Class: Float","insertText":"Float","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_EXPONENT","kind":"property","documentation":"MAX_EXPONENT: int","insertText":"MAX_EXPONENT"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: float","insertText":"MAX_VALUE"},{"label":"MIN_EXPONENT","kind":"property","documentation":"MIN_EXPONENT: int","insertText":"MIN_EXPONENT"},{"label":"MIN_NORMAL","kind":"property","documentation":"MIN_NORMAL: float","insertText":"MIN_NORMAL"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: float","insertText":"MIN_VALUE"},{"label":"NEGATIVE_INFINITY","kind":"property","documentation":"NEGATIVE_INFINITY: float","insertText":"NEGATIVE_INFINITY"},{"label":"NaN","kind":"property","documentation":"NaN: float","insertText":"NaN"},{"label":"POSITIVE_INFINITY","kind":"property","documentation":"POSITIVE_INFINITY: float","insertText":"POSITIVE_INFINITY"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(float a, float b): int","insertText":"compare"},{"label":"floatToIntBits","kind":"method","documentation":"floatToIntBits(float a): int","insertText":"floatToIntBits"},{"label":"floatToRawIntBits","kind":"method","documentation":"floatToRawIntBits(float a): int","insertText":"floatToRawIntBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(float a): int","insertText":"hashCode"},{"label":"intBitsToFloat","kind":"method","documentation":"intBitsToFloat(int a): float","insertText":"intBitsToFloat"},{"label":"isFinite","kind":"method","documentation":"isFinite(float a): boolean","insertText":"isFinite"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(float a): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(float a): boolean","insertText":"isNaN"},{"label":"max","kind":"method","documentation":"max(float a, float b): float","insertText":"max"},{"label":"min","kind":"method","documentation":"min(float a, float b): float","insertText":"min"},{"label":"parseFloat","kind":"method","documentation":"parseFloat(String a): float","insertText":"parseFloat"},{"label":"sum","kind":"method","documentation":"sum(float a, float b): float","insertText":"sum"},{"label":"toHexString","kind":"method","documentation":"toHexString(float a): String","insertText":"toHexString"},{"label":"toString","kind":"method","documentation":"toString(float a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(float a): Float","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Float a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(): boolean","insertText":"isNaN"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalAccessException","kind":"class","documentation":"Class: IllegalAccessException","insertText":"IllegalAccessException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalAccessException","kind":"constructor","documentation":"Constructor: IllegalAccessException","insertText":"IllegalAccessException"}},{"label":"IllegalArgumentException","kind":"class","documentation":"Class: IllegalArgumentException","insertText":"IllegalArgumentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalArgumentException","kind":"constructor","documentation":"Constructor: IllegalArgumentException","insertText":"IllegalArgumentException"}},{"label":"IllegalMonitorStateException","kind":"class","documentation":"Class: IllegalMonitorStateException","insertText":"IllegalMonitorStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalMonitorStateException","kind":"constructor","documentation":"Constructor: IllegalMonitorStateException","insertText":"IllegalMonitorStateException"}},{"label":"IllegalStateException","kind":"class","documentation":"Class: IllegalStateException","insertText":"IllegalStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalStateException","kind":"constructor","documentation":"Constructor: IllegalStateException","insertText":"IllegalStateException"}},{"label":"IllegalThreadStateException","kind":"class","documentation":"Class: IllegalThreadStateException","insertText":"IllegalThreadStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalThreadStateException","kind":"constructor","documentation":"Constructor: IllegalThreadStateException","insertText":"IllegalThreadStateException"}},{"label":"IndexOutOfBoundsException","kind":"class","documentation":"Class: IndexOutOfBoundsException","insertText":"IndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: IndexOutOfBoundsException","insertText":"IndexOutOfBoundsException"}},{"label":"InstantiationException","kind":"class","documentation":"Class: InstantiationException","insertText":"InstantiationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InstantiationException","kind":"constructor","documentation":"Constructor: InstantiationException","insertText":"InstantiationException"}},{"label":"Integer","kind":"class","documentation":"Class: Integer","insertText":"Integer","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: int","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: int","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"bitCount","kind":"method","documentation":"bitCount(int a): int","insertText":"bitCount"},{"label":"compare","kind":"method","documentation":"compare(int a, int b): int","insertText":"compare"},{"label":"compareUnsigned","kind":"method","documentation":"compareUnsigned(int a, int b): int","insertText":"compareUnsigned"},{"label":"decode","kind":"method","documentation":"decode(String a): Integer","insertText":"decode"},{"label":"divideUnsigned","kind":"method","documentation":"divideUnsigned(int a, int b): int","insertText":"divideUnsigned"},{"label":"hashCode","kind":"method","documentation":"hashCode(int a): int","insertText":"hashCode"},{"label":"highestOneBit","kind":"method","documentation":"highestOneBit(int a): int","insertText":"highestOneBit"},{"label":"lowestOneBit","kind":"method","documentation":"lowestOneBit(int a): int","insertText":"lowestOneBit"},{"label":"max","kind":"method","documentation":"max(int a, int b): int","insertText":"max"},{"label":"min","kind":"method","documentation":"min(int a, int b): int","insertText":"min"},{"label":"numberOfLeadingZeros","kind":"method","documentation":"numberOfLeadingZeros(int a): int","insertText":"numberOfLeadingZeros"},{"label":"numberOfTrailingZeros","kind":"method","documentation":"numberOfTrailingZeros(int a): int","insertText":"numberOfTrailingZeros"},{"label":"parseInt","kind":"method","documentation":"parseInt(String a, int b | String a): int","insertText":"parseInt"},{"label":"parseUnsignedInt","kind":"method","documentation":"parseUnsignedInt(String a, int b | String a): int","insertText":"parseUnsignedInt"},{"label":"remainderUnsigned","kind":"method","documentation":"remainderUnsigned(int a, int b): int","insertText":"remainderUnsigned"},{"label":"reverse","kind":"method","documentation":"reverse(int a): int","insertText":"reverse"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(int a): int","insertText":"reverseBytes"},{"label":"rotateLeft","kind":"method","documentation":"rotateLeft(int a, int b): int","insertText":"rotateLeft"},{"label":"rotateRight","kind":"method","documentation":"rotateRight(int a, int b): int","insertText":"rotateRight"},{"label":"signum","kind":"method","documentation":"signum(int a): int","insertText":"signum"},{"label":"toBinaryString","kind":"method","documentation":"toBinaryString(int a): String","insertText":"toBinaryString"},{"label":"toHexString","kind":"method","documentation":"toHexString(int a): String","insertText":"toHexString"},{"label":"toOctalString","kind":"method","documentation":"toOctalString(int a): String","insertText":"toOctalString"},{"label":"toString","kind":"method","documentation":"toString(int a, int b | int a): String","insertText":"toString"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(int a): long","insertText":"toUnsignedLong"},{"label":"toUnsignedString","kind":"method","documentation":"toUnsignedString(int a, int b | int a): String","insertText":"toUnsignedString"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | int a): Integer","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Integer a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"InterruptedException","kind":"class","documentation":"Class: InterruptedException","insertText":"InterruptedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InterruptedException","kind":"constructor","documentation":"Constructor: InterruptedException","insertText":"InterruptedException"}},{"label":"Iterable","kind":"class","documentation":"Class: Iterable","insertText":"Iterable","properties":[{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Long","kind":"class","documentation":"Class: Long","insertText":"Long","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: long","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: long","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"bitCount","kind":"method","documentation":"bitCount(long a): int","insertText":"bitCount"},{"label":"compare","kind":"method","documentation":"compare(long a, long b): int","insertText":"compare"},{"label":"compareUnsigned","kind":"method","documentation":"compareUnsigned(long a, long b): int","insertText":"compareUnsigned"},{"label":"decode","kind":"method","documentation":"decode(String a): Long","insertText":"decode"},{"label":"divideUnsigned","kind":"method","documentation":"divideUnsigned(long a, long b): long","insertText":"divideUnsigned"},{"label":"hashCode","kind":"method","documentation":"hashCode(long a): int","insertText":"hashCode"},{"label":"highestOneBit","kind":"method","documentation":"highestOneBit(long a): long","insertText":"highestOneBit"},{"label":"lowestOneBit","kind":"method","documentation":"lowestOneBit(long a): long","insertText":"lowestOneBit"},{"label":"max","kind":"method","documentation":"max(long a, long b): long","insertText":"max"},{"label":"min","kind":"method","documentation":"min(long a, long b): long","insertText":"min"},{"label":"numberOfLeadingZeros","kind":"method","documentation":"numberOfLeadingZeros(long a): int","insertText":"numberOfLeadingZeros"},{"label":"numberOfTrailingZeros","kind":"method","documentation":"numberOfTrailingZeros(long a): int","insertText":"numberOfTrailingZeros"},{"label":"parseLong","kind":"method","documentation":"parseLong(String a, int b | String a): long","insertText":"parseLong"},{"label":"parseUnsignedLong","kind":"method","documentation":"parseUnsignedLong(String a, int b | String a): long","insertText":"parseUnsignedLong"},{"label":"remainderUnsigned","kind":"method","documentation":"remainderUnsigned(long a, long b): long","insertText":"remainderUnsigned"},{"label":"reverse","kind":"method","documentation":"reverse(long a): long","insertText":"reverse"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(long a): long","insertText":"reverseBytes"},{"label":"rotateLeft","kind":"method","documentation":"rotateLeft(long a, int b): long","insertText":"rotateLeft"},{"label":"rotateRight","kind":"method","documentation":"rotateRight(long a, int b): long","insertText":"rotateRight"},{"label":"signum","kind":"method","documentation":"signum(long a): int","insertText":"signum"},{"label":"sum","kind":"method","documentation":"sum(long a, long b): long","insertText":"sum"},{"label":"toBinaryString","kind":"method","documentation":"toBinaryString(long a): String","insertText":"toBinaryString"},{"label":"toHexString","kind":"method","documentation":"toHexString(long a): String","insertText":"toHexString"},{"label":"toOctalString","kind":"method","documentation":"toOctalString(long a): String","insertText":"toOctalString"},{"label":"toString","kind":"method","documentation":"toString(long a, int b | long a): String","insertText":"toString"},{"label":"toUnsignedString","kind":"method","documentation":"toUnsignedString(long a, int b | long a): String","insertText":"toUnsignedString"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | long a): Long","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Long a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Math","kind":"class","documentation":"Class: Math","insertText":"Math","properties":[{"label":"E","kind":"property","documentation":"E: double","insertText":"E"},{"label":"PI","kind":"property","documentation":"PI: double","insertText":"PI"},{"label":"IEEEremainder","kind":"method","documentation":"IEEEremainder(double a, double b): double","insertText":"IEEEremainder"},{"label":"abs","kind":"method","documentation":"abs(double a): double","insertText":"abs"},{"label":"acos","kind":"method","documentation":"acos(double a): double","insertText":"acos"},{"label":"asin","kind":"method","documentation":"asin(double a): double","insertText":"asin"},{"label":"atan","kind":"method","documentation":"atan(double a): double","insertText":"atan"},{"label":"atan2","kind":"method","documentation":"atan2(double a, double b): double","insertText":"atan2"},{"label":"cbrt","kind":"method","documentation":"cbrt(double a): double","insertText":"cbrt"},{"label":"ceil","kind":"method","documentation":"ceil(double a): double","insertText":"ceil"},{"label":"copySign","kind":"method","documentation":"copySign(double a, double b): double","insertText":"copySign"},{"label":"cos","kind":"method","documentation":"cos(double a): double","insertText":"cos"},{"label":"cosh","kind":"method","documentation":"cosh(double a): double","insertText":"cosh"},{"label":"exp","kind":"method","documentation":"exp(double a): double","insertText":"exp"},{"label":"expm1","kind":"method","documentation":"expm1(double a): double","insertText":"expm1"},{"label":"floor","kind":"method","documentation":"floor(double a): double","insertText":"floor"},{"label":"hypot","kind":"method","documentation":"hypot(double a, double b): double","insertText":"hypot"},{"label":"log","kind":"method","documentation":"log(double a): double","insertText":"log"},{"label":"log10","kind":"method","documentation":"log10(double a): double","insertText":"log10"},{"label":"log1p","kind":"method","documentation":"log1p(double a): double","insertText":"log1p"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"nextAfter","kind":"method","documentation":"nextAfter(double a, double b): double","insertText":"nextAfter"},{"label":"nextDown","kind":"method","documentation":"nextDown(double a): double","insertText":"nextDown"},{"label":"nextUp","kind":"method","documentation":"nextUp(double a): double","insertText":"nextUp"},{"label":"pow","kind":"method","documentation":"pow(double a, double b): double","insertText":"pow"},{"label":"random","kind":"method","documentation":"random(): double","insertText":"random"},{"label":"rint","kind":"method","documentation":"rint(double a): double","insertText":"rint"},{"label":"round","kind":"method","documentation":"round(double a): long","insertText":"round"},{"label":"scalb","kind":"method","documentation":"scalb(double a, int b): double","insertText":"scalb"},{"label":"signum","kind":"method","documentation":"signum(double a): double","insertText":"signum"},{"label":"sin","kind":"method","documentation":"sin(double a): double","insertText":"sin"},{"label":"sinh","kind":"method","documentation":"sinh(double a): double","insertText":"sinh"},{"label":"sqrt","kind":"method","documentation":"sqrt(double a): double","insertText":"sqrt"},{"label":"tan","kind":"method","documentation":"tan(double a): double","insertText":"tan"},{"label":"tanh","kind":"method","documentation":"tanh(double a): double","insertText":"tanh"},{"label":"toDegrees","kind":"method","documentation":"toDegrees(double a): double","insertText":"toDegrees"},{"label":"toRadians","kind":"method","documentation":"toRadians(double a): double","insertText":"toRadians"},{"label":"ulp","kind":"method","documentation":"ulp(double a): double","insertText":"ulp"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NegativeArraySizeException","kind":"class","documentation":"Class: NegativeArraySizeException","insertText":"NegativeArraySizeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NegativeArraySizeException","kind":"constructor","documentation":"Constructor: NegativeArraySizeException","insertText":"NegativeArraySizeException"}},{"label":"NoSuchFieldException","kind":"class","documentation":"Class: NoSuchFieldException","insertText":"NoSuchFieldException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchFieldException","kind":"constructor","documentation":"Constructor: NoSuchFieldException","insertText":"NoSuchFieldException"}},{"label":"NoSuchMethodException","kind":"class","documentation":"Class: NoSuchMethodException","insertText":"NoSuchMethodException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchMethodException","kind":"constructor","documentation":"Constructor: NoSuchMethodException","insertText":"NoSuchMethodException"}},{"label":"NullPointerException","kind":"class","documentation":"Class: NullPointerException","insertText":"NullPointerException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NullPointerException","kind":"constructor","documentation":"Constructor: NullPointerException","insertText":"NullPointerException"}},{"label":"Number","kind":"class","documentation":"Class: Number","insertText":"Number","properties":[{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NumberFormatException","kind":"class","documentation":"Class: NumberFormatException","insertText":"NumberFormatException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NumberFormatException","kind":"constructor","documentation":"Constructor: NumberFormatException","insertText":"NumberFormatException"}},{"label":"Object","kind":"class","documentation":"Class: Object","insertText":"Object","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ReflectiveOperationException","kind":"class","documentation":"Class: ReflectiveOperationException","insertText":"ReflectiveOperationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ReflectiveOperationException","kind":"constructor","documentation":"Constructor: ReflectiveOperationException","insertText":"ReflectiveOperationException"}},{"label":"RuntimeException","kind":"class","documentation":"Class: RuntimeException","insertText":"RuntimeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"RuntimeException","kind":"constructor","documentation":"Constructor: RuntimeException","insertText":"RuntimeException"}},{"label":"SecurityException","kind":"class","documentation":"Class: SecurityException","insertText":"SecurityException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SecurityException","kind":"constructor","documentation":"Constructor: SecurityException","insertText":"SecurityException"}},{"label":"Short","kind":"class","documentation":"Class: Short","insertText":"Short","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: short","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: short","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(short a, short b): int","insertText":"compare"},{"label":"decode","kind":"method","documentation":"decode(String a): Short","insertText":"decode"},{"label":"hashCode","kind":"method","documentation":"hashCode(short a): int","insertText":"hashCode"},{"label":"parseShort","kind":"method","documentation":"parseShort(String a, int b | String a): short","insertText":"parseShort"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(short a): short","insertText":"reverseBytes"},{"label":"toString","kind":"method","documentation":"toString(short a): String","insertText":"toString"},{"label":"toUnsignedInt","kind":"method","documentation":"toUnsignedInt(short a): int","insertText":"toUnsignedInt"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(short a): long","insertText":"toUnsignedLong"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | short a): Short","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Short a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"StackTraceElement","kind":"class","documentation":"Class: StackTraceElement","insertText":"StackTraceElement","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getClassName","kind":"method","documentation":"getClassName(): String","insertText":"getClassName"},{"label":"getFileName","kind":"method","documentation":"getFileName(): String","insertText":"getFileName"},{"label":"getLineNumber","kind":"method","documentation":"getLineNumber(): int","insertText":"getLineNumber"},{"label":"getMethodName","kind":"method","documentation":"getMethodName(): String","insertText":"getMethodName"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNativeMethod","kind":"method","documentation":"isNativeMethod(): boolean","insertText":"isNativeMethod"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StackTraceElement","kind":"constructor","documentation":"Constructor: StackTraceElement","insertText":"StackTraceElement"}},{"label":"StrictMath","kind":"class","documentation":"Class: StrictMath","insertText":"StrictMath","properties":[{"label":"E","kind":"property","documentation":"E: double","insertText":"E"},{"label":"PI","kind":"property","documentation":"PI: double","insertText":"PI"},{"label":"IEEEremainder","kind":"method","documentation":"IEEEremainder(double a, double b): double","insertText":"IEEEremainder"},{"label":"abs","kind":"method","documentation":"abs(double a): double","insertText":"abs"},{"label":"acos","kind":"method","documentation":"acos(double a): double","insertText":"acos"},{"label":"asin","kind":"method","documentation":"asin(double a): double","insertText":"asin"},{"label":"atan","kind":"method","documentation":"atan(double a): double","insertText":"atan"},{"label":"atan2","kind":"method","documentation":"atan2(double a, double b): double","insertText":"atan2"},{"label":"cbrt","kind":"method","documentation":"cbrt(double a): double","insertText":"cbrt"},{"label":"ceil","kind":"method","documentation":"ceil(double a): double","insertText":"ceil"},{"label":"copySign","kind":"method","documentation":"copySign(double a, double b): double","insertText":"copySign"},{"label":"cos","kind":"method","documentation":"cos(double a): double","insertText":"cos"},{"label":"cosh","kind":"method","documentation":"cosh(double a): double","insertText":"cosh"},{"label":"exp","kind":"method","documentation":"exp(double a): double","insertText":"exp"},{"label":"expm1","kind":"method","documentation":"expm1(double a): double","insertText":"expm1"},{"label":"floor","kind":"method","documentation":"floor(double a): double","insertText":"floor"},{"label":"hypot","kind":"method","documentation":"hypot(double a, double b): double","insertText":"hypot"},{"label":"log","kind":"method","documentation":"log(double a): double","insertText":"log"},{"label":"log10","kind":"method","documentation":"log10(double a): double","insertText":"log10"},{"label":"log1p","kind":"method","documentation":"log1p(double a): double","insertText":"log1p"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"nextAfter","kind":"method","documentation":"nextAfter(double a, double b): double","insertText":"nextAfter"},{"label":"nextDown","kind":"method","documentation":"nextDown(double a): double","insertText":"nextDown"},{"label":"nextUp","kind":"method","documentation":"nextUp(double a): double","insertText":"nextUp"},{"label":"pow","kind":"method","documentation":"pow(double a, double b): double","insertText":"pow"},{"label":"random","kind":"method","documentation":"random(): double","insertText":"random"},{"label":"rint","kind":"method","documentation":"rint(double a): double","insertText":"rint"},{"label":"round","kind":"method","documentation":"round(double a): long","insertText":"round"},{"label":"scalb","kind":"method","documentation":"scalb(double a, int b): double","insertText":"scalb"},{"label":"signum","kind":"method","documentation":"signum(double a): double","insertText":"signum"},{"label":"sin","kind":"method","documentation":"sin(double a): double","insertText":"sin"},{"label":"sinh","kind":"method","documentation":"sinh(double a): double","insertText":"sinh"},{"label":"sqrt","kind":"method","documentation":"sqrt(double a): double","insertText":"sqrt"},{"label":"tan","kind":"method","documentation":"tan(double a): double","insertText":"tan"},{"label":"tanh","kind":"method","documentation":"tanh(double a): double","insertText":"tanh"},{"label":"toDegrees","kind":"method","documentation":"toDegrees(double a): double","insertText":"toDegrees"},{"label":"toRadians","kind":"method","documentation":"toRadians(double a): double","insertText":"toRadians"},{"label":"ulp","kind":"method","documentation":"ulp(double a): double","insertText":"ulp"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"StringBuffer","kind":"class","documentation":"Class: StringBuffer","insertText":"StringBuffer","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c | def a): StringBuffer","insertText":"append"},{"label":"appendCodePoint","kind":"method","documentation":"appendCodePoint(int a): StringBuffer","insertText":"appendCodePoint"},{"label":"capacity","kind":"method","documentation":"capacity(): int","insertText":"capacity"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"delete","kind":"method","documentation":"delete(int a, int b): StringBuffer","insertText":"delete"},{"label":"deleteCharAt","kind":"method","documentation":"deleteCharAt(int a): StringBuffer","insertText":"deleteCharAt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"insert","kind":"method","documentation":"insert(int a, def b): StringBuffer","insertText":"insert"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"replace","kind":"method","documentation":"replace(int a, int b, String c): StringBuffer","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"reverse","kind":"method","documentation":"reverse(): StringBuffer","insertText":"reverse"},{"label":"setCharAt","kind":"method","documentation":"setCharAt(int a, char b): void","insertText":"setCharAt"},{"label":"setLength","kind":"method","documentation":"setLength(int a): void","insertText":"setLength"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringBuffer","kind":"constructor","documentation":"Constructor: StringBuffer","insertText":"StringBuffer"}},{"label":"StringBuilder","kind":"class","documentation":"Class: StringBuilder","insertText":"StringBuilder","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c | def a): StringBuilder","insertText":"append"},{"label":"appendCodePoint","kind":"method","documentation":"appendCodePoint(int a): StringBuilder","insertText":"appendCodePoint"},{"label":"capacity","kind":"method","documentation":"capacity(): int","insertText":"capacity"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"delete","kind":"method","documentation":"delete(int a, int b): StringBuilder","insertText":"delete"},{"label":"deleteCharAt","kind":"method","documentation":"deleteCharAt(int a): StringBuilder","insertText":"deleteCharAt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"insert","kind":"method","documentation":"insert(int a, def b): StringBuilder","insertText":"insert"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"replace","kind":"method","documentation":"replace(int a, int b, String c): StringBuilder","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"reverse","kind":"method","documentation":"reverse(): StringBuilder","insertText":"reverse"},{"label":"setCharAt","kind":"method","documentation":"setCharAt(int a, char b): void","insertText":"setCharAt"},{"label":"setLength","kind":"method","documentation":"setLength(int a): void","insertText":"setLength"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringBuilder","kind":"constructor","documentation":"Constructor: StringBuilder","insertText":"StringBuilder"}},{"label":"StringIndexOutOfBoundsException","kind":"class","documentation":"Class: StringIndexOutOfBoundsException","insertText":"StringIndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringIndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: StringIndexOutOfBoundsException","insertText":"StringIndexOutOfBoundsException"}},{"label":"System","kind":"class","documentation":"Class: System","insertText":"System","properties":[{"label":"arraycopy","kind":"method","documentation":"arraycopy(Object a, int b, Object c, int d, int e): void","insertText":"arraycopy"},{"label":"currentTimeMillis","kind":"method","documentation":"currentTimeMillis(): long","insertText":"currentTimeMillis"},{"label":"nanoTime","kind":"method","documentation":"nanoTime(): long","insertText":"nanoTime"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TypeNotPresentException","kind":"class","documentation":"Class: TypeNotPresentException","insertText":"TypeNotPresentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"typeName","kind":"method","documentation":"typeName(): String","insertText":"typeName"}]},{"label":"UnsupportedOperationException","kind":"class","documentation":"Class: UnsupportedOperationException","insertText":"UnsupportedOperationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnsupportedOperationException","kind":"constructor","documentation":"Constructor: UnsupportedOperationException","insertText":"UnsupportedOperationException"}},{"label":"Void","kind":"class","documentation":"Class: Void","insertText":"Void","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BigDecimal","kind":"class","documentation":"Class: BigDecimal","insertText":"BigDecimal","properties":[{"label":"ONE","kind":"property","documentation":"ONE: BigDecimal","insertText":"ONE"},{"label":"TEN","kind":"property","documentation":"TEN: BigDecimal","insertText":"TEN"},{"label":"ZERO","kind":"property","documentation":"ZERO: BigDecimal","insertText":"ZERO"},{"label":"valueOf","kind":"method","documentation":"valueOf(double a): BigDecimal","insertText":"valueOf"},{"label":"abs","kind":"method","documentation":"abs(MathContext a): BigDecimal","insertText":"abs"},{"label":"add","kind":"method","documentation":"add(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"add"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"byteValueExact","kind":"method","documentation":"byteValueExact(): byte","insertText":"byteValueExact"},{"label":"compareTo","kind":"method","documentation":"compareTo(BigDecimal a): int","insertText":"compareTo"},{"label":"divide","kind":"method","documentation":"divide(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"divide"},{"label":"divideAndRemainder","kind":"method","documentation":"divideAndRemainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal[]","insertText":"divideAndRemainder"},{"label":"divideToIntegralValue","kind":"method","documentation":"divideToIntegralValue(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"divideToIntegralValue"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"intValueExact","kind":"method","documentation":"intValueExact(): int","insertText":"intValueExact"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"longValueExact","kind":"method","documentation":"longValueExact(): long","insertText":"longValueExact"},{"label":"max","kind":"method","documentation":"max(BigDecimal a): BigDecimal","insertText":"max"},{"label":"min","kind":"method","documentation":"min(BigDecimal a): BigDecimal","insertText":"min"},{"label":"movePointLeft","kind":"method","documentation":"movePointLeft(int a): BigDecimal","insertText":"movePointLeft"},{"label":"movePointRight","kind":"method","documentation":"movePointRight(int a): BigDecimal","insertText":"movePointRight"},{"label":"multiply","kind":"method","documentation":"multiply(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"multiply"},{"label":"negate","kind":"method","documentation":"negate(MathContext a): BigDecimal","insertText":"negate"},{"label":"plus","kind":"method","documentation":"plus(MathContext a): BigDecimal","insertText":"plus"},{"label":"pow","kind":"method","documentation":"pow(int a, MathContext b | int a): BigDecimal","insertText":"pow"},{"label":"precision","kind":"method","documentation":"precision(): int","insertText":"precision"},{"label":"remainder","kind":"method","documentation":"remainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"remainder"},{"label":"round","kind":"method","documentation":"round(MathContext a): BigDecimal","insertText":"round"},{"label":"scale","kind":"method","documentation":"scale(): int","insertText":"scale"},{"label":"scaleByPowerOfTen","kind":"method","documentation":"scaleByPowerOfTen(int a): BigDecimal","insertText":"scaleByPowerOfTen"},{"label":"setScale","kind":"method","documentation":"setScale(int a, RoundingMode b | int a): BigDecimal","insertText":"setScale"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"shortValueExact","kind":"method","documentation":"shortValueExact(): short","insertText":"shortValueExact"},{"label":"signum","kind":"method","documentation":"signum(): int","insertText":"signum"},{"label":"stripTrailingZeros","kind":"method","documentation":"stripTrailingZeros(): BigDecimal","insertText":"stripTrailingZeros"},{"label":"subtract","kind":"method","documentation":"subtract(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"subtract"},{"label":"toBigInteger","kind":"method","documentation":"toBigInteger(): BigInteger","insertText":"toBigInteger"},{"label":"toBigIntegerExact","kind":"method","documentation":"toBigIntegerExact(): BigInteger","insertText":"toBigIntegerExact"},{"label":"toEngineeringString","kind":"method","documentation":"toEngineeringString(): String","insertText":"toEngineeringString"},{"label":"toPlainString","kind":"method","documentation":"toPlainString(): String","insertText":"toPlainString"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"ulp","kind":"method","documentation":"ulp(): BigDecimal","insertText":"ulp"}],"constructorDefinition":{"label":"BigDecimal","kind":"constructor","documentation":"Constructor: BigDecimal","insertText":"BigDecimal"}},{"label":"BigInteger","kind":"class","documentation":"Class: BigInteger","insertText":"BigInteger","properties":[{"label":"ONE","kind":"property","documentation":"ONE: BigInteger","insertText":"ONE"},{"label":"TEN","kind":"property","documentation":"TEN: BigInteger","insertText":"TEN"},{"label":"ZERO","kind":"property","documentation":"ZERO: BigInteger","insertText":"ZERO"},{"label":"valueOf","kind":"method","documentation":"valueOf(long a): BigInteger","insertText":"valueOf"},{"label":"abs","kind":"method","documentation":"abs(): BigInteger","insertText":"abs"},{"label":"add","kind":"method","documentation":"add(BigInteger a): BigInteger","insertText":"add"},{"label":"and","kind":"method","documentation":"and(BigInteger a): BigInteger","insertText":"and"},{"label":"andNot","kind":"method","documentation":"andNot(BigInteger a): BigInteger","insertText":"andNot"},{"label":"bitCount","kind":"method","documentation":"bitCount(): int","insertText":"bitCount"},{"label":"bitLength","kind":"method","documentation":"bitLength(): int","insertText":"bitLength"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"byteValueExact","kind":"method","documentation":"byteValueExact(): byte","insertText":"byteValueExact"},{"label":"clearBit","kind":"method","documentation":"clearBit(int a): BigInteger","insertText":"clearBit"},{"label":"compareTo","kind":"method","documentation":"compareTo(BigInteger a): int","insertText":"compareTo"},{"label":"divide","kind":"method","documentation":"divide(BigInteger a): BigInteger","insertText":"divide"},{"label":"divideAndRemainder","kind":"method","documentation":"divideAndRemainder(BigInteger a): BigInteger[]","insertText":"divideAndRemainder"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flipBit","kind":"method","documentation":"flipBit(int a): BigInteger","insertText":"flipBit"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"gcd","kind":"method","documentation":"gcd(BigInteger a): BigInteger","insertText":"gcd"},{"label":"getLowestSetBit","kind":"method","documentation":"getLowestSetBit(): int","insertText":"getLowestSetBit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"intValueExact","kind":"method","documentation":"intValueExact(): int","insertText":"intValueExact"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"longValueExact","kind":"method","documentation":"longValueExact(): long","insertText":"longValueExact"},{"label":"max","kind":"method","documentation":"max(BigInteger a): BigInteger","insertText":"max"},{"label":"min","kind":"method","documentation":"min(BigInteger a): BigInteger","insertText":"min"},{"label":"mod","kind":"method","documentation":"mod(BigInteger a): BigInteger","insertText":"mod"},{"label":"modInverse","kind":"method","documentation":"modInverse(BigInteger a): BigInteger","insertText":"modInverse"},{"label":"modPow","kind":"method","documentation":"modPow(BigInteger a, BigInteger b): BigInteger","insertText":"modPow"},{"label":"multiply","kind":"method","documentation":"multiply(BigInteger a): BigInteger","insertText":"multiply"},{"label":"negate","kind":"method","documentation":"negate(): BigInteger","insertText":"negate"},{"label":"not","kind":"method","documentation":"not(): BigInteger","insertText":"not"},{"label":"or","kind":"method","documentation":"or(BigInteger a): BigInteger","insertText":"or"},{"label":"pow","kind":"method","documentation":"pow(int a): BigInteger","insertText":"pow"},{"label":"remainder","kind":"method","documentation":"remainder(BigInteger a): BigInteger","insertText":"remainder"},{"label":"setBit","kind":"method","documentation":"setBit(int a): BigInteger","insertText":"setBit"},{"label":"shiftLeft","kind":"method","documentation":"shiftLeft(int a): BigInteger","insertText":"shiftLeft"},{"label":"shiftRight","kind":"method","documentation":"shiftRight(int a): BigInteger","insertText":"shiftRight"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"shortValueExact","kind":"method","documentation":"shortValueExact(): short","insertText":"shortValueExact"},{"label":"signum","kind":"method","documentation":"signum(): int","insertText":"signum"},{"label":"subtract","kind":"method","documentation":"subtract(BigInteger a): BigInteger","insertText":"subtract"},{"label":"testBit","kind":"method","documentation":"testBit(int a): boolean","insertText":"testBit"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toString","kind":"method","documentation":"toString(int a): String","insertText":"toString"},{"label":"xor","kind":"method","documentation":"xor(BigInteger a): BigInteger","insertText":"xor"}],"constructorDefinition":{"label":"BigInteger","kind":"constructor","documentation":"Constructor: BigInteger","insertText":"BigInteger"}},{"label":"MathContext","kind":"class","documentation":"Class: MathContext","insertText":"MathContext","properties":[{"label":"DECIMAL128","kind":"property","documentation":"DECIMAL128: MathContext","insertText":"DECIMAL128"},{"label":"DECIMAL32","kind":"property","documentation":"DECIMAL32: MathContext","insertText":"DECIMAL32"},{"label":"DECIMAL64","kind":"property","documentation":"DECIMAL64: MathContext","insertText":"DECIMAL64"},{"label":"UNLIMITED","kind":"property","documentation":"UNLIMITED: MathContext","insertText":"UNLIMITED"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getPrecision","kind":"method","documentation":"getPrecision(): int","insertText":"getPrecision"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MathContext","kind":"constructor","documentation":"Constructor: MathContext","insertText":"MathContext"}},{"label":"RoundingMode","kind":"class","documentation":"Class: RoundingMode","insertText":"RoundingMode","properties":[{"label":"CEILING","kind":"property","documentation":"CEILING: RoundingMode","insertText":"CEILING"},{"label":"DOWN","kind":"property","documentation":"DOWN: RoundingMode","insertText":"DOWN"},{"label":"FLOOR","kind":"property","documentation":"FLOOR: RoundingMode","insertText":"FLOOR"},{"label":"HALF_DOWN","kind":"property","documentation":"HALF_DOWN: RoundingMode","insertText":"HALF_DOWN"},{"label":"HALF_EVEN","kind":"property","documentation":"HALF_EVEN: RoundingMode","insertText":"HALF_EVEN"},{"label":"HALF_UP","kind":"property","documentation":"HALF_UP: RoundingMode","insertText":"HALF_UP"},{"label":"UNNECESSARY","kind":"property","documentation":"UNNECESSARY: RoundingMode","insertText":"UNNECESSARY"},{"label":"UP","kind":"property","documentation":"UP: RoundingMode","insertText":"UP"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): RoundingMode","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): RoundingMode[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Annotation","kind":"class","documentation":"Class: Annotation","insertText":"Annotation","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Annotation","kind":"constructor","documentation":"Constructor: Annotation","insertText":"Annotation"}},{"label":"AttributedCharacterIterator","kind":"class","documentation":"Class: AttributedCharacterIterator","insertText":"AttributedCharacterIterator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getAllAttributeKeys","kind":"method","documentation":"getAllAttributeKeys(): Set","insertText":"getAllAttributeKeys"},{"label":"getAttribute","kind":"method","documentation":"getAttribute(AttributedCharacterIterator.Attribute a): def","insertText":"getAttribute"},{"label":"getAttributes","kind":"method","documentation":"getAttributes(): Map","insertText":"getAttributes"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"getRunLimit","kind":"method","documentation":"getRunLimit(Set a): int","insertText":"getRunLimit"},{"label":"getRunStart","kind":"method","documentation":"getRunStart(Set a): int","insertText":"getRunStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Attribute","kind":"class","documentation":"Class: Attribute","insertText":"Attribute","properties":[{"label":"INPUT_METHOD_SEGMENT","kind":"property","documentation":"INPUT_METHOD_SEGMENT: AttributedCharacterIterator.Attribute","insertText":"INPUT_METHOD_SEGMENT"},{"label":"LANGUAGE","kind":"property","documentation":"LANGUAGE: AttributedCharacterIterator.Attribute","insertText":"LANGUAGE"},{"label":"READING","kind":"property","documentation":"READING: AttributedCharacterIterator.Attribute","insertText":"READING"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AttributedString","kind":"class","documentation":"Class: AttributedString","insertText":"AttributedString","properties":[{"label":"addAttribute","kind":"method","documentation":"addAttribute(AttributedCharacterIterator.Attribute a, Object b, int c, int d | AttributedCharacterIterator.Attribute a, Object b): void","insertText":"addAttribute"},{"label":"addAttributes","kind":"method","documentation":"addAttributes(Map a, int b, int c): void","insertText":"addAttributes"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getIterator","kind":"method","documentation":"getIterator(AttributedCharacterIterator.Attribute[] a, int b, int c | AttributedCharacterIterator.Attribute[] a): AttributedCharacterIterator","insertText":"getIterator"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"AttributedString","kind":"constructor","documentation":"Constructor: AttributedString","insertText":"AttributedString"}},{"label":"Bidi","kind":"class","documentation":"Class: Bidi","insertText":"Bidi","properties":[{"label":"DIRECTION_DEFAULT_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTION_DEFAULT_LEFT_TO_RIGHT: int","insertText":"DIRECTION_DEFAULT_LEFT_TO_RIGHT"},{"label":"DIRECTION_DEFAULT_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTION_DEFAULT_RIGHT_TO_LEFT: int","insertText":"DIRECTION_DEFAULT_RIGHT_TO_LEFT"},{"label":"DIRECTION_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTION_LEFT_TO_RIGHT: int","insertText":"DIRECTION_LEFT_TO_RIGHT"},{"label":"DIRECTION_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTION_RIGHT_TO_LEFT: int","insertText":"DIRECTION_RIGHT_TO_LEFT"},{"label":"reorderVisually","kind":"method","documentation":"reorderVisually(byte[] a, int b, Object[] c, int d, int e): void","insertText":"reorderVisually"},{"label":"requiresBidi","kind":"method","documentation":"requiresBidi(char[] a, int b, int c): boolean","insertText":"requiresBidi"},{"label":"baseIsLeftToRight","kind":"method","documentation":"baseIsLeftToRight(): boolean","insertText":"baseIsLeftToRight"},{"label":"createLineBidi","kind":"method","documentation":"createLineBidi(int a, int b): Bidi","insertText":"createLineBidi"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseLevel","kind":"method","documentation":"getBaseLevel(): int","insertText":"getBaseLevel"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getLevelAt","kind":"method","documentation":"getLevelAt(int a): int","insertText":"getLevelAt"},{"label":"getRunCount","kind":"method","documentation":"getRunCount(): int","insertText":"getRunCount"},{"label":"getRunLevel","kind":"method","documentation":"getRunLevel(int a): int","insertText":"getRunLevel"},{"label":"getRunLimit","kind":"method","documentation":"getRunLimit(int a): int","insertText":"getRunLimit"},{"label":"getRunStart","kind":"method","documentation":"getRunStart(int a): int","insertText":"getRunStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeftToRight","kind":"method","documentation":"isLeftToRight(): boolean","insertText":"isLeftToRight"},{"label":"isMixed","kind":"method","documentation":"isMixed(): boolean","insertText":"isMixed"},{"label":"isRightToLeft","kind":"method","documentation":"isRightToLeft(): boolean","insertText":"isRightToLeft"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Bidi","kind":"constructor","documentation":"Constructor: Bidi","insertText":"Bidi"}},{"label":"BreakIterator","kind":"class","documentation":"Class: BreakIterator","insertText":"BreakIterator","properties":[{"label":"DONE","kind":"property","documentation":"DONE: int","insertText":"DONE"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getCharacterInstance","kind":"method","documentation":"getCharacterInstance(Locale a): BreakIterator","insertText":"getCharacterInstance"},{"label":"getLineInstance","kind":"method","documentation":"getLineInstance(Locale a): BreakIterator","insertText":"getLineInstance"},{"label":"getSentenceInstance","kind":"method","documentation":"getSentenceInstance(Locale a): BreakIterator","insertText":"getSentenceInstance"},{"label":"getWordInstance","kind":"method","documentation":"getWordInstance(Locale a): BreakIterator","insertText":"getWordInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): int","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): int","insertText":"first"},{"label":"following","kind":"method","documentation":"following(int a): int","insertText":"following"},{"label":"getText","kind":"method","documentation":"getText(): CharacterIterator","insertText":"getText"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isBoundary","kind":"method","documentation":"isBoundary(int a): boolean","insertText":"isBoundary"},{"label":"last","kind":"method","documentation":"last(): int","insertText":"last"},{"label":"next","kind":"method","documentation":"next(int a): int","insertText":"next"},{"label":"preceding","kind":"method","documentation":"preceding(int a): int","insertText":"preceding"},{"label":"previous","kind":"method","documentation":"previous(): int","insertText":"previous"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CharacterIterator","kind":"class","documentation":"Class: CharacterIterator","insertText":"CharacterIterator","properties":[{"label":"DONE","kind":"property","documentation":"DONE: char","insertText":"DONE"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChoiceFormat","kind":"class","documentation":"Class: ChoiceFormat","insertText":"ChoiceFormat","properties":[{"label":"nextDouble","kind":"method","documentation":"nextDouble(double a, boolean b | double a): double","insertText":"nextDouble"},{"label":"previousDouble","kind":"method","documentation":"previousDouble(double a): double","insertText":"previousDouble"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getFormats","kind":"method","documentation":"getFormats(): def[]","insertText":"getFormats"},{"label":"getLimits","kind":"method","documentation":"getLimits(): double[]","insertText":"getLimits"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setChoices","kind":"method","documentation":"setChoices(double[] a, String[] b): void","insertText":"setChoices"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ChoiceFormat","kind":"constructor","documentation":"Constructor: ChoiceFormat","insertText":"ChoiceFormat"}},{"label":"CollationElementIterator","kind":"class","documentation":"Class: CollationElementIterator","insertText":"CollationElementIterator","properties":[{"label":"NULLORDER","kind":"property","documentation":"NULLORDER: int","insertText":"NULLORDER"},{"label":"primaryOrder","kind":"method","documentation":"primaryOrder(int a): int","insertText":"primaryOrder"},{"label":"secondaryOrder","kind":"method","documentation":"secondaryOrder(int a): short","insertText":"secondaryOrder"},{"label":"tertiaryOrder","kind":"method","documentation":"tertiaryOrder(int a): short","insertText":"tertiaryOrder"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getMaxExpansion","kind":"method","documentation":"getMaxExpansion(int a): int","insertText":"getMaxExpansion"},{"label":"getOffset","kind":"method","documentation":"getOffset(): int","insertText":"getOffset"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): int","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): int","insertText":"previous"},{"label":"reset","kind":"method","documentation":"reset(): void","insertText":"reset"},{"label":"setOffset","kind":"method","documentation":"setOffset(int a): void","insertText":"setOffset"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CollationKey","kind":"class","documentation":"Class: CollationKey","insertText":"CollationKey","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(CollationKey a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getSourceString","kind":"method","documentation":"getSourceString(): String","insertText":"getSourceString"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collator","kind":"class","documentation":"Class: Collator","insertText":"Collator","properties":[{"label":"CANONICAL_DECOMPOSITION","kind":"property","documentation":"CANONICAL_DECOMPOSITION: int","insertText":"CANONICAL_DECOMPOSITION"},{"label":"FULL_DECOMPOSITION","kind":"property","documentation":"FULL_DECOMPOSITION: int","insertText":"FULL_DECOMPOSITION"},{"label":"IDENTICAL","kind":"property","documentation":"IDENTICAL: int","insertText":"IDENTICAL"},{"label":"NO_DECOMPOSITION","kind":"property","documentation":"NO_DECOMPOSITION: int","insertText":"NO_DECOMPOSITION"},{"label":"PRIMARY","kind":"property","documentation":"PRIMARY: int","insertText":"PRIMARY"},{"label":"SECONDARY","kind":"property","documentation":"SECONDARY: int","insertText":"SECONDARY"},{"label":"TERTIARY","kind":"property","documentation":"TERTIARY: int","insertText":"TERTIARY"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): Collator","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(String a, String b | Object a): boolean","insertText":"equals"},{"label":"getCollationKey","kind":"method","documentation":"getCollationKey(String a): CollationKey","insertText":"getCollationKey"},{"label":"getDecomposition","kind":"method","documentation":"getDecomposition(): int","insertText":"getDecomposition"},{"label":"getStrength","kind":"method","documentation":"getStrength(): int","insertText":"getStrength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"setDecomposition","kind":"method","documentation":"setDecomposition(int a): void","insertText":"setDecomposition"},{"label":"setStrength","kind":"method","documentation":"setStrength(int a): void","insertText":"setStrength"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateFormat","kind":"class","documentation":"Class: DateFormat","insertText":"DateFormat","properties":[{"label":"AM_PM_FIELD","kind":"property","documentation":"AM_PM_FIELD: int","insertText":"AM_PM_FIELD"},{"label":"DATE_FIELD","kind":"property","documentation":"DATE_FIELD: int","insertText":"DATE_FIELD"},{"label":"DAY_OF_WEEK_FIELD","kind":"property","documentation":"DAY_OF_WEEK_FIELD: int","insertText":"DAY_OF_WEEK_FIELD"},{"label":"DAY_OF_WEEK_IN_MONTH_FIELD","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH_FIELD: int","insertText":"DAY_OF_WEEK_IN_MONTH_FIELD"},{"label":"DAY_OF_YEAR_FIELD","kind":"property","documentation":"DAY_OF_YEAR_FIELD: int","insertText":"DAY_OF_YEAR_FIELD"},{"label":"DEFAULT","kind":"property","documentation":"DEFAULT: int","insertText":"DEFAULT"},{"label":"ERA_FIELD","kind":"property","documentation":"ERA_FIELD: int","insertText":"ERA_FIELD"},{"label":"FULL","kind":"property","documentation":"FULL: int","insertText":"FULL"},{"label":"HOUR0_FIELD","kind":"property","documentation":"HOUR0_FIELD: int","insertText":"HOUR0_FIELD"},{"label":"HOUR1_FIELD","kind":"property","documentation":"HOUR1_FIELD: int","insertText":"HOUR1_FIELD"},{"label":"HOUR_OF_DAY0_FIELD","kind":"property","documentation":"HOUR_OF_DAY0_FIELD: int","insertText":"HOUR_OF_DAY0_FIELD"},{"label":"HOUR_OF_DAY1_FIELD","kind":"property","documentation":"HOUR_OF_DAY1_FIELD: int","insertText":"HOUR_OF_DAY1_FIELD"},{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"MEDIUM","kind":"property","documentation":"MEDIUM: int","insertText":"MEDIUM"},{"label":"MILLISECOND_FIELD","kind":"property","documentation":"MILLISECOND_FIELD: int","insertText":"MILLISECOND_FIELD"},{"label":"MINUTE_FIELD","kind":"property","documentation":"MINUTE_FIELD: int","insertText":"MINUTE_FIELD"},{"label":"MONTH_FIELD","kind":"property","documentation":"MONTH_FIELD: int","insertText":"MONTH_FIELD"},{"label":"SECOND_FIELD","kind":"property","documentation":"SECOND_FIELD: int","insertText":"SECOND_FIELD"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"TIMEZONE_FIELD","kind":"property","documentation":"TIMEZONE_FIELD: int","insertText":"TIMEZONE_FIELD"},{"label":"WEEK_OF_MONTH_FIELD","kind":"property","documentation":"WEEK_OF_MONTH_FIELD: int","insertText":"WEEK_OF_MONTH_FIELD"},{"label":"WEEK_OF_YEAR_FIELD","kind":"property","documentation":"WEEK_OF_YEAR_FIELD: int","insertText":"WEEK_OF_YEAR_FIELD"},{"label":"YEAR_FIELD","kind":"property","documentation":"YEAR_FIELD: int","insertText":"YEAR_FIELD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getDateInstance","kind":"method","documentation":"getDateInstance(int a, Locale b | int a): DateFormat","insertText":"getDateInstance"},{"label":"getDateTimeInstance","kind":"method","documentation":"getDateTimeInstance(int a, int b, Locale c | int a, int b): DateFormat","insertText":"getDateTimeInstance"},{"label":"getInstance","kind":"method","documentation":"getInstance(): DateFormat","insertText":"getInstance"},{"label":"getTimeInstance","kind":"method","documentation":"getTimeInstance(int a, Locale b | int a): DateFormat","insertText":"getTimeInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCalendar","kind":"method","documentation":"getCalendar(): Calendar","insertText":"getCalendar"},{"label":"getNumberFormat","kind":"method","documentation":"getNumberFormat(): NumberFormat","insertText":"getNumberFormat"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Date","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCalendar","kind":"method","documentation":"setCalendar(Calendar a): void","insertText":"setCalendar"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setNumberFormat","kind":"method","documentation":"setNumberFormat(NumberFormat a): void","insertText":"setNumberFormat"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"AM_PM","kind":"property","documentation":"AM_PM: DateFormat.Field","insertText":"AM_PM"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: DateFormat.Field","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: DateFormat.Field","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH: DateFormat.Field","insertText":"DAY_OF_WEEK_IN_MONTH"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: DateFormat.Field","insertText":"DAY_OF_YEAR"},{"label":"ERA","kind":"property","documentation":"ERA: DateFormat.Field","insertText":"ERA"},{"label":"HOUR0","kind":"property","documentation":"HOUR0: DateFormat.Field","insertText":"HOUR0"},{"label":"HOUR1","kind":"property","documentation":"HOUR1: DateFormat.Field","insertText":"HOUR1"},{"label":"HOUR_OF_DAY0","kind":"property","documentation":"HOUR_OF_DAY0: DateFormat.Field","insertText":"HOUR_OF_DAY0"},{"label":"HOUR_OF_DAY1","kind":"property","documentation":"HOUR_OF_DAY1: DateFormat.Field","insertText":"HOUR_OF_DAY1"},{"label":"MILLISECOND","kind":"property","documentation":"MILLISECOND: DateFormat.Field","insertText":"MILLISECOND"},{"label":"MINUTE","kind":"property","documentation":"MINUTE: DateFormat.Field","insertText":"MINUTE"},{"label":"MONTH","kind":"property","documentation":"MONTH: DateFormat.Field","insertText":"MONTH"},{"label":"SECOND","kind":"property","documentation":"SECOND: DateFormat.Field","insertText":"SECOND"},{"label":"TIME_ZONE","kind":"property","documentation":"TIME_ZONE: DateFormat.Field","insertText":"TIME_ZONE"},{"label":"WEEK_OF_MONTH","kind":"property","documentation":"WEEK_OF_MONTH: DateFormat.Field","insertText":"WEEK_OF_MONTH"},{"label":"WEEK_OF_YEAR","kind":"property","documentation":"WEEK_OF_YEAR: DateFormat.Field","insertText":"WEEK_OF_YEAR"},{"label":"YEAR","kind":"property","documentation":"YEAR: DateFormat.Field","insertText":"YEAR"},{"label":"ofCalendarField","kind":"method","documentation":"ofCalendarField(int a): DateFormat.Field","insertText":"ofCalendarField"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCalendarField","kind":"method","documentation":"getCalendarField(): int","insertText":"getCalendarField"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateFormatSymbols","kind":"class","documentation":"Class: DateFormatSymbols","insertText":"DateFormatSymbols","properties":[{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): DateFormatSymbols","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAmPmStrings","kind":"method","documentation":"getAmPmStrings(): String[]","insertText":"getAmPmStrings"},{"label":"getEras","kind":"method","documentation":"getEras(): String[]","insertText":"getEras"},{"label":"getLocalPatternChars","kind":"method","documentation":"getLocalPatternChars(): String","insertText":"getLocalPatternChars"},{"label":"getMonths","kind":"method","documentation":"getMonths(): String[]","insertText":"getMonths"},{"label":"getShortMonths","kind":"method","documentation":"getShortMonths(): String[]","insertText":"getShortMonths"},{"label":"getShortWeekdays","kind":"method","documentation":"getShortWeekdays(): String[]","insertText":"getShortWeekdays"},{"label":"getWeekdays","kind":"method","documentation":"getWeekdays(): String[]","insertText":"getWeekdays"},{"label":"getZoneStrings","kind":"method","documentation":"getZoneStrings(): String[][]","insertText":"getZoneStrings"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setAmPmStrings","kind":"method","documentation":"setAmPmStrings(String[] a): void","insertText":"setAmPmStrings"},{"label":"setEras","kind":"method","documentation":"setEras(String[] a): void","insertText":"setEras"},{"label":"setLocalPatternChars","kind":"method","documentation":"setLocalPatternChars(String a): void","insertText":"setLocalPatternChars"},{"label":"setMonths","kind":"method","documentation":"setMonths(String[] a): void","insertText":"setMonths"},{"label":"setShortMonths","kind":"method","documentation":"setShortMonths(String[] a): void","insertText":"setShortMonths"},{"label":"setShortWeekdays","kind":"method","documentation":"setShortWeekdays(String[] a): void","insertText":"setShortWeekdays"},{"label":"setWeekdays","kind":"method","documentation":"setWeekdays(String[] a): void","insertText":"setWeekdays"},{"label":"setZoneStrings","kind":"method","documentation":"setZoneStrings(String[][] a): void","insertText":"setZoneStrings"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateFormatSymbols","kind":"constructor","documentation":"Constructor: DateFormatSymbols","insertText":"DateFormatSymbols"}},{"label":"DecimalFormat","kind":"class","documentation":"Class: DecimalFormat","insertText":"DecimalFormat","properties":[{"label":"applyLocalizedPattern","kind":"method","documentation":"applyLocalizedPattern(String a): void","insertText":"applyLocalizedPattern"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getDecimalFormatSymbols","kind":"method","documentation":"getDecimalFormatSymbols(): DecimalFormatSymbols","insertText":"getDecimalFormatSymbols"},{"label":"getGroupingSize","kind":"method","documentation":"getGroupingSize(): int","insertText":"getGroupingSize"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getMultiplier","kind":"method","documentation":"getMultiplier(): int","insertText":"getMultiplier"},{"label":"getNegativePrefix","kind":"method","documentation":"getNegativePrefix(): String","insertText":"getNegativePrefix"},{"label":"getNegativeSuffix","kind":"method","documentation":"getNegativeSuffix(): String","insertText":"getNegativeSuffix"},{"label":"getPositivePrefix","kind":"method","documentation":"getPositivePrefix(): String","insertText":"getPositivePrefix"},{"label":"getPositiveSuffix","kind":"method","documentation":"getPositiveSuffix(): String","insertText":"getPositiveSuffix"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDecimalSeparatorAlwaysShown","kind":"method","documentation":"isDecimalSeparatorAlwaysShown(): boolean","insertText":"isDecimalSeparatorAlwaysShown"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseBigDecimal","kind":"method","documentation":"isParseBigDecimal(): boolean","insertText":"isParseBigDecimal"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setDecimalFormatSymbols","kind":"method","documentation":"setDecimalFormatSymbols(DecimalFormatSymbols a): void","insertText":"setDecimalFormatSymbols"},{"label":"setDecimalSeparatorAlwaysShown","kind":"method","documentation":"setDecimalSeparatorAlwaysShown(boolean a): void","insertText":"setDecimalSeparatorAlwaysShown"},{"label":"setGroupingSize","kind":"method","documentation":"setGroupingSize(int a): void","insertText":"setGroupingSize"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setMultiplier","kind":"method","documentation":"setMultiplier(int a): void","insertText":"setMultiplier"},{"label":"setNegativePrefix","kind":"method","documentation":"setNegativePrefix(String a): void","insertText":"setNegativePrefix"},{"label":"setNegativeSuffix","kind":"method","documentation":"setNegativeSuffix(String a): void","insertText":"setNegativeSuffix"},{"label":"setParseBigDecimal","kind":"method","documentation":"setParseBigDecimal(boolean a): void","insertText":"setParseBigDecimal"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setPositivePrefix","kind":"method","documentation":"setPositivePrefix(String a): void","insertText":"setPositivePrefix"},{"label":"setPositiveSuffix","kind":"method","documentation":"setPositiveSuffix(String a): void","insertText":"setPositiveSuffix"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toLocalizedPattern","kind":"method","documentation":"toLocalizedPattern(): String","insertText":"toLocalizedPattern"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DecimalFormat","kind":"constructor","documentation":"Constructor: DecimalFormat","insertText":"DecimalFormat"}},{"label":"DecimalFormatSymbols","kind":"class","documentation":"Class: DecimalFormatSymbols","insertText":"DecimalFormatSymbols","properties":[{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): DecimalFormatSymbols","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getCurrencySymbol","kind":"method","documentation":"getCurrencySymbol(): String","insertText":"getCurrencySymbol"},{"label":"getDecimalSeparator","kind":"method","documentation":"getDecimalSeparator(): char","insertText":"getDecimalSeparator"},{"label":"getDigit","kind":"method","documentation":"getDigit(): char","insertText":"getDigit"},{"label":"getExponentSeparator","kind":"method","documentation":"getExponentSeparator(): String","insertText":"getExponentSeparator"},{"label":"getGroupingSeparator","kind":"method","documentation":"getGroupingSeparator(): char","insertText":"getGroupingSeparator"},{"label":"getInfinity","kind":"method","documentation":"getInfinity(): String","insertText":"getInfinity"},{"label":"getInternationalCurrencySymbol","kind":"method","documentation":"getInternationalCurrencySymbol(): String","insertText":"getInternationalCurrencySymbol"},{"label":"getMinusSign","kind":"method","documentation":"getMinusSign(): char","insertText":"getMinusSign"},{"label":"getMonetaryDecimalSeparator","kind":"method","documentation":"getMonetaryDecimalSeparator(): char","insertText":"getMonetaryDecimalSeparator"},{"label":"getNaN","kind":"method","documentation":"getNaN(): String","insertText":"getNaN"},{"label":"getPatternSeparator","kind":"method","documentation":"getPatternSeparator(): char","insertText":"getPatternSeparator"},{"label":"getPerMill","kind":"method","documentation":"getPerMill(): char","insertText":"getPerMill"},{"label":"getPercent","kind":"method","documentation":"getPercent(): char","insertText":"getPercent"},{"label":"getZeroDigit","kind":"method","documentation":"getZeroDigit(): char","insertText":"getZeroDigit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setCurrencySymbol","kind":"method","documentation":"setCurrencySymbol(String a): void","insertText":"setCurrencySymbol"},{"label":"setDecimalSeparator","kind":"method","documentation":"setDecimalSeparator(char a): void","insertText":"setDecimalSeparator"},{"label":"setDigit","kind":"method","documentation":"setDigit(char a): void","insertText":"setDigit"},{"label":"setExponentSeparator","kind":"method","documentation":"setExponentSeparator(String a): void","insertText":"setExponentSeparator"},{"label":"setGroupingSeparator","kind":"method","documentation":"setGroupingSeparator(char a): void","insertText":"setGroupingSeparator"},{"label":"setInfinity","kind":"method","documentation":"setInfinity(String a): void","insertText":"setInfinity"},{"label":"setInternationalCurrencySymbol","kind":"method","documentation":"setInternationalCurrencySymbol(String a): void","insertText":"setInternationalCurrencySymbol"},{"label":"setMinusSign","kind":"method","documentation":"setMinusSign(char a): void","insertText":"setMinusSign"},{"label":"setMonetaryDecimalSeparator","kind":"method","documentation":"setMonetaryDecimalSeparator(char a): void","insertText":"setMonetaryDecimalSeparator"},{"label":"setNaN","kind":"method","documentation":"setNaN(String a): void","insertText":"setNaN"},{"label":"setPatternSeparator","kind":"method","documentation":"setPatternSeparator(char a): void","insertText":"setPatternSeparator"},{"label":"setPerMill","kind":"method","documentation":"setPerMill(char a): void","insertText":"setPerMill"},{"label":"setPercent","kind":"method","documentation":"setPercent(char a): void","insertText":"setPercent"},{"label":"setZeroDigit","kind":"method","documentation":"setZeroDigit(char a): void","insertText":"setZeroDigit"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DecimalFormatSymbols","kind":"constructor","documentation":"Constructor: DecimalFormatSymbols","insertText":"DecimalFormatSymbols"}},{"label":"FieldPosition","kind":"class","documentation":"Class: FieldPosition","insertText":"FieldPosition","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getField","kind":"method","documentation":"getField(): int","insertText":"getField"},{"label":"getFieldAttribute","kind":"method","documentation":"getFieldAttribute(): Format.Field","insertText":"getFieldAttribute"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setBeginIndex","kind":"method","documentation":"setBeginIndex(int a): void","insertText":"setBeginIndex"},{"label":"setEndIndex","kind":"method","documentation":"setEndIndex(int a): void","insertText":"setEndIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FieldPosition","kind":"constructor","documentation":"Constructor: FieldPosition","insertText":"FieldPosition"}},{"label":"Format","kind":"class","documentation":"Class: Format","insertText":"Format","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MessageFormat","kind":"class","documentation":"Class: MessageFormat","insertText":"MessageFormat","properties":[{"label":"format","kind":"method","documentation":"format(String a, Object[] b): String","insertText":"format"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getFormats","kind":"method","documentation":"getFormats(): Format[]","insertText":"getFormats"},{"label":"getFormatsByArgumentIndex","kind":"method","documentation":"getFormatsByArgumentIndex(): Format[]","insertText":"getFormatsByArgumentIndex"},{"label":"getLocale","kind":"method","documentation":"getLocale(): Locale","insertText":"getLocale"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Object[]","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setFormat","kind":"method","documentation":"setFormat(int a, Format b): void","insertText":"setFormat"},{"label":"setFormatByArgumentIndex","kind":"method","documentation":"setFormatByArgumentIndex(int a, Format b): void","insertText":"setFormatByArgumentIndex"},{"label":"setFormats","kind":"method","documentation":"setFormats(Format[] a): void","insertText":"setFormats"},{"label":"setFormatsByArgumentIndex","kind":"method","documentation":"setFormatsByArgumentIndex(Format[] a): void","insertText":"setFormatsByArgumentIndex"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): void","insertText":"setLocale"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"ARGUMENT","kind":"property","documentation":"ARGUMENT: MessageFormat.Field","insertText":"ARGUMENT"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Normalizer","kind":"class","documentation":"Class: Normalizer","insertText":"Normalizer","properties":[{"label":"isNormalized","kind":"method","documentation":"isNormalized(CharSequence a, Normalizer.Form b): boolean","insertText":"isNormalized"},{"label":"normalize","kind":"method","documentation":"normalize(CharSequence a, Normalizer.Form b): String","insertText":"normalize"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Form","kind":"class","documentation":"Class: Form","insertText":"Form","properties":[{"label":"NFC","kind":"property","documentation":"NFC: Normalizer.Form","insertText":"NFC"},{"label":"NFD","kind":"property","documentation":"NFD: Normalizer.Form","insertText":"NFD"},{"label":"NFKC","kind":"property","documentation":"NFKC: Normalizer.Form","insertText":"NFKC"},{"label":"NFKD","kind":"property","documentation":"NFKD: Normalizer.Form","insertText":"NFKD"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Normalizer.Form","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Normalizer.Form[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NumberFormat","kind":"class","documentation":"Class: NumberFormat","insertText":"NumberFormat","properties":[{"label":"FRACTION_FIELD","kind":"property","documentation":"FRACTION_FIELD: int","insertText":"FRACTION_FIELD"},{"label":"INTEGER_FIELD","kind":"property","documentation":"INTEGER_FIELD: int","insertText":"INTEGER_FIELD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getCurrencyInstance","kind":"method","documentation":"getCurrencyInstance(Locale a): NumberFormat","insertText":"getCurrencyInstance"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): NumberFormat","insertText":"getInstance"},{"label":"getIntegerInstance","kind":"method","documentation":"getIntegerInstance(Locale a): NumberFormat","insertText":"getIntegerInstance"},{"label":"getNumberInstance","kind":"method","documentation":"getNumberInstance(Locale a): NumberFormat","insertText":"getNumberInstance"},{"label":"getPercentInstance","kind":"method","documentation":"getPercentInstance(Locale a): NumberFormat","insertText":"getPercentInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"CURRENCY","kind":"property","documentation":"CURRENCY: NumberFormat.Field","insertText":"CURRENCY"},{"label":"DECIMAL_SEPARATOR","kind":"property","documentation":"DECIMAL_SEPARATOR: NumberFormat.Field","insertText":"DECIMAL_SEPARATOR"},{"label":"EXPONENT","kind":"property","documentation":"EXPONENT: NumberFormat.Field","insertText":"EXPONENT"},{"label":"EXPONENT_SIGN","kind":"property","documentation":"EXPONENT_SIGN: NumberFormat.Field","insertText":"EXPONENT_SIGN"},{"label":"EXPONENT_SYMBOL","kind":"property","documentation":"EXPONENT_SYMBOL: NumberFormat.Field","insertText":"EXPONENT_SYMBOL"},{"label":"FRACTION","kind":"property","documentation":"FRACTION: NumberFormat.Field","insertText":"FRACTION"},{"label":"GROUPING_SEPARATOR","kind":"property","documentation":"GROUPING_SEPARATOR: NumberFormat.Field","insertText":"GROUPING_SEPARATOR"},{"label":"INTEGER","kind":"property","documentation":"INTEGER: NumberFormat.Field","insertText":"INTEGER"},{"label":"PERCENT","kind":"property","documentation":"PERCENT: NumberFormat.Field","insertText":"PERCENT"},{"label":"PERMILLE","kind":"property","documentation":"PERMILLE: NumberFormat.Field","insertText":"PERMILLE"},{"label":"SIGN","kind":"property","documentation":"SIGN: NumberFormat.Field","insertText":"SIGN"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ParseException","kind":"class","documentation":"Class: ParseException","insertText":"ParseException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorOffset","kind":"method","documentation":"getErrorOffset(): int","insertText":"getErrorOffset"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ParseException","kind":"constructor","documentation":"Constructor: ParseException","insertText":"ParseException"}},{"label":"ParsePosition","kind":"class","documentation":"Class: ParsePosition","insertText":"ParsePosition","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setErrorIndex","kind":"method","documentation":"setErrorIndex(int a): void","insertText":"setErrorIndex"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): void","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ParsePosition","kind":"constructor","documentation":"Constructor: ParsePosition","insertText":"ParsePosition"}},{"label":"RuleBasedCollator","kind":"class","documentation":"Class: RuleBasedCollator","insertText":"RuleBasedCollator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(String a, String b | Object a): boolean","insertText":"equals"},{"label":"getCollationElementIterator","kind":"method","documentation":"getCollationElementIterator(String a): CollationElementIterator","insertText":"getCollationElementIterator"},{"label":"getCollationKey","kind":"method","documentation":"getCollationKey(String a): CollationKey","insertText":"getCollationKey"},{"label":"getDecomposition","kind":"method","documentation":"getDecomposition(): int","insertText":"getDecomposition"},{"label":"getRules","kind":"method","documentation":"getRules(): String","insertText":"getRules"},{"label":"getStrength","kind":"method","documentation":"getStrength(): int","insertText":"getStrength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"setDecomposition","kind":"method","documentation":"setDecomposition(int a): void","insertText":"setDecomposition"},{"label":"setStrength","kind":"method","documentation":"setStrength(int a): void","insertText":"setStrength"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"RuleBasedCollator","kind":"constructor","documentation":"Constructor: RuleBasedCollator","insertText":"RuleBasedCollator"}},{"label":"SimpleDateFormat","kind":"class","documentation":"Class: SimpleDateFormat","insertText":"SimpleDateFormat","properties":[{"label":"applyLocalizedPattern","kind":"method","documentation":"applyLocalizedPattern(String a): void","insertText":"applyLocalizedPattern"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"get2DigitYearStart","kind":"method","documentation":"get2DigitYearStart(): Date","insertText":"get2DigitYearStart"},{"label":"getCalendar","kind":"method","documentation":"getCalendar(): Calendar","insertText":"getCalendar"},{"label":"getDateFormatSymbols","kind":"method","documentation":"getDateFormatSymbols(): DateFormatSymbols","insertText":"getDateFormatSymbols"},{"label":"getNumberFormat","kind":"method","documentation":"getNumberFormat(): NumberFormat","insertText":"getNumberFormat"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Date","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"set2DigitYearStart","kind":"method","documentation":"set2DigitYearStart(Date a): void","insertText":"set2DigitYearStart"},{"label":"setCalendar","kind":"method","documentation":"setCalendar(Calendar a): void","insertText":"setCalendar"},{"label":"setDateFormatSymbols","kind":"method","documentation":"setDateFormatSymbols(DateFormatSymbols a): void","insertText":"setDateFormatSymbols"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setNumberFormat","kind":"method","documentation":"setNumberFormat(NumberFormat a): void","insertText":"setNumberFormat"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"toLocalizedPattern","kind":"method","documentation":"toLocalizedPattern(): String","insertText":"toLocalizedPattern"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleDateFormat","kind":"constructor","documentation":"Constructor: SimpleDateFormat","insertText":"SimpleDateFormat"}},{"label":"StringCharacterIterator","kind":"class","documentation":"Class: StringCharacterIterator","insertText":"StringCharacterIterator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringCharacterIterator","kind":"constructor","documentation":"Constructor: StringCharacterIterator","insertText":"StringCharacterIterator"}},{"label":"Clock","kind":"class","documentation":"Class: Clock","insertText":"Clock","properties":[{"label":"fixed","kind":"method","documentation":"fixed(Instant a, ZoneId b): Clock","insertText":"fixed"},{"label":"offset","kind":"method","documentation":"offset(Clock a, Duration b): Clock","insertText":"offset"},{"label":"tick","kind":"method","documentation":"tick(Clock a, Duration b): Clock","insertText":"tick"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"instant","kind":"method","documentation":"instant(): Instant","insertText":"instant"},{"label":"millis","kind":"method","documentation":"millis(): long","insertText":"millis"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateTimeException","kind":"class","documentation":"Class: DateTimeException","insertText":"DateTimeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeException","kind":"constructor","documentation":"Constructor: DateTimeException","insertText":"DateTimeException"}},{"label":"DayOfWeek","kind":"class","documentation":"Class: DayOfWeek","insertText":"DayOfWeek","properties":[{"label":"FRIDAY","kind":"property","documentation":"FRIDAY: DayOfWeek","insertText":"FRIDAY"},{"label":"MONDAY","kind":"property","documentation":"MONDAY: DayOfWeek","insertText":"MONDAY"},{"label":"SATURDAY","kind":"property","documentation":"SATURDAY: DayOfWeek","insertText":"SATURDAY"},{"label":"SUNDAY","kind":"property","documentation":"SUNDAY: DayOfWeek","insertText":"SUNDAY"},{"label":"THURSDAY","kind":"property","documentation":"THURSDAY: DayOfWeek","insertText":"THURSDAY"},{"label":"TUESDAY","kind":"property","documentation":"TUESDAY: DayOfWeek","insertText":"TUESDAY"},{"label":"WEDNESDAY","kind":"property","documentation":"WEDNESDAY: DayOfWeek","insertText":"WEDNESDAY"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): DayOfWeek","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a): DayOfWeek","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): DayOfWeek","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): DayOfWeek[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a): DayOfWeek","insertText":"minus"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"plus","kind":"method","documentation":"plus(long a): DayOfWeek","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Duration","kind":"class","documentation":"Class: Duration","insertText":"Duration","properties":[{"label":"ZERO","kind":"property","documentation":"ZERO: Duration","insertText":"ZERO"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): Duration","insertText":"between"},{"label":"from","kind":"method","documentation":"from(TemporalAmount a): Duration","insertText":"from"},{"label":"of","kind":"method","documentation":"of(long a, TemporalUnit b): Duration","insertText":"of"},{"label":"ofDays","kind":"method","documentation":"ofDays(long a): Duration","insertText":"ofDays"},{"label":"ofHours","kind":"method","documentation":"ofHours(long a): Duration","insertText":"ofHours"},{"label":"ofMillis","kind":"method","documentation":"ofMillis(long a): Duration","insertText":"ofMillis"},{"label":"ofMinutes","kind":"method","documentation":"ofMinutes(long a): Duration","insertText":"ofMinutes"},{"label":"ofNanos","kind":"method","documentation":"ofNanos(long a): Duration","insertText":"ofNanos"},{"label":"ofSeconds","kind":"method","documentation":"ofSeconds(long a, long b | long a): Duration","insertText":"ofSeconds"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Duration","insertText":"parse"},{"label":"abs","kind":"method","documentation":"abs(): Duration","insertText":"abs"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"compareTo","kind":"method","documentation":"compareTo(Duration a): int","insertText":"compareTo"},{"label":"dividedBy","kind":"method","documentation":"dividedBy(long a): Duration","insertText":"dividedBy"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSeconds","kind":"method","documentation":"getSeconds(): long","insertText":"getSeconds"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | Duration a): Duration","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): Duration","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): Duration","insertText":"minusHours"},{"label":"minusMillis","kind":"method","documentation":"minusMillis(long a): Duration","insertText":"minusMillis"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): Duration","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): Duration","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): Duration","insertText":"minusSeconds"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(long a): Duration","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): Duration","insertText":"negated"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | Duration a): Duration","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): Duration","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): Duration","insertText":"plusHours"},{"label":"plusMillis","kind":"method","documentation":"plusMillis(long a): Duration","insertText":"plusMillis"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): Duration","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): Duration","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): Duration","insertText":"plusSeconds"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toDays","kind":"method","documentation":"toDays(): long","insertText":"toDays"},{"label":"toHours","kind":"method","documentation":"toHours(): long","insertText":"toHours"},{"label":"toMillis","kind":"method","documentation":"toMillis(): long","insertText":"toMillis"},{"label":"toMinutes","kind":"method","documentation":"toMinutes(): long","insertText":"toMinutes"},{"label":"toNanos","kind":"method","documentation":"toNanos(): long","insertText":"toNanos"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withNanos","kind":"method","documentation":"withNanos(int a): Duration","insertText":"withNanos"},{"label":"withSeconds","kind":"method","documentation":"withSeconds(long a): Duration","insertText":"withSeconds"}]},{"label":"Instant","kind":"class","documentation":"Class: Instant","insertText":"Instant","properties":[{"label":"EPOCH","kind":"property","documentation":"EPOCH: Instant","insertText":"EPOCH"},{"label":"MAX","kind":"property","documentation":"MAX: Instant","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: Instant","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Instant","insertText":"from"},{"label":"ofEpochMilli","kind":"method","documentation":"ofEpochMilli(long a): Instant","insertText":"ofEpochMilli"},{"label":"ofEpochSecond","kind":"method","documentation":"ofEpochSecond(long a, long b | long a): Instant","insertText":"ofEpochSecond"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Instant","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetDateTime","insertText":"atOffset"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Instant a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getEpochSecond","kind":"method","documentation":"getEpochSecond(): long","insertText":"getEpochSecond"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(Instant a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(Instant a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Instant","insertText":"minus"},{"label":"minusMillis","kind":"method","documentation":"minusMillis(long a): Instant","insertText":"minusMillis"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): Instant","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): Instant","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Instant","insertText":"plus"},{"label":"plusMillis","kind":"method","documentation":"plusMillis(long a): Instant","insertText":"plusMillis"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): Instant","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): Instant","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): Instant","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Instant","insertText":"with"}]},{"label":"LocalDate","kind":"class","documentation":"Class: LocalDate","insertText":"LocalDate","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalDate","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: LocalDate","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): LocalDate","insertText":"of"},{"label":"ofEpochDay","kind":"method","documentation":"ofEpochDay(long a): LocalDate","insertText":"ofEpochDay"},{"label":"ofYearDay","kind":"method","documentation":"ofYearDay(int a, int b): LocalDate","insertText":"ofYearDay"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDate","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atStartOfDay","kind":"method","documentation":"atStartOfDay(ZoneId a): ZonedDateTime | LocalDateTime","insertText":"atStartOfDay"},{"label":"atTime","kind":"method","documentation":"atTime(int a, int b, int c, int d | int a, int b, int c | int a, int b | LocalTime a): LocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): IsoChronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getEra","kind":"method","documentation":"getEra(): Era","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalDate","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): LocalDate","insertText":"minusDays"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): LocalDate","insertText":"minusMonths"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): LocalDate","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): LocalDate","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalDate","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): LocalDate","insertText":"plusDays"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): LocalDate","insertText":"plusMonths"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): LocalDate","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): LocalDate","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | Period","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalDate","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): LocalDate","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): LocalDate","insertText":"withDayOfYear"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): LocalDate","insertText":"withMonth"},{"label":"withYear","kind":"method","documentation":"withYear(int a): LocalDate","insertText":"withYear"}]},{"label":"LocalDateTime","kind":"class","documentation":"Class: LocalDateTime","insertText":"LocalDateTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalDateTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: LocalDateTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined | int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | LocalDate a, LocalTime b): LocalDateTime","insertText":"of"},{"label":"ofEpochSecond","kind":"method","documentation":"ofEpochSecond(long a, int b, ZoneOffset c): LocalDateTime","insertText":"ofEpochSecond"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): LocalDateTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDateTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetDateTime","insertText":"atOffset"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): LocalDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): LocalDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): LocalDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): LocalDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): LocalDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): LocalDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): LocalDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): LocalDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): LocalDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): LocalDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): LocalDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): LocalDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): LocalDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): LocalDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): LocalDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): LocalDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(ZoneOffset a): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(ZoneOffset a): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): LocalDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): LocalDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): LocalDateTime","insertText":"withDayOfYear"},{"label":"withHour","kind":"method","documentation":"withHour(int a): LocalDateTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): LocalDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): LocalDateTime","insertText":"withMonth"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): LocalDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): LocalDateTime","insertText":"withYear"}]},{"label":"LocalTime","kind":"class","documentation":"Class: LocalTime","insertText":"LocalTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalTime","insertText":"MAX"},{"label":"MIDNIGHT","kind":"property","documentation":"MIDNIGHT: LocalTime","insertText":"MIDNIGHT"},{"label":"MIN","kind":"property","documentation":"MIN: LocalTime","insertText":"MIN"},{"label":"NOON","kind":"property","documentation":"NOON: LocalTime","insertText":"NOON"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d | int a, int b, int c | int a, int b): LocalTime","insertText":"of"},{"label":"ofNanoOfDay","kind":"method","documentation":"ofNanoOfDay(long a): LocalTime","insertText":"ofNanoOfDay"},{"label":"ofSecondOfDay","kind":"method","documentation":"ofSecondOfDay(long a): LocalTime","insertText":"ofSecondOfDay"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDate","kind":"method","documentation":"atDate(LocalDate a): LocalDateTime","insertText":"atDate"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetTime","insertText":"atOffset"},{"label":"compareTo","kind":"method","documentation":"compareTo(LocalTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(LocalTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(LocalTime a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalTime","insertText":"minus"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): LocalTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): LocalTime","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): LocalTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): LocalTime","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalTime","insertText":"plus"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): LocalTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): LocalTime","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): LocalTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): LocalTime","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toNanoOfDay","kind":"method","documentation":"toNanoOfDay(): long","insertText":"toNanoOfDay"},{"label":"toSecondOfDay","kind":"method","documentation":"toSecondOfDay(): int","insertText":"toSecondOfDay"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): LocalTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalTime","insertText":"with"},{"label":"withHour","kind":"method","documentation":"withHour(int a): LocalTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): LocalTime","insertText":"withMinute"},{"label":"withNano","kind":"method","documentation":"withNano(int a): LocalTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): LocalTime","insertText":"withSecond"}]},{"label":"Month","kind":"class","documentation":"Class: Month","insertText":"Month","properties":[{"label":"APRIL","kind":"property","documentation":"APRIL: Month","insertText":"APRIL"},{"label":"AUGUST","kind":"property","documentation":"AUGUST: Month","insertText":"AUGUST"},{"label":"DECEMBER","kind":"property","documentation":"DECEMBER: Month","insertText":"DECEMBER"},{"label":"FEBRUARY","kind":"property","documentation":"FEBRUARY: Month","insertText":"FEBRUARY"},{"label":"JANUARY","kind":"property","documentation":"JANUARY: Month","insertText":"JANUARY"},{"label":"JULY","kind":"property","documentation":"JULY: Month","insertText":"JULY"},{"label":"JUNE","kind":"property","documentation":"JUNE: Month","insertText":"JUNE"},{"label":"MARCH","kind":"property","documentation":"MARCH: Month","insertText":"MARCH"},{"label":"MAY","kind":"property","documentation":"MAY: Month","insertText":"MAY"},{"label":"NOVEMBER","kind":"property","documentation":"NOVEMBER: Month","insertText":"NOVEMBER"},{"label":"OCTOBER","kind":"property","documentation":"OCTOBER: Month","insertText":"OCTOBER"},{"label":"SEPTEMBER","kind":"property","documentation":"SEPTEMBER: Month","insertText":"SEPTEMBER"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Month","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a): Month","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Month","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Month[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"firstDayOfYear","kind":"method","documentation":"firstDayOfYear(boolean a): int","insertText":"firstDayOfYear"},{"label":"firstMonthOfQuarter","kind":"method","documentation":"firstMonthOfQuarter(): Month","insertText":"firstMonthOfQuarter"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"length","kind":"method","documentation":"length(boolean a): int","insertText":"length"},{"label":"maxLength","kind":"method","documentation":"maxLength(): int","insertText":"maxLength"},{"label":"minLength","kind":"method","documentation":"minLength(): int","insertText":"minLength"},{"label":"minus","kind":"method","documentation":"minus(long a): Month","insertText":"minus"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"plus","kind":"method","documentation":"plus(long a): Month","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MonthDay","kind":"class","documentation":"Class: MonthDay","insertText":"MonthDay","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): MonthDay","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b): MonthDay","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): MonthDay","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atYear","kind":"method","documentation":"atYear(int a): LocalDate","insertText":"atYear"},{"label":"compareTo","kind":"method","documentation":"compareTo(MonthDay a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(MonthDay a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(MonthDay a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidYear","kind":"method","documentation":"isValidYear(int a): boolean","insertText":"isValidYear"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"with","kind":"method","documentation":"with(Month a): MonthDay","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): MonthDay","insertText":"withDayOfMonth"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): MonthDay","insertText":"withMonth"}]},{"label":"OffsetDateTime","kind":"class","documentation":"Class: OffsetDateTime","insertText":"OffsetDateTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: OffsetDateTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: OffsetDateTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): OffsetDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined, ZoneOffset undefined | LocalDate a, LocalTime b, ZoneOffset c | LocalDateTime a, ZoneOffset b): OffsetDateTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): OffsetDateTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetDateTime","insertText":"parse"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atZoneSameInstant","kind":"method","documentation":"atZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"atZoneSameInstant"},{"label":"atZoneSimilarLocal","kind":"method","documentation":"atZoneSimilarLocal(ZoneId a): ZonedDateTime","insertText":"atZoneSimilarLocal"},{"label":"compareTo","kind":"method","documentation":"compareTo(OffsetDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(OffsetDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(OffsetDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(OffsetDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): OffsetDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): OffsetDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): OffsetDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): OffsetDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): OffsetDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): OffsetDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): OffsetDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): OffsetDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): OffsetDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): OffsetDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): OffsetDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): OffsetDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): OffsetDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): OffsetDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): OffsetDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): OffsetDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetTime","kind":"method","documentation":"toOffsetTime(): OffsetTime","insertText":"toOffsetTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZonedDateTime","kind":"method","documentation":"toZonedDateTime(): ZonedDateTime","insertText":"toZonedDateTime"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): OffsetDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): OffsetDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): OffsetDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): OffsetDateTime","insertText":"withDayOfYear"},{"label":"withHour","kind":"method","documentation":"withHour(int a): OffsetDateTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): OffsetDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): OffsetDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): OffsetDateTime","insertText":"withNano"},{"label":"withOffsetSameInstant","kind":"method","documentation":"withOffsetSameInstant(ZoneOffset a): OffsetDateTime","insertText":"withOffsetSameInstant"},{"label":"withOffsetSameLocal","kind":"method","documentation":"withOffsetSameLocal(ZoneOffset a): OffsetDateTime","insertText":"withOffsetSameLocal"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): OffsetDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): OffsetDateTime","insertText":"withYear"}]},{"label":"OffsetTime","kind":"class","documentation":"Class: OffsetTime","insertText":"OffsetTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: OffsetTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: OffsetTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): OffsetTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, ZoneOffset e | LocalTime a, ZoneOffset b): OffsetTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): OffsetTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(OffsetTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(OffsetTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(OffsetTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(OffsetTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): OffsetTime","insertText":"minus"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): OffsetTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): OffsetTime","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): OffsetTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): OffsetTime","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): OffsetTime","insertText":"plus"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): OffsetTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): OffsetTime","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): OffsetTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): OffsetTime","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): OffsetTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): OffsetTime","insertText":"with"},{"label":"withHour","kind":"method","documentation":"withHour(int a): OffsetTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): OffsetTime","insertText":"withMinute"},{"label":"withNano","kind":"method","documentation":"withNano(int a): OffsetTime","insertText":"withNano"},{"label":"withOffsetSameInstant","kind":"method","documentation":"withOffsetSameInstant(ZoneOffset a): OffsetTime","insertText":"withOffsetSameInstant"},{"label":"withOffsetSameLocal","kind":"method","documentation":"withOffsetSameLocal(ZoneOffset a): OffsetTime","insertText":"withOffsetSameLocal"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): OffsetTime","insertText":"withSecond"}]},{"label":"Period","kind":"class","documentation":"Class: Period","insertText":"Period","properties":[{"label":"ZERO","kind":"property","documentation":"ZERO: Period","insertText":"ZERO"},{"label":"between","kind":"method","documentation":"between(LocalDate a, LocalDate b): Period","insertText":"between"},{"label":"from","kind":"method","documentation":"from(TemporalAmount a): Period","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): Period","insertText":"of"},{"label":"ofDays","kind":"method","documentation":"ofDays(int a): Period","insertText":"ofDays"},{"label":"ofMonths","kind":"method","documentation":"ofMonths(int a): Period","insertText":"ofMonths"},{"label":"ofWeeks","kind":"method","documentation":"ofWeeks(int a): Period","insertText":"ofWeeks"},{"label":"ofYears","kind":"method","documentation":"ofYears(int a): Period","insertText":"ofYears"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Period","insertText":"parse"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): IsoChronology","insertText":"getChronology"},{"label":"getDays","kind":"method","documentation":"getDays(): int","insertText":"getDays"},{"label":"getMonths","kind":"method","documentation":"getMonths(): int","insertText":"getMonths"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"getYears","kind":"method","documentation":"getYears(): int","insertText":"getYears"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(TemporalAmount a): Period","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): Period","insertText":"minusDays"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): Period","insertText":"minusMonths"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): Period","insertText":"minusYears"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(int a): Period","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): Period","insertText":"negated"},{"label":"normalized","kind":"method","documentation":"normalized(): Period","insertText":"normalized"},{"label":"plus","kind":"method","documentation":"plus(TemporalAmount a): Period","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): Period","insertText":"plusDays"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): Period","insertText":"plusMonths"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): Period","insertText":"plusYears"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toTotalMonths","kind":"method","documentation":"toTotalMonths(): long","insertText":"toTotalMonths"},{"label":"withDays","kind":"method","documentation":"withDays(int a): Period","insertText":"withDays"},{"label":"withMonths","kind":"method","documentation":"withMonths(int a): Period","insertText":"withMonths"},{"label":"withYears","kind":"method","documentation":"withYears(int a): Period","insertText":"withYears"}]},{"label":"Year","kind":"class","documentation":"Class: Year","insertText":"Year","properties":[{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: int","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: int","insertText":"MIN_VALUE"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Year","insertText":"from"},{"label":"isLeap","kind":"method","documentation":"isLeap(long a): boolean","insertText":"isLeap"},{"label":"of","kind":"method","documentation":"of(int a): Year","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): Year","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDay","kind":"method","documentation":"atDay(int a): LocalDate","insertText":"atDay"},{"label":"atMonth","kind":"method","documentation":"atMonth(int a): YearMonth","insertText":"atMonth"},{"label":"atMonthDay","kind":"method","documentation":"atMonthDay(MonthDay a): LocalDate","insertText":"atMonthDay"},{"label":"compareTo","kind":"method","documentation":"compareTo(Year a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(Year a): boolean","insertText":"isAfter"},{"label":"isLeap","kind":"method","documentation":"isLeap(): boolean","insertText":"isLeap"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidMonthDay","kind":"method","documentation":"isValidMonthDay(MonthDay a): boolean","insertText":"isValidMonthDay"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Year","insertText":"minus"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): Year","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Year","insertText":"plus"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): Year","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Year","insertText":"with"}]},{"label":"YearMonth","kind":"class","documentation":"Class: YearMonth","insertText":"YearMonth","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): YearMonth","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b): YearMonth","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): YearMonth","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDay","kind":"method","documentation":"atDay(int a): LocalDate","insertText":"atDay"},{"label":"atEndOfMonth","kind":"method","documentation":"atEndOfMonth(): LocalDate","insertText":"atEndOfMonth"},{"label":"compareTo","kind":"method","documentation":"compareTo(YearMonth a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(YearMonth a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(YearMonth a): boolean","insertText":"isBefore"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidDay","kind":"method","documentation":"isValidDay(int a): boolean","insertText":"isValidDay"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): YearMonth","insertText":"minus"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): YearMonth","insertText":"minusMonths"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): YearMonth","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): YearMonth","insertText":"plus"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): YearMonth","insertText":"plusMonths"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): YearMonth","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): YearMonth","insertText":"with"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): YearMonth","insertText":"withMonth"},{"label":"withYear","kind":"method","documentation":"withYear(int a): YearMonth","insertText":"withYear"}]},{"label":"ZoneId","kind":"class","documentation":"Class: ZoneId","insertText":"ZoneId","properties":[{"label":"SHORT_IDS","kind":"property","documentation":"SHORT_IDS: Map","insertText":"SHORT_IDS"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZoneId","insertText":"from"},{"label":"getAvailableZoneIds","kind":"method","documentation":"getAvailableZoneIds(): Set","insertText":"getAvailableZoneIds"},{"label":"of","kind":"method","documentation":"of(String a, Map b | String a): ZoneId","insertText":"of"},{"label":"ofOffset","kind":"method","documentation":"ofOffset(String a, ZoneOffset b): ZoneId","insertText":"ofOffset"},{"label":"systemDefault","kind":"method","documentation":"systemDefault(): ZoneId","insertText":"systemDefault"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"getRules","kind":"method","documentation":"getRules(): ZoneRules","insertText":"getRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"normalized","kind":"method","documentation":"normalized(): ZoneId","insertText":"normalized"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneOffset","kind":"class","documentation":"Class: ZoneOffset","insertText":"ZoneOffset","properties":[{"label":"MAX","kind":"property","documentation":"MAX: ZoneOffset","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: ZoneOffset","insertText":"MIN"},{"label":"UTC","kind":"property","documentation":"UTC: ZoneOffset","insertText":"UTC"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZoneOffset","insertText":"from"},{"label":"of","kind":"method","documentation":"of(String a): ZoneOffset","insertText":"of"},{"label":"ofHours","kind":"method","documentation":"ofHours(int a): ZoneOffset","insertText":"ofHours"},{"label":"ofHoursMinutes","kind":"method","documentation":"ofHoursMinutes(int a, int b): ZoneOffset","insertText":"ofHoursMinutes"},{"label":"ofHoursMinutesSeconds","kind":"method","documentation":"ofHoursMinutesSeconds(int a, int b, int c): ZoneOffset","insertText":"ofHoursMinutesSeconds"},{"label":"ofTotalSeconds","kind":"method","documentation":"ofTotalSeconds(int a): ZoneOffset","insertText":"ofTotalSeconds"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getRules","kind":"method","documentation":"getRules(): ZoneRules","insertText":"getRules"},{"label":"getTotalSeconds","kind":"method","documentation":"getTotalSeconds(): int","insertText":"getTotalSeconds"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"normalized","kind":"method","documentation":"normalized(): ZoneId","insertText":"normalized"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZonedDateTime","kind":"class","documentation":"Class: ZonedDateTime","insertText":"ZonedDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZonedDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined, ZoneId undefined | LocalDate a, LocalTime b, ZoneId c | LocalDateTime a, ZoneId b): ZonedDateTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(LocalDateTime a, ZoneOffset b, ZoneId c | Instant a, ZoneId b): ZonedDateTime","insertText":"ofInstant"},{"label":"ofLocal","kind":"method","documentation":"ofLocal(LocalDateTime a, ZoneId b, ZoneOffset c): ZonedDateTime","insertText":"ofLocal"},{"label":"ofStrict","kind":"method","documentation":"ofStrict(LocalDateTime a, ZoneOffset b, ZoneId c): ZonedDateTime","insertText":"ofStrict"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): ZonedDateTime","insertText":"parse"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): ZonedDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): ZonedDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): ZonedDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): ZonedDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): ZonedDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): ZonedDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): ZonedDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): ZonedDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): ZonedDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): ZonedDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): ZonedDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): ZonedDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): ZonedDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): ZonedDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): ZonedDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): ZonedDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetDateTime","kind":"method","documentation":"toOffsetDateTime(): OffsetDateTime","insertText":"toOffsetDateTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): ZonedDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): ZonedDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): ZonedDateTime","insertText":"withDayOfYear"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withFixedOffsetZone","kind":"method","documentation":"withFixedOffsetZone(): ZonedDateTime","insertText":"withFixedOffsetZone"},{"label":"withHour","kind":"method","documentation":"withHour(int a): ZonedDateTime","insertText":"withHour"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): ZonedDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): ZonedDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): ZonedDateTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): ZonedDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): ZonedDateTime","insertText":"withYear"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"AbstractChronology","kind":"class","documentation":"Class: AbstractChronology","insertText":"AbstractChronology","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ChronoLocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): Era","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ChronoLocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"ChronoLocalDate","kind":"class","documentation":"Class: ChronoLocalDate","insertText":"ChronoLocalDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoLocalDate","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): Era","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDate","insertText":"with"}]},{"label":"ChronoLocalDateTime","kind":"class","documentation":"Class: ChronoLocalDateTime","insertText":"ChronoLocalDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoLocalDateTime","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ChronoZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(ZoneOffset a): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(ZoneOffset a): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): ChronoLocalDate","insertText":"toLocalDate"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDateTime","insertText":"with"}]},{"label":"ChronoPeriod","kind":"class","documentation":"Class: ChronoPeriod","insertText":"ChronoPeriod","properties":[{"label":"between","kind":"method","documentation":"between(ChronoLocalDate a, ChronoLocalDate b): ChronoPeriod","insertText":"between"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(TemporalAmount a): ChronoPeriod","insertText":"minus"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(int a): ChronoPeriod","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): ChronoPeriod","insertText":"negated"},{"label":"normalized","kind":"method","documentation":"normalized(): ChronoPeriod","insertText":"normalized"},{"label":"plus","kind":"method","documentation":"plus(TemporalAmount a): ChronoPeriod","insertText":"plus"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoZonedDateTime","kind":"class","documentation":"Class: ChronoZonedDateTime","insertText":"ChronoZonedDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoZonedDateTime","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): ChronoLocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): ChronoLocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoZonedDateTime","insertText":"with"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ChronoZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ChronoZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ChronoZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ChronoZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"Chronology","kind":"class","documentation":"Class: Chronology","insertText":"Chronology","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Chronology","insertText":"from"},{"label":"getAvailableChronologies","kind":"method","documentation":"getAvailableChronologies(): Set","insertText":"getAvailableChronologies"},{"label":"of","kind":"method","documentation":"of(String a): Chronology","insertText":"of"},{"label":"ofLocale","kind":"method","documentation":"ofLocale(Locale a): Chronology","insertText":"ofLocale"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ChronoLocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): Era","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ChronoLocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"Era","kind":"class","documentation":"Class: Era","insertText":"Era","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"HijrahChronology","kind":"class","documentation":"Class: HijrahChronology","insertText":"HijrahChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: HijrahChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): HijrahDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): HijrahDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): HijrahDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): HijrahEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): HijrahDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"HijrahDate","kind":"class","documentation":"Class: HijrahDate","insertText":"HijrahDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): HijrahDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): HijrahDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): HijrahChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): HijrahEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): HijrahDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): HijrahDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): HijrahDate","insertText":"with"},{"label":"withVariant","kind":"method","documentation":"withVariant(HijrahChronology a): HijrahDate","insertText":"withVariant"}]},{"label":"HijrahEra","kind":"class","documentation":"Class: HijrahEra","insertText":"HijrahEra","properties":[{"label":"AH","kind":"property","documentation":"AH: HijrahEra","insertText":"AH"},{"label":"of","kind":"method","documentation":"of(int a): HijrahEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): HijrahEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): HijrahEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IsoChronology","kind":"class","documentation":"Class: IsoChronology","insertText":"IsoChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: IsoChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): LocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): LocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): LocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): IsoEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): LocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): Period","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): LocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ZonedDateTime","insertText":"zonedDateTime"}]},{"label":"IsoEra","kind":"class","documentation":"Class: IsoEra","insertText":"IsoEra","properties":[{"label":"BCE","kind":"property","documentation":"BCE: IsoEra","insertText":"BCE"},{"label":"CE","kind":"property","documentation":"CE: IsoEra","insertText":"CE"},{"label":"of","kind":"method","documentation":"of(int a): IsoEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): IsoEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): IsoEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JapaneseChronology","kind":"class","documentation":"Class: JapaneseChronology","insertText":"JapaneseChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: JapaneseChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): JapaneseDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): JapaneseDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): JapaneseDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): JapaneseEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): JapaneseDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"JapaneseDate","kind":"class","documentation":"Class: JapaneseDate","insertText":"JapaneseDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): JapaneseDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): JapaneseDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): JapaneseChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): JapaneseEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): JapaneseDate","insertText":"with"}]},{"label":"JapaneseEra","kind":"class","documentation":"Class: JapaneseEra","insertText":"JapaneseEra","properties":[{"label":"HEISEI","kind":"property","documentation":"HEISEI: JapaneseEra","insertText":"HEISEI"},{"label":"MEIJI","kind":"property","documentation":"MEIJI: JapaneseEra","insertText":"MEIJI"},{"label":"SHOWA","kind":"property","documentation":"SHOWA: JapaneseEra","insertText":"SHOWA"},{"label":"TAISHO","kind":"property","documentation":"TAISHO: JapaneseEra","insertText":"TAISHO"},{"label":"of","kind":"method","documentation":"of(int a): JapaneseEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): JapaneseEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): JapaneseEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MinguoChronology","kind":"class","documentation":"Class: MinguoChronology","insertText":"MinguoChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: MinguoChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): MinguoDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): MinguoDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): MinguoDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): MinguoEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): MinguoDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"MinguoDate","kind":"class","documentation":"Class: MinguoDate","insertText":"MinguoDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): MinguoDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): MinguoDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): MinguoChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): MinguoEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): MinguoDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): MinguoDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): MinguoDate","insertText":"with"}]},{"label":"MinguoEra","kind":"class","documentation":"Class: MinguoEra","insertText":"MinguoEra","properties":[{"label":"BEFORE_ROC","kind":"property","documentation":"BEFORE_ROC: MinguoEra","insertText":"BEFORE_ROC"},{"label":"ROC","kind":"property","documentation":"ROC: MinguoEra","insertText":"ROC"},{"label":"of","kind":"method","documentation":"of(int a): MinguoEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): MinguoEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): MinguoEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ThaiBuddhistChronology","kind":"class","documentation":"Class: ThaiBuddhistChronology","insertText":"ThaiBuddhistChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: ThaiBuddhistChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ThaiBuddhistDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ThaiBuddhistDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ThaiBuddhistDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): ThaiBuddhistEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ThaiBuddhistDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"ThaiBuddhistDate","kind":"class","documentation":"Class: ThaiBuddhistDate","insertText":"ThaiBuddhistDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ThaiBuddhistDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): ThaiBuddhistDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): ThaiBuddhistChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): ThaiBuddhistEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ThaiBuddhistDate","insertText":"with"}]},{"label":"ThaiBuddhistEra","kind":"class","documentation":"Class: ThaiBuddhistEra","insertText":"ThaiBuddhistEra","properties":[{"label":"BE","kind":"property","documentation":"BE: ThaiBuddhistEra","insertText":"BE"},{"label":"BEFORE_BE","kind":"property","documentation":"BEFORE_BE: ThaiBuddhistEra","insertText":"BEFORE_BE"},{"label":"of","kind":"method","documentation":"of(int a): ThaiBuddhistEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ThaiBuddhistEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ThaiBuddhistEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateTimeFormatter","kind":"class","documentation":"Class: DateTimeFormatter","insertText":"DateTimeFormatter","properties":[{"label":"BASIC_ISO_DATE","kind":"property","documentation":"BASIC_ISO_DATE: DateTimeFormatter","insertText":"BASIC_ISO_DATE"},{"label":"ISO_DATE","kind":"property","documentation":"ISO_DATE: DateTimeFormatter","insertText":"ISO_DATE"},{"label":"ISO_DATE_TIME","kind":"property","documentation":"ISO_DATE_TIME: DateTimeFormatter","insertText":"ISO_DATE_TIME"},{"label":"ISO_INSTANT","kind":"property","documentation":"ISO_INSTANT: DateTimeFormatter","insertText":"ISO_INSTANT"},{"label":"ISO_LOCAL_DATE","kind":"property","documentation":"ISO_LOCAL_DATE: DateTimeFormatter","insertText":"ISO_LOCAL_DATE"},{"label":"ISO_LOCAL_DATE_TIME","kind":"property","documentation":"ISO_LOCAL_DATE_TIME: DateTimeFormatter","insertText":"ISO_LOCAL_DATE_TIME"},{"label":"ISO_LOCAL_TIME","kind":"property","documentation":"ISO_LOCAL_TIME: DateTimeFormatter","insertText":"ISO_LOCAL_TIME"},{"label":"ISO_OFFSET_DATE","kind":"property","documentation":"ISO_OFFSET_DATE: DateTimeFormatter","insertText":"ISO_OFFSET_DATE"},{"label":"ISO_OFFSET_DATE_TIME","kind":"property","documentation":"ISO_OFFSET_DATE_TIME: DateTimeFormatter","insertText":"ISO_OFFSET_DATE_TIME"},{"label":"ISO_OFFSET_TIME","kind":"property","documentation":"ISO_OFFSET_TIME: DateTimeFormatter","insertText":"ISO_OFFSET_TIME"},{"label":"ISO_ORDINAL_DATE","kind":"property","documentation":"ISO_ORDINAL_DATE: DateTimeFormatter","insertText":"ISO_ORDINAL_DATE"},{"label":"ISO_TIME","kind":"property","documentation":"ISO_TIME: DateTimeFormatter","insertText":"ISO_TIME"},{"label":"ISO_WEEK_DATE","kind":"property","documentation":"ISO_WEEK_DATE: DateTimeFormatter","insertText":"ISO_WEEK_DATE"},{"label":"ISO_ZONED_DATE_TIME","kind":"property","documentation":"ISO_ZONED_DATE_TIME: DateTimeFormatter","insertText":"ISO_ZONED_DATE_TIME"},{"label":"RFC_1123_DATE_TIME","kind":"property","documentation":"RFC_1123_DATE_TIME: DateTimeFormatter","insertText":"RFC_1123_DATE_TIME"},{"label":"ofLocalizedDate","kind":"method","documentation":"ofLocalizedDate(FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedDate"},{"label":"ofLocalizedDateTime","kind":"method","documentation":"ofLocalizedDateTime(FormatStyle a, FormatStyle b | FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedDateTime"},{"label":"ofLocalizedTime","kind":"method","documentation":"ofLocalizedTime(FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedTime"},{"label":"ofPattern","kind":"method","documentation":"ofPattern(String a, Locale b | String a): DateTimeFormatter","insertText":"ofPattern"},{"label":"parsedExcessDays","kind":"method","documentation":"parsedExcessDays(): TemporalQuery","insertText":"parsedExcessDays"},{"label":"parsedLeapSecond","kind":"method","documentation":"parsedLeapSecond(): TemporalQuery","insertText":"parsedLeapSecond"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(TemporalAccessor a): String","insertText":"format"},{"label":"formatTo","kind":"method","documentation":"formatTo(TemporalAccessor a, Appendable b): void","insertText":"formatTo"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDecimalStyle","kind":"method","documentation":"getDecimalStyle(): DecimalStyle","insertText":"getDecimalStyle"},{"label":"getLocale","kind":"method","documentation":"getLocale(): Locale","insertText":"getLocale"},{"label":"getResolverFields","kind":"method","documentation":"getResolverFields(): Set","insertText":"getResolverFields"},{"label":"getResolverStyle","kind":"method","documentation":"getResolverStyle(): ResolverStyle","insertText":"getResolverStyle"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, TemporalQuery b | CharSequence a): def | TemporalAccessor","insertText":"parse"},{"label":"parseBest","kind":"method","documentation":"parseBest(CharSequence a, TemporalQuery[] b): TemporalAccessor","insertText":"parseBest"},{"label":"parseUnresolved","kind":"method","documentation":"parseUnresolved(CharSequence a, ParsePosition b): TemporalAccessor","insertText":"parseUnresolved"},{"label":"toFormat","kind":"method","documentation":"toFormat(TemporalQuery a): Format","insertText":"toFormat"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withChronology","kind":"method","documentation":"withChronology(Chronology a): DateTimeFormatter","insertText":"withChronology"},{"label":"withDecimalStyle","kind":"method","documentation":"withDecimalStyle(DecimalStyle a): DateTimeFormatter","insertText":"withDecimalStyle"},{"label":"withLocale","kind":"method","documentation":"withLocale(Locale a): DateTimeFormatter","insertText":"withLocale"},{"label":"withResolverFields","kind":"method","documentation":"withResolverFields(Set a): DateTimeFormatter","insertText":"withResolverFields"},{"label":"withResolverStyle","kind":"method","documentation":"withResolverStyle(ResolverStyle a): DateTimeFormatter","insertText":"withResolverStyle"},{"label":"withZone","kind":"method","documentation":"withZone(ZoneId a): DateTimeFormatter","insertText":"withZone"}]},{"label":"DateTimeFormatterBuilder","kind":"class","documentation":"Class: DateTimeFormatterBuilder","insertText":"DateTimeFormatterBuilder","properties":[{"label":"getLocalizedDateTimePattern","kind":"method","documentation":"getLocalizedDateTimePattern(FormatStyle a, FormatStyle b, Chronology c, Locale d): String","insertText":"getLocalizedDateTimePattern"},{"label":"append","kind":"method","documentation":"append(DateTimeFormatter a): DateTimeFormatterBuilder","insertText":"append"},{"label":"appendChronologyId","kind":"method","documentation":"appendChronologyId(): DateTimeFormatterBuilder","insertText":"appendChronologyId"},{"label":"appendChronologyText","kind":"method","documentation":"appendChronologyText(TextStyle a): DateTimeFormatterBuilder","insertText":"appendChronologyText"},{"label":"appendFraction","kind":"method","documentation":"appendFraction(TemporalField a, int b, int c, boolean d): DateTimeFormatterBuilder","insertText":"appendFraction"},{"label":"appendInstant","kind":"method","documentation":"appendInstant(int a): DateTimeFormatterBuilder","insertText":"appendInstant"},{"label":"appendLiteral","kind":"method","documentation":"appendLiteral(String a): DateTimeFormatterBuilder","insertText":"appendLiteral"},{"label":"appendLocalized","kind":"method","documentation":"appendLocalized(FormatStyle a, FormatStyle b): DateTimeFormatterBuilder","insertText":"appendLocalized"},{"label":"appendLocalizedOffset","kind":"method","documentation":"appendLocalizedOffset(TextStyle a): DateTimeFormatterBuilder","insertText":"appendLocalizedOffset"},{"label":"appendOffset","kind":"method","documentation":"appendOffset(String a, String b): DateTimeFormatterBuilder","insertText":"appendOffset"},{"label":"appendOffsetId","kind":"method","documentation":"appendOffsetId(): DateTimeFormatterBuilder","insertText":"appendOffsetId"},{"label":"appendOptional","kind":"method","documentation":"appendOptional(DateTimeFormatter a): DateTimeFormatterBuilder","insertText":"appendOptional"},{"label":"appendPattern","kind":"method","documentation":"appendPattern(String a): DateTimeFormatterBuilder","insertText":"appendPattern"},{"label":"appendText","kind":"method","documentation":"appendText(TemporalField a, TextStyle b | TemporalField a): DateTimeFormatterBuilder","insertText":"appendText"},{"label":"appendValue","kind":"method","documentation":"appendValue(TemporalField a, int b, int c, SignStyle d | TemporalField a, int b | TemporalField a): DateTimeFormatterBuilder","insertText":"appendValue"},{"label":"appendValueReduced","kind":"method","documentation":"appendValueReduced(TemporalField a, int b, int c, int d): DateTimeFormatterBuilder","insertText":"appendValueReduced"},{"label":"appendZoneId","kind":"method","documentation":"appendZoneId(): DateTimeFormatterBuilder","insertText":"appendZoneId"},{"label":"appendZoneOrOffsetId","kind":"method","documentation":"appendZoneOrOffsetId(): DateTimeFormatterBuilder","insertText":"appendZoneOrOffsetId"},{"label":"appendZoneRegionId","kind":"method","documentation":"appendZoneRegionId(): DateTimeFormatterBuilder","insertText":"appendZoneRegionId"},{"label":"appendZoneText","kind":"method","documentation":"appendZoneText(TextStyle a, Set b | TextStyle a): DateTimeFormatterBuilder","insertText":"appendZoneText"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"optionalEnd","kind":"method","documentation":"optionalEnd(): DateTimeFormatterBuilder","insertText":"optionalEnd"},{"label":"optionalStart","kind":"method","documentation":"optionalStart(): DateTimeFormatterBuilder","insertText":"optionalStart"},{"label":"padNext","kind":"method","documentation":"padNext(int a, char b | int a): DateTimeFormatterBuilder","insertText":"padNext"},{"label":"parseCaseInsensitive","kind":"method","documentation":"parseCaseInsensitive(): DateTimeFormatterBuilder","insertText":"parseCaseInsensitive"},{"label":"parseCaseSensitive","kind":"method","documentation":"parseCaseSensitive(): DateTimeFormatterBuilder","insertText":"parseCaseSensitive"},{"label":"parseDefaulting","kind":"method","documentation":"parseDefaulting(TemporalField a, long b): DateTimeFormatterBuilder","insertText":"parseDefaulting"},{"label":"parseLenient","kind":"method","documentation":"parseLenient(): DateTimeFormatterBuilder","insertText":"parseLenient"},{"label":"parseStrict","kind":"method","documentation":"parseStrict(): DateTimeFormatterBuilder","insertText":"parseStrict"},{"label":"toFormatter","kind":"method","documentation":"toFormatter(Locale a): DateTimeFormatter","insertText":"toFormatter"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeFormatterBuilder","kind":"constructor","documentation":"Constructor: DateTimeFormatterBuilder","insertText":"DateTimeFormatterBuilder"}},{"label":"DateTimeParseException","kind":"class","documentation":"Class: DateTimeParseException","insertText":"DateTimeParseException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getParsedString","kind":"method","documentation":"getParsedString(): String","insertText":"getParsedString"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeParseException","kind":"constructor","documentation":"Constructor: DateTimeParseException","insertText":"DateTimeParseException"}},{"label":"DecimalStyle","kind":"class","documentation":"Class: DecimalStyle","insertText":"DecimalStyle","properties":[{"label":"STANDARD","kind":"property","documentation":"STANDARD: DecimalStyle","insertText":"STANDARD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Set","insertText":"getAvailableLocales"},{"label":"of","kind":"method","documentation":"of(Locale a): DecimalStyle","insertText":"of"},{"label":"ofDefaultLocale","kind":"method","documentation":"ofDefaultLocale(): DecimalStyle","insertText":"ofDefaultLocale"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDecimalSeparator","kind":"method","documentation":"getDecimalSeparator(): char","insertText":"getDecimalSeparator"},{"label":"getNegativeSign","kind":"method","documentation":"getNegativeSign(): char","insertText":"getNegativeSign"},{"label":"getPositiveSign","kind":"method","documentation":"getPositiveSign(): char","insertText":"getPositiveSign"},{"label":"getZeroDigit","kind":"method","documentation":"getZeroDigit(): char","insertText":"getZeroDigit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withDecimalSeparator","kind":"method","documentation":"withDecimalSeparator(char a): DecimalStyle","insertText":"withDecimalSeparator"},{"label":"withNegativeSign","kind":"method","documentation":"withNegativeSign(char a): DecimalStyle","insertText":"withNegativeSign"},{"label":"withPositiveSign","kind":"method","documentation":"withPositiveSign(char a): DecimalStyle","insertText":"withPositiveSign"},{"label":"withZeroDigit","kind":"method","documentation":"withZeroDigit(char a): DecimalStyle","insertText":"withZeroDigit"}]},{"label":"FormatStyle","kind":"class","documentation":"Class: FormatStyle","insertText":"FormatStyle","properties":[{"label":"FULL","kind":"property","documentation":"FULL: FormatStyle","insertText":"FULL"},{"label":"LONG","kind":"property","documentation":"LONG: FormatStyle","insertText":"LONG"},{"label":"MEDIUM","kind":"property","documentation":"MEDIUM: FormatStyle","insertText":"MEDIUM"},{"label":"SHORT","kind":"property","documentation":"SHORT: FormatStyle","insertText":"SHORT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): FormatStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): FormatStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ResolverStyle","kind":"class","documentation":"Class: ResolverStyle","insertText":"ResolverStyle","properties":[{"label":"LENIENT","kind":"property","documentation":"LENIENT: ResolverStyle","insertText":"LENIENT"},{"label":"SMART","kind":"property","documentation":"SMART: ResolverStyle","insertText":"SMART"},{"label":"STRICT","kind":"property","documentation":"STRICT: ResolverStyle","insertText":"STRICT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ResolverStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ResolverStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"SignStyle","kind":"class","documentation":"Class: SignStyle","insertText":"SignStyle","properties":[{"label":"ALWAYS","kind":"property","documentation":"ALWAYS: SignStyle","insertText":"ALWAYS"},{"label":"EXCEEDS_PAD","kind":"property","documentation":"EXCEEDS_PAD: SignStyle","insertText":"EXCEEDS_PAD"},{"label":"NEVER","kind":"property","documentation":"NEVER: SignStyle","insertText":"NEVER"},{"label":"NORMAL","kind":"property","documentation":"NORMAL: SignStyle","insertText":"NORMAL"},{"label":"NOT_NEGATIVE","kind":"property","documentation":"NOT_NEGATIVE: SignStyle","insertText":"NOT_NEGATIVE"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): SignStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): SignStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TextStyle","kind":"class","documentation":"Class: TextStyle","insertText":"TextStyle","properties":[{"label":"FULL","kind":"property","documentation":"FULL: TextStyle","insertText":"FULL"},{"label":"FULL_STANDALONE","kind":"property","documentation":"FULL_STANDALONE: TextStyle","insertText":"FULL_STANDALONE"},{"label":"NARROW","kind":"property","documentation":"NARROW: TextStyle","insertText":"NARROW"},{"label":"NARROW_STANDALONE","kind":"property","documentation":"NARROW_STANDALONE: TextStyle","insertText":"NARROW_STANDALONE"},{"label":"SHORT","kind":"property","documentation":"SHORT: TextStyle","insertText":"SHORT"},{"label":"SHORT_STANDALONE","kind":"property","documentation":"SHORT_STANDALONE: TextStyle","insertText":"SHORT_STANDALONE"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): TextStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): TextStyle[]","insertText":"values"},{"label":"asNormal","kind":"method","documentation":"asNormal(): TextStyle","insertText":"asNormal"},{"label":"asStandalone","kind":"method","documentation":"asStandalone(): TextStyle","insertText":"asStandalone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isStandalone","kind":"method","documentation":"isStandalone(): boolean","insertText":"isStandalone"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoField","kind":"class","documentation":"Class: ChronoField","insertText":"ChronoField","properties":[{"label":"ALIGNED_DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"ALIGNED_DAY_OF_WEEK_IN_MONTH: ChronoField","insertText":"ALIGNED_DAY_OF_WEEK_IN_MONTH"},{"label":"ALIGNED_DAY_OF_WEEK_IN_YEAR","kind":"property","documentation":"ALIGNED_DAY_OF_WEEK_IN_YEAR: ChronoField","insertText":"ALIGNED_DAY_OF_WEEK_IN_YEAR"},{"label":"ALIGNED_WEEK_OF_MONTH","kind":"property","documentation":"ALIGNED_WEEK_OF_MONTH: ChronoField","insertText":"ALIGNED_WEEK_OF_MONTH"},{"label":"ALIGNED_WEEK_OF_YEAR","kind":"property","documentation":"ALIGNED_WEEK_OF_YEAR: ChronoField","insertText":"ALIGNED_WEEK_OF_YEAR"},{"label":"AMPM_OF_DAY","kind":"property","documentation":"AMPM_OF_DAY: ChronoField","insertText":"AMPM_OF_DAY"},{"label":"CLOCK_HOUR_OF_AMPM","kind":"property","documentation":"CLOCK_HOUR_OF_AMPM: ChronoField","insertText":"CLOCK_HOUR_OF_AMPM"},{"label":"CLOCK_HOUR_OF_DAY","kind":"property","documentation":"CLOCK_HOUR_OF_DAY: ChronoField","insertText":"CLOCK_HOUR_OF_DAY"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: ChronoField","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: ChronoField","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: ChronoField","insertText":"DAY_OF_YEAR"},{"label":"EPOCH_DAY","kind":"property","documentation":"EPOCH_DAY: ChronoField","insertText":"EPOCH_DAY"},{"label":"ERA","kind":"property","documentation":"ERA: ChronoField","insertText":"ERA"},{"label":"HOUR_OF_AMPM","kind":"property","documentation":"HOUR_OF_AMPM: ChronoField","insertText":"HOUR_OF_AMPM"},{"label":"HOUR_OF_DAY","kind":"property","documentation":"HOUR_OF_DAY: ChronoField","insertText":"HOUR_OF_DAY"},{"label":"INSTANT_SECONDS","kind":"property","documentation":"INSTANT_SECONDS: ChronoField","insertText":"INSTANT_SECONDS"},{"label":"MICRO_OF_DAY","kind":"property","documentation":"MICRO_OF_DAY: ChronoField","insertText":"MICRO_OF_DAY"},{"label":"MICRO_OF_SECOND","kind":"property","documentation":"MICRO_OF_SECOND: ChronoField","insertText":"MICRO_OF_SECOND"},{"label":"MILLI_OF_DAY","kind":"property","documentation":"MILLI_OF_DAY: ChronoField","insertText":"MILLI_OF_DAY"},{"label":"MILLI_OF_SECOND","kind":"property","documentation":"MILLI_OF_SECOND: ChronoField","insertText":"MILLI_OF_SECOND"},{"label":"MINUTE_OF_DAY","kind":"property","documentation":"MINUTE_OF_DAY: ChronoField","insertText":"MINUTE_OF_DAY"},{"label":"MINUTE_OF_HOUR","kind":"property","documentation":"MINUTE_OF_HOUR: ChronoField","insertText":"MINUTE_OF_HOUR"},{"label":"MONTH_OF_YEAR","kind":"property","documentation":"MONTH_OF_YEAR: ChronoField","insertText":"MONTH_OF_YEAR"},{"label":"NANO_OF_DAY","kind":"property","documentation":"NANO_OF_DAY: ChronoField","insertText":"NANO_OF_DAY"},{"label":"NANO_OF_SECOND","kind":"property","documentation":"NANO_OF_SECOND: ChronoField","insertText":"NANO_OF_SECOND"},{"label":"OFFSET_SECONDS","kind":"property","documentation":"OFFSET_SECONDS: ChronoField","insertText":"OFFSET_SECONDS"},{"label":"PROLEPTIC_MONTH","kind":"property","documentation":"PROLEPTIC_MONTH: ChronoField","insertText":"PROLEPTIC_MONTH"},{"label":"SECOND_OF_DAY","kind":"property","documentation":"SECOND_OF_DAY: ChronoField","insertText":"SECOND_OF_DAY"},{"label":"SECOND_OF_MINUTE","kind":"property","documentation":"SECOND_OF_MINUTE: ChronoField","insertText":"SECOND_OF_MINUTE"},{"label":"YEAR","kind":"property","documentation":"YEAR: ChronoField","insertText":"YEAR"},{"label":"YEAR_OF_ERA","kind":"property","documentation":"YEAR_OF_ERA: ChronoField","insertText":"YEAR_OF_ERA"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ChronoField","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ChronoField[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a, long b): Temporal","insertText":"adjustInto"},{"label":"checkValidIntValue","kind":"method","documentation":"checkValidIntValue(long a): int","insertText":"checkValidIntValue"},{"label":"checkValidValue","kind":"method","documentation":"checkValidValue(long a): long","insertText":"checkValidValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseUnit","kind":"method","documentation":"getBaseUnit(): TemporalUnit","insertText":"getBaseUnit"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getFrom","kind":"method","documentation":"getFrom(TemporalAccessor a): long","insertText":"getFrom"},{"label":"getRangeUnit","kind":"method","documentation":"getRangeUnit(): TemporalUnit","insertText":"getRangeUnit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(TemporalAccessor a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"range","kind":"method","documentation":"range(): ValueRange","insertText":"range"},{"label":"rangeRefinedBy","kind":"method","documentation":"rangeRefinedBy(TemporalAccessor a): ValueRange","insertText":"rangeRefinedBy"},{"label":"resolve","kind":"method","documentation":"resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor","insertText":"resolve"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoUnit","kind":"class","documentation":"Class: ChronoUnit","insertText":"ChronoUnit","properties":[{"label":"CENTURIES","kind":"property","documentation":"CENTURIES: ChronoUnit","insertText":"CENTURIES"},{"label":"DAYS","kind":"property","documentation":"DAYS: ChronoUnit","insertText":"DAYS"},{"label":"DECADES","kind":"property","documentation":"DECADES: ChronoUnit","insertText":"DECADES"},{"label":"ERAS","kind":"property","documentation":"ERAS: ChronoUnit","insertText":"ERAS"},{"label":"FOREVER","kind":"property","documentation":"FOREVER: ChronoUnit","insertText":"FOREVER"},{"label":"HALF_DAYS","kind":"property","documentation":"HALF_DAYS: ChronoUnit","insertText":"HALF_DAYS"},{"label":"HOURS","kind":"property","documentation":"HOURS: ChronoUnit","insertText":"HOURS"},{"label":"MICROS","kind":"property","documentation":"MICROS: ChronoUnit","insertText":"MICROS"},{"label":"MILLENNIA","kind":"property","documentation":"MILLENNIA: ChronoUnit","insertText":"MILLENNIA"},{"label":"MILLIS","kind":"property","documentation":"MILLIS: ChronoUnit","insertText":"MILLIS"},{"label":"MINUTES","kind":"property","documentation":"MINUTES: ChronoUnit","insertText":"MINUTES"},{"label":"MONTHS","kind":"property","documentation":"MONTHS: ChronoUnit","insertText":"MONTHS"},{"label":"NANOS","kind":"property","documentation":"NANOS: ChronoUnit","insertText":"NANOS"},{"label":"SECONDS","kind":"property","documentation":"SECONDS: ChronoUnit","insertText":"SECONDS"},{"label":"WEEKS","kind":"property","documentation":"WEEKS: ChronoUnit","insertText":"WEEKS"},{"label":"YEARS","kind":"property","documentation":"YEARS: ChronoUnit","insertText":"YEARS"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ChronoUnit","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ChronoUnit[]","insertText":"values"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a, long b): Temporal","insertText":"addTo"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): long","insertText":"between"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isDurationEstimated","kind":"method","documentation":"isDurationEstimated(): boolean","insertText":"isDurationEstimated"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(Temporal a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IsoFields","kind":"class","documentation":"Class: IsoFields","insertText":"IsoFields","properties":[{"label":"DAY_OF_QUARTER","kind":"property","documentation":"DAY_OF_QUARTER: TemporalField","insertText":"DAY_OF_QUARTER"},{"label":"QUARTER_OF_YEAR","kind":"property","documentation":"QUARTER_OF_YEAR: TemporalField","insertText":"QUARTER_OF_YEAR"},{"label":"QUARTER_YEARS","kind":"property","documentation":"QUARTER_YEARS: TemporalUnit","insertText":"QUARTER_YEARS"},{"label":"WEEK_BASED_YEAR","kind":"property","documentation":"WEEK_BASED_YEAR: TemporalField","insertText":"WEEK_BASED_YEAR"},{"label":"WEEK_BASED_YEARS","kind":"property","documentation":"WEEK_BASED_YEARS: TemporalUnit","insertText":"WEEK_BASED_YEARS"},{"label":"WEEK_OF_WEEK_BASED_YEAR","kind":"property","documentation":"WEEK_OF_WEEK_BASED_YEAR: TemporalField","insertText":"WEEK_OF_WEEK_BASED_YEAR"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JulianFields","kind":"class","documentation":"Class: JulianFields","insertText":"JulianFields","properties":[{"label":"JULIAN_DAY","kind":"property","documentation":"JULIAN_DAY: TemporalField","insertText":"JULIAN_DAY"},{"label":"MODIFIED_JULIAN_DAY","kind":"property","documentation":"MODIFIED_JULIAN_DAY: TemporalField","insertText":"MODIFIED_JULIAN_DAY"},{"label":"RATA_DIE","kind":"property","documentation":"RATA_DIE: TemporalField","insertText":"RATA_DIE"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Temporal","kind":"class","documentation":"Class: Temporal","insertText":"Temporal","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Temporal","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Temporal","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Temporal","insertText":"with"}]},{"label":"TemporalAccessor","kind":"class","documentation":"Class: TemporalAccessor","insertText":"TemporalAccessor","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAdjuster","kind":"class","documentation":"Class: TemporalAdjuster","insertText":"TemporalAdjuster","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAdjusters","kind":"class","documentation":"Class: TemporalAdjusters","insertText":"TemporalAdjusters","properties":[{"label":"dayOfWeekInMonth","kind":"method","documentation":"dayOfWeekInMonth(int a, DayOfWeek b): TemporalAdjuster","insertText":"dayOfWeekInMonth"},{"label":"firstDayOfMonth","kind":"method","documentation":"firstDayOfMonth(): TemporalAdjuster","insertText":"firstDayOfMonth"},{"label":"firstDayOfNextMonth","kind":"method","documentation":"firstDayOfNextMonth(): TemporalAdjuster","insertText":"firstDayOfNextMonth"},{"label":"firstDayOfNextYear","kind":"method","documentation":"firstDayOfNextYear(): TemporalAdjuster","insertText":"firstDayOfNextYear"},{"label":"firstDayOfYear","kind":"method","documentation":"firstDayOfYear(): TemporalAdjuster","insertText":"firstDayOfYear"},{"label":"firstInMonth","kind":"method","documentation":"firstInMonth(DayOfWeek a): TemporalAdjuster","insertText":"firstInMonth"},{"label":"lastDayOfMonth","kind":"method","documentation":"lastDayOfMonth(): TemporalAdjuster","insertText":"lastDayOfMonth"},{"label":"lastDayOfYear","kind":"method","documentation":"lastDayOfYear(): TemporalAdjuster","insertText":"lastDayOfYear"},{"label":"lastInMonth","kind":"method","documentation":"lastInMonth(DayOfWeek a): TemporalAdjuster","insertText":"lastInMonth"},{"label":"next","kind":"method","documentation":"next(DayOfWeek a): TemporalAdjuster","insertText":"next"},{"label":"nextOrSame","kind":"method","documentation":"nextOrSame(DayOfWeek a): TemporalAdjuster","insertText":"nextOrSame"},{"label":"ofDateAdjuster","kind":"method","documentation":"ofDateAdjuster(UnaryOperator a): TemporalAdjuster","insertText":"ofDateAdjuster"},{"label":"previous","kind":"method","documentation":"previous(DayOfWeek a): TemporalAdjuster","insertText":"previous"},{"label":"previousOrSame","kind":"method","documentation":"previousOrSame(DayOfWeek a): TemporalAdjuster","insertText":"previousOrSame"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAmount","kind":"class","documentation":"Class: TemporalAmount","insertText":"TemporalAmount","properties":[{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalField","kind":"class","documentation":"Class: TemporalField","insertText":"TemporalField","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a, long b): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseUnit","kind":"method","documentation":"getBaseUnit(): TemporalUnit","insertText":"getBaseUnit"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getFrom","kind":"method","documentation":"getFrom(TemporalAccessor a): long","insertText":"getFrom"},{"label":"getRangeUnit","kind":"method","documentation":"getRangeUnit(): TemporalUnit","insertText":"getRangeUnit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(TemporalAccessor a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"range","kind":"method","documentation":"range(): ValueRange","insertText":"range"},{"label":"rangeRefinedBy","kind":"method","documentation":"rangeRefinedBy(TemporalAccessor a): ValueRange","insertText":"rangeRefinedBy"},{"label":"resolve","kind":"method","documentation":"resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor","insertText":"resolve"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalQueries","kind":"class","documentation":"Class: TemporalQueries","insertText":"TemporalQueries","properties":[{"label":"chronology","kind":"method","documentation":"chronology(): TemporalQuery","insertText":"chronology"},{"label":"localDate","kind":"method","documentation":"localDate(): TemporalQuery","insertText":"localDate"},{"label":"localTime","kind":"method","documentation":"localTime(): TemporalQuery","insertText":"localTime"},{"label":"offset","kind":"method","documentation":"offset(): TemporalQuery","insertText":"offset"},{"label":"precision","kind":"method","documentation":"precision(): TemporalQuery","insertText":"precision"},{"label":"zone","kind":"method","documentation":"zone(): TemporalQuery","insertText":"zone"},{"label":"zoneId","kind":"method","documentation":"zoneId(): TemporalQuery","insertText":"zoneId"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalQuery","kind":"class","documentation":"Class: TemporalQuery","insertText":"TemporalQuery","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"queryFrom","kind":"method","documentation":"queryFrom(TemporalAccessor a): def","insertText":"queryFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalUnit","kind":"class","documentation":"Class: TemporalUnit","insertText":"TemporalUnit","properties":[{"label":"addTo","kind":"method","documentation":"addTo(Temporal a, long b): Temporal","insertText":"addTo"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): long","insertText":"between"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isDurationEstimated","kind":"method","documentation":"isDurationEstimated(): boolean","insertText":"isDurationEstimated"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(Temporal a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnsupportedTemporalTypeException","kind":"class","documentation":"Class: UnsupportedTemporalTypeException","insertText":"UnsupportedTemporalTypeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnsupportedTemporalTypeException","kind":"constructor","documentation":"Constructor: UnsupportedTemporalTypeException","insertText":"UnsupportedTemporalTypeException"}},{"label":"ValueRange","kind":"class","documentation":"Class: ValueRange","insertText":"ValueRange","properties":[{"label":"of","kind":"method","documentation":"of(long a, long b, long c, long d | long a, long b, long c | long a, long b): ValueRange","insertText":"of"},{"label":"checkValidIntValue","kind":"method","documentation":"checkValidIntValue(long a, TemporalField b): int","insertText":"checkValidIntValue"},{"label":"checkValidValue","kind":"method","documentation":"checkValidValue(long a, TemporalField b): long","insertText":"checkValidValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLargestMinimum","kind":"method","documentation":"getLargestMinimum(): long","insertText":"getLargestMinimum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(): long","insertText":"getMaximum"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(): long","insertText":"getMinimum"},{"label":"getSmallestMaximum","kind":"method","documentation":"getSmallestMaximum(): long","insertText":"getSmallestMaximum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isFixed","kind":"method","documentation":"isFixed(): boolean","insertText":"isFixed"},{"label":"isIntValue","kind":"method","documentation":"isIntValue(): boolean","insertText":"isIntValue"},{"label":"isValidIntValue","kind":"method","documentation":"isValidIntValue(long a): boolean","insertText":"isValidIntValue"},{"label":"isValidValue","kind":"method","documentation":"isValidValue(long a): boolean","insertText":"isValidValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"WeekFields","kind":"class","documentation":"Class: WeekFields","insertText":"WeekFields","properties":[{"label":"ISO","kind":"property","documentation":"ISO: WeekFields","insertText":"ISO"},{"label":"SUNDAY_START","kind":"property","documentation":"SUNDAY_START: WeekFields","insertText":"SUNDAY_START"},{"label":"WEEK_BASED_YEARS","kind":"property","documentation":"WEEK_BASED_YEARS: TemporalUnit","insertText":"WEEK_BASED_YEARS"},{"label":"of","kind":"method","documentation":"of(DayOfWeek a, int b | Locale a): WeekFields","insertText":"of"},{"label":"dayOfWeek","kind":"method","documentation":"dayOfWeek(): TemporalField","insertText":"dayOfWeek"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): DayOfWeek","insertText":"getFirstDayOfWeek"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"weekBasedYear","kind":"method","documentation":"weekBasedYear(): TemporalField","insertText":"weekBasedYear"},{"label":"weekOfMonth","kind":"method","documentation":"weekOfMonth(): TemporalField","insertText":"weekOfMonth"},{"label":"weekOfWeekBasedYear","kind":"method","documentation":"weekOfWeekBasedYear(): TemporalField","insertText":"weekOfWeekBasedYear"},{"label":"weekOfYear","kind":"method","documentation":"weekOfYear(): TemporalField","insertText":"weekOfYear"}]},{"label":"ZoneOffsetTransition","kind":"class","documentation":"Class: ZoneOffsetTransition","insertText":"ZoneOffsetTransition","properties":[{"label":"of","kind":"method","documentation":"of(LocalDateTime a, ZoneOffset b, ZoneOffset c): ZoneOffsetTransition","insertText":"of"},{"label":"compareTo","kind":"method","documentation":"compareTo(ZoneOffsetTransition a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDateTimeAfter","kind":"method","documentation":"getDateTimeAfter(): LocalDateTime","insertText":"getDateTimeAfter"},{"label":"getDateTimeBefore","kind":"method","documentation":"getDateTimeBefore(): LocalDateTime","insertText":"getDateTimeBefore"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"getInstant","kind":"method","documentation":"getInstant(): Instant","insertText":"getInstant"},{"label":"getOffsetAfter","kind":"method","documentation":"getOffsetAfter(): ZoneOffset","insertText":"getOffsetAfter"},{"label":"getOffsetBefore","kind":"method","documentation":"getOffsetBefore(): ZoneOffset","insertText":"getOffsetBefore"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGap","kind":"method","documentation":"isGap(): boolean","insertText":"isGap"},{"label":"isOverlap","kind":"method","documentation":"isOverlap(): boolean","insertText":"isOverlap"},{"label":"isValidOffset","kind":"method","documentation":"isValidOffset(ZoneOffset a): boolean","insertText":"isValidOffset"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneOffsetTransitionRule","kind":"class","documentation":"Class: ZoneOffsetTransitionRule","insertText":"ZoneOffsetTransitionRule","properties":[{"label":"of","kind":"method","documentation":"of(Month a, int b, DayOfWeek c, LocalTime d, boolean e, ZoneOffsetTransitionRule.TimeDefinition f, ZoneOffset undefined, ZoneOffset undefined, ZoneOffset undefined): ZoneOffsetTransitionRule","insertText":"of"},{"label":"createTransition","kind":"method","documentation":"createTransition(int a): ZoneOffsetTransition","insertText":"createTransition"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDayOfMonthIndicator","kind":"method","documentation":"getDayOfMonthIndicator(): int","insertText":"getDayOfMonthIndicator"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getLocalTime","kind":"method","documentation":"getLocalTime(): LocalTime","insertText":"getLocalTime"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getOffsetAfter","kind":"method","documentation":"getOffsetAfter(): ZoneOffset","insertText":"getOffsetAfter"},{"label":"getOffsetBefore","kind":"method","documentation":"getOffsetBefore(): ZoneOffset","insertText":"getOffsetBefore"},{"label":"getStandardOffset","kind":"method","documentation":"getStandardOffset(): ZoneOffset","insertText":"getStandardOffset"},{"label":"getTimeDefinition","kind":"method","documentation":"getTimeDefinition(): ZoneOffsetTransitionRule.TimeDefinition","insertText":"getTimeDefinition"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isMidnightEndOfDay","kind":"method","documentation":"isMidnightEndOfDay(): boolean","insertText":"isMidnightEndOfDay"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TimeDefinition","kind":"class","documentation":"Class: TimeDefinition","insertText":"TimeDefinition","properties":[{"label":"STANDARD","kind":"property","documentation":"STANDARD: ZoneOffsetTransitionRule.TimeDefinition","insertText":"STANDARD"},{"label":"UTC","kind":"property","documentation":"UTC: ZoneOffsetTransitionRule.TimeDefinition","insertText":"UTC"},{"label":"WALL","kind":"property","documentation":"WALL: ZoneOffsetTransitionRule.TimeDefinition","insertText":"WALL"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ZoneOffsetTransitionRule.TimeDefinition","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ZoneOffsetTransitionRule.TimeDefinition[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"createDateTime","kind":"method","documentation":"createDateTime(LocalDateTime a, ZoneOffset b, ZoneOffset c): LocalDateTime","insertText":"createDateTime"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneRules","kind":"class","documentation":"Class: ZoneRules","insertText":"ZoneRules","properties":[{"label":"of","kind":"method","documentation":"of(ZoneOffset a, ZoneOffset b, List c, List d, List e | ZoneOffset a): ZoneRules","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDaylightSavings","kind":"method","documentation":"getDaylightSavings(Instant a): Duration","insertText":"getDaylightSavings"},{"label":"getOffset","kind":"method","documentation":"getOffset(Instant a): ZoneOffset","insertText":"getOffset"},{"label":"getStandardOffset","kind":"method","documentation":"getStandardOffset(Instant a): ZoneOffset","insertText":"getStandardOffset"},{"label":"getTransition","kind":"method","documentation":"getTransition(LocalDateTime a): ZoneOffsetTransition","insertText":"getTransition"},{"label":"getTransitionRules","kind":"method","documentation":"getTransitionRules(): List","insertText":"getTransitionRules"},{"label":"getTransitions","kind":"method","documentation":"getTransitions(): List","insertText":"getTransitions"},{"label":"getValidOffsets","kind":"method","documentation":"getValidOffsets(LocalDateTime a): List","insertText":"getValidOffsets"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDaylightSavings","kind":"method","documentation":"isDaylightSavings(Instant a): boolean","insertText":"isDaylightSavings"},{"label":"isFixedOffset","kind":"method","documentation":"isFixedOffset(): boolean","insertText":"isFixedOffset"},{"label":"isValidOffset","kind":"method","documentation":"isValidOffset(LocalDateTime a, ZoneOffset b): boolean","insertText":"isValidOffset"},{"label":"nextTransition","kind":"method","documentation":"nextTransition(Instant a): ZoneOffsetTransition","insertText":"nextTransition"},{"label":"previousTransition","kind":"method","documentation":"previousTransition(Instant a): ZoneOffsetTransition","insertText":"previousTransition"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneRulesException","kind":"class","documentation":"Class: ZoneRulesException","insertText":"ZoneRulesException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ZoneRulesException","kind":"constructor","documentation":"Constructor: ZoneRulesException","insertText":"ZoneRulesException"}},{"label":"ZoneRulesProvider","kind":"class","documentation":"Class: ZoneRulesProvider","insertText":"ZoneRulesProvider","properties":[{"label":"getAvailableZoneIds","kind":"method","documentation":"getAvailableZoneIds(): Set","insertText":"getAvailableZoneIds"},{"label":"getRules","kind":"method","documentation":"getRules(String a, boolean b): ZoneRules","insertText":"getRules"},{"label":"getVersions","kind":"method","documentation":"getVersions(String a): NavigableMap","insertText":"getVersions"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractCollection","kind":"class","documentation":"Class: AbstractCollection","insertText":"AbstractCollection","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractList","kind":"class","documentation":"Class: AbstractList","insertText":"AbstractList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractMap","kind":"class","documentation":"Class: AbstractMap","insertText":"AbstractMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"SimpleEntry","kind":"class","documentation":"Class: SimpleEntry","insertText":"SimpleEntry","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleEntry","kind":"constructor","documentation":"Constructor: SimpleEntry","insertText":"SimpleEntry"}},{"label":"SimpleImmutableEntry","kind":"class","documentation":"Class: SimpleImmutableEntry","insertText":"SimpleImmutableEntry","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleImmutableEntry","kind":"constructor","documentation":"Constructor: SimpleImmutableEntry","insertText":"SimpleImmutableEntry"}},{"label":"AbstractQueue","kind":"class","documentation":"Class: AbstractQueue","insertText":"AbstractQueue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractSequentialList","kind":"class","documentation":"Class: AbstractSequentialList","insertText":"AbstractSequentialList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractSet","kind":"class","documentation":"Class: AbstractSet","insertText":"AbstractSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ArrayDeque","kind":"class","documentation":"Class: ArrayDeque","insertText":"ArrayDeque","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): ArrayDeque","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean | def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayDeque","kind":"constructor","documentation":"Constructor: ArrayDeque","insertText":"ArrayDeque"}},{"label":"ArrayList","kind":"class","documentation":"Class: ArrayList","insertText":"ArrayList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"trimToSize","kind":"method","documentation":"trimToSize(): void","insertText":"trimToSize"}],"constructorDefinition":{"label":"ArrayList","kind":"constructor","documentation":"Constructor: ArrayList","insertText":"ArrayList"}},{"label":"Arrays","kind":"class","documentation":"Class: Arrays","insertText":"Arrays","properties":[{"label":"asList","kind":"method","documentation":"asList(Object[] a): List","insertText":"asList"},{"label":"deepEquals","kind":"method","documentation":"deepEquals(Object[] a, Object[] b): boolean","insertText":"deepEquals"},{"label":"deepHashCode","kind":"method","documentation":"deepHashCode(Object[] a): int","insertText":"deepHashCode"},{"label":"deepToString","kind":"method","documentation":"deepToString(Object[] a): String","insertText":"deepToString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Base64","kind":"class","documentation":"Class: Base64","insertText":"Base64","properties":[{"label":"getDecoder","kind":"method","documentation":"getDecoder(): Base64.Decoder","insertText":"getDecoder"},{"label":"getEncoder","kind":"method","documentation":"getEncoder(): Base64.Encoder","insertText":"getEncoder"},{"label":"getMimeDecoder","kind":"method","documentation":"getMimeDecoder(): Base64.Decoder","insertText":"getMimeDecoder"},{"label":"getMimeEncoder","kind":"method","documentation":"getMimeEncoder(int a, byte[] b): Base64.Encoder","insertText":"getMimeEncoder"},{"label":"getUrlDecoder","kind":"method","documentation":"getUrlDecoder(): Base64.Decoder","insertText":"getUrlDecoder"},{"label":"getUrlEncoder","kind":"method","documentation":"getUrlEncoder(): Base64.Encoder","insertText":"getUrlEncoder"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Decoder","kind":"class","documentation":"Class: Decoder","insertText":"Decoder","properties":[{"label":"decode","kind":"method","documentation":"decode(byte[] a, byte[] b | String a): int | byte[]","insertText":"decode"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Encoder","kind":"class","documentation":"Class: Encoder","insertText":"Encoder","properties":[{"label":"encode","kind":"method","documentation":"encode(byte[] a, byte[] b): int","insertText":"encode"},{"label":"encodeToString","kind":"method","documentation":"encodeToString(byte[] a): String","insertText":"encodeToString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withoutPadding","kind":"method","documentation":"withoutPadding(): Base64.Encoder","insertText":"withoutPadding"}]},{"label":"BitSet","kind":"class","documentation":"Class: BitSet","insertText":"BitSet","properties":[{"label":"valueOf","kind":"method","documentation":"valueOf(long[] a): BitSet","insertText":"valueOf"},{"label":"and","kind":"method","documentation":"and(BitSet a): void","insertText":"and"},{"label":"andNot","kind":"method","documentation":"andNot(BitSet a): void","insertText":"andNot"},{"label":"cardinality","kind":"method","documentation":"cardinality(): int","insertText":"cardinality"},{"label":"clear","kind":"method","documentation":"clear(int a, int b | int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flip","kind":"method","documentation":"flip(int a, int b | int a): void","insertText":"flip"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intersects","kind":"method","documentation":"intersects(BitSet a): boolean","insertText":"intersects"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"nextClearBit","kind":"method","documentation":"nextClearBit(int a): int","insertText":"nextClearBit"},{"label":"nextSetBit","kind":"method","documentation":"nextSetBit(int a): int","insertText":"nextSetBit"},{"label":"or","kind":"method","documentation":"or(BitSet a): void","insertText":"or"},{"label":"previousClearBit","kind":"method","documentation":"previousClearBit(int a): int","insertText":"previousClearBit"},{"label":"previousSetBit","kind":"method","documentation":"previousSetBit(int a): int","insertText":"previousSetBit"},{"label":"set","kind":"method","documentation":"set(int a, int b, boolean c | int a, int b | int a): void","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toLongArray","kind":"method","documentation":"toLongArray(): long[]","insertText":"toLongArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"xor","kind":"method","documentation":"xor(BitSet a): void","insertText":"xor"}],"constructorDefinition":{"label":"BitSet","kind":"constructor","documentation":"Constructor: BitSet","insertText":"BitSet"}},{"label":"Calendar","kind":"class","documentation":"Class: Calendar","insertText":"Calendar","properties":[{"label":"ALL_STYLES","kind":"property","documentation":"ALL_STYLES: int","insertText":"ALL_STYLES"},{"label":"AM","kind":"property","documentation":"AM: int","insertText":"AM"},{"label":"AM_PM","kind":"property","documentation":"AM_PM: int","insertText":"AM_PM"},{"label":"APRIL","kind":"property","documentation":"APRIL: int","insertText":"APRIL"},{"label":"AUGUST","kind":"property","documentation":"AUGUST: int","insertText":"AUGUST"},{"label":"DATE","kind":"property","documentation":"DATE: int","insertText":"DATE"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: int","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: int","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH: int","insertText":"DAY_OF_WEEK_IN_MONTH"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: int","insertText":"DAY_OF_YEAR"},{"label":"DECEMBER","kind":"property","documentation":"DECEMBER: int","insertText":"DECEMBER"},{"label":"DST_OFFSET","kind":"property","documentation":"DST_OFFSET: int","insertText":"DST_OFFSET"},{"label":"ERA","kind":"property","documentation":"ERA: int","insertText":"ERA"},{"label":"FEBRUARY","kind":"property","documentation":"FEBRUARY: int","insertText":"FEBRUARY"},{"label":"FIELD_COUNT","kind":"property","documentation":"FIELD_COUNT: int","insertText":"FIELD_COUNT"},{"label":"FRIDAY","kind":"property","documentation":"FRIDAY: int","insertText":"FRIDAY"},{"label":"HOUR","kind":"property","documentation":"HOUR: int","insertText":"HOUR"},{"label":"HOUR_OF_DAY","kind":"property","documentation":"HOUR_OF_DAY: int","insertText":"HOUR_OF_DAY"},{"label":"JANUARY","kind":"property","documentation":"JANUARY: int","insertText":"JANUARY"},{"label":"JULY","kind":"property","documentation":"JULY: int","insertText":"JULY"},{"label":"JUNE","kind":"property","documentation":"JUNE: int","insertText":"JUNE"},{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"LONG_FORMAT","kind":"property","documentation":"LONG_FORMAT: int","insertText":"LONG_FORMAT"},{"label":"LONG_STANDALONE","kind":"property","documentation":"LONG_STANDALONE: int","insertText":"LONG_STANDALONE"},{"label":"MARCH","kind":"property","documentation":"MARCH: int","insertText":"MARCH"},{"label":"MAY","kind":"property","documentation":"MAY: int","insertText":"MAY"},{"label":"MILLISECOND","kind":"property","documentation":"MILLISECOND: int","insertText":"MILLISECOND"},{"label":"MINUTE","kind":"property","documentation":"MINUTE: int","insertText":"MINUTE"},{"label":"MONDAY","kind":"property","documentation":"MONDAY: int","insertText":"MONDAY"},{"label":"MONTH","kind":"property","documentation":"MONTH: int","insertText":"MONTH"},{"label":"NARROW_FORMAT","kind":"property","documentation":"NARROW_FORMAT: int","insertText":"NARROW_FORMAT"},{"label":"NARROW_STANDALONE","kind":"property","documentation":"NARROW_STANDALONE: int","insertText":"NARROW_STANDALONE"},{"label":"NOVEMBER","kind":"property","documentation":"NOVEMBER: int","insertText":"NOVEMBER"},{"label":"OCTOBER","kind":"property","documentation":"OCTOBER: int","insertText":"OCTOBER"},{"label":"PM","kind":"property","documentation":"PM: int","insertText":"PM"},{"label":"SATURDAY","kind":"property","documentation":"SATURDAY: int","insertText":"SATURDAY"},{"label":"SECOND","kind":"property","documentation":"SECOND: int","insertText":"SECOND"},{"label":"SEPTEMBER","kind":"property","documentation":"SEPTEMBER: int","insertText":"SEPTEMBER"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"SHORT_FORMAT","kind":"property","documentation":"SHORT_FORMAT: int","insertText":"SHORT_FORMAT"},{"label":"SHORT_STANDALONE","kind":"property","documentation":"SHORT_STANDALONE: int","insertText":"SHORT_STANDALONE"},{"label":"SUNDAY","kind":"property","documentation":"SUNDAY: int","insertText":"SUNDAY"},{"label":"THURSDAY","kind":"property","documentation":"THURSDAY: int","insertText":"THURSDAY"},{"label":"TUESDAY","kind":"property","documentation":"TUESDAY: int","insertText":"TUESDAY"},{"label":"UNDECIMBER","kind":"property","documentation":"UNDECIMBER: int","insertText":"UNDECIMBER"},{"label":"WEDNESDAY","kind":"property","documentation":"WEDNESDAY: int","insertText":"WEDNESDAY"},{"label":"WEEK_OF_MONTH","kind":"property","documentation":"WEEK_OF_MONTH: int","insertText":"WEEK_OF_MONTH"},{"label":"WEEK_OF_YEAR","kind":"property","documentation":"WEEK_OF_YEAR: int","insertText":"WEEK_OF_YEAR"},{"label":"YEAR","kind":"property","documentation":"YEAR: int","insertText":"YEAR"},{"label":"ZONE_OFFSET","kind":"property","documentation":"ZONE_OFFSET: int","insertText":"ZONE_OFFSET"},{"label":"getAvailableCalendarTypes","kind":"method","documentation":"getAvailableCalendarTypes(): Set","insertText":"getAvailableCalendarTypes"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(TimeZone a, Locale b | TimeZone a): Calendar","insertText":"getInstance"},{"label":"add","kind":"method","documentation":"add(int a, int b): void","insertText":"add"},{"label":"after","kind":"method","documentation":"after(Object a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Object a): boolean","insertText":"before"},{"label":"clear","kind":"method","documentation":"clear(int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Calendar a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(int a): int","insertText":"get"},{"label":"getActualMaximum","kind":"method","documentation":"getActualMaximum(int a): int","insertText":"getActualMaximum"},{"label":"getActualMinimum","kind":"method","documentation":"getActualMinimum(int a): int","insertText":"getActualMinimum"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(int a, int b, Locale c): String","insertText":"getDisplayName"},{"label":"getDisplayNames","kind":"method","documentation":"getDisplayNames(int a, int b, Locale c): Map","insertText":"getDisplayNames"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): int","insertText":"getFirstDayOfWeek"},{"label":"getGreatestMinimum","kind":"method","documentation":"getGreatestMinimum(int a): int","insertText":"getGreatestMinimum"},{"label":"getLeastMaximum","kind":"method","documentation":"getLeastMaximum(int a): int","insertText":"getLeastMaximum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(int a): int","insertText":"getMaximum"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(int a): int","insertText":"getMinimum"},{"label":"getTime","kind":"method","documentation":"getTime(): Date","insertText":"getTime"},{"label":"getTimeInMillis","kind":"method","documentation":"getTimeInMillis(): long","insertText":"getTimeInMillis"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"getWeekYear","kind":"method","documentation":"getWeekYear(): int","insertText":"getWeekYear"},{"label":"getWeeksInWeekYear","kind":"method","documentation":"getWeeksInWeekYear(): int","insertText":"getWeeksInWeekYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"isSet","kind":"method","documentation":"isSet(int a): boolean","insertText":"isSet"},{"label":"isWeekDateSupported","kind":"method","documentation":"isWeekDateSupported(): boolean","insertText":"isWeekDateSupported"},{"label":"roll","kind":"method","documentation":"roll(int a, int b): void","insertText":"roll"},{"label":"set","kind":"method","documentation":"set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void","insertText":"set"},{"label":"setFirstDayOfWeek","kind":"method","documentation":"setFirstDayOfWeek(int a): void","insertText":"setFirstDayOfWeek"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setMinimalDaysInFirstWeek","kind":"method","documentation":"setMinimalDaysInFirstWeek(int a): void","insertText":"setMinimalDaysInFirstWeek"},{"label":"setTime","kind":"method","documentation":"setTime(Date a): void","insertText":"setTime"},{"label":"setTimeInMillis","kind":"method","documentation":"setTimeInMillis(long a): void","insertText":"setTimeInMillis"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): void","insertText":"setWeekDate"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"build","kind":"method","documentation":"build(): Calendar","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"set","kind":"method","documentation":"set(int a, int b): Calendar.Builder","insertText":"set"},{"label":"setCalendarType","kind":"method","documentation":"setCalendarType(String a): Calendar.Builder","insertText":"setCalendarType"},{"label":"setDate","kind":"method","documentation":"setDate(int a, int b, int c): Calendar.Builder","insertText":"setDate"},{"label":"setFields","kind":"method","documentation":"setFields(int[] a): Calendar.Builder","insertText":"setFields"},{"label":"setInstant","kind":"method","documentation":"setInstant(long a): Calendar.Builder","insertText":"setInstant"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): Calendar.Builder","insertText":"setLenient"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): Calendar.Builder","insertText":"setLocale"},{"label":"setTimeOfDay","kind":"method","documentation":"setTimeOfDay(int a, int b, int c, int d | int a, int b, int c): Calendar.Builder","insertText":"setTimeOfDay"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): Calendar.Builder","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): Calendar.Builder","insertText":"setWeekDate"},{"label":"setWeekDefinition","kind":"method","documentation":"setWeekDefinition(int a, int b): Calendar.Builder","insertText":"setWeekDefinition"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Builder","kind":"constructor","documentation":"Constructor: Builder","insertText":"Builder"}},{"label":"Collection","kind":"class","documentation":"Class: Collection","insertText":"Collection","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collections","kind":"class","documentation":"Class: Collections","insertText":"Collections","properties":[{"label":"EMPTY_LIST","kind":"property","documentation":"EMPTY_LIST: List","insertText":"EMPTY_LIST"},{"label":"EMPTY_MAP","kind":"property","documentation":"EMPTY_MAP: Map","insertText":"EMPTY_MAP"},{"label":"EMPTY_SET","kind":"property","documentation":"EMPTY_SET: Set","insertText":"EMPTY_SET"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a, def[] b): boolean","insertText":"addAll"},{"label":"asLifoQueue","kind":"method","documentation":"asLifoQueue(Deque a): Queue","insertText":"asLifoQueue"},{"label":"binarySearch","kind":"method","documentation":"binarySearch(List a, def b, Comparator c | List a, def b): int","insertText":"binarySearch"},{"label":"copy","kind":"method","documentation":"copy(List a, List b): void","insertText":"copy"},{"label":"disjoint","kind":"method","documentation":"disjoint(Collection a, Collection b): boolean","insertText":"disjoint"},{"label":"emptyEnumeration","kind":"method","documentation":"emptyEnumeration(): Enumeration","insertText":"emptyEnumeration"},{"label":"emptyIterator","kind":"method","documentation":"emptyIterator(): Iterator","insertText":"emptyIterator"},{"label":"emptyList","kind":"method","documentation":"emptyList(): List","insertText":"emptyList"},{"label":"emptyListIterator","kind":"method","documentation":"emptyListIterator(): ListIterator","insertText":"emptyListIterator"},{"label":"emptyMap","kind":"method","documentation":"emptyMap(): Map","insertText":"emptyMap"},{"label":"emptyNavigableMap","kind":"method","documentation":"emptyNavigableMap(): NavigableMap","insertText":"emptyNavigableMap"},{"label":"emptyNavigableSet","kind":"method","documentation":"emptyNavigableSet(): NavigableSet","insertText":"emptyNavigableSet"},{"label":"emptySet","kind":"method","documentation":"emptySet(): Set","insertText":"emptySet"},{"label":"emptySortedMap","kind":"method","documentation":"emptySortedMap(): SortedMap","insertText":"emptySortedMap"},{"label":"emptySortedSet","kind":"method","documentation":"emptySortedSet(): SortedSet","insertText":"emptySortedSet"},{"label":"enumeration","kind":"method","documentation":"enumeration(Collection a): Enumeration","insertText":"enumeration"},{"label":"fill","kind":"method","documentation":"fill(List a, def b): void","insertText":"fill"},{"label":"frequency","kind":"method","documentation":"frequency(Collection a, def b): int","insertText":"frequency"},{"label":"indexOfSubList","kind":"method","documentation":"indexOfSubList(List a, List b): int","insertText":"indexOfSubList"},{"label":"lastIndexOfSubList","kind":"method","documentation":"lastIndexOfSubList(List a, List b): int","insertText":"lastIndexOfSubList"},{"label":"list","kind":"method","documentation":"list(Enumeration a): ArrayList","insertText":"list"},{"label":"max","kind":"method","documentation":"max(Collection a, Comparator b | Collection a): def","insertText":"max"},{"label":"min","kind":"method","documentation":"min(Collection a, Comparator b | Collection a): def","insertText":"min"},{"label":"nCopies","kind":"method","documentation":"nCopies(int a, def b): List","insertText":"nCopies"},{"label":"newSetFromMap","kind":"method","documentation":"newSetFromMap(Map a): Set","insertText":"newSetFromMap"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(List a, def b, def c): boolean","insertText":"replaceAll"},{"label":"reverse","kind":"method","documentation":"reverse(List a): void","insertText":"reverse"},{"label":"reverseOrder","kind":"method","documentation":"reverseOrder(Comparator a): Comparator","insertText":"reverseOrder"},{"label":"rotate","kind":"method","documentation":"rotate(List a, int b): void","insertText":"rotate"},{"label":"shuffle","kind":"method","documentation":"shuffle(List a, Random b | List a): void","insertText":"shuffle"},{"label":"singleton","kind":"method","documentation":"singleton(def a): Set","insertText":"singleton"},{"label":"singletonList","kind":"method","documentation":"singletonList(def a): List","insertText":"singletonList"},{"label":"singletonMap","kind":"method","documentation":"singletonMap(def a, def b): Map","insertText":"singletonMap"},{"label":"sort","kind":"method","documentation":"sort(List a, Comparator b | List a): void","insertText":"sort"},{"label":"swap","kind":"method","documentation":"swap(List a, int b, int c): void","insertText":"swap"},{"label":"unmodifiableCollection","kind":"method","documentation":"unmodifiableCollection(Collection a): Collection","insertText":"unmodifiableCollection"},{"label":"unmodifiableList","kind":"method","documentation":"unmodifiableList(List a): List","insertText":"unmodifiableList"},{"label":"unmodifiableMap","kind":"method","documentation":"unmodifiableMap(Map a): Map","insertText":"unmodifiableMap"},{"label":"unmodifiableNavigableMap","kind":"method","documentation":"unmodifiableNavigableMap(NavigableMap a): NavigableMap","insertText":"unmodifiableNavigableMap"},{"label":"unmodifiableNavigableSet","kind":"method","documentation":"unmodifiableNavigableSet(NavigableSet a): NavigableSet","insertText":"unmodifiableNavigableSet"},{"label":"unmodifiableSet","kind":"method","documentation":"unmodifiableSet(Set a): Set","insertText":"unmodifiableSet"},{"label":"unmodifiableSortedMap","kind":"method","documentation":"unmodifiableSortedMap(SortedMap a): SortedMap","insertText":"unmodifiableSortedMap"},{"label":"unmodifiableSortedSet","kind":"method","documentation":"unmodifiableSortedSet(SortedSet a): SortedSet","insertText":"unmodifiableSortedSet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Comparator","kind":"class","documentation":"Class: Comparator","insertText":"Comparator","properties":[{"label":"comparing","kind":"method","documentation":"comparing(Function a, Comparator b | Function a): Comparator","insertText":"comparing"},{"label":"comparingDouble","kind":"method","documentation":"comparingDouble(ToDoubleFunction a): Comparator","insertText":"comparingDouble"},{"label":"comparingInt","kind":"method","documentation":"comparingInt(ToIntFunction a): Comparator","insertText":"comparingInt"},{"label":"comparingLong","kind":"method","documentation":"comparingLong(ToLongFunction a): Comparator","insertText":"comparingLong"},{"label":"naturalOrder","kind":"method","documentation":"naturalOrder(): Comparator","insertText":"naturalOrder"},{"label":"nullsFirst","kind":"method","documentation":"nullsFirst(Comparator a): Comparator","insertText":"nullsFirst"},{"label":"nullsLast","kind":"method","documentation":"nullsLast(Comparator a): Comparator","insertText":"nullsLast"},{"label":"reverseOrder","kind":"method","documentation":"reverseOrder(): Comparator","insertText":"reverseOrder"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ConcurrentModificationException","kind":"class","documentation":"Class: ConcurrentModificationException","insertText":"ConcurrentModificationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ConcurrentModificationException","kind":"constructor","documentation":"Constructor: ConcurrentModificationException","insertText":"ConcurrentModificationException"}},{"label":"Currency","kind":"class","documentation":"Class: Currency","insertText":"Currency","properties":[{"label":"getAvailableCurrencies","kind":"method","documentation":"getAvailableCurrencies(): Set","insertText":"getAvailableCurrencies"},{"label":"getInstance","kind":"method","documentation":"getInstance(String a): Currency","insertText":"getInstance"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCurrencyCode","kind":"method","documentation":"getCurrencyCode(): String","insertText":"getCurrencyCode"},{"label":"getDefaultFractionDigits","kind":"method","documentation":"getDefaultFractionDigits(): int","insertText":"getDefaultFractionDigits"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getNumericCode","kind":"method","documentation":"getNumericCode(): int","insertText":"getNumericCode"},{"label":"getSymbol","kind":"method","documentation":"getSymbol(Locale a): String","insertText":"getSymbol"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Date","kind":"class","documentation":"Class: Date","insertText":"Date","properties":[{"label":"from","kind":"method","documentation":"from(Instant a): Date","insertText":"from"},{"label":"after","kind":"method","documentation":"after(Date a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Date a): boolean","insertText":"before"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Date a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getTime","kind":"method","documentation":"getTime(): long","insertText":"getTime"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setTime","kind":"method","documentation":"setTime(long a): void","insertText":"setTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Date","kind":"constructor","documentation":"Constructor: Date","insertText":"Date"}},{"label":"Deque","kind":"class","documentation":"Class: Deque","insertText":"Deque","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean | def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Dictionary","kind":"class","documentation":"Class: Dictionary","insertText":"Dictionary","properties":[{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keys","kind":"method","documentation":"keys(): Enumeration","insertText":"keys"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"remove","kind":"method","documentation":"remove(def a): def","insertText":"remove"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleSummaryStatistics","kind":"class","documentation":"Class: DoubleSummaryStatistics","insertText":"DoubleSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(DoubleSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): double","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): double","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): double","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DoubleSummaryStatistics","kind":"constructor","documentation":"Constructor: DoubleSummaryStatistics","insertText":"DoubleSummaryStatistics"}},{"label":"DuplicateFormatFlagsException","kind":"class","documentation":"Class: DuplicateFormatFlagsException","insertText":"DuplicateFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DuplicateFormatFlagsException","kind":"constructor","documentation":"Constructor: DuplicateFormatFlagsException","insertText":"DuplicateFormatFlagsException"}},{"label":"EmptyStackException","kind":"class","documentation":"Class: EmptyStackException","insertText":"EmptyStackException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"EmptyStackException","kind":"constructor","documentation":"Constructor: EmptyStackException","insertText":"EmptyStackException"}},{"label":"Enumeration","kind":"class","documentation":"Class: Enumeration","insertText":"Enumeration","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasMoreElements","kind":"method","documentation":"hasMoreElements(): boolean","insertText":"hasMoreElements"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"nextElement","kind":"method","documentation":"nextElement(): def","insertText":"nextElement"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventListener","kind":"class","documentation":"Class: EventListener","insertText":"EventListener","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventListenerProxy","kind":"class","documentation":"Class: EventListenerProxy","insertText":"EventListenerProxy","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getListener","kind":"method","documentation":"getListener(): EventListener","insertText":"getListener"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventObject","kind":"class","documentation":"Class: EventObject","insertText":"EventObject","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getSource","kind":"method","documentation":"getSource(): Object","insertText":"getSource"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"EventObject","kind":"constructor","documentation":"Constructor: EventObject","insertText":"EventObject"}},{"label":"FormatFlagsConversionMismatchException","kind":"class","documentation":"Class: FormatFlagsConversionMismatchException","insertText":"FormatFlagsConversionMismatchException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): char","insertText":"getConversion"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FormatFlagsConversionMismatchException","kind":"constructor","documentation":"Constructor: FormatFlagsConversionMismatchException","insertText":"FormatFlagsConversionMismatchException"}},{"label":"Formattable","kind":"class","documentation":"Class: Formattable","insertText":"Formattable","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"formatTo","kind":"method","documentation":"formatTo(Formatter a, int b, int c, int d): void","insertText":"formatTo"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FormattableFlags","kind":"class","documentation":"Class: FormattableFlags","insertText":"FormattableFlags","properties":[{"label":"ALTERNATE","kind":"property","documentation":"ALTERNATE: int","insertText":"ALTERNATE"},{"label":"LEFT_JUSTIFY","kind":"property","documentation":"LEFT_JUSTIFY: int","insertText":"LEFT_JUSTIFY"},{"label":"UPPERCASE","kind":"property","documentation":"UPPERCASE: int","insertText":"UPPERCASE"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Formatter","kind":"class","documentation":"Class: Formatter","insertText":"Formatter","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): Formatter","insertText":"format"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"locale","kind":"method","documentation":"locale(): Locale","insertText":"locale"},{"label":"out","kind":"method","documentation":"out(): Appendable","insertText":"out"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Formatter","kind":"constructor","documentation":"Constructor: Formatter","insertText":"Formatter"}},{"label":"BigDecimalLayoutForm","kind":"class","documentation":"Class: BigDecimalLayoutForm","insertText":"BigDecimalLayoutForm","properties":[{"label":"DECIMAL_FLOAT","kind":"property","documentation":"DECIMAL_FLOAT: Formatter.BigDecimalLayoutForm","insertText":"DECIMAL_FLOAT"},{"label":"SCIENTIFIC","kind":"property","documentation":"SCIENTIFIC: Formatter.BigDecimalLayoutForm","insertText":"SCIENTIFIC"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FormatterClosedException","kind":"class","documentation":"Class: FormatterClosedException","insertText":"FormatterClosedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FormatterClosedException","kind":"constructor","documentation":"Constructor: FormatterClosedException","insertText":"FormatterClosedException"}},{"label":"GregorianCalendar","kind":"class","documentation":"Class: GregorianCalendar","insertText":"GregorianCalendar","properties":[{"label":"AD","kind":"property","documentation":"AD: int","insertText":"AD"},{"label":"BC","kind":"property","documentation":"BC: int","insertText":"BC"},{"label":"from","kind":"method","documentation":"from(ZonedDateTime a): GregorianCalendar","insertText":"from"},{"label":"add","kind":"method","documentation":"add(int a, int b): void","insertText":"add"},{"label":"after","kind":"method","documentation":"after(Object a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Object a): boolean","insertText":"before"},{"label":"clear","kind":"method","documentation":"clear(int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Calendar a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(int a): int","insertText":"get"},{"label":"getActualMaximum","kind":"method","documentation":"getActualMaximum(int a): int","insertText":"getActualMaximum"},{"label":"getActualMinimum","kind":"method","documentation":"getActualMinimum(int a): int","insertText":"getActualMinimum"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(int a, int b, Locale c): String","insertText":"getDisplayName"},{"label":"getDisplayNames","kind":"method","documentation":"getDisplayNames(int a, int b, Locale c): Map","insertText":"getDisplayNames"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): int","insertText":"getFirstDayOfWeek"},{"label":"getGreatestMinimum","kind":"method","documentation":"getGreatestMinimum(int a): int","insertText":"getGreatestMinimum"},{"label":"getGregorianChange","kind":"method","documentation":"getGregorianChange(): Date","insertText":"getGregorianChange"},{"label":"getLeastMaximum","kind":"method","documentation":"getLeastMaximum(int a): int","insertText":"getLeastMaximum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(int a): int","insertText":"getMaximum"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(int a): int","insertText":"getMinimum"},{"label":"getTime","kind":"method","documentation":"getTime(): Date","insertText":"getTime"},{"label":"getTimeInMillis","kind":"method","documentation":"getTimeInMillis(): long","insertText":"getTimeInMillis"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"getWeekYear","kind":"method","documentation":"getWeekYear(): int","insertText":"getWeekYear"},{"label":"getWeeksInWeekYear","kind":"method","documentation":"getWeeksInWeekYear(): int","insertText":"getWeeksInWeekYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(int a): boolean","insertText":"isLeapYear"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"isSet","kind":"method","documentation":"isSet(int a): boolean","insertText":"isSet"},{"label":"isWeekDateSupported","kind":"method","documentation":"isWeekDateSupported(): boolean","insertText":"isWeekDateSupported"},{"label":"roll","kind":"method","documentation":"roll(int a, int b): void","insertText":"roll"},{"label":"set","kind":"method","documentation":"set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void","insertText":"set"},{"label":"setFirstDayOfWeek","kind":"method","documentation":"setFirstDayOfWeek(int a): void","insertText":"setFirstDayOfWeek"},{"label":"setGregorianChange","kind":"method","documentation":"setGregorianChange(Date a): void","insertText":"setGregorianChange"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setMinimalDaysInFirstWeek","kind":"method","documentation":"setMinimalDaysInFirstWeek(int a): void","insertText":"setMinimalDaysInFirstWeek"},{"label":"setTime","kind":"method","documentation":"setTime(Date a): void","insertText":"setTime"},{"label":"setTimeInMillis","kind":"method","documentation":"setTimeInMillis(long a): void","insertText":"setTimeInMillis"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): void","insertText":"setWeekDate"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZonedDateTime","kind":"method","documentation":"toZonedDateTime(): ZonedDateTime","insertText":"toZonedDateTime"}],"constructorDefinition":{"label":"GregorianCalendar","kind":"constructor","documentation":"Constructor: GregorianCalendar","insertText":"GregorianCalendar"}},{"label":"HashMap","kind":"class","documentation":"Class: HashMap","insertText":"HashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"HashMap","kind":"constructor","documentation":"Constructor: HashMap","insertText":"HashMap"}},{"label":"HashSet","kind":"class","documentation":"Class: HashSet","insertText":"HashSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"HashSet","kind":"constructor","documentation":"Constructor: HashSet","insertText":"HashSet"}},{"label":"Hashtable","kind":"class","documentation":"Class: Hashtable","insertText":"Hashtable","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"keys","kind":"method","documentation":"keys(): Enumeration","insertText":"keys"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"Hashtable","kind":"constructor","documentation":"Constructor: Hashtable","insertText":"Hashtable"}},{"label":"IdentityHashMap","kind":"class","documentation":"Class: IdentityHashMap","insertText":"IdentityHashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"IdentityHashMap","kind":"constructor","documentation":"Constructor: IdentityHashMap","insertText":"IdentityHashMap"}},{"label":"IllegalFormatCodePointException","kind":"class","documentation":"Class: IllegalFormatCodePointException","insertText":"IllegalFormatCodePointException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCodePoint","kind":"method","documentation":"getCodePoint(): int","insertText":"getCodePoint"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatCodePointException","kind":"constructor","documentation":"Constructor: IllegalFormatCodePointException","insertText":"IllegalFormatCodePointException"}},{"label":"IllegalFormatConversionException","kind":"class","documentation":"Class: IllegalFormatConversionException","insertText":"IllegalFormatConversionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): char","insertText":"getConversion"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalFormatException","kind":"class","documentation":"Class: IllegalFormatException","insertText":"IllegalFormatException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalFormatFlagsException","kind":"class","documentation":"Class: IllegalFormatFlagsException","insertText":"IllegalFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatFlagsException","kind":"constructor","documentation":"Constructor: IllegalFormatFlagsException","insertText":"IllegalFormatFlagsException"}},{"label":"IllegalFormatPrecisionException","kind":"class","documentation":"Class: IllegalFormatPrecisionException","insertText":"IllegalFormatPrecisionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getPrecision","kind":"method","documentation":"getPrecision(): int","insertText":"getPrecision"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatPrecisionException","kind":"constructor","documentation":"Constructor: IllegalFormatPrecisionException","insertText":"IllegalFormatPrecisionException"}},{"label":"IllegalFormatWidthException","kind":"class","documentation":"Class: IllegalFormatWidthException","insertText":"IllegalFormatWidthException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"getWidth","kind":"method","documentation":"getWidth(): int","insertText":"getWidth"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatWidthException","kind":"constructor","documentation":"Constructor: IllegalFormatWidthException","insertText":"IllegalFormatWidthException"}},{"label":"IllformedLocaleException","kind":"class","documentation":"Class: IllformedLocaleException","insertText":"IllformedLocaleException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllformedLocaleException","kind":"constructor","documentation":"Constructor: IllformedLocaleException","insertText":"IllformedLocaleException"}},{"label":"InputMismatchException","kind":"class","documentation":"Class: InputMismatchException","insertText":"InputMismatchException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InputMismatchException","kind":"constructor","documentation":"Constructor: InputMismatchException","insertText":"InputMismatchException"}},{"label":"IntSummaryStatistics","kind":"class","documentation":"Class: IntSummaryStatistics","insertText":"IntSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(IntSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): int","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): int","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): long","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IntSummaryStatistics","kind":"constructor","documentation":"Constructor: IntSummaryStatistics","insertText":"IntSummaryStatistics"}},{"label":"Iterator","kind":"class","documentation":"Class: Iterator","insertText":"Iterator","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LinkedHashMap","kind":"class","documentation":"Class: LinkedHashMap","insertText":"LinkedHashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"LinkedHashMap","kind":"constructor","documentation":"Constructor: LinkedHashMap","insertText":"LinkedHashMap"}},{"label":"LinkedHashSet","kind":"class","documentation":"Class: LinkedHashSet","insertText":"LinkedHashSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LinkedHashSet","kind":"constructor","documentation":"Constructor: LinkedHashSet","insertText":"LinkedHashSet"}},{"label":"LinkedList","kind":"class","documentation":"Class: LinkedList","insertText":"LinkedList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LinkedList","kind":"constructor","documentation":"Constructor: LinkedList","insertText":"LinkedList"}},{"label":"List","kind":"class","documentation":"Class: List","insertText":"List","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ListIterator","kind":"class","documentation":"Class: ListIterator","insertText":"ListIterator","properties":[{"label":"add","kind":"method","documentation":"add(def a): void","insertText":"add"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hasPrevious","kind":"method","documentation":"hasPrevious(): boolean","insertText":"hasPrevious"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"nextIndex","kind":"method","documentation":"nextIndex(): int","insertText":"nextIndex"},{"label":"previousIndex","kind":"method","documentation":"previousIndex(): int","insertText":"previousIndex"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"set","kind":"method","documentation":"set(def a): void","insertText":"set"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Locale","kind":"class","documentation":"Class: Locale","insertText":"Locale","properties":[{"label":"CANADA","kind":"property","documentation":"CANADA: Locale","insertText":"CANADA"},{"label":"CANADA_FRENCH","kind":"property","documentation":"CANADA_FRENCH: Locale","insertText":"CANADA_FRENCH"},{"label":"CHINA","kind":"property","documentation":"CHINA: Locale","insertText":"CHINA"},{"label":"CHINESE","kind":"property","documentation":"CHINESE: Locale","insertText":"CHINESE"},{"label":"ENGLISH","kind":"property","documentation":"ENGLISH: Locale","insertText":"ENGLISH"},{"label":"FRANCE","kind":"property","documentation":"FRANCE: Locale","insertText":"FRANCE"},{"label":"FRENCH","kind":"property","documentation":"FRENCH: Locale","insertText":"FRENCH"},{"label":"GERMAN","kind":"property","documentation":"GERMAN: Locale","insertText":"GERMAN"},{"label":"GERMANY","kind":"property","documentation":"GERMANY: Locale","insertText":"GERMANY"},{"label":"ITALIAN","kind":"property","documentation":"ITALIAN: Locale","insertText":"ITALIAN"},{"label":"ITALY","kind":"property","documentation":"ITALY: Locale","insertText":"ITALY"},{"label":"JAPAN","kind":"property","documentation":"JAPAN: Locale","insertText":"JAPAN"},{"label":"JAPANESE","kind":"property","documentation":"JAPANESE: Locale","insertText":"JAPANESE"},{"label":"KOREA","kind":"property","documentation":"KOREA: Locale","insertText":"KOREA"},{"label":"KOREAN","kind":"property","documentation":"KOREAN: Locale","insertText":"KOREAN"},{"label":"PRC","kind":"property","documentation":"PRC: Locale","insertText":"PRC"},{"label":"PRIVATE_USE_EXTENSION","kind":"property","documentation":"PRIVATE_USE_EXTENSION: char","insertText":"PRIVATE_USE_EXTENSION"},{"label":"ROOT","kind":"property","documentation":"ROOT: Locale","insertText":"ROOT"},{"label":"SIMPLIFIED_CHINESE","kind":"property","documentation":"SIMPLIFIED_CHINESE: Locale","insertText":"SIMPLIFIED_CHINESE"},{"label":"TAIWAN","kind":"property","documentation":"TAIWAN: Locale","insertText":"TAIWAN"},{"label":"TRADITIONAL_CHINESE","kind":"property","documentation":"TRADITIONAL_CHINESE: Locale","insertText":"TRADITIONAL_CHINESE"},{"label":"UK","kind":"property","documentation":"UK: Locale","insertText":"UK"},{"label":"UNICODE_LOCALE_EXTENSION","kind":"property","documentation":"UNICODE_LOCALE_EXTENSION: char","insertText":"UNICODE_LOCALE_EXTENSION"},{"label":"US","kind":"property","documentation":"US: Locale","insertText":"US"},{"label":"filter","kind":"method","documentation":"filter(List a, Collection b): List","insertText":"filter"},{"label":"filterTags","kind":"method","documentation":"filterTags(List a, Collection b): List","insertText":"filterTags"},{"label":"forLanguageTag","kind":"method","documentation":"forLanguageTag(String a): Locale","insertText":"forLanguageTag"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getDefault","kind":"method","documentation":"getDefault(Locale.Category a): Locale","insertText":"getDefault"},{"label":"getISOCountries","kind":"method","documentation":"getISOCountries(): String[]","insertText":"getISOCountries"},{"label":"getISOLanguages","kind":"method","documentation":"getISOLanguages(): String[]","insertText":"getISOLanguages"},{"label":"lookup","kind":"method","documentation":"lookup(List a, Collection b): Locale","insertText":"lookup"},{"label":"lookupTag","kind":"method","documentation":"lookupTag(List a, Collection b): String","insertText":"lookupTag"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCountry","kind":"method","documentation":"getCountry(): String","insertText":"getCountry"},{"label":"getDisplayCountry","kind":"method","documentation":"getDisplayCountry(Locale a): String","insertText":"getDisplayCountry"},{"label":"getDisplayLanguage","kind":"method","documentation":"getDisplayLanguage(Locale a): String","insertText":"getDisplayLanguage"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getDisplayScript","kind":"method","documentation":"getDisplayScript(Locale a): String","insertText":"getDisplayScript"},{"label":"getDisplayVariant","kind":"method","documentation":"getDisplayVariant(Locale a): String","insertText":"getDisplayVariant"},{"label":"getExtension","kind":"method","documentation":"getExtension(char a): String","insertText":"getExtension"},{"label":"getExtensionKeys","kind":"method","documentation":"getExtensionKeys(): Set","insertText":"getExtensionKeys"},{"label":"getISO3Country","kind":"method","documentation":"getISO3Country(): String","insertText":"getISO3Country"},{"label":"getISO3Language","kind":"method","documentation":"getISO3Language(): String","insertText":"getISO3Language"},{"label":"getLanguage","kind":"method","documentation":"getLanguage(): String","insertText":"getLanguage"},{"label":"getScript","kind":"method","documentation":"getScript(): String","insertText":"getScript"},{"label":"getUnicodeLocaleAttributes","kind":"method","documentation":"getUnicodeLocaleAttributes(): Set","insertText":"getUnicodeLocaleAttributes"},{"label":"getUnicodeLocaleKeys","kind":"method","documentation":"getUnicodeLocaleKeys(): Set","insertText":"getUnicodeLocaleKeys"},{"label":"getUnicodeLocaleType","kind":"method","documentation":"getUnicodeLocaleType(String a): String","insertText":"getUnicodeLocaleType"},{"label":"getVariant","kind":"method","documentation":"getVariant(): String","insertText":"getVariant"},{"label":"hasExtensions","kind":"method","documentation":"hasExtensions(): boolean","insertText":"hasExtensions"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"stripExtensions","kind":"method","documentation":"stripExtensions(): Locale","insertText":"stripExtensions"},{"label":"toLanguageTag","kind":"method","documentation":"toLanguageTag(): String","insertText":"toLanguageTag"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Locale","kind":"constructor","documentation":"Constructor: Locale","insertText":"Locale"}},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"addUnicodeLocaleAttribute","kind":"method","documentation":"addUnicodeLocaleAttribute(String a): Locale.Builder","insertText":"addUnicodeLocaleAttribute"},{"label":"build","kind":"method","documentation":"build(): Locale","insertText":"build"},{"label":"clear","kind":"method","documentation":"clear(): Locale.Builder","insertText":"clear"},{"label":"clearExtensions","kind":"method","documentation":"clearExtensions(): Locale.Builder","insertText":"clearExtensions"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"removeUnicodeLocaleAttribute","kind":"method","documentation":"removeUnicodeLocaleAttribute(String a): Locale.Builder","insertText":"removeUnicodeLocaleAttribute"},{"label":"setExtension","kind":"method","documentation":"setExtension(char a, String b): Locale.Builder","insertText":"setExtension"},{"label":"setLanguage","kind":"method","documentation":"setLanguage(String a): Locale.Builder","insertText":"setLanguage"},{"label":"setLanguageTag","kind":"method","documentation":"setLanguageTag(String a): Locale.Builder","insertText":"setLanguageTag"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): Locale.Builder","insertText":"setLocale"},{"label":"setRegion","kind":"method","documentation":"setRegion(String a): Locale.Builder","insertText":"setRegion"},{"label":"setScript","kind":"method","documentation":"setScript(String a): Locale.Builder","insertText":"setScript"},{"label":"setUnicodeLocaleKeyword","kind":"method","documentation":"setUnicodeLocaleKeyword(String a, String b): Locale.Builder","insertText":"setUnicodeLocaleKeyword"},{"label":"setVariant","kind":"method","documentation":"setVariant(String a): Locale.Builder","insertText":"setVariant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Builder","kind":"constructor","documentation":"Constructor: Builder","insertText":"Builder"}},{"label":"Category","kind":"class","documentation":"Class: Category","insertText":"Category","properties":[{"label":"DISPLAY","kind":"property","documentation":"DISPLAY: Locale.Category","insertText":"DISPLAY"},{"label":"FORMAT","kind":"property","documentation":"FORMAT: Locale.Category","insertText":"FORMAT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Locale.Category","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Locale.Category[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FilteringMode","kind":"class","documentation":"Class: FilteringMode","insertText":"FilteringMode","properties":[{"label":"AUTOSELECT_FILTERING","kind":"property","documentation":"AUTOSELECT_FILTERING: Locale.FilteringMode","insertText":"AUTOSELECT_FILTERING"},{"label":"EXTENDED_FILTERING","kind":"property","documentation":"EXTENDED_FILTERING: Locale.FilteringMode","insertText":"EXTENDED_FILTERING"},{"label":"IGNORE_EXTENDED_RANGES","kind":"property","documentation":"IGNORE_EXTENDED_RANGES: Locale.FilteringMode","insertText":"IGNORE_EXTENDED_RANGES"},{"label":"MAP_EXTENDED_RANGES","kind":"property","documentation":"MAP_EXTENDED_RANGES: Locale.FilteringMode","insertText":"MAP_EXTENDED_RANGES"},{"label":"REJECT_EXTENDED_RANGES","kind":"property","documentation":"REJECT_EXTENDED_RANGES: Locale.FilteringMode","insertText":"REJECT_EXTENDED_RANGES"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Locale.FilteringMode","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Locale.FilteringMode[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LanguageRange","kind":"class","documentation":"Class: LanguageRange","insertText":"LanguageRange","properties":[{"label":"MAX_WEIGHT","kind":"property","documentation":"MAX_WEIGHT: double","insertText":"MAX_WEIGHT"},{"label":"MIN_WEIGHT","kind":"property","documentation":"MIN_WEIGHT: double","insertText":"MIN_WEIGHT"},{"label":"mapEquivalents","kind":"method","documentation":"mapEquivalents(List a, Map b): List","insertText":"mapEquivalents"},{"label":"parse","kind":"method","documentation":"parse(String a, Map b | String a): List","insertText":"parse"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getRange","kind":"method","documentation":"getRange(): String","insertText":"getRange"},{"label":"getWeight","kind":"method","documentation":"getWeight(): double","insertText":"getWeight"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LanguageRange","kind":"constructor","documentation":"Constructor: LanguageRange","insertText":"LanguageRange"}},{"label":"LongSummaryStatistics","kind":"class","documentation":"Class: LongSummaryStatistics","insertText":"LongSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(LongSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): long","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): long","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): long","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LongSummaryStatistics","kind":"constructor","documentation":"Constructor: LongSummaryStatistics","insertText":"LongSummaryStatistics"}},{"label":"Map","kind":"class","documentation":"Class: Map","insertText":"Map","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"Entry","kind":"class","documentation":"Class: Entry","insertText":"Entry","properties":[{"label":"comparingByKey","kind":"method","documentation":"comparingByKey(Comparator a): Comparator","insertText":"comparingByKey"},{"label":"comparingByValue","kind":"method","documentation":"comparingByValue(Comparator a): Comparator","insertText":"comparingByValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MissingFormatArgumentException","kind":"class","documentation":"Class: MissingFormatArgumentException","insertText":"MissingFormatArgumentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFormatSpecifier","kind":"method","documentation":"getFormatSpecifier(): String","insertText":"getFormatSpecifier"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingFormatArgumentException","kind":"constructor","documentation":"Constructor: MissingFormatArgumentException","insertText":"MissingFormatArgumentException"}},{"label":"MissingFormatWidthException","kind":"class","documentation":"Class: MissingFormatWidthException","insertText":"MissingFormatWidthException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFormatSpecifier","kind":"method","documentation":"getFormatSpecifier(): String","insertText":"getFormatSpecifier"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingFormatWidthException","kind":"constructor","documentation":"Constructor: MissingFormatWidthException","insertText":"MissingFormatWidthException"}},{"label":"MissingResourceException","kind":"class","documentation":"Class: MissingResourceException","insertText":"MissingResourceException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getClassName","kind":"method","documentation":"getClassName(): String","insertText":"getClassName"},{"label":"getKey","kind":"method","documentation":"getKey(): String","insertText":"getKey"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingResourceException","kind":"constructor","documentation":"Constructor: MissingResourceException","insertText":"MissingResourceException"}},{"label":"NavigableMap","kind":"class","documentation":"Class: NavigableMap","insertText":"NavigableMap","properties":[{"label":"ceilingEntry","kind":"method","documentation":"ceilingEntry(def a): Map.Entry","insertText":"ceilingEntry"},{"label":"ceilingKey","kind":"method","documentation":"ceilingKey(def a): def","insertText":"ceilingKey"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"descendingKeySet","kind":"method","documentation":"descendingKeySet(): NavigableSet","insertText":"descendingKeySet"},{"label":"descendingMap","kind":"method","documentation":"descendingMap(): NavigableMap","insertText":"descendingMap"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstEntry","kind":"method","documentation":"firstEntry(): Map.Entry","insertText":"firstEntry"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"floorEntry","kind":"method","documentation":"floorEntry(def a): Map.Entry","insertText":"floorEntry"},{"label":"floorKey","kind":"method","documentation":"floorKey(def a): def","insertText":"floorKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"headMap"},{"label":"higherEntry","kind":"method","documentation":"higherEntry(def a): Map.Entry","insertText":"higherEntry"},{"label":"higherKey","kind":"method","documentation":"higherKey(def a): def","insertText":"higherKey"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastEntry","kind":"method","documentation":"lastEntry(): Map.Entry","insertText":"lastEntry"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"lowerEntry","kind":"method","documentation":"lowerEntry(def a): Map.Entry","insertText":"lowerEntry"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"navigableKeySet","kind":"method","documentation":"navigableKeySet(): NavigableSet","insertText":"navigableKeySet"},{"label":"pollFirstEntry","kind":"method","documentation":"pollFirstEntry(): Map.Entry","insertText":"pollFirstEntry"},{"label":"pollLastEntry","kind":"method","documentation":"pollLastEntry(): Map.Entry","insertText":"pollLastEntry"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"NavigableSet","kind":"class","documentation":"Class: NavigableSet","insertText":"NavigableSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"ceiling","kind":"method","documentation":"ceiling(def a): def","insertText":"ceiling"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"descendingSet","kind":"method","documentation":"descendingSet(): NavigableSet","insertText":"descendingSet"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"floor","kind":"method","documentation":"floor(def a): def","insertText":"floor"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"headSet"},{"label":"higher","kind":"method","documentation":"higher(def a): def","insertText":"higher"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"lower","kind":"method","documentation":"lower(def a): def","insertText":"lower"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NoSuchElementException","kind":"class","documentation":"Class: NoSuchElementException","insertText":"NoSuchElementException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchElementException","kind":"constructor","documentation":"Constructor: NoSuchElementException","insertText":"NoSuchElementException"}},{"label":"Objects","kind":"class","documentation":"Class: Objects","insertText":"Objects","properties":[{"label":"compare","kind":"method","documentation":"compare(def a, def b, Comparator c): int","insertText":"compare"},{"label":"deepEquals","kind":"method","documentation":"deepEquals(Object a, Object b): boolean","insertText":"deepEquals"},{"label":"equals","kind":"method","documentation":"equals(Object a, Object b): boolean","insertText":"equals"},{"label":"hash","kind":"method","documentation":"hash(Object[] a): int","insertText":"hash"},{"label":"hashCode","kind":"method","documentation":"hashCode(Object a): int","insertText":"hashCode"},{"label":"isNull","kind":"method","documentation":"isNull(Object a): boolean","insertText":"isNull"},{"label":"nonNull","kind":"method","documentation":"nonNull(Object a): boolean","insertText":"nonNull"},{"label":"requireNonNull","kind":"method","documentation":"requireNonNull(def a, String b | def a): def","insertText":"requireNonNull"},{"label":"toString","kind":"method","documentation":"toString(Object a, String b | Object a): String","insertText":"toString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Observable","kind":"class","documentation":"Class: Observable","insertText":"Observable","properties":[{"label":"addObserver","kind":"method","documentation":"addObserver(Observer a): void","insertText":"addObserver"},{"label":"countObservers","kind":"method","documentation":"countObservers(): int","insertText":"countObservers"},{"label":"deleteObserver","kind":"method","documentation":"deleteObserver(Observer a): void","insertText":"deleteObserver"},{"label":"deleteObservers","kind":"method","documentation":"deleteObservers(): void","insertText":"deleteObservers"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasChanged","kind":"method","documentation":"hasChanged(): boolean","insertText":"hasChanged"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"notifyObservers","kind":"method","documentation":"notifyObservers(Object a): void","insertText":"notifyObservers"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Observable","kind":"constructor","documentation":"Constructor: Observable","insertText":"Observable"}},{"label":"Observer","kind":"class","documentation":"Class: Observer","insertText":"Observer","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"update","kind":"method","documentation":"update(Observable a, Object b): void","insertText":"update"}]},{"label":"Optional","kind":"class","documentation":"Class: Optional","insertText":"Optional","properties":[{"label":"empty","kind":"method","documentation":"empty(): Optional","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(def a): Optional","insertText":"of"},{"label":"ofNullable","kind":"method","documentation":"ofNullable(def a): Optional","insertText":"ofNullable"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(Predicate a): Optional","insertText":"filter"},{"label":"flatMap","kind":"method","documentation":"flatMap(Function a): Optional","insertText":"flatMap"},{"label":"get","kind":"method","documentation":"get(): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(Consumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"map","kind":"method","documentation":"map(Function a): Optional","insertText":"map"},{"label":"orElse","kind":"method","documentation":"orElse(def a): def","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(Supplier a): def","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): def","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalDouble","kind":"class","documentation":"Class: OptionalDouble","insertText":"OptionalDouble","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalDouble","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(double a): OptionalDouble","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsDouble","kind":"method","documentation":"getAsDouble(): double","insertText":"getAsDouble"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(DoubleConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(double a): double","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(DoubleSupplier a): double","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): double","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalInt","kind":"class","documentation":"Class: OptionalInt","insertText":"OptionalInt","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalInt","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(int a): OptionalInt","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsInt","kind":"method","documentation":"getAsInt(): int","insertText":"getAsInt"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(IntConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(int a): int","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(IntSupplier a): int","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): int","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalLong","kind":"class","documentation":"Class: OptionalLong","insertText":"OptionalLong","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalLong","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(long a): OptionalLong","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsLong","kind":"method","documentation":"getAsLong(): long","insertText":"getAsLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(LongConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(long a): long","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(LongSupplier a): long","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): long","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"PrimitiveIterator","kind":"class","documentation":"Class: PrimitiveIterator","insertText":"PrimitiveIterator","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfDouble","kind":"class","documentation":"Class: OfDouble","insertText":"OfDouble","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Double","insertText":"next"},{"label":"nextDouble","kind":"method","documentation":"nextDouble(): double","insertText":"nextDouble"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfInt","kind":"class","documentation":"Class: OfInt","insertText":"OfInt","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Integer","insertText":"next"},{"label":"nextInt","kind":"method","documentation":"nextInt(): int","insertText":"nextInt"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfLong","kind":"class","documentation":"Class: OfLong","insertText":"OfLong","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Long","insertText":"next"},{"label":"nextLong","kind":"method","documentation":"nextLong(): long","insertText":"nextLong"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"PriorityQueue","kind":"class","documentation":"Class: PriorityQueue","insertText":"PriorityQueue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"PriorityQueue","kind":"constructor","documentation":"Constructor: PriorityQueue","insertText":"PriorityQueue"}},{"label":"Queue","kind":"class","documentation":"Class: Queue","insertText":"Queue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Random","kind":"class","documentation":"Class: Random","insertText":"Random","properties":[{"label":"doubles","kind":"method","documentation":"doubles(long a, double b, double c | long a): DoubleStream","insertText":"doubles"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ints","kind":"method","documentation":"ints(long a, int b, int c | long a): IntStream","insertText":"ints"},{"label":"longs","kind":"method","documentation":"longs(long a, long b, long c | long a): LongStream","insertText":"longs"},{"label":"nextBoolean","kind":"method","documentation":"nextBoolean(): boolean","insertText":"nextBoolean"},{"label":"nextBytes","kind":"method","documentation":"nextBytes(byte[] a): void","insertText":"nextBytes"},{"label":"nextDouble","kind":"method","documentation":"nextDouble(): double","insertText":"nextDouble"},{"label":"nextFloat","kind":"method","documentation":"nextFloat(): float","insertText":"nextFloat"},{"label":"nextGaussian","kind":"method","documentation":"nextGaussian(): double","insertText":"nextGaussian"},{"label":"nextInt","kind":"method","documentation":"nextInt(int a): int","insertText":"nextInt"},{"label":"nextLong","kind":"method","documentation":"nextLong(): long","insertText":"nextLong"},{"label":"setSeed","kind":"method","documentation":"setSeed(long a): void","insertText":"setSeed"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Random","kind":"constructor","documentation":"Constructor: Random","insertText":"Random"}},{"label":"RandomAccess","kind":"class","documentation":"Class: RandomAccess","insertText":"RandomAccess","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Set","kind":"class","documentation":"Class: Set","insertText":"Set","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"SimpleTimeZone","kind":"class","documentation":"Class: SimpleTimeZone","insertText":"SimpleTimeZone","properties":[{"label":"STANDARD_TIME","kind":"property","documentation":"STANDARD_TIME: int","insertText":"STANDARD_TIME"},{"label":"UTC_TIME","kind":"property","documentation":"UTC_TIME: int","insertText":"UTC_TIME"},{"label":"WALL_TIME","kind":"property","documentation":"WALL_TIME: int","insertText":"WALL_TIME"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDSTSavings","kind":"method","documentation":"getDSTSavings(): int","insertText":"getDSTSavings"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String","insertText":"getDisplayName"},{"label":"getID","kind":"method","documentation":"getID(): String","insertText":"getID"},{"label":"getOffset","kind":"method","documentation":"getOffset(int a, int b, int c, int d, int e, int f | long a): int","insertText":"getOffset"},{"label":"getRawOffset","kind":"method","documentation":"getRawOffset(): int","insertText":"getRawOffset"},{"label":"hasSameRules","kind":"method","documentation":"hasSameRules(TimeZone a): boolean","insertText":"hasSameRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"inDaylightTime","kind":"method","documentation":"inDaylightTime(Date a): boolean","insertText":"inDaylightTime"},{"label":"observesDaylightTime","kind":"method","documentation":"observesDaylightTime(): boolean","insertText":"observesDaylightTime"},{"label":"setDSTSavings","kind":"method","documentation":"setDSTSavings(int a): void","insertText":"setDSTSavings"},{"label":"setEndRule","kind":"method","documentation":"setEndRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void","insertText":"setEndRule"},{"label":"setRawOffset","kind":"method","documentation":"setRawOffset(int a): void","insertText":"setRawOffset"},{"label":"setStartRule","kind":"method","documentation":"setStartRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void","insertText":"setStartRule"},{"label":"setStartYear","kind":"method","documentation":"setStartYear(int a): void","insertText":"setStartYear"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZoneId","kind":"method","documentation":"toZoneId(): ZoneId","insertText":"toZoneId"},{"label":"useDaylightTime","kind":"method","documentation":"useDaylightTime(): boolean","insertText":"useDaylightTime"}],"constructorDefinition":{"label":"SimpleTimeZone","kind":"constructor","documentation":"Constructor: SimpleTimeZone","insertText":"SimpleTimeZone"}},{"label":"SortedMap","kind":"class","documentation":"Class: SortedMap","insertText":"SortedMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a): SortedMap","insertText":"headMap"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, def b): SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a): SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"SortedSet","kind":"class","documentation":"Class: SortedSet","insertText":"SortedSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a): SortedSet","insertText":"headSet"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, def b): SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a): SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Spliterator","kind":"class","documentation":"Class: Spliterator","insertText":"Spliterator","properties":[{"label":"CONCURRENT","kind":"property","documentation":"CONCURRENT: int","insertText":"CONCURRENT"},{"label":"DISTINCT","kind":"property","documentation":"DISTINCT: int","insertText":"DISTINCT"},{"label":"IMMUTABLE","kind":"property","documentation":"IMMUTABLE: int","insertText":"IMMUTABLE"},{"label":"NONNULL","kind":"property","documentation":"NONNULL: int","insertText":"NONNULL"},{"label":"ORDERED","kind":"property","documentation":"ORDERED: int","insertText":"ORDERED"},{"label":"SIZED","kind":"property","documentation":"SIZED: int","insertText":"SIZED"},{"label":"SORTED","kind":"property","documentation":"SORTED: int","insertText":"SORTED"},{"label":"SUBSIZED","kind":"property","documentation":"SUBSIZED: int","insertText":"SUBSIZED"},{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(Consumer a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator","insertText":"trySplit"}]},{"label":"OfDouble","kind":"class","documentation":"Class: OfDouble","insertText":"OfDouble","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfDouble","insertText":"trySplit"}]},{"label":"OfInt","kind":"class","documentation":"Class: OfInt","insertText":"OfInt","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfInt","insertText":"trySplit"}]},{"label":"OfLong","kind":"class","documentation":"Class: OfLong","insertText":"OfLong","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfLong","insertText":"trySplit"}]},{"label":"OfPrimitive","kind":"class","documentation":"Class: OfPrimitive","insertText":"OfPrimitive","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfPrimitive","insertText":"trySplit"}]},{"label":"Spliterators","kind":"class","documentation":"Class: Spliterators","insertText":"Spliterators","properties":[{"label":"emptyDoubleSpliterator","kind":"method","documentation":"emptyDoubleSpliterator(): Spliterator.OfDouble","insertText":"emptyDoubleSpliterator"},{"label":"emptyIntSpliterator","kind":"method","documentation":"emptyIntSpliterator(): Spliterator.OfInt","insertText":"emptyIntSpliterator"},{"label":"emptyLongSpliterator","kind":"method","documentation":"emptyLongSpliterator(): Spliterator.OfLong","insertText":"emptyLongSpliterator"},{"label":"emptySpliterator","kind":"method","documentation":"emptySpliterator(): Spliterator","insertText":"emptySpliterator"},{"label":"iterator","kind":"method","documentation":"iterator(Spliterator a): Iterator","insertText":"iterator"},{"label":"spliterator","kind":"method","documentation":"spliterator(Iterator a, long b, int c | Collection a, int b): Spliterator","insertText":"spliterator"},{"label":"spliteratorUnknownSize","kind":"method","documentation":"spliteratorUnknownSize(Iterator a, int b): Spliterator","insertText":"spliteratorUnknownSize"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Stack","kind":"class","documentation":"Class: Stack","insertText":"Stack","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addElement","kind":"method","documentation":"addElement(def a): void","insertText":"addElement"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"copyInto","kind":"method","documentation":"copyInto(Object[] a): void","insertText":"copyInto"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"elementAt","kind":"method","documentation":"elementAt(int a): def","insertText":"elementAt"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"empty","kind":"method","documentation":"empty(): boolean","insertText":"empty"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"firstElement","kind":"method","documentation":"firstElement(): def","insertText":"firstElement"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"insertElementAt","kind":"method","documentation":"insertElementAt(def a, int b): void","insertText":"insertElementAt"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastElement","kind":"method","documentation":"lastElement(): def","insertText":"lastElement"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a, int b | def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): def","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeAllElements","kind":"method","documentation":"removeAllElements(): void","insertText":"removeAllElements"},{"label":"removeElement","kind":"method","documentation":"removeElement(def a): boolean","insertText":"removeElement"},{"label":"removeElementAt","kind":"method","documentation":"removeElementAt(int a): void","insertText":"removeElementAt"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"search","kind":"method","documentation":"search(def a): int","insertText":"search"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"setElementAt","kind":"method","documentation":"setElementAt(def a, int b): void","insertText":"setElementAt"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Stack","kind":"constructor","documentation":"Constructor: Stack","insertText":"Stack"}},{"label":"StringJoiner","kind":"class","documentation":"Class: StringJoiner","insertText":"StringJoiner","properties":[{"label":"add","kind":"method","documentation":"add(CharSequence a): StringJoiner","insertText":"add"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"merge","kind":"method","documentation":"merge(StringJoiner a): StringJoiner","insertText":"merge"},{"label":"setEmptyValue","kind":"method","documentation":"setEmptyValue(CharSequence a): StringJoiner","insertText":"setEmptyValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringJoiner","kind":"constructor","documentation":"Constructor: StringJoiner","insertText":"StringJoiner"}},{"label":"StringTokenizer","kind":"class","documentation":"Class: StringTokenizer","insertText":"StringTokenizer","properties":[{"label":"countTokens","kind":"method","documentation":"countTokens(): int","insertText":"countTokens"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasMoreElements","kind":"method","documentation":"hasMoreElements(): boolean","insertText":"hasMoreElements"},{"label":"hasMoreTokens","kind":"method","documentation":"hasMoreTokens(): boolean","insertText":"hasMoreTokens"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"nextElement","kind":"method","documentation":"nextElement(): def","insertText":"nextElement"},{"label":"nextToken","kind":"method","documentation":"nextToken(String a): String","insertText":"nextToken"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringTokenizer","kind":"constructor","documentation":"Constructor: StringTokenizer","insertText":"StringTokenizer"}},{"label":"TimeZone","kind":"class","documentation":"Class: TimeZone","insertText":"TimeZone","properties":[{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"getAvailableIDs","kind":"method","documentation":"getAvailableIDs(int a): String[]","insertText":"getAvailableIDs"},{"label":"getDefault","kind":"method","documentation":"getDefault(): TimeZone","insertText":"getDefault"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(String a): TimeZone","insertText":"getTimeZone"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDSTSavings","kind":"method","documentation":"getDSTSavings(): int","insertText":"getDSTSavings"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String","insertText":"getDisplayName"},{"label":"getID","kind":"method","documentation":"getID(): String","insertText":"getID"},{"label":"getOffset","kind":"method","documentation":"getOffset(int a, int b, int c, int d, int e, int f | long a): int","insertText":"getOffset"},{"label":"getRawOffset","kind":"method","documentation":"getRawOffset(): int","insertText":"getRawOffset"},{"label":"hasSameRules","kind":"method","documentation":"hasSameRules(TimeZone a): boolean","insertText":"hasSameRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"inDaylightTime","kind":"method","documentation":"inDaylightTime(Date a): boolean","insertText":"inDaylightTime"},{"label":"observesDaylightTime","kind":"method","documentation":"observesDaylightTime(): boolean","insertText":"observesDaylightTime"},{"label":"setRawOffset","kind":"method","documentation":"setRawOffset(int a): void","insertText":"setRawOffset"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZoneId","kind":"method","documentation":"toZoneId(): ZoneId","insertText":"toZoneId"},{"label":"useDaylightTime","kind":"method","documentation":"useDaylightTime(): boolean","insertText":"useDaylightTime"}]},{"label":"TooManyListenersException","kind":"class","documentation":"Class: TooManyListenersException","insertText":"TooManyListenersException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"TooManyListenersException","kind":"constructor","documentation":"Constructor: TooManyListenersException","insertText":"TooManyListenersException"}},{"label":"TreeMap","kind":"class","documentation":"Class: TreeMap","insertText":"TreeMap","properties":[{"label":"ceilingEntry","kind":"method","documentation":"ceilingEntry(def a): Map.Entry","insertText":"ceilingEntry"},{"label":"ceilingKey","kind":"method","documentation":"ceilingKey(def a): def","insertText":"ceilingKey"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"descendingKeySet","kind":"method","documentation":"descendingKeySet(): NavigableSet","insertText":"descendingKeySet"},{"label":"descendingMap","kind":"method","documentation":"descendingMap(): NavigableMap","insertText":"descendingMap"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstEntry","kind":"method","documentation":"firstEntry(): Map.Entry","insertText":"firstEntry"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"floorEntry","kind":"method","documentation":"floorEntry(def a): Map.Entry","insertText":"floorEntry"},{"label":"floorKey","kind":"method","documentation":"floorKey(def a): def","insertText":"floorKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"headMap"},{"label":"higherEntry","kind":"method","documentation":"higherEntry(def a): Map.Entry","insertText":"higherEntry"},{"label":"higherKey","kind":"method","documentation":"higherKey(def a): def","insertText":"higherKey"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastEntry","kind":"method","documentation":"lastEntry(): Map.Entry","insertText":"lastEntry"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"lowerEntry","kind":"method","documentation":"lowerEntry(def a): Map.Entry","insertText":"lowerEntry"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"navigableKeySet","kind":"method","documentation":"navigableKeySet(): NavigableSet","insertText":"navigableKeySet"},{"label":"pollFirstEntry","kind":"method","documentation":"pollFirstEntry(): Map.Entry","insertText":"pollFirstEntry"},{"label":"pollLastEntry","kind":"method","documentation":"pollLastEntry(): Map.Entry","insertText":"pollLastEntry"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"TreeMap","kind":"constructor","documentation":"Constructor: TreeMap","insertText":"TreeMap"}},{"label":"TreeSet","kind":"class","documentation":"Class: TreeSet","insertText":"TreeSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"ceiling","kind":"method","documentation":"ceiling(def a): def","insertText":"ceiling"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"descendingSet","kind":"method","documentation":"descendingSet(): NavigableSet","insertText":"descendingSet"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"floor","kind":"method","documentation":"floor(def a): def","insertText":"floor"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"headSet"},{"label":"higher","kind":"method","documentation":"higher(def a): def","insertText":"higher"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"lower","kind":"method","documentation":"lower(def a): def","insertText":"lower"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"TreeSet","kind":"constructor","documentation":"Constructor: TreeSet","insertText":"TreeSet"}},{"label":"UUID","kind":"class","documentation":"Class: UUID","insertText":"UUID","properties":[{"label":"fromString","kind":"method","documentation":"fromString(String a): UUID","insertText":"fromString"},{"label":"nameUUIDFromBytes","kind":"method","documentation":"nameUUIDFromBytes(byte[] a): UUID","insertText":"nameUUIDFromBytes"},{"label":"randomUUID","kind":"method","documentation":"randomUUID(): UUID","insertText":"randomUUID"},{"label":"clockSequence","kind":"method","documentation":"clockSequence(): int","insertText":"clockSequence"},{"label":"compareTo","kind":"method","documentation":"compareTo(UUID a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLeastSignificantBits","kind":"method","documentation":"getLeastSignificantBits(): long","insertText":"getLeastSignificantBits"},{"label":"getMostSignificantBits","kind":"method","documentation":"getMostSignificantBits(): long","insertText":"getMostSignificantBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"node","kind":"method","documentation":"node(): long","insertText":"node"},{"label":"timestamp","kind":"method","documentation":"timestamp(): long","insertText":"timestamp"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"variant","kind":"method","documentation":"variant(): int","insertText":"variant"},{"label":"version","kind":"method","documentation":"version(): int","insertText":"version"}],"constructorDefinition":{"label":"UUID","kind":"constructor","documentation":"Constructor: UUID","insertText":"UUID"}},{"label":"UnknownFormatConversionException","kind":"class","documentation":"Class: UnknownFormatConversionException","insertText":"UnknownFormatConversionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): String","insertText":"getConversion"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnknownFormatConversionException","kind":"constructor","documentation":"Constructor: UnknownFormatConversionException","insertText":"UnknownFormatConversionException"}},{"label":"UnknownFormatFlagsException","kind":"class","documentation":"Class: UnknownFormatFlagsException","insertText":"UnknownFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnknownFormatFlagsException","kind":"constructor","documentation":"Constructor: UnknownFormatFlagsException","insertText":"UnknownFormatFlagsException"}},{"label":"Vector","kind":"class","documentation":"Class: Vector","insertText":"Vector","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addElement","kind":"method","documentation":"addElement(def a): void","insertText":"addElement"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"copyInto","kind":"method","documentation":"copyInto(Object[] a): void","insertText":"copyInto"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"elementAt","kind":"method","documentation":"elementAt(int a): def","insertText":"elementAt"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"firstElement","kind":"method","documentation":"firstElement(): def","insertText":"firstElement"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"insertElementAt","kind":"method","documentation":"insertElementAt(def a, int b): void","insertText":"insertElementAt"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastElement","kind":"method","documentation":"lastElement(): def","insertText":"lastElement"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a, int b | def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeAllElements","kind":"method","documentation":"removeAllElements(): void","insertText":"removeAllElements"},{"label":"removeElement","kind":"method","documentation":"removeElement(def a): boolean","insertText":"removeElement"},{"label":"removeElementAt","kind":"method","documentation":"removeElementAt(int a): void","insertText":"removeElementAt"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"setElementAt","kind":"method","documentation":"setElementAt(def a, int b): void","insertText":"setElementAt"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Vector","kind":"constructor","documentation":"Constructor: Vector","insertText":"Vector"}},{"label":"BiConsumer","kind":"class","documentation":"Class: BiConsumer","insertText":"BiConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, def b): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(BiConsumer a): BiConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BiFunction","kind":"class","documentation":"Class: BiFunction","insertText":"BiFunction","properties":[{"label":"andThen","kind":"method","documentation":"andThen(Function a): BiFunction","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a, def b): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BiPredicate","kind":"class","documentation":"Class: BiPredicate","insertText":"BiPredicate","properties":[{"label":"and","kind":"method","documentation":"and(BiPredicate a): BiPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): BiPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(BiPredicate a): BiPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(def a, def b): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BinaryOperator","kind":"class","documentation":"Class: BinaryOperator","insertText":"BinaryOperator","properties":[{"label":"maxBy","kind":"method","documentation":"maxBy(Comparator a): BinaryOperator","insertText":"maxBy"},{"label":"minBy","kind":"method","documentation":"minBy(Comparator a): BinaryOperator","insertText":"minBy"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): BiFunction","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a, def b): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BooleanSupplier","kind":"class","documentation":"Class: BooleanSupplier","insertText":"BooleanSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsBoolean","kind":"method","documentation":"getAsBoolean(): boolean","insertText":"getAsBoolean"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Consumer","kind":"class","documentation":"Class: Consumer","insertText":"Consumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(Consumer a): Consumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleBinaryOperator","kind":"class","documentation":"Class: DoubleBinaryOperator","insertText":"DoubleBinaryOperator","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(double a, double b): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleConsumer","kind":"class","documentation":"Class: DoubleConsumer","insertText":"DoubleConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleFunction","kind":"class","documentation":"Class: DoubleFunction","insertText":"DoubleFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(double a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoublePredicate","kind":"class","documentation":"Class: DoublePredicate","insertText":"DoublePredicate","properties":[{"label":"and","kind":"method","documentation":"and(DoublePredicate a): DoublePredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): DoublePredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(DoublePredicate a): DoublePredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(double a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleSupplier","kind":"class","documentation":"Class: DoubleSupplier","insertText":"DoubleSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsDouble","kind":"method","documentation":"getAsDouble(): double","insertText":"getAsDouble"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleToIntFunction","kind":"class","documentation":"Class: DoubleToIntFunction","insertText":"DoubleToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(double a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleToLongFunction","kind":"class","documentation":"Class: DoubleToLongFunction","insertText":"DoubleToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(double a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleUnaryOperator","kind":"class","documentation":"Class: DoubleUnaryOperator","insertText":"DoubleUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): DoubleUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleUnaryOperator a): DoubleUnaryOperator","insertText":"andThen"},{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(double a): double","insertText":"applyAsDouble"},{"label":"compose","kind":"method","documentation":"compose(DoubleUnaryOperator a): DoubleUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Function","kind":"class","documentation":"Class: Function","insertText":"Function","properties":[{"label":"identity","kind":"method","documentation":"identity(): Function","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): Function","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a): def","insertText":"apply"},{"label":"compose","kind":"method","documentation":"compose(Function a): Function","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntBinaryOperator","kind":"class","documentation":"Class: IntBinaryOperator","insertText":"IntBinaryOperator","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(int a, int b): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntConsumer","kind":"class","documentation":"Class: IntConsumer","insertText":"IntConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntFunction","kind":"class","documentation":"Class: IntFunction","insertText":"IntFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(int a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntPredicate","kind":"class","documentation":"Class: IntPredicate","insertText":"IntPredicate","properties":[{"label":"and","kind":"method","documentation":"and(IntPredicate a): IntPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): IntPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(IntPredicate a): IntPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(int a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntSupplier","kind":"class","documentation":"Class: IntSupplier","insertText":"IntSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsInt","kind":"method","documentation":"getAsInt(): int","insertText":"getAsInt"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntToDoubleFunction","kind":"class","documentation":"Class: IntToDoubleFunction","insertText":"IntToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(int a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntToLongFunction","kind":"class","documentation":"Class: IntToLongFunction","insertText":"IntToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(int a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntUnaryOperator","kind":"class","documentation":"Class: IntUnaryOperator","insertText":"IntUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): IntUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(IntUnaryOperator a): IntUnaryOperator","insertText":"andThen"},{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(int a): int","insertText":"applyAsInt"},{"label":"compose","kind":"method","documentation":"compose(IntUnaryOperator a): IntUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongBinaryOperator","kind":"class","documentation":"Class: LongBinaryOperator","insertText":"LongBinaryOperator","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(long a, long b): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongConsumer","kind":"class","documentation":"Class: LongConsumer","insertText":"LongConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongFunction","kind":"class","documentation":"Class: LongFunction","insertText":"LongFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(long a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongPredicate","kind":"class","documentation":"Class: LongPredicate","insertText":"LongPredicate","properties":[{"label":"and","kind":"method","documentation":"and(LongPredicate a): LongPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): LongPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(LongPredicate a): LongPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(long a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongSupplier","kind":"class","documentation":"Class: LongSupplier","insertText":"LongSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsLong","kind":"method","documentation":"getAsLong(): long","insertText":"getAsLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongToDoubleFunction","kind":"class","documentation":"Class: LongToDoubleFunction","insertText":"LongToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(long a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongToIntFunction","kind":"class","documentation":"Class: LongToIntFunction","insertText":"LongToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(long a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongUnaryOperator","kind":"class","documentation":"Class: LongUnaryOperator","insertText":"LongUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): LongUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(LongUnaryOperator a): LongUnaryOperator","insertText":"andThen"},{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(long a): long","insertText":"applyAsLong"},{"label":"compose","kind":"method","documentation":"compose(LongUnaryOperator a): LongUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjDoubleConsumer","kind":"class","documentation":"Class: ObjDoubleConsumer","insertText":"ObjDoubleConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, double b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjIntConsumer","kind":"class","documentation":"Class: ObjIntConsumer","insertText":"ObjIntConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, int b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjLongConsumer","kind":"class","documentation":"Class: ObjLongConsumer","insertText":"ObjLongConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, long b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Predicate","kind":"class","documentation":"Class: Predicate","insertText":"Predicate","properties":[{"label":"isEqual","kind":"method","documentation":"isEqual(def a): Predicate","insertText":"isEqual"},{"label":"and","kind":"method","documentation":"and(Predicate a): Predicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): Predicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(Predicate a): Predicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(def a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Supplier","kind":"class","documentation":"Class: Supplier","insertText":"Supplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToDoubleBiFunction","kind":"class","documentation":"Class: ToDoubleBiFunction","insertText":"ToDoubleBiFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(def a, def b): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToDoubleFunction","kind":"class","documentation":"Class: ToDoubleFunction","insertText":"ToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(def a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToIntBiFunction","kind":"class","documentation":"Class: ToIntBiFunction","insertText":"ToIntBiFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(def a, def b): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToIntFunction","kind":"class","documentation":"Class: ToIntFunction","insertText":"ToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(def a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToLongBiFunction","kind":"class","documentation":"Class: ToLongBiFunction","insertText":"ToLongBiFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(def a, def b): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToLongFunction","kind":"class","documentation":"Class: ToLongFunction","insertText":"ToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(def a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnaryOperator","kind":"class","documentation":"Class: UnaryOperator","insertText":"UnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): UnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): Function","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a): def","insertText":"apply"},{"label":"compose","kind":"method","documentation":"compose(Function a): Function","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Matcher","kind":"class","documentation":"Class: Matcher","insertText":"Matcher","properties":[{"label":"quoteReplacement","kind":"method","documentation":"quoteReplacement(String a): String","insertText":"quoteReplacement"},{"label":"end","kind":"method","documentation":"end(int a): int","insertText":"end"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"find","kind":"method","documentation":"find(int a): boolean","insertText":"find"},{"label":"group","kind":"method","documentation":"group(int a): String","insertText":"group"},{"label":"groupCount","kind":"method","documentation":"groupCount(): int","insertText":"groupCount"},{"label":"hasAnchoringBounds","kind":"method","documentation":"hasAnchoringBounds(): boolean","insertText":"hasAnchoringBounds"},{"label":"hasTransparentBounds","kind":"method","documentation":"hasTransparentBounds(): boolean","insertText":"hasTransparentBounds"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"hitEnd","kind":"method","documentation":"hitEnd(): boolean","insertText":"hitEnd"},{"label":"lookingAt","kind":"method","documentation":"lookingAt(): boolean","insertText":"lookingAt"},{"label":"matches","kind":"method","documentation":"matches(): boolean","insertText":"matches"},{"label":"namedGroup","kind":"method","documentation":"namedGroup(String a): String","insertText":"namedGroup"},{"label":"pattern","kind":"method","documentation":"pattern(): Pattern","insertText":"pattern"},{"label":"region","kind":"method","documentation":"region(int a, int b): Matcher","insertText":"region"},{"label":"regionEnd","kind":"method","documentation":"regionEnd(): int","insertText":"regionEnd"},{"label":"regionStart","kind":"method","documentation":"regionStart(): int","insertText":"regionStart"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(String a): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(String a): String","insertText":"replaceFirst"},{"label":"requireEnd","kind":"method","documentation":"requireEnd(): boolean","insertText":"requireEnd"},{"label":"reset","kind":"method","documentation":"reset(): Matcher","insertText":"reset"},{"label":"start","kind":"method","documentation":"start(int a): int","insertText":"start"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"useAnchoringBounds","kind":"method","documentation":"useAnchoringBounds(boolean a): Matcher","insertText":"useAnchoringBounds"},{"label":"usePattern","kind":"method","documentation":"usePattern(Pattern a): Matcher","insertText":"usePattern"},{"label":"useTransparentBounds","kind":"method","documentation":"useTransparentBounds(boolean a): Matcher","insertText":"useTransparentBounds"}]},{"label":"Pattern","kind":"class","documentation":"Class: Pattern","insertText":"Pattern","properties":[{"label":"quote","kind":"method","documentation":"quote(String a): String","insertText":"quote"},{"label":"asPredicate","kind":"method","documentation":"asPredicate(): Predicate","insertText":"asPredicate"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flags","kind":"method","documentation":"flags(): int","insertText":"flags"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"matcher","kind":"method","documentation":"matcher(CharSequence a): Matcher","insertText":"matcher"},{"label":"pattern","kind":"method","documentation":"pattern(): String","insertText":"pattern"},{"label":"split","kind":"method","documentation":"split(CharSequence a, int b | CharSequence a): String[]","insertText":"split"},{"label":"splitAsStream","kind":"method","documentation":"splitAsStream(CharSequence a): Stream","insertText":"splitAsStream"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BaseStream","kind":"class","documentation":"Class: BaseStream","insertText":"BaseStream","properties":[{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"sequential","kind":"method","documentation":"sequential(): BaseStream","insertText":"sequential"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Collector","kind":"class","documentation":"Class: Collector","insertText":"Collector","properties":[{"label":"of","kind":"method","documentation":"of(Supplier a, BiConsumer b, BinaryOperator c, Function d, Collector.Characteristics[] e | Supplier a, BiConsumer b, BinaryOperator c, Collector.Characteristics[] d): Collector","insertText":"of"},{"label":"accumulator","kind":"method","documentation":"accumulator(): BiConsumer","insertText":"accumulator"},{"label":"characteristics","kind":"method","documentation":"characteristics(): Set","insertText":"characteristics"},{"label":"combiner","kind":"method","documentation":"combiner(): BinaryOperator","insertText":"combiner"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"finisher","kind":"method","documentation":"finisher(): Function","insertText":"finisher"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"supplier","kind":"method","documentation":"supplier(): Supplier","insertText":"supplier"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Characteristics","kind":"class","documentation":"Class: Characteristics","insertText":"Characteristics","properties":[{"label":"CONCURRENT","kind":"property","documentation":"CONCURRENT: Collector.Characteristics","insertText":"CONCURRENT"},{"label":"IDENTITY_FINISH","kind":"property","documentation":"IDENTITY_FINISH: Collector.Characteristics","insertText":"IDENTITY_FINISH"},{"label":"UNORDERED","kind":"property","documentation":"UNORDERED: Collector.Characteristics","insertText":"UNORDERED"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Collector.Characteristics","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Collector.Characteristics[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collectors","kind":"class","documentation":"Class: Collectors","insertText":"Collectors","properties":[{"label":"averagingDouble","kind":"method","documentation":"averagingDouble(ToDoubleFunction a): Collector","insertText":"averagingDouble"},{"label":"averagingInt","kind":"method","documentation":"averagingInt(ToIntFunction a): Collector","insertText":"averagingInt"},{"label":"averagingLong","kind":"method","documentation":"averagingLong(ToLongFunction a): Collector","insertText":"averagingLong"},{"label":"collectingAndThen","kind":"method","documentation":"collectingAndThen(Collector a, Function b): Collector","insertText":"collectingAndThen"},{"label":"counting","kind":"method","documentation":"counting(): Collector","insertText":"counting"},{"label":"groupingBy","kind":"method","documentation":"groupingBy(Function a, Supplier b, Collector c | Function a, Collector b | Function a): Collector","insertText":"groupingBy"},{"label":"joining","kind":"method","documentation":"joining(CharSequence a, CharSequence b, CharSequence c | CharSequence a): Collector","insertText":"joining"},{"label":"mapping","kind":"method","documentation":"mapping(Function a, Collector b): Collector","insertText":"mapping"},{"label":"maxBy","kind":"method","documentation":"maxBy(Comparator a): Collector","insertText":"maxBy"},{"label":"minBy","kind":"method","documentation":"minBy(Comparator a): Collector","insertText":"minBy"},{"label":"partitioningBy","kind":"method","documentation":"partitioningBy(Predicate a, Collector b | Predicate a): Collector","insertText":"partitioningBy"},{"label":"reducing","kind":"method","documentation":"reducing(def a, Function b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): Collector","insertText":"reducing"},{"label":"summarizingDouble","kind":"method","documentation":"summarizingDouble(ToDoubleFunction a): Collector","insertText":"summarizingDouble"},{"label":"summarizingInt","kind":"method","documentation":"summarizingInt(ToIntFunction a): Collector","insertText":"summarizingInt"},{"label":"summarizingLong","kind":"method","documentation":"summarizingLong(ToLongFunction a): Collector","insertText":"summarizingLong"},{"label":"summingDouble","kind":"method","documentation":"summingDouble(ToDoubleFunction a): Collector","insertText":"summingDouble"},{"label":"summingInt","kind":"method","documentation":"summingInt(ToIntFunction a): Collector","insertText":"summingInt"},{"label":"summingLong","kind":"method","documentation":"summingLong(ToLongFunction a): Collector","insertText":"summingLong"},{"label":"toCollection","kind":"method","documentation":"toCollection(Supplier a): Collector","insertText":"toCollection"},{"label":"toList","kind":"method","documentation":"toList(): Collector","insertText":"toList"},{"label":"toMap","kind":"method","documentation":"toMap(Function a, Function b, BinaryOperator c, Supplier d | Function a, Function b, BinaryOperator c | Function a, Function b): Collector","insertText":"toMap"},{"label":"toSet","kind":"method","documentation":"toSet(): Collector","insertText":"toSet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleStream","kind":"class","documentation":"Class: DoubleStream","insertText":"DoubleStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): DoubleStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(DoubleStream a, DoubleStream b): DoubleStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): DoubleStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(double[] a): DoubleStream","insertText":"of"},{"label":"allMatch","kind":"method","documentation":"allMatch(DoublePredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(DoublePredicate a): boolean","insertText":"anyMatch"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjDoubleConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): DoubleStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(DoublePredicate a): DoubleStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalDouble","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalDouble","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(DoubleFunction a): DoubleStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(DoubleConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(DoubleConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfDouble","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): DoubleStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(DoubleUnaryOperator a): DoubleStream","insertText":"map"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(DoubleToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(DoubleToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(DoubleFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalDouble","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalDouble","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(DoublePredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(DoubleConsumer a): DoubleStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(double a, DoubleBinaryOperator b | DoubleBinaryOperator a): double | OptionalDouble","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): DoubleStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): DoubleStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): DoubleStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfDouble","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): double","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): DoubleSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): double[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(double a): DoubleStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): DoubleStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntStream","kind":"class","documentation":"Class: IntStream","insertText":"IntStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): IntStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(IntStream a, IntStream b): IntStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): IntStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(int[] a): IntStream","insertText":"of"},{"label":"range","kind":"method","documentation":"range(int a, int b): IntStream","insertText":"range"},{"label":"rangeClosed","kind":"method","documentation":"rangeClosed(int a, int b): IntStream","insertText":"rangeClosed"},{"label":"allMatch","kind":"method","documentation":"allMatch(IntPredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(IntPredicate a): boolean","insertText":"anyMatch"},{"label":"asDoubleStream","kind":"method","documentation":"asDoubleStream(): DoubleStream","insertText":"asDoubleStream"},{"label":"asLongStream","kind":"method","documentation":"asLongStream(): LongStream","insertText":"asLongStream"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjIntConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): IntStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(IntPredicate a): IntStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalInt","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalInt","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(IntFunction a): IntStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(IntConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(IntConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfInt","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): IntStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(IntUnaryOperator a): IntStream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(IntToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(IntToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(IntFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalInt","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalInt","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(IntPredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(IntConsumer a): IntStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(int a, IntBinaryOperator b | IntBinaryOperator a): int | OptionalInt","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): IntStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): IntStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): IntStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfInt","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): int","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): IntSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): int[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(int a): IntStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): IntStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongStream","kind":"class","documentation":"Class: LongStream","insertText":"LongStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): LongStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(LongStream a, LongStream b): LongStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): LongStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(long[] a): LongStream","insertText":"of"},{"label":"range","kind":"method","documentation":"range(long a, long b): LongStream","insertText":"range"},{"label":"rangeClosed","kind":"method","documentation":"rangeClosed(long a, long b): LongStream","insertText":"rangeClosed"},{"label":"allMatch","kind":"method","documentation":"allMatch(LongPredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(LongPredicate a): boolean","insertText":"anyMatch"},{"label":"asDoubleStream","kind":"method","documentation":"asDoubleStream(): DoubleStream","insertText":"asDoubleStream"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjLongConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): LongStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(LongPredicate a): LongStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalLong","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalLong","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(LongFunction a): LongStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(LongConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(LongConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfLong","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): LongStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(LongUnaryOperator a): LongStream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(LongToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(LongToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(LongFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalLong","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalLong","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(LongPredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(LongConsumer a): LongStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(long a, LongBinaryOperator b | LongBinaryOperator a): long | OptionalLong","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): LongStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): LongStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): LongStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfLong","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): long","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): LongSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): long[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(long a): LongStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): LongStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Stream","kind":"class","documentation":"Class: Stream","insertText":"Stream","properties":[{"label":"builder","kind":"method","documentation":"builder(): Stream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(Stream a, Stream b): Stream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): Stream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(def[] a): Stream","insertText":"of"},{"label":"allMatch","kind":"method","documentation":"allMatch(Predicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(Predicate a): boolean","insertText":"anyMatch"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, BiConsumer b, BiConsumer c | Collector a): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): Stream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(Predicate a): Stream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): Optional","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): Optional","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(Function a): Stream","insertText":"flatMap"},{"label":"flatMapToDouble","kind":"method","documentation":"flatMapToDouble(Function a): DoubleStream","insertText":"flatMapToDouble"},{"label":"flatMapToInt","kind":"method","documentation":"flatMapToInt(Function a): IntStream","insertText":"flatMapToInt"},{"label":"flatMapToLong","kind":"method","documentation":"flatMapToLong(Function a): LongStream","insertText":"flatMapToLong"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(Consumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): Stream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(Function a): Stream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(ToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(ToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(ToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"max","kind":"method","documentation":"max(Comparator a): Optional","insertText":"max"},{"label":"min","kind":"method","documentation":"min(Comparator a): Optional","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(Predicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(Consumer a): Stream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(def a, BiFunction b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): def | Optional","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): BaseStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): Stream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(Comparator a): Stream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"toArray","kind":"method","documentation":"toArray(IntFunction a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(def a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(def a): Stream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(Consumer a): Consumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): Stream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BytesRef","kind":"class","documentation":"Class: BytesRef","insertText":"BytesRef","properties":[{"label":"bytesEquals","kind":"method","documentation":"bytesEquals(BytesRef a): boolean","insertText":"bytesEquals"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"utf8ToString","kind":"method","documentation":"utf8ToString(): String","insertText":"utf8ToString"},{"label":"bytes","kind":"property","documentation":"bytes: byte[]","insertText":"bytes"},{"label":"length","kind":"property","documentation":"length: int","insertText":"length"},{"label":"offset","kind":"property","documentation":"offset: int","insertText":"offset"}]},{"label":"GeoPoint","kind":"class","documentation":"Class: GeoPoint","insertText":"GeoPoint","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLat","kind":"method","documentation":"getLat(): double","insertText":"getLat"},{"label":"getLon","kind":"method","documentation":"getLon(): double","insertText":"getLon"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Booleans","kind":"class","documentation":"Class: Booleans","insertText":"Booleans","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Boolean","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): boolean","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BytesRefs","kind":"class","documentation":"Class: BytesRefs","insertText":"BytesRefs","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): BytesRef","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): BytesRef","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Dates","kind":"class","documentation":"Class: Dates","insertText":"Dates","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): JodaCompatibleZonedDateTime","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): JodaCompatibleZonedDateTime","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Doubles","kind":"class","documentation":"Class: Doubles","insertText":"Doubles","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Double","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): double","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"GeoPoints","kind":"class","documentation":"Class: GeoPoints","insertText":"GeoPoints","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"arcDistance","kind":"method","documentation":"arcDistance(double a, double b): double","insertText":"arcDistance"},{"label":"arcDistanceWithDefault","kind":"method","documentation":"arcDistanceWithDefault(double a, double b, double c): double","insertText":"arcDistanceWithDefault"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"geohashDistance","kind":"method","documentation":"geohashDistance(String a): double","insertText":"geohashDistance"},{"label":"geohashDistanceWithDefault","kind":"method","documentation":"geohashDistanceWithDefault(String a, double b): double","insertText":"geohashDistanceWithDefault"},{"label":"get","kind":"method","documentation":"get(int a): GeoPoint","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLat","kind":"method","documentation":"getLat(): double","insertText":"getLat"},{"label":"getLats","kind":"method","documentation":"getLats(): double[]","insertText":"getLats"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getLon","kind":"method","documentation":"getLon(): double","insertText":"getLon"},{"label":"getLons","kind":"method","documentation":"getLons(): double[]","insertText":"getLons"},{"label":"getValue","kind":"method","documentation":"getValue(): GeoPoint","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"planeDistance","kind":"method","documentation":"planeDistance(double a, double b): double","insertText":"planeDistance"},{"label":"planeDistanceWithDefault","kind":"method","documentation":"planeDistanceWithDefault(double a, double b, double c): double","insertText":"planeDistanceWithDefault"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Longs","kind":"class","documentation":"Class: Longs","insertText":"Longs","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Long","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): long","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Strings","kind":"class","documentation":"Class: Strings","insertText":"Strings","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IpScriptDocValues","kind":"class","documentation":"Class: IpScriptDocValues","insertText":"IpScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Interval","kind":"class","documentation":"Class: Interval","insertText":"Interval","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getEnd","kind":"method","documentation":"getEnd(): int","insertText":"getEnd"},{"label":"getGaps","kind":"method","documentation":"getGaps(): int","insertText":"getGaps"},{"label":"getStart","kind":"method","documentation":"getStart(): int","insertText":"getStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Doc","kind":"class","documentation":"Class: Doc","insertText":"Doc","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFreq","kind":"method","documentation":"getFreq(): float","insertText":"getFreq"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDocCount","kind":"method","documentation":"getDocCount(): long","insertText":"getDocCount"},{"label":"getSumDocFreq","kind":"method","documentation":"getSumDocFreq(): long","insertText":"getSumDocFreq"},{"label":"getSumTotalTermFreq","kind":"method","documentation":"getSumTotalTermFreq(): long","insertText":"getSumTotalTermFreq"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Query","kind":"class","documentation":"Class: Query","insertText":"Query","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBoost","kind":"method","documentation":"getBoost(): float","insertText":"getBoost"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Term","kind":"class","documentation":"Class: Term","insertText":"Term","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDocFreq","kind":"method","documentation":"getDocFreq(): long","insertText":"getDocFreq"},{"label":"getTotalTermFreq","kind":"method","documentation":"getTotalTermFreq(): long","insertText":"getTotalTermFreq"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Debug","kind":"class","documentation":"Class: Debug","insertText":"Debug","properties":[{"label":"explain","kind":"method","documentation":"explain(Object a): void","insertText":"explain"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JodaCompatibleZonedDateTime","kind":"class","documentation":"Class: JodaCompatibleZonedDateTime","insertText":"JodaCompatibleZonedDateTime","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getCenturyOfEra","kind":"method","documentation":"getCenturyOfEra(): int","insertText":"getCenturyOfEra"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): int","insertText":"getDayOfWeek"},{"label":"getDayOfWeekEnum","kind":"method","documentation":"getDayOfWeekEnum(): DayOfWeek","insertText":"getDayOfWeekEnum"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getEra","kind":"method","documentation":"getEra(): int","insertText":"getEra"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getHourOfDay","kind":"method","documentation":"getHourOfDay(): int","insertText":"getHourOfDay"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMillis","kind":"method","documentation":"getMillis(): long","insertText":"getMillis"},{"label":"getMillisOfDay","kind":"method","documentation":"getMillisOfDay(): int","insertText":"getMillisOfDay"},{"label":"getMillisOfSecond","kind":"method","documentation":"getMillisOfSecond(): int","insertText":"getMillisOfSecond"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMinuteOfDay","kind":"method","documentation":"getMinuteOfDay(): int","insertText":"getMinuteOfDay"},{"label":"getMinuteOfHour","kind":"method","documentation":"getMinuteOfHour(): int","insertText":"getMinuteOfHour"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthOfYear","kind":"method","documentation":"getMonthOfYear(): int","insertText":"getMonthOfYear"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getSecondOfDay","kind":"method","documentation":"getSecondOfDay(): int","insertText":"getSecondOfDay"},{"label":"getSecondOfMinute","kind":"method","documentation":"getSecondOfMinute(): int","insertText":"getSecondOfMinute"},{"label":"getWeekOfWeekyear","kind":"method","documentation":"getWeekOfWeekyear(): int","insertText":"getWeekOfWeekyear"},{"label":"getWeekyear","kind":"method","documentation":"getWeekyear(): int","insertText":"getWeekyear"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"getYearOfCentury","kind":"method","documentation":"getYearOfCentury(): int","insertText":"getYearOfCentury"},{"label":"getYearOfEra","kind":"method","documentation":"getYearOfEra(): int","insertText":"getYearOfEra"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): ZonedDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): ZonedDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): ZonedDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): ZonedDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): ZonedDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): ZonedDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): ZonedDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): ZonedDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): ZonedDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): ZonedDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): ZonedDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): ZonedDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): ZonedDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): ZonedDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): ZonedDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): ZonedDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetDateTime","kind":"method","documentation":"toOffsetDateTime(): OffsetDateTime","insertText":"toOffsetDateTime"},{"label":"toString","kind":"method","documentation":"toString(String a, Locale b | String a): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): ZonedDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): ZonedDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): ZonedDateTime","insertText":"withDayOfYear"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withFixedOffsetZone","kind":"method","documentation":"withFixedOffsetZone(): ZonedDateTime","insertText":"withFixedOffsetZone"},{"label":"withHour","kind":"method","documentation":"withHour(int a): ZonedDateTime","insertText":"withHour"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): ZonedDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): ZonedDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): ZonedDateTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): ZonedDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): ZonedDateTime","insertText":"withYear"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"FieldLookup","kind":"class","documentation":"Class: FieldLookup","insertText":"FieldLookup","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"getValues","kind":"method","documentation":"getValues(): List","insertText":"getValues"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/date_script_field.json":
/*!**************************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/date_script_field.json ***!
  \**************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/double_script_field_script_field.json":
/*!*****************************************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/double_script_field_script_field.json ***!
  \*****************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/filter.json":
/*!***************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/filter.json ***!
  \***************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"GeoShape","kind":"class","documentation":"Class: GeoShape","insertText":"GeoShape","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntervalDayTime","kind":"class","documentation":"Class: IntervalDayTime","insertText":"IntervalDayTime","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntervalYearMonth","kind":"class","documentation":"Class: IntervalYearMonth","insertText":"IntervalYearMonth","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"VersionScriptDocValues","kind":"class","documentation":"Class: VersionScriptDocValues","insertText":"VersionScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/index.ts":
/*!************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/index.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var _string_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
var _score_json__WEBPACK_IMPORTED_MODULE_1___namespace_cache;
var _processor_conditional_json__WEBPACK_IMPORTED_MODULE_2___namespace_cache;
var _common_json__WEBPACK_IMPORTED_MODULE_3___namespace_cache;
var _long_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_4___namespace_cache;
var _ip_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache;
var _filter_json__WEBPACK_IMPORTED_MODULE_6___namespace_cache;
var _double_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_7___namespace_cache;
var _date_script_field_json__WEBPACK_IMPORTED_MODULE_8___namespace_cache;
var _boolean_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_9___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   booleanScriptFieldScriptFieldContext: () => (/* reexport fake namespace object from non-harmony */ _boolean_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_9___namespace_cache || (_boolean_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_9___namespace_cache = __webpack_require__.t(_boolean_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_9__, 2))),
/* harmony export */   commonContext: () => (/* reexport fake namespace object from non-harmony */ _common_json__WEBPACK_IMPORTED_MODULE_3___namespace_cache || (_common_json__WEBPACK_IMPORTED_MODULE_3___namespace_cache = __webpack_require__.t(_common_json__WEBPACK_IMPORTED_MODULE_3__, 2))),
/* harmony export */   dateScriptFieldContext: () => (/* reexport fake namespace object from non-harmony */ _date_script_field_json__WEBPACK_IMPORTED_MODULE_8___namespace_cache || (_date_script_field_json__WEBPACK_IMPORTED_MODULE_8___namespace_cache = __webpack_require__.t(_date_script_field_json__WEBPACK_IMPORTED_MODULE_8__, 2))),
/* harmony export */   doubleScriptFieldScriptFieldContext: () => (/* reexport fake namespace object from non-harmony */ _double_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_7___namespace_cache || (_double_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_7___namespace_cache = __webpack_require__.t(_double_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_7__, 2))),
/* harmony export */   filterContext: () => (/* reexport fake namespace object from non-harmony */ _filter_json__WEBPACK_IMPORTED_MODULE_6___namespace_cache || (_filter_json__WEBPACK_IMPORTED_MODULE_6___namespace_cache = __webpack_require__.t(_filter_json__WEBPACK_IMPORTED_MODULE_6__, 2))),
/* harmony export */   ipScriptFieldScriptFieldContext: () => (/* reexport fake namespace object from non-harmony */ _ip_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache || (_ip_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_5___namespace_cache = __webpack_require__.t(_ip_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_5__, 2))),
/* harmony export */   longScriptFieldScriptFieldContext: () => (/* reexport fake namespace object from non-harmony */ _long_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_4___namespace_cache || (_long_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_4___namespace_cache = __webpack_require__.t(_long_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_4__, 2))),
/* harmony export */   processorConditionalContext: () => (/* reexport fake namespace object from non-harmony */ _processor_conditional_json__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_processor_conditional_json__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(_processor_conditional_json__WEBPACK_IMPORTED_MODULE_2__, 2))),
/* harmony export */   scoreContext: () => (/* reexport fake namespace object from non-harmony */ _score_json__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (_score_json__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(_score_json__WEBPACK_IMPORTED_MODULE_1__, 2))),
/* harmony export */   stringScriptFieldScriptFieldContext: () => (/* reexport fake namespace object from non-harmony */ _string_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_string_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_string_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_0__, 2)))
/* harmony export */ });
/* harmony import */ var _string_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./string_script_field_script_field.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/string_script_field_script_field.json");
/* harmony import */ var _score_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./score.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/score.json");
/* harmony import */ var _processor_conditional_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./processor_conditional.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/processor_conditional.json");
/* harmony import */ var _common_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/common.json");
/* harmony import */ var _long_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./long_script_field_script_field.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/long_script_field_script_field.json");
/* harmony import */ var _ip_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ip_script_field_script_field.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/ip_script_field_script_field.json");
/* harmony import */ var _filter_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./filter.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/filter.json");
/* harmony import */ var _double_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./double_script_field_script_field.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/double_script_field_script_field.json");
/* harmony import */ var _date_script_field_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./date_script_field.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/date_script_field.json");
/* harmony import */ var _boolean_script_field_script_field_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./boolean_script_field_script_field.json */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/boolean_script_field_script_field.json");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

// DO NOT EDIT: THIS FILE CONTAINS GENERATED CODE. REFER TO THE PAINLESS README FOR MORE INFORMATION.





















/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/ip_script_field_script_field.json":
/*!*************************************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/ip_script_field_script_field.json ***!
  \*************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/long_script_field_script_field.json":
/*!***************************************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/long_script_field_script_field.json ***!
  \***************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/processor_conditional.json":
/*!******************************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/processor_conditional.json ***!
  \******************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/score.json":
/*!**************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/score.json ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"DenseVectorScriptDocValues","kind":"class","documentation":"Class: DenseVectorScriptDocValues","insertText":"DenseVectorScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"VersionScriptDocValues","kind":"class","documentation":"Class: VersionScriptDocValues","insertText":"VersionScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/string_script_field_script_field.json":
/*!*****************************************************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/string_script_field_script_field.json ***!
  \*****************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}');

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/lexer_rules/index.ts":
/*!***********************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/lexer_rules/index.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   languageConfiguration: () => (/* reexport safe */ _painless__WEBPACK_IMPORTED_MODULE_0__.languageConfiguration),
/* harmony export */   lexerRules: () => (/* reexport safe */ _painless__WEBPACK_IMPORTED_MODULE_0__.lexerRules)
/* harmony export */ });
/* harmony import */ var _painless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./painless */ "./src/platform/packages/shared/kbn-monaco/src/painless/lexer_rules/painless.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */



/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/lexer_rules/painless.ts":
/*!**************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/lexer_rules/painless.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   languageConfiguration: () => (/* binding */ languageConfiguration),
/* harmony export */   lexerRules: () => (/* binding */ lexerRules)
/* harmony export */ });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

const lexerRules = {
  default: '',
  // painless does not use < >, so we define our own
  brackets: [['{', '}', 'delimiter.curly'], ['[', ']', 'delimiter.square'], ['(', ')', 'delimiter.parenthesis']],
  keywords: ['if', 'in', 'else', 'while', 'do', 'for', 'continue', 'break', 'return', 'new', 'try', 'catch', 'throw', 'this', 'instanceof'],
  primitives: ['void', 'boolean', 'byte', 'short', 'char', 'int', 'long', 'float', 'double', 'def'],
  constants: ['true', 'false'],
  operators: ['=', '>', '<', '!', '~', '?', '?:', '?.', ':', '==', '===', '<=', '>=', '!=', '!==', '&&', '||', '++', '--', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=', '^=', '%=', '<<=', '>>=', '>>>=', '->', '::', '=~', '==~'],
  symbols: /[=><!~?:&|+\-*\/^%]+/,
  escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
  digits: /\d+(_+\d+)*/,
  octaldigits: /[0-7]+(_+[0-7]+)*/,
  binarydigits: /[0-1]+(_+[0-1]+)*/,
  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,
  tokenizer: {
    root: [
    // identifiers and keywords
    [/[a-zA-Z_][\w]*/, {
      cases: {
        '@keywords': 'keyword',
        '@primitives': 'type',
        '@constants': 'constant',
        '@default': 'identifier'
      }
    }],
    // whitespace
    [/[ \t\r\n]+/, '@whitespace'],
    // comments
    // [/\/\*/, 'comment', '@comment'],
    [/\/\/.*$/, 'comment'],
    // brackets
    [/[{}()\[\]]/, '@brackets'],
    // operators
    [/@symbols/, {
      cases: {
        '@operators': 'operators',
        '@default': ''
      }
    }],
    // numbers
    [/(@digits)[eE]([\-+]?(@digits))?[fFdD]?/, 'number.float'], [/(@digits)\.(@digits)([eE][\-+]?(@digits))?[fFdD]?/, 'number.float'], [/0[xX](@hexdigits)[Ll]?/, 'number.hex'], [/0(@octaldigits)[Ll]?/, 'number.octal'], [/0[bB](@binarydigits)[Ll]?/, 'number.binary'], [/(@digits)[fFdD]/, 'number.float'], [/(@digits)[lL]?/, 'number'],
    // delimiter: after numbers due to conflict with decimals and dot
    [/[;,.]/, 'delimiter'],
    // strings double quoted
    [/"([^"\\]|\\.)*$/, 'string.invalid'],
    // string without termination
    [/"/, 'string', '@string_dq'],
    // strings single quoted
    [/'([^'\\]|\\.)*$/, 'string.invalid'],
    // string without termination
    [/'/, 'string', '@string_sq']],
    comment: [[/[^\/*]+/, 'comment'], [/\*\//, 'comment', '@pop'], [/[\/*]/, 'comment']],
    string_dq: [[/[^\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/"/, 'string', '@pop']],
    string_sq: [[/[^\\']+/, 'string'], [/@escapes/, 'string.escape'], [/\\./, 'string.escape.invalid'], [/'/, 'string', '@pop']]
  }
};
const languageConfiguration = {
  brackets: [['{', '}'], ['[', ']'], ['(', ')']],
  autoClosingPairs: [{
    open: '{',
    close: '}'
  }, {
    open: '[',
    close: ']'
  }, {
    open: '(',
    close: ')'
  }, {
    open: '"',
    close: '"'
  }]
};

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/autocomplete.ts":
/*!*****************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/autocomplete.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAutocompleteSuggestions: () => (/* binding */ getAutocompleteSuggestions),
/* harmony export */   getClassMemberSuggestions: () => (/* binding */ getClassMemberSuggestions),
/* harmony export */   getConstructorSuggestions: () => (/* binding */ getConstructorSuggestions),
/* harmony export */   getFieldSuggestions: () => (/* binding */ getFieldSuggestions),
/* harmony export */   getKeywords: () => (/* binding */ getKeywords),
/* harmony export */   getStaticSuggestions: () => (/* binding */ getStaticSuggestions),
/* harmony export */   getTypeSuggestions: () => (/* binding */ getTypeSuggestions)
/* harmony export */ });
/* harmony import */ var _kbn_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @kbn/i18n */ "./src/platform/packages/shared/kbn-i18n/src/browser.ts");
/* harmony import */ var _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../autocomplete_definitions */ "./src/platform/packages/shared/kbn-monaco/src/painless/autocomplete_definitions/index.ts");
/* harmony import */ var _lexer_rules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lexer_rules */ "./src/platform/packages/shared/kbn-monaco/src/painless/lexer_rules/index.ts");
/* harmony import */ var _autocomplete_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./autocomplete_utils */ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/autocomplete_utils.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */





const getKeywords = () => {
  const lexerKeywords = _lexer_rules__WEBPACK_IMPORTED_MODULE_2__.lexerRules.keywords.map(keyword => {
    return {
      label: keyword,
      kind: 'keyword',
      documentation: `Keyword: ${keyword}`,
      insertText: keyword
    };
  });
  const allKeywords = [...lexerKeywords, {
    label: 'params',
    kind: 'keyword',
    documentation: _kbn_i18n__WEBPACK_IMPORTED_MODULE_0__.i18n.translate('monaco.painlessLanguage.autocomplete.paramsKeywordDescription', {
      defaultMessage: 'Access variables passed into the script.'
    }),
    insertText: 'params'
  }];
  return allKeywords;
};
const getTypeSuggestions = () => {
  return _lexer_rules__WEBPACK_IMPORTED_MODULE_2__.lexerRules.primitives.map(primitive => {
    return {
      label: primitive,
      kind: 'type',
      documentation: `Type: ${primitive}`,
      insertText: primitive
    };
  });
};
const runtimeContexts = ['boolean_script_field_script_field', 'date_script_field', 'double_script_field_script_field', 'ip_script_field_script_field', 'long_script_field_script_field', 'string_script_field_script_field'];
const mapContextToData = {
  painless_test: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.commonContext,
  score: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.scoreContext,
  filter: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.filterContext,
  boolean_script_field_script_field: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.booleanScriptFieldScriptFieldContext,
  date_script_field: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.dateScriptFieldContext,
  double_script_field_script_field: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.doubleScriptFieldScriptFieldContext,
  ip_script_field_script_field: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.ipScriptFieldScriptFieldContext,
  long_script_field_script_field: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.longScriptFieldScriptFieldContext,
  processor_conditional: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.processorConditionalContext,
  string_script_field_script_field: _autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.stringScriptFieldScriptFieldContext
};
const getStaticSuggestions = ({
  suggestions,
  hasFields,
  isRuntimeContext
}) => {
  const classSuggestions = suggestions.map(suggestion => {
    const {
      properties,
      constructorDefinition,
      ...rootSuggestion
    } = suggestion;
    return rootSuggestion;
  });
  const keywords = getKeywords();
  const typeSuggestions = getTypeSuggestions();
  let keywordSuggestions = hasFields ? [...keywords, {
    label: 'doc',
    kind: 'keyword',
    documentation: _kbn_i18n__WEBPACK_IMPORTED_MODULE_0__.i18n.translate('monaco.painlessLanguage.autocomplete.docKeywordDescription', {
      defaultMessage: `Access a field value from a script using the doc['field_name'] syntax`
    }),
    insertText: "doc[${1:'my_field'}]",
    insertTextAsSnippet: true
  }] : keywords;
  keywordSuggestions = isRuntimeContext ? [...keywordSuggestions, {
    label: 'emit',
    kind: 'keyword',
    documentation: _kbn_i18n__WEBPACK_IMPORTED_MODULE_0__.i18n.translate('monaco.painlessLanguage.autocomplete.emitKeywordDescription', {
      defaultMessage: 'Emit value without returning.'
    }),
    insertText: 'emit'
  }] : keywordSuggestions;
  return {
    isIncomplete: false,
    suggestions: [...classSuggestions, ...keywordSuggestions, ...typeSuggestions]
  };
};
const getClassMemberSuggestions = (suggestions, className) => {
  const painlessClass = suggestions.find(suggestion => suggestion.label === className);
  return {
    isIncomplete: false,
    suggestions: (painlessClass === null || painlessClass === void 0 ? void 0 : painlessClass.properties) || []
  };
};
const getFieldSuggestions = fields => {
  const suggestions = fields.map(({
    name
  }) => {
    return {
      label: name,
      kind: 'field',
      documentation: _kbn_i18n__WEBPACK_IMPORTED_MODULE_0__.i18n.translate('monaco.painlessLanguage.autocomplete.fieldValueDescription', {
        defaultMessage: `Retrieve the value for field ''{fieldName}''`,
        values: {
          fieldName: name
        }
      }),
      // A trailing quotation mark is added to format the field for the user
      insertText: `${name}'`
    };
  });
  return {
    isIncomplete: false,
    suggestions
  };
};
const getConstructorSuggestions = suggestions => {
  let constructorSuggestions = [];
  const suggestionsWithConstructors = suggestions.filter(suggestion => suggestion.constructorDefinition);
  if (suggestionsWithConstructors) {
    constructorSuggestions = suggestionsWithConstructors.map(filteredSuggestion => filteredSuggestion.constructorDefinition);
  }
  return {
    isIncomplete: false,
    suggestions: constructorSuggestions
  };
};
const getAutocompleteSuggestions = (painlessContext, words, fields) => {
  // Unique suggestions based on context
  const contextSuggestions = mapContextToData[painlessContext].suggestions;
  // Enhance suggestions with common classes that exist in all contexts
  // "painless_test" is the exception since it equals the common suggestions
  const suggestions = painlessContext === 'painless_test' ? contextSuggestions : contextSuggestions.concat(_autocomplete_definitions__WEBPACK_IMPORTED_MODULE_1__.commonContext.suggestions);
  // What the user is currently typing
  const activeTyping = words[words.length - 1];
  // This logic may end up needing to be more robust as we integrate autocomplete into more editors
  // For now, we're assuming there is a list of painless contexts that are only applicable in runtime fields
  const isRuntimeContext = runtimeContexts.includes(painlessContext);
  // "text" field types are not available in doc values and should be removed for autocompletion
  const filteredFields = fields === null || fields === void 0 ? void 0 : fields.filter(field => field.type !== 'text');
  const hasFields = Boolean(filteredFields === null || filteredFields === void 0 ? void 0 : filteredFields.length);
  let autocompleteSuggestions = {
    isIncomplete: false,
    suggestions: []
  };
  if ((0,_autocomplete_utils__WEBPACK_IMPORTED_MODULE_3__.isConstructorInstance)(words)) {
    autocompleteSuggestions = getConstructorSuggestions(suggestions);
  } else if (filteredFields && (0,_autocomplete_utils__WEBPACK_IMPORTED_MODULE_3__.isDeclaringField)(activeTyping)) {
    autocompleteSuggestions = getFieldSuggestions(filteredFields);
  } else if ((0,_autocomplete_utils__WEBPACK_IMPORTED_MODULE_3__.isAccessingProperty)(activeTyping)) {
    const className = activeTyping.substring(0, activeTyping.length - 1).split('.')[0];
    autocompleteSuggestions = getClassMemberSuggestions(suggestions, className);
  } else if ((0,_autocomplete_utils__WEBPACK_IMPORTED_MODULE_3__.showStaticSuggestions)(activeTyping, words, _lexer_rules__WEBPACK_IMPORTED_MODULE_2__.lexerRules.primitives)) {
    autocompleteSuggestions = getStaticSuggestions({
      suggestions,
      hasFields,
      isRuntimeContext
    });
  }
  return autocompleteSuggestions;
};

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/autocomplete_utils.ts":
/*!***********************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/autocomplete_utils.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hasDeclaredType: () => (/* binding */ hasDeclaredType),
/* harmony export */   isAccessingProperty: () => (/* binding */ isAccessingProperty),
/* harmony export */   isConstructorInstance: () => (/* binding */ isConstructorInstance),
/* harmony export */   isDeclaringField: () => (/* binding */ isDeclaringField),
/* harmony export */   isDefiningBoolean: () => (/* binding */ isDefiningBoolean),
/* harmony export */   isDefiningString: () => (/* binding */ isDefiningString),
/* harmony export */   showStaticSuggestions: () => (/* binding */ showStaticSuggestions)
/* harmony export */ });
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

/**
 * If the active typing contains dot notation, we assume we need to access the object's properties
 * Currently only supporting one-level deep nesting
 */
const isAccessingProperty = activeTyping => {
  const activeTypingParts = activeTyping.split('.');
  if (activeTypingParts.length !== 2) {
    return false;
  }
  const maybeProperty = activeTypingParts[1];
  return maybeProperty.includes('(') === false;
};

/**
 * If the preceding word is a primitive type, e.g., "boolean",
 * we assume the user is declaring a variable and will skip autocomplete
 *
 * Note: this isn't entirely exhaustive.
 * For example, you may use a class as a type, e.g., "String myVar ="
 */
const hasDeclaredType = (activeLineWords, primitives) => {
  return activeLineWords.length === 2 && primitives.includes(activeLineWords[0]);
};

/**
 * If the active line words contains the "boolean" type and "=" token,
 * we assume the user is defining a boolean value and skip autocomplete
 */
const isDefiningBoolean = activeLineWords => {
  if (activeLineWords.length === 4) {
    const maybePrimitiveType = activeLineWords[0];
    const maybeEqualToken = activeLineWords[2];
    return maybePrimitiveType === 'boolean' && maybeEqualToken === '=';
  }
  return false;
};

/**
 * If the active typing contains a start or end quotation mark,
 * we assume the user is defining a string and skip autocomplete
 */
const isDefiningString = activeTyping => {
  const quoteTokens = [`'`, `"`];
  const activeTypingParts = activeTyping.split('');
  const startCharacter = activeTypingParts[0];
  const endCharacter = activeTypingParts[activeTypingParts.length - 1];
  return quoteTokens.includes(startCharacter) || quoteTokens.includes(endCharacter);
};

/**
 * Check if the preceding word contains the "new" keyword
 */
const isConstructorInstance = activeLineWords => {
  return activeLineWords[activeLineWords.length - 2] === 'new';
};

/**
 * Check if the user appears to be accessing a document field
 */
const isDeclaringField = activeTyping => {
  const triggerString = `doc['`;
  const startIndex = activeTyping.indexOf(triggerString);
  const endIndex = startIndex + (triggerString.length - 1);
  return startIndex !== -1 && activeTyping.length - 1 === endIndex;
};

/**
 * Static suggestions serve as a catch-all most of the time
 * However, there are a few situations where we do not want to show them and instead default to the built-in monaco (abc) autocomplete
 * 1. If the preceding word is a primitive type, e.g., "boolean", we assume the user is declaring a variable name
 * 2. If the string contains a "dot" character, we assume the user is attempting to access a property that we do not have information for
 * 3. If the user is defining a variable with a boolean type, e.g., "boolean myBoolean ="
 * 4. If the user is defining a string
 */
const showStaticSuggestions = (activeTyping, activeLineWords, primitives) => {
  const activeTypingParts = activeTyping.split('.');
  return hasDeclaredType(activeLineWords, primitives) === false && isDefiningBoolean(activeLineWords) === false && isDefiningString(activeTyping) === false && activeTypingParts.length === 1;
};

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/index.ts":
/*!**********************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/index.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAutocompleteSuggestions: () => (/* reexport safe */ _autocomplete__WEBPACK_IMPORTED_MODULE_0__.getAutocompleteSuggestions),
/* harmony export */   parseAndGetSyntaxErrors: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.parseAndGetSyntaxErrors)
/* harmony export */ });
/* harmony import */ var _autocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autocomplete */ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/autocomplete.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/parser.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */




/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/lexer.ts":
/*!**********************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/lexer.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PainlessLexerEnhanced: () => (/* binding */ PainlessLexerEnhanced)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../antlr/painless_lexer */ "./src/platform/packages/shared/kbn-monaco/src/painless/antlr/painless_lexer.ts");

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */



/*
 * This extends the PainlessLexer class in order to handle backslashes appropriately
 * It is being invoked in painless_lexer.g4
 * Based on the Java implementation: https://github.com/elastic/elasticsearch/blob/feab123ba400b150f3dcd04dd27cf57474b70d5a/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/EnhancedPainlessLexer.java#L73
 */
class PainlessLexerEnhanced extends _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(...args) {
    super(...args);
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "lastToken", void 0);
  }
  nextToken() {
    this.lastToken = super.nextToken();
    return this.lastToken;
  }
  isSlashRegex() {
    var _this$lastToken;
    switch ((_this$lastToken = this.lastToken) === null || _this$lastToken === void 0 ? void 0 : _this$lastToken.type) {
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].RBRACE:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].RP:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].OCTAL:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].HEX:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].INTEGER:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].DECIMAL:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].ID:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].DOTINTEGER:
      case _antlr_painless_lexer__WEBPACK_IMPORTED_MODULE_1__["default"].DOTID:
        return false;
      default:
        return true;
    }
  }
}

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/parser.ts":
/*!***********************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/parser.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseAndGetSyntaxErrors: () => (/* binding */ parseAndGetSyntaxErrors)
/* harmony export */ });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/dist/antlr4.web.mjs");
/* harmony import */ var _antlr_painless_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../antlr/painless_parser */ "./src/platform/packages/shared/kbn-monaco/src/painless/antlr/painless_parser.ts");
/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lexer */ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/lexer.ts");
/* harmony import */ var _common_error_listener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/error_listener */ "./src/platform/packages/shared/kbn-monaco/src/common/error_listener.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */





const parse = code => {
  const inputStream = antlr4__WEBPACK_IMPORTED_MODULE_0__.CharStreams.fromString(code);
  const lexer = new _lexer__WEBPACK_IMPORTED_MODULE_2__.PainlessLexerEnhanced(inputStream);
  const painlessLangErrorListener = new _common_error_listener__WEBPACK_IMPORTED_MODULE_3__.ANTLRErrorListener();
  const tokenStream = new antlr4__WEBPACK_IMPORTED_MODULE_0__.CommonTokenStream(lexer);
  const parser = new _antlr_painless_parser__WEBPACK_IMPORTED_MODULE_1__["default"](tokenStream);
  lexer.removeErrorListeners();
  parser.removeErrorListeners();
  lexer.addErrorListener(painlessLangErrorListener);
  parser.addErrorListener(painlessLangErrorListener);
  const errors = painlessLangErrorListener.getErrors();
  return {
    source: parser.source(),
    errors
  };
};
const parseAndGetSyntaxErrors = code => {
  const {
    errors
  } = parse(code);
  return errors;
};

/***/ }),

/***/ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/painless_worker.ts":
/*!****************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/worker/painless_worker.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PainlessWorker: () => (/* binding */ PainlessWorker)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/lib/index.ts");

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */


class PainlessWorker {
  constructor(ctx) {
    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(this, "_ctx", void 0);
    this._ctx = ctx;
  }
  getTextDocument(modelUri) {
    const model = this._ctx.getMirrorModels().find(m => m.uri.toString() === modelUri);
    return model === null || model === void 0 ? void 0 : model.getValue();
  }
  async getSyntaxErrors(modelUri) {
    const code = this.getTextDocument(modelUri);
    if (code) {
      return (0,_lib__WEBPACK_IMPORTED_MODULE_1__.parseAndGetSyntaxErrors)(code);
    }
  }
  provideAutocompleteSuggestions(currentLineChars, context, fields) {
    // Array of the active line words, e.g., [boolean, isTrue, =, true]
    const words = currentLineChars.replace(/\t/g, '').split(/\s/);
    const autocompleteSuggestions = (0,_lib__WEBPACK_IMPORTED_MODULE_1__.getAutocompleteSuggestions)(context, words, fields);
    return autocompleteSuggestions;
  }
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!****************************************************************************************!*\
  !*** ./src/platform/packages/shared/kbn-monaco/src/painless/worker/painless.worker.ts ***!
  \****************************************************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var monaco_editor_esm_vs_editor_editor_worker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! monaco-editor/esm/vs/editor/editor.worker */ "./node_modules/monaco-editor/esm/vs/editor/editor.worker.js");
/* harmony import */ var _painless_worker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./painless_worker */ "./src/platform/packages/shared/kbn-monaco/src/painless/worker/painless_worker.ts");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

// This module is intended to be run inside of a webworker
/* eslint-disable @kbn/eslint/module_migration */


// @ts-ignore


self.onmessage = () => {
  monaco_editor_esm_vs_editor_editor_worker__WEBPACK_IMPORTED_MODULE_1__.initialize((ctx, createData) => {
    return new _painless_worker__WEBPACK_IMPORTED_MODULE_2__.PainlessWorker(ctx);
  });
};
})();

/******/ })()
;
//# sourceMappingURL=painless.editor.worker.js.map